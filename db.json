{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"source/pictures/123123123.png","path":"pictures/123123123.png","modified":1,"renderable":0},{"_id":"source/pictures/029c7937f23ed1c8dc2a5a81e74565d8.png","path":"pictures/029c7937f23ed1c8dc2a5a81e74565d8.png","modified":1,"renderable":0},{"_id":"source/pictures/059bb96aa2f5fd724bcaea38a591f7c6.png","path":"pictures/059bb96aa2f5fd724bcaea38a591f7c6.png","modified":1,"renderable":0},{"_id":"source/pictures/1483bd50890ef67bc276ad0b239b61c0.png","path":"pictures/1483bd50890ef67bc276ad0b239b61c0.png","modified":1,"renderable":0},{"_id":"source/pictures/189200b12b1d1c8ec72936c1539a4d80.png","path":"pictures/189200b12b1d1c8ec72936c1539a4d80.png","modified":1,"renderable":0},{"_id":"source/pictures/38456e2bfda4fea76779e78a77c816e1.png","path":"pictures/38456e2bfda4fea76779e78a77c816e1.png","modified":1,"renderable":0},{"_id":"source/pictures/3be6aa060673577be3bf992760f16089.png","path":"pictures/3be6aa060673577be3bf992760f16089.png","modified":1,"renderable":0},{"_id":"source/pictures/22fcaaf1be52e5d0800f4db8995570bf.png","path":"pictures/22fcaaf1be52e5d0800f4db8995570bf.png","modified":1,"renderable":0},{"_id":"source/pictures/3ec2d5bca54c51b80b6d2c5a9f1fbf32-1669804541526-57.png","path":"pictures/3ec2d5bca54c51b80b6d2c5a9f1fbf32-1669804541526-57.png","modified":1,"renderable":0},{"_id":"source/pictures/4855e5cc40ab39b4cc76d71effdace90.png","path":"pictures/4855e5cc40ab39b4cc76d71effdace90.png","modified":1,"renderable":0},{"_id":"source/pictures/5a0e92a91297e1bc9d8c55826bf790e4.png","path":"pictures/5a0e92a91297e1bc9d8c55826bf790e4.png","modified":1,"renderable":0},{"_id":"source/pictures/6529dfcdabd63991f971352fc625b8b5.png","path":"pictures/6529dfcdabd63991f971352fc625b8b5.png","modified":1,"renderable":0},{"_id":"source/pictures/7586ecf7941b2ea8d5e4867c9eeb1414.png","path":"pictures/7586ecf7941b2ea8d5e4867c9eeb1414.png","modified":1,"renderable":0},{"_id":"source/pictures/65a129f1a71eac87e2c80c5fce3facc1.png","path":"pictures/65a129f1a71eac87e2c80c5fce3facc1.png","modified":1,"renderable":0},{"_id":"source/pictures/949df1adea40b3db10776a4d65c3bd53.png","path":"pictures/949df1adea40b3db10776a4d65c3bd53.png","modified":1,"renderable":0},{"_id":"source/pictures/9d915490f9a0ab4ef17c92d2c88236bc.png","path":"pictures/9d915490f9a0ab4ef17c92d2c88236bc.png","modified":1,"renderable":0},{"_id":"source/pictures/]PQOUN4]Q$]R%F_J0[79J71-1669803907654-8.png","path":"pictures/]PQOUN4]Q$]R%F_J0[79J71-1669803907654-8.png","modified":1,"renderable":0},{"_id":"source/pictures/da0266f5b88527d8c11b1e6a04cd825e.png","path":"pictures/da0266f5b88527d8c11b1e6a04cd825e.png","modified":1,"renderable":0},{"_id":"source/pictures/image-20220429002822205-1669804541526-41.png","path":"pictures/image-20220429002822205-1669804541526-41.png","modified":1,"renderable":0},{"_id":"source/pictures/f0b2393a61b48e7f903b136fab5d1a19.png","path":"pictures/f0b2393a61b48e7f903b136fab5d1a19.png","modified":1,"renderable":0},{"_id":"source/pictures/image-20220429142943211-1669804541526-50.png","path":"pictures/image-20220429142943211-1669804541526-50.png","modified":1,"renderable":0},{"_id":"source/pictures/image-20220430192846168-1669804541526-53.png","path":"pictures/image-20220430192846168-1669804541526-53.png","modified":1,"renderable":0},{"_id":"source/pictures/image-20220429154312189-1669804541526-51.png","path":"pictures/image-20220429154312189-1669804541526-51.png","modified":1,"renderable":0},{"_id":"source/pictures/image-20220429154625565-1669804541526-52.png","path":"pictures/image-20220429154625565-1669804541526-52.png","modified":1,"renderable":0},{"_id":"source/pictures/image-20220502111900935-1669804541526-54.png","path":"pictures/image-20220502111900935-1669804541526-54.png","modified":1,"renderable":0},{"_id":"source/pictures/image-20220502131627510-1669804541526-56.png","path":"pictures/image-20220502131627510-1669804541526-56.png","modified":1,"renderable":0},{"_id":"source/pictures/image-20220502145831045-1669804541526-55.png","path":"pictures/image-20220502145831045-1669804541526-55.png","modified":1,"renderable":0},{"_id":"source/pictures/image-20220502160312589-1669804541526-58.png","path":"pictures/image-20220502160312589-1669804541526-58.png","modified":1,"renderable":0},{"_id":"source/pictures/image-20221011233123411-1669803907655-9.png","path":"pictures/image-20221011233123411-1669803907655-9.png","modified":1,"renderable":0},{"_id":"source/pictures/image-20221012003422515-1669803907655-10.png","path":"pictures/image-20221012003422515-1669803907655-10.png","modified":1,"renderable":0},{"_id":"source/pictures/image-20221012004649017-1669803907655-14.png","path":"pictures/image-20221012004649017-1669803907655-14.png","modified":1,"renderable":0},{"_id":"source/pictures/image-20221012212231962-1669803907655-11.png","path":"pictures/image-20221012212231962-1669803907655-11.png","modified":1,"renderable":0},{"_id":"source/pictures/image-20221025020644091-1669803907655-13-1669804077621-23.png","path":"pictures/image-20221025020644091-1669803907655-13-1669804077621-23.png","modified":1,"renderable":0},{"_id":"source/pictures/image-20221028105501647-1669803907655-12.png","path":"pictures/image-20221028105501647-1669803907655-12.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1669797832258},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1669797832211},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1669797831742},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1669797831867},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1669797832399},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1669797832273},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1669797832399},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1669797832258},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1669797832414},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1669797832399},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1669797832399},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1669797832399},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1669797832414},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1669797832414},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1669797832414},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1669797832414},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1669797832414},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1669797832414},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1669797831976},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1669797832414},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1669797832023},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1669797832195},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1669797831992},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1669797832008},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1669797832039},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1669797832055},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1669797831945},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1669797831961},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1669797831945},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1669797831976},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1669797831992},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1669797832008},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1669797832008},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1669797832008},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1669797832023},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1669797832008},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1669797832039},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1669797831961},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1669797831992},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1669797832055},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1669797832039},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1669797832304},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1669797832039},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1669797832070},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1669797832304},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1669797832352},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1669797832070},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1669797832023},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1669797832086},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1669797832289},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1669797832289},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1669797832289},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1669797831930},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1669797832242},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1669797831976},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1669797832242},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1669797831992},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1669797832023},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1669797831992},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1669797832055},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1669797832039},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1669797832242},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1669797832320},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1669797832320},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1669797832304},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1669797832320},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1669797832320},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1669797832336},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1669797832336},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1669797832336},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1669797832336},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1669797832320},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1669797832336},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1669797832336},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1669797832289},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1669797832070},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1669797832289},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1669797832383},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1669797831914},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1669797831914},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1669797832226},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1669797832226},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1669797832226},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1669797832368},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1669797832368},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1669797832133},{"_id":"source/_posts/Cpp学习笔记.md","hash":"0622dd5616c2109357655bd32e17e6b9d3b257d2","modified":1669804232459},{"_id":"source/Cpp学习笔记/index.md","hash":"c45fda6ac5c5d72a03adde5941428d5553f995d1","modified":1669802172774},{"_id":"source/_pictures/]PQOUN4]Q$]R%F_J0[79J71.png","hash":"7891eff576174b6e4a86dea5c0b78e527874c812","modified":1669802989966},{"_id":"source/_posts/_pictures/]PQOUN4]Q$]R%F_J0[79J71.png","hash":"7891eff576174b6e4a86dea5c0b78e527874c812","modified":1669802989966},{"_id":"source/_posts/_pictures/image-20221011233123411.png","hash":"15b5ab84d890ba8b009d2ead15aefe6fc6b8d2b5","modified":1669802989950},{"_id":"source/_posts/_pictures/image-20221012003422515.png","hash":"78abc6933153c3b09d721321ea1f509cbb6065a6","modified":1669802989950},{"_id":"source/_posts/_pictures/image-20221012004649017.png","hash":"a4e10f9b5cfa8dcb6f1d1b6cd54ed69c126af44d","modified":1669802989966},{"_id":"source/_posts/_pictures/image-20221025020644091.png","hash":"34037d211e22630f2538e41315e4c2e7938237a3","modified":1669802989966},{"_id":"source/_posts/_pictures/image-20221012212231962.png","hash":"60daee7a1b65d15a5f8de10c136ba27d4db5943c","modified":1669802989950},{"_id":"source/_posts/_pictures/image-20221028105501647.png","hash":"4ff9370740c95f0ce70a74f13afbfa0522418289","modified":1669802989950},{"_id":"source/_pictures/image-20221012003422515.png","hash":"78abc6933153c3b09d721321ea1f509cbb6065a6","modified":1669802989950},{"_id":"source/_pictures/image-20221011233123411.png","hash":"15b5ab84d890ba8b009d2ead15aefe6fc6b8d2b5","modified":1669802989950},{"_id":"source/_pictures/image-20221012004649017.png","hash":"a4e10f9b5cfa8dcb6f1d1b6cd54ed69c126af44d","modified":1669802989966},{"_id":"source/_pictures/image-20221028105501647.png","hash":"4ff9370740c95f0ce70a74f13afbfa0522418289","modified":1669802989950},{"_id":"source/_pictures/image-20221012212231962.png","hash":"60daee7a1b65d15a5f8de10c136ba27d4db5943c","modified":1669802989950},{"_id":"source/_pictures/image-20221025020644091.png","hash":"34037d211e22630f2538e41315e4c2e7938237a3","modified":1669802989966},{"_id":"source/pictures/image-20221012003422515.png","hash":"78abc6933153c3b09d721321ea1f509cbb6065a6","modified":1669802989950},{"_id":"source/pictures/image-20221011233123411.png","hash":"15b5ab84d890ba8b009d2ead15aefe6fc6b8d2b5","modified":1669802989950},{"_id":"source/pictures/image-20221012212231962.png","hash":"60daee7a1b65d15a5f8de10c136ba27d4db5943c","modified":1669802989950},{"_id":"source/pictures/image-20221028105501647.png","hash":"4ff9370740c95f0ce70a74f13afbfa0522418289","modified":1669802989950},{"_id":"source/pictures/]PQOUN4]Q$]R%F_J0[79J71.png","hash":"7891eff576174b6e4a86dea5c0b78e527874c812","modified":1669802989966},{"_id":"source/pictures/image-20221012004649017.png","hash":"a4e10f9b5cfa8dcb6f1d1b6cd54ed69c126af44d","modified":1669802989966},{"_id":"source/pictures/image-20221025020644091.png","hash":"34037d211e22630f2538e41315e4c2e7938237a3","modified":1669802989966},{"_id":"source/_pictures/image-20221011233123411-1669803907655-9.png","hash":"15b5ab84d890ba8b009d2ead15aefe6fc6b8d2b5","modified":1669803907660},{"_id":"source/_pictures/image-20221012003422515-1669803907655-10.png","hash":"78abc6933153c3b09d721321ea1f509cbb6065a6","modified":1669803907661},{"_id":"source/_pictures/image-20221012212231962-1669803907655-11.png","hash":"60daee7a1b65d15a5f8de10c136ba27d4db5943c","modified":1669803907661},{"_id":"source/_pictures/image-20221028105501647-1669803907655-12.png","hash":"4ff9370740c95f0ce70a74f13afbfa0522418289","modified":1669803907662},{"_id":"source/_pictures/]PQOUN4]Q$]R%F_J0[79J71-1669803907654-8.png","hash":"7891eff576174b6e4a86dea5c0b78e527874c812","modified":1669803907662},{"_id":"source/_pictures/image-20221012004649017-1669803907655-14.png","hash":"a4e10f9b5cfa8dcb6f1d1b6cd54ed69c126af44d","modified":1669803907664},{"_id":"source/_posts/_pictures/image-20221025020644091-1669803907655-13.png","hash":"34037d211e22630f2538e41315e4c2e7938237a3","modified":1669803930112},{"_id":"source/pictures/image-20221011233123411-1669803907655-9.png","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1669804423441},{"_id":"source/pictures/image-20221012003422515-1669803907655-10.png","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1669804423456},{"_id":"source/pictures/image-20221028105501647-1669803907655-12.png","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1669804423441},{"_id":"source/pictures/image-20221012212231962-1669803907655-11.png","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1669804423456},{"_id":"source/_posts/pictures/image-20221011233123411-1669803907655-9.png","hash":"15b5ab84d890ba8b009d2ead15aefe6fc6b8d2b5","modified":1669804231065},{"_id":"source/_posts/pictures/image-20221012003422515-1669803907655-10.png","hash":"78abc6933153c3b09d721321ea1f509cbb6065a6","modified":1669804231065},{"_id":"source/_posts/pictures/image-20221012212231962-1669803907655-11.png","hash":"60daee7a1b65d15a5f8de10c136ba27d4db5943c","modified":1669804231071},{"_id":"source/_posts/pictures/image-20221028105501647-1669803907655-12.png","hash":"4ff9370740c95f0ce70a74f13afbfa0522418289","modified":1669804231071},{"_id":"source/pictures/]PQOUN4]Q$]R%F_J0[79J71-1669803907654-8.png","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1669804423472},{"_id":"source/pictures/image-20221012004649017-1669803907655-14.png","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1669804423441},{"_id":"source/pictures/image-20221025020644091-1669803907655-13-1669804077621-23.png","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1669804423472},{"_id":"source/_posts/pictures/image-20221012004649017-1669803907655-14.png","hash":"a4e10f9b5cfa8dcb6f1d1b6cd54ed69c126af44d","modified":1669804231100},{"_id":"source/_posts/pictures/]PQOUN4]Q$]R%F_J0[79J71-1669803907654-8.png","hash":"7891eff576174b6e4a86dea5c0b78e527874c812","modified":1669804231072},{"_id":"source/_posts/pictures/image-20221025020644091-1669803907655-13-1669804077621-23.png","hash":"34037d211e22630f2538e41315e4c2e7938237a3","modified":1669804231101},{"_id":"source/pictures/189200b12b1d1c8ec72936c1539a4d80.png","hash":"0786e0cd23536455b85dddd78ec0b243d47aa128","modified":1669806104997},{"_id":"source/pictures/3be6aa060673577be3bf992760f16089.png","hash":"ffe988e6e848be8ff5720ddf16e18d6a2c4e3faf","modified":1669806104997},{"_id":"source/pictures/5a0e92a91297e1bc9d8c55826bf790e4.png","hash":"5618d833ae75eba48ebbc5432bc2e0ca46f42a8a","modified":1669806104997},{"_id":"source/pictures/6529dfcdabd63991f971352fc625b8b5.png","hash":"60ca65b703ad7f39bf5070c4c5f3809a77386d43","modified":1669806104997},{"_id":"source/pictures/da0266f5b88527d8c11b1e6a04cd825e.png","hash":"af15d345bdd1dd1bf47bf4797e3db5f39a70c370","modified":1669806104997},{"_id":"source/pictures/image-20220429142943211-1669804541526-50.png","hash":"4afb98b1866a1d85fe0484ab84c4446d4d7d2379","modified":1669805990942},{"_id":"source/pictures/image-20220429154312189-1669804541526-51.png","hash":"1fa2fd10e80187f39f088d85f3db2f3804755298","modified":1669805990942},{"_id":"source/pictures/image-20220429154625565-1669804541526-52.png","hash":"2056e5a7d5eef9aab1543833a64362500dd11de7","modified":1669805990942},{"_id":"source/pictures/image-20220502131627510-1669804541526-56.png","hash":"0de2f99b9a3a203576d7204e5bde2ad63bc6c6e1","modified":1669805990942},{"_id":"source/pictures/image-20220502145831045-1669804541526-55.png","hash":"9e2094e05a0143c98691c74b4e9623bde4516ef5","modified":1669805990942},{"_id":"source/pictures/029c7937f23ed1c8dc2a5a81e74565d8.png","hash":"07b0eb69e792a251309b8a9b42c46d24a32e2be0","modified":1669805990942},{"_id":"source/pictures/1483bd50890ef67bc276ad0b239b61c0.png","hash":"c82f5931c48f5b6f804f7ec7d24bd2e2240eb1f6","modified":1669806105000},{"_id":"source/pictures/38456e2bfda4fea76779e78a77c816e1.png","hash":"36fc227409384281bc03d91a3630752eb907b5d1","modified":1669806104999},{"_id":"source/pictures/22fcaaf1be52e5d0800f4db8995570bf.png","hash":"f31eab3bd720d82360085cf939c27a632afe721a","modified":1669806105000},{"_id":"source/pictures/7586ecf7941b2ea8d5e4867c9eeb1414.png","hash":"672d52c79a6193a1964850633b00bf25860da3fa","modified":1669806105000},{"_id":"source/pictures/949df1adea40b3db10776a4d65c3bd53.png","hash":"92b10dda12072af95d39266674a29e2142dee452","modified":1669806105000},{"_id":"source/pictures/image-20220429002822205-1669804541526-41.png","hash":"8cb6659e6e28e861dc6377a790365bab73d2900f","modified":1669805990942},{"_id":"source/pictures/f0b2393a61b48e7f903b136fab5d1a19.png","hash":"c52c944a44ca9f04b0356a7914fbcfcb65f672f5","modified":1669806105001},{"_id":"source/pictures/image-20220430192846168-1669804541526-53.png","hash":"dcb3f2dc1aa30b4e313c25c5ffb4007f29ee350b","modified":1669805990942},{"_id":"source/pictures/123123123.png","hash":"6a739e8b10a7d877fe2729eb01bf23f8e0436a96","modified":1669805990942},{"_id":"source/pictures/3ec2d5bca54c51b80b6d2c5a9f1fbf32-1669804541526-57.png","hash":"c0b8a2e739a978128fe4adb717ea083f92ed1033","modified":1669805990942},{"_id":"source/pictures/65a129f1a71eac87e2c80c5fce3facc1.png","hash":"9c0a6bf79bfb2af9294723fca4f6edddde6164b8","modified":1669806105002},{"_id":"source/_posts/Springboot-上篇.md","hash":"f1f4b9dadd2e0076487b20528ef6e97869766b00","modified":1669805627274},{"_id":"source/_posts/Springboot-下篇.md","hash":"f19fabb7dda01d8d8c0019e732177d16f28c7d4b","modified":1669806106162},{"_id":"source/pictures/4855e5cc40ab39b4cc76d71effdace90.png","hash":"77a8571fcc6bca60ca726a8c12c0c14dcf77eb3e","modified":1669806105003},{"_id":"source/pictures/9d915490f9a0ab4ef17c92d2c88236bc.png","hash":"73e8b379b499db54bb63fc5ecee54ec994d06518","modified":1669806105003},{"_id":"source/pictures/image-20220502111900935-1669804541526-54.png","hash":"9a7ee95b1ab491193a83f9ed05d7cafb39149e72","modified":1669805990942},{"_id":"source/pictures/image-20220502160312589-1669804541526-58.png","hash":"23123beea598ec19a5dac24d55cf1a86449dcdf4","modified":1669805990942},{"_id":"source/pictures/059bb96aa2f5fd724bcaea38a591f7c6.png","hash":"9eec83dc69c67fd1cbf75d0a7170c20e732d6194","modified":1669806105009}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2022-11-30T10:33:43.409Z","updated":"2022-11-30T10:33:43.456Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clb3jhen900007sww2ex85h16","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"Cpp学习笔记","date":"2022-11-30T09:34:52.000Z","_content":"\n# Cpp学习笔记\n\n## C++类的六大函数\n\n[C++类的六大函数--构造、析构、拷贝构造、移动构造、拷贝赋值、移动赋值 - lincoding` - 博客园 (cnblogs.com)](https://www.cnblogs.com/lincz/p/10768607.html)\n\n```c++\n#include <iostream>\n#include <cassert>\n\nclass Base {\npublic:\n    virtual ~Base() = default;\n\npublic:\n    void bar(void) const noexcept {\n        std::cout << \"Base::bar\" << std::endl;\n    }\n};\n\nclass Derived : public Base {\npublic:\n    virtual ~Derived() = default;\n};\n\nvoid foo(const Base &base) {\n    base.bar();\n}\n\n// class SmartPtr定义&实现\ntemplate<typename T>\nclass SmartPtr {\nprivate:\n    T *t;\npublic:\n    // 初始化\n    explicit SmartPtr(T *t1 = nullptr) : t(t1) {}\n\n    // 拷贝构造\n    SmartPtr(const SmartPtr &s) = delete;\n\n    // 赋值构造\n    SmartPtr &operator=(const SmartPtr &s) = delete;\n\n//    // 移动构造\n//    SmartPtr(SmartPtr &&s) noexcept {\n//        this->t = s.t;\n//        s.t = nullptr;\n//    }\n\n    // 移动赋值\n    SmartPtr &operator=(SmartPtr &&s) noexcept {\n        std::swap(s.t, t);\n        return *this;\n    }\n\n    // 重载*\n    T &operator*() {\n        assert(this->t != nullptr);\n        return *(this->t);\n    }\n\n    // 重载->\n    T *operator->() {\n        assert(this->t != nullptr);\n        return this->t;\n    }\n\n    // 重载 bool\n    operator bool() {\n        return t;\n    }\n\n    // 析构函数\n    ~SmartPtr() {\n        if (this->t) {\n            delete t;\n            t = nullptr;\n        }\n    }\n    //支持子类向父类的转换，如果不用这个，编译器也会自动帮我们转换\n    template<typename U>\n    inline explicit SmartPtr(SmartPtr<U> &&other) noexcept {\n        t = other.t;\n        other.t = nullptr;\n    }\n};\n\nint main() {\n    SmartPtr<Base> ptr1{new Derived()};\n    // SmartPtr<Base> ptr2{ptr1}; // 编译Error\n    SmartPtr<Base> ptr3;\n    // ptr3 = ptr1; // 编译Error\n\n    ptr3 = std::move(ptr1); // ok\n    SmartPtr<Base> ptr4{std::move(ptr3)}; // ok\n\n    ptr4->bar(); // ok\n    foo(*ptr4); // ok\n\n    return 0;\n}\n```\n\n## explicit消除等号的隐式转换\n\n[C++ explicit关键字详解 - 矮油~ - 博客园 (cnblogs.com)](https://www.cnblogs.com/rednodel/p/9299251.html#:~:text=C%2B%2B explicit关键字详解 首先%2C C%2B%2B中的explicit关键字只能用于修饰只有一个参数的类构造函数%2C,它的作用是表明该构造函数是显示的%2C 而非隐式的%2C 跟它相对应的另一个关键字是implicit%2C 意思是隐藏的%2C类构造函数默认情况下即声明为implicit (隐式).)\n\n## C++ const修饰方法\n\n[(248条消息) C++类中const修饰的函数与重载_未来之大神的博客-CSDN博客_c++ const 重载](https://blog.csdn.net/a512745183/article/details/52590223)\n\nconst方法不能修改成员变量\n\nconst变量只能调用const方法\n\n带有const的方法和不带有const的方法可以并存，调用时，const对象调用const方法，非const变量调用非const方法\n\n## C++的左值右值，左右引用，移动语意及完美转发\n\n[谈谈C++的左值右值，左右引用，移动语意及完美转发 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/402251966)\n\n![img](pictures/]PQOUN4]Q$]R%F_J0[79J71-1669803907654-8.png)\n\n一个对象有两个部分：灵魂和躯壳，创建对象的时候会为这个对象分配内存空间这片内存就是灵魂，存放这块内存地址的变量就是躯壳（符号表），正常情况下，灵魂和躯壳是在一起的。\n\n左值：有名称的，可以获取到存储地址的变量就是左值，可以用&取到地址（有躯干的对象）\n\n右值：可以获取到值的表达式都可以成为右值，左值也可以作为右值来使用（有灵魂的表达式，1000等无法寻址的字面量，可以理解为只有灵魂）\n\n右值又可以分为纯右值和将亡值\n\n纯右值：临时对象或字面量（只有灵魂）\n\n将亡值：使用move移动构造后，剩下的值就是将亡值，它内部的变量已经被设置为空值，无法再被使用，只剩下了一个空壳，所以叫作将亡值（只有躯壳）\n\n引用是变量的别名，必须初始化\n\n左引用：对左值的引用就是左引用（&）\n\n右引用：对右值的引用就是右引用（&&）\n\nconst T&可以引用右值\n\n移动语义：将左值变成右值，将内存地址提取出来，将原来存放这片内存地址变量置为空，然后将这片内存的地址作为返回值返回（将灵魂从躯壳中抽离出来）\n\n完美转发：左值还是左值，右值还是右值（原来是灵魂，现在还是灵魂，原来有躯壳，线程还有躯壳）\n\n[聊聊C++中的完美转发 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/161039484)\n\n```c++\n#include <iostream>\n\ntemplate<typename T>\nvoid print(T & t){\n    std::cout << \"左值\" << std::endl;\n}\n\n//接受右值，但是t变量本身是会分配内存的，内配内存并接受右值后，变成了左值\ntemplate<typename T>\nvoid print(T && t){\n    std::cout << \"右值\" << std::endl;\n}\n//接受右值，但是t变量本身是会分配内存的，内配内存并接受右值后，变成了左值\n//move 抽取灵魂，全部变成右值\n//forward 利用引用折叠，原来是左值回来的还是左值原来的是右值回来的还是右值\ntemplate<typename T>\nvoid testForward(T && v){\n    print(v);\n    print(std::forward<T>(v));\n    print(std::move(v));\n}\n\nint main(int argc, char * argv[])\n{\n    testForward(1);\n\n    std::cout << \"======================\" << std::endl;\n\n    int x = 1;\n    testFoward(x);\n}\n```\n\n## C++内存模型\n\n堆：new和malloc出来的对象存放在这里\n\n栈：存放局部变量，函数参数，函数返回地址等\n\n静态区：全局变量，静态变量，虚函数，全局常量指针\n\n常量存储区：全局常量，函数指针\n\n代码区：存放代码\n\n## cin输入规则\n\n```c++\n#include <iostream>\n\nusing namespace std;\n\nsigned main() {\n    int x;\n    cin>>x;\n    getchar();\n    cin>>x;\n    cout<<x<<endl;\n}\n```\n\n对于输入整数来说，cin会一直读取，直到遇到第一个非整数字符（整数里包含的字符，也就只有数字）\n\n例如上面的输入35.8 15.8，得到的是0，因为第一次cin后，x位35，因为遇到了小数点`.`，此时光标就停留在了小数点这里，第二次cin的时候，第一个遇到的就是小数点，所以一个字符都没有读取，得到的就是0，如果读到的值大于了int的最大值，则得到的是int的最大值，如果小于int的最小值，得到的就是int的最小值，然后后面的内容都不再读取\n\n同理如果读取的是浮点数，那么会到第一个非浮点字符（数字和小数点）截止。如果这样得到的是正常的数字就返回，如果得到的是小数点开头，则会带上0，如果什么都没有读到就返回0\n\n例如：\n\n```c++\n#include <iostream>\n\nusing namespace std;\n\nsigned main() {\n    double x,y;\n    cin>>x>>y;\n    cout<<x<<\" \"<<y;\n}\n```\n\n输入11.11.12\n\n得到11.11 0.12\n\n对于char类型，会直接读取一个字符，会跳过空格，回车，制表符\n\n对于char数组和string类型，会一直读取，直到遇到第一个空格和回车，想读取空格可以使用getline(cin,ss)\n\n如果读取的字符个数超过了char数组的容量，会超容量读取……\n\n![image-20221011233123411](pictures/image-20221011233123411-1669803907655-9.png)\n\n对于cin读取字符会跳过空格和回车的问题，可以使用getchar来读取，也可以使用cin.get\n\n```c++\n#include <iostream>\n\nusing namespace std;\n\n\nsigned main() {\n    char c1, c2;\n    c1 = cin.get();\n    cin.get(c2);\n    cout << c1 << \" \" << c2 << endl;\n}\n```\n\ncin内部对get方法进行的重载，不带参数的cin.get()得到的是缓冲区下一个字符的ASCII码值，这里通过隐式类型转换变成了对应char类型的值，而带参数的get(char &)方法，也是读取一个字符，赋值给传入的char变量中\n\n如果没有遇到文件尾EOF，也没有遇到任何错误，可以使用cin.fail()会返回false,cin.good会返回true，如果遇到了文件尾，cin.eof()会返回true。遇到eof后，再使用cin读入也没有用，在有些OS中，可以使用cin.clear()来清除上面这个不可读入的状态\n\ncout.put()可以输出一个字符，putchar也可以输出一个字符，传入参数的是字符的ASCII码\n\ncin.get(ch)以及cin>> 返回值都是cin对象，如果需要bool类型，则调用的是good方法（重载了bool方法）\n\n## 输出到文件 ofstream istream\n\n输出文件使用步骤：\n\n1. 定义输出文件对象ofstream,istream\n2. 调用这个对象的open函数，打开文件，设置输入模式ios:app表示添加，ios:trunc表示清空文件,ios::out表示输出,ios::in表示输出\n3. 像cout和cin一样使用这个对象\n\n[(528条消息) ofstream的使用方法--超级精细_Ψ大鹏的博客-CSDN博客_ofstream](https://blog.csdn.net/weixin_44139428/article/details/102813246)\n\ncpp读写文件有两个指针：读文件指针指针和写文件指针，可以实现文件的随机读写\n\n文件的基本输出\n\n```c++\n#include <iostream>\n#include <fstream>\n\nusing namespace std;\n\nsigned main() {\n    cout<<\"你好\";\n    string output = \"hello world \";\n    ofstream fOut;\n    fOut.open(\"D:\\\\CppProjects\\\\test\\\\引用测试\\\\out.txt\", ios::app);\n    fOut << output;\n    fOut.close();\n}\n```\n\n文件路径可以是字符串字面量，可以是字符串或者字符数组（要以'\\0'结尾）变量\n\n如果输出失败，检查一下中文乱码问题\n\n[(528条消息) 【C语言】CLion中文乱码问题的解决方案_星拱北辰的博客-CSDN博客_clion中文乱码](https://blog.csdn.net/weixin_43896318/article/details/104700306)\n\nc++源文件应当使用GBK编码\n\n我使用的解决办法：使用管理员权限\n\n![image-20221012003422515](pictures/image-20221012003422515-1669803907655-10.png)\n\n使用相对路径：\n\n![image-20221012004649017](pictures/image-20221012004649017-1669803907655-14.png)\n\n可以在open里面使用相对路径，但是这个相对路径相对的是执行者所在的目录，直接使用编译器的运行键，文件会输出在编译器的目录下面，而不是项目路径下面。所以想要使用相对路径，可以在控制台使用g++编译，然后运行\n\n使用ifstream进行输入\n\n```c++\n#include <iostream>\n#include <fstream>\n\nusing namespace std;\n\nsigned main() {\n    ifstream fin;\n    fin.open(\"in.txt\", ios::in);\n    cout<<fin.is_open()<<endl; //判断文件是否打开\n    cout<<fin.eof()<<endl;   //判断文件是否读到文件末尾\n    string ss;\n    fin >> ss;\n    cout << ss;\n}\n```\n\n还是使用g++编译运行\n\n同时使用ifstream和ofstream\n\n```c++\n#include <iostream>\n#include <fstream>\n\nusing namespace std;\n\nsigned main() {\n    ifstream fin;\n    ofstream fout;\n    fin.open(\"in.txt\", ios::in);\n    fout.open(\"out.txt\", ios::trunc);\n    cout << fin.is_open() << endl;\n    while (!fin.eof()) {\n        string line;\n        getline(fin, line);\n        fout << line << endl;\n    }\n}\n```\n\n四舍五入：\n\n```\n1.引入头文件 #include<iomanip>\n\n2.输出用固定格式  cout<<setiosflags(ios::fixed)<<setprecision(2)<<result<<endl;\n\n​                                  //将result保留2位小数，四舍五入后输出。\n```\n\n```c++\n#include <iostream>\n#include <fstream>\n#include <iomanip>\n\nusing namespace std;\n\nsigned main() {\n    double x = 123.565656;\n    ofstream f;\n    f.open(\"out.txt\", ios::trunc);\n    f << setprecision(5) << x << endl; //保留5位有效数字\n    f << setiosflags(ios::fixed) << setprecision(5) << x << endl; //保留5位小数\n}\n/*\n123.57\n123.56566\n*/\n```\n\n## Cpp指针\n\n指针就是内存的地址\n\n```\nint b;\nint *a=&b;\n```\n\nint* a存储的是b的内存地址，&b存储的也是内存地址，两者等价\n\nb和*a得到的都是对应的值，两者也等价\n\n```c++\n#include <iostream>\n#include <fstream>\n#include <iomanip>\n\nusing namespace std;\n\nsigned main() {\n    int *a = new int;\n    *a = 123;\n    int *b = a;\n    delete b;\n    cout << *a;\n}\n```\n\n如果两个指针指向同一片内存空间，然后其中一个delete了，另一个指针访问值的时候，得到的会是随机值\n\ncpp中，指针和数组是等价的，数组数组变量本质上也是指针，所以都可以使用[]，来访问元素，因为[]的实现方式也就是让指针移动对应的偏移量然后再取值，所以本质上是一样的，比如a[0]和*a就是等价的。这对于访问数组元素也同样适用。指针+1，实际上是让指针移动等同于指向类型所占字节数的内存。两者唯一的区别就是指针是一个变量，可以修改它的值。而数组指针是一个常量，不能修改它的值，它永远都指向数组的第一个元素。等价的原因是，cpp解释数组的方式是使用指针算术，对于指针而言，也是使用相同的指针算术，所以两者使用的语法是共通的。对数组变量使用sizeof 得到的是数组元素的大小✖数组长度，而对指针变量使用sizeof得到的是指针变量的大小\n\n```c++\n#include <iostream>\n\nusing namespace std;\n\nsigned main() {\n    int *a = new int;\n    *a = 123;\n    cout << a[0];\n}\n```\n\n为数组动态分配内存可以使用new int[n]，返回的是数组的第一个元素的地址，删除的时候，要用delete[] 来删除，这样删除的就是整个数组所占的内存。使用new []和delete[] 匹配，new和delete匹配，如果两者混着用结果是不可预知的\n\n```c++\n#include <iostream>\n\nusing namespace std;\n\nsigned main() {\n    int *a = new int[12];\n    cout << a[0]; //未知值\n    delete[] a;\n}\n```\n\n## C++强制类型转换\n\n可以使用cpp版的 类型()，括号里面是要转换的数据\n\n也可以使用C语言版的（类型），括号后面跟上要转换的数据\n\n```c++\n#include <iostream>\n\nusing namespace std;\n\n\nsigned main() {\n    cout << char(49) << endl;\n    cout << int('1') << endl;\n    cout << double(1) << endl;\n\n    cout << (char) 49 << endl;\n    cout << (int) '1' << endl;\n    cout << (double) 1 << endl;\n}\n```\n\n不能用char变量存储eof（-1），需要先用int接收，如果不为eof再转换为char类型\n\n## C++逻辑运算符\n\n```c++\n#include <iostream>\n\nusing namespace std;\n\n\nsigned main() {\n    if (1 == 1 and 2 == 2 or not 3 == 3) {\n        cout << \"hello world\" << endl;\n    }\n\n}\n```\n\n可以使用&&，||，!来表示与或非，也可以使用and,or,not来表示，两种表示方法是完全等价的\n\n## Cpp字符操作\n\ncctype中有许多对单个字符的操作，比如判断是不是数字，字母，标点，空白字符，以及变成大写和变成小写\n\n并且cpp内部对各种基本类型都有变成字符串的to_string方法，以后就不需要我们自己写了！\n\n![image-20221012212231962](pictures/image-20221012212231962-1669803907655-11.png)\n\n## C++数组作为函数的参数\n\n```c++\n#include <iostream>\n\nvoid test(int nums[]) {\n    using namespace std;\n    cout << nums << endl;\n}\n\nvoid test(int *nums) { //报错\n    using namespace std;\n    cout << nums << endl;\n}\n\nint main() {\n    std::cout << \"Hello, World!\" << std::endl;\n    return 0;\n}\n```\n\n将数组作为函数的参数，实际上传递的是数组首字母的指针（地址）给函数的参数，所以函数参数列表中，使用int[]来接收或者使用int* 实际上的等价的，所以上述代码中不能用这种方式进行方法重载，因为数组变量和指针变量都可以作为参数传入到这两个函数中\n\n```c++\n#include <iostream>\n\nvoid test(int nums[]) {\n    using namespace std;\n    nums++;\n    cout << nums << endl;\n}\n\n\nint main() {\n    std::cout << \"Hello, World!\" << std::endl;\n    test(new int [0]);\n    return 0;\n}\n```\n\n数组变量和指针变量的用法几乎完全相同，只是再sizeof和数组变量不能修改上有区别\n\n函数列表上的int a[]和int* a完全等价，都是指针，都可以修改指向，使用sizeof得到的都是4字节的指针大小\n\n对于二维数组传递参数，要指明第二维的个数，不然编译器怎么知道每行有多少，每列有多少\n\n```c++\n#include <iostream>\n\nvoid test(int nums[][5]) {\n    using namespace std;\n    cout << nums[0][0] << endl;\n}\n\n\nint main() {\n    int a[5][5];\n    a[0][0] = 123;\n    test(a);\n    return 0;\n}\n```\n\n\n\n## 指针和const\n\n定义const的时候加上const 表示不能通过这个指针来修改他所指向的值，包括数组\n\nconst指针可以指向变量，可以指向常量，但是非const指针不能指向const变量（常量），否则就可以通过这个非const指针修改这个常量从而失去了const的意义\n\n```c++\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    int x1 = 1;\n    const int x2 = 2;\n//    int *p1 = &x2; //非法，不能让非const指针指向const变量\n    const int *p2 = &x1;\n    p2 = &x2; //const指针可以修改指向\n//    *p2 = 3;//但是不能通过这个指针修改数据的值\n}\n```\n\nconst指针可以修改指向，但是不能修改指向数据的值\n\n对于指向指针的指针，const指针只能可以指向const指针，非const指针只能指向非const指针，不能混着用\n\n## Cpp泛型\n\n定义泛型可以使用class也可以使用typename两者完全等价\n\n对于运算后未知的类型（可以转化的类型），可以使用decltype，但其实直接使用auto更加方便\n\n```cpp\ntemplate<class T1, class T2>\nauto del(T1 a, T2 b) {\n    decltype(a - b) c = a - b;\n    auto d = a - b;\n    return c;\n}\n```\n\n对于返回值也是泛型运算后的结果，可以使用下面这种格式\n\n```cpp\ntemplate<class T1, class T2>\nauto add(T1 a, T2 b) -> decltype(a + b) {\n    return a + b;\n}\n```\n\n但是后面的` -> decltype(a + b)`可以省略，结果也是对的\n\n```cpp\ntemplate<class T1, class T2>\nauto add(T1 a, T2 b) {\n    return a + b;\n}\n```\n\n实际上，任何返回值都可以用auto，类型申明后也可以用auto，这样编译器都可以自动帮我们推断类型\n\n如果我们想要为泛型构造一个特例，可以使用函数具象化的语法\n\n```cpp\ntemplate<class T1, class T2>\nauto add(T1 a, T2 b) {\n    return a + b;\n}\n\ntemplate<> auto add<int, int>(int a, int b) {\n    return a + b;\n}\n```\n\n在函数开头加上template<>，表示这是函数具象化的一种，然后需要在函数名后申明具象化之后的泛型\n\n我们在调用泛型方法的时候，编译器会根据传入的参数自动将这个方法隐式实例化，我们也可以显式指明泛型的类型\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\ntemplate<class T1, class T2>\nauto add(T1 a, T2 b) {\n    return a + b;\n}\n\nint main() {\n    cout << add<int, int>(1, 1.2) << endl;\n}\n```\n\n显式指明类型后，double会向int进行类型转换（向下转换），如果不实例化方法，第二个会将1.2作为double类型的变量传入\n\n对于没有参数的方法，不实例化无法进行调用，因为编译器不知道传入的泛型是啥\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\ntemplate<class T>\nT read() {\n    T x;\n    cin >> x;\n    return x;\n}\n\nint main() {\n    cout << read<int>() << endl;\n}\n```\n\n如上面这段代码，如果不加上`<int>`就会报错\n\n下面这个具象化一个泛型方法的语法，书上有，但是实际上测试的时候会编译报错，可能这种写法已经被抛弃了\n\n```\n//这个语句被编译器抛弃了\ntemplate auto add<int, int>(int,int);\n```\n\n## Cpp的多文件编写\n\ncpp的文件结构一般按照如下策略进行划分\n\n- 头文件，包含结构申明和函数原型\n- 源文件，包含函数原型的实现\n- 源文件，调用函数的函数\n\n不要在头文件里面定义方法的实现和创建变量，因为一旦这个变量被多个源文件引用后，创建变量的行为会发生冲突，编译器会告诉你变量或者方法被重复创建（如果允许的话，就可能会出现同名但是实现不同的方法，编译器就不知道要调用哪一个，但是只申明函数原型的话就不会产生冲突）\n\n头文件里面的内容一般包含如下内容\n\n- 函数原型\n- const变量\n- 内联函数\n- 泛型申明\n- 结构申明\n- 类申明\n\n申明泛型不会被编译，只会告诉编译器如何去生成代码，所以可以被重复包含\n\n结构申明，类申明并不创建变量，所以可以申明\n\n常量和内联函数有特殊的规则，所以可以包含\n\ninclude<>会直接从cpp系统目录里面找，而include\"\"会先从用户目录下面找，再从系统目录下面找\n\n一个头文件只能被包含一次，为了防止一个头文件被重复包含（一个头文件可能包含了另一个头文件）可以使用下面这个技术\n\n```cpp\n#ifndef __test_define\n#define __test_define\n//要定义的头文件\n#include \"iostream\"\n\n#endif\n```\n\n#ifndef表示，如果define了后面那个标识符，就直接跳到#endif，如果没有被定义则不跳过，执行后面的代码\n\n我们在创建头文件的时候，将头文件的内容都放在#ifndef和#endif之间，并#define一个能代表这个头文件的变量，这样就可以防止头文件被重复包含，这样就可以保证一个头文件被多次引用后，头文件不会被重复引入。\n\n```cpp\n//\n// Created by 黎明终点x on 2022/10/16.\n//\n\n#ifndef LEARN_FILE1_H\n#define LEARN_FILE1_H\n#include <iostream>\n\nstruct A{\n    int a;\n    auto getA(){\n        return a;\n    }\n};\n\nvoid print(A a);\n\n#endif //LEARN_FILE1_H\n```\n\n比如一个头文件可以像上面这样写\n\n这样，在其他文件中，无论这个文件被引入多少次，拼接到文件里的只有一次\n\n```cpp\n#include \"file1.h\"\n#include \"file1.h\"\n#include \"file1.h\"\n#include \"file2.h\"\n#include \"iostream\"\n\nusing namespace std;\n\nint main() {\n    cout << \"test start\" << endl;\n    print({1});\n    print2({2});\n\n}\n```\n\n如果不加\n\n```\n#ifndef LEARN_FILE1_H\n#define LEARN_FILE1_H\n……\n#endif //LEARN_FILE1_H\n```\n\n这个技术等价于#pragma once\n\n上面的代码就会报错，提示重复引入的头文件\n\n不能重复引入头文件的原因是同一个头文件在编译之前会重复插入到最后的可执行文件里面，导致编译的时候出现各类重复定义的错误。而不是cpp编译会检测相同头文件的#include语句。通过#ifndef，保证了一个头文件编译的时候只会引入一次，从而防止了这个错误。但是即便使用上面这个技术，也不能在头文件里面直接申明函数的实现，只能申明函数的原型，也不能定义普通变量，这个可能是因为#ifndef对函数申明不生效，并且函数的原型可以重复定义，不会出问题，比如如下代码可以通过编译\n\n```cpp\n#include \"file1.h\"\n#include \"file1.h\"\n#include \"file1.h\"\n#include \"iostream\"\n\nusing namespace std;\n\nvoid read();\nvoid read();\nvoid read();\n\nint main() {\n    cout << \"test start\" << xxxx << endl;\n    print({1});\n}\n```\n\n但是变量和已经实现的方法重复定义后就会报错\n\n但是结构体和类里面的函数可以直接实现，头文件可以使用static来定义全局变量，也可以使用inline来定义函数，这些都放在#ifndef和#endif里面，就可以解决上面这些问题\n\n```cpp\n//\n// Created by 黎明终点x on 2022/10/16.\n//\n#ifndef LEARN_FILE1_H\n#define LEARN_FILE1_H\n#include <iostream>\n\nstruct A{\n    int a;\n    auto getA(){\n        return a;\n    }\n};\nstatic int xxxx;\ninline void print(A a) {\n    std::cout << a.getA();\n}\n\n#endif //LEARN_FILE1_H\n\n```\n\n出了入口cpp文件外，每个cpp源文件都要有一个同名的.h头文件来管理，头文件里面申明的函数原因，以及类方法的原型，只能在**同名**的cpp源文件里面实现，没有头文件的cpp文件是无法使用里面的方法的，头文件实际上是申明了这个源文件可以导出的，供其他文件使用的内容，如果没有头文件则可以理解为，其他文件不能使用这个cpp文件，也就没有了意义。没有头文件的那个cpp文件就是主文件，其他文件在编译的时候会先将链接起来，得到.o文件，然后再将各个.o文件连接起来编译，得到最后的可执行文件。\n\n## muable\n\n表示是可以修改的，用于解除const的限定\n\n```cpp\n#include \"iostream\"\n\nusing namespace std;\n\nstruct AB {\n    int a;\n    mutable int b;\n};\n\nint main() {\n    const AB ab = {1, 2};\n    ab.a = 1;//报错\n    ab.b = 2;//不报错\n}\n```\n\n加上mutable后，就表示这个成员变量是可以修改的，哪怕整体被设置成了const类型\n\n## 内部连接性和外部连接性\n\n### 变量\n\n普通的成员变量定义后，外部文件可以通过extern来引用这个变量，这个变量全局只有一份，所有使用这个变量的文件共享同一块内存地址，这个特性叫外部连接性\n\n想使用其他文件中定义的变量必须申明为extern 的来引用其他文件的这个变量，否则会报错重复定义\n\n```\n//file1.cpp文件中：\nint xxx=5;\n//main.cpp文件中\nextern int xxx;\ncout<<xxx<<endl; //得到5\n```\n\n而被申明为static的变量和被申明为const的变量，每个cpp文件都有一组，互不干扰，这个特性叫做内部连接性\n\n比如下面这段代码，在file2.h中定义了一个`static int xxx;`显然这个变量初始值是0，main.cpp和file1.cpp都引入file2.h，这样在这两个cpp里面都能直接使用xxx变量，file1.cpp中的print函数修改了xxx，main.cpp直接输出，最后得到的结果是1 0，证明了这两个文件的static变量是相互独立，互不干扰的（底层实现可以理解为加上了文件名作为前缀）\n\n```cpp\n// file1.cpp\n// Created by 黎明终点x on 2022/10/16.\n//\n#pragma once\n#ifndef LEARN_FILE1_H\n#define LEARN_FILE1_H\n#include <iostream>\n\nvoid print();\n\n#endif //LEARN_FILE1_H\n\n// file1.cpp\n#include \"file1.h\"\n#include \"file2.h\"\n\nvoid print() {\n    xxx++;\n    std::cout << xxx << \"\\n\";\n}\n\n//file2.h\n//\n// Created by 黎明终点x on 2022/10/16.\n//\n#ifndef LEARN_FILE2_H\n#define LEARN_FILE2_H\n\n#endif //LEARN_FILE2_H\n\nstatic int xxx;\n\n//main.cpp\n#include \"iostream\"\n#include \"file2.h\"\n#include \"file1.h\"\n\nusing namespace std;\n\nint main() {\n    print();    //1\n    cout << xxx;//0\n}\n```\n\n如果其他文件申明了外部连接性的变量，自己又申明了同名的内部连接性变量，会使用内部连接性的变量\n\n```\n//file1.cpp文件中：\nint xxx=5;\n//main.cpp文件中\nstatic int xxx;\ncout<<xxx<<endl; //得到0\n```\n\n### 函数\n\n总结一下，一个文件中想使用其他文件的变量，可以有以下两种方式\n\n- 在头文件里面定义static变量或者const变量，cpp文件引入这个头文件就能使用这些变量，每个文件的作用域就是这个文件，文件之间互不干扰（内部连接性）\n- 在cpp源文件定义变量，其他文件使用extern引入，这种变量全局只有一份，所有文件中的变量共享一块内存空间（外部连接性）\n\n为什么其他cpp文件定义的变量我这个文件可以使用？\n\n因为编译的时候这些文件都会先和头文件连接（引入头文件的变量可以使用），然后再彼此连接在一起（其他cpp文件定义的变量可以使用），编译成机器语言之前，这些变量都按照各自的规则进行转换，放到了同一个文件中，所以再理论上也是可以互联互通的\n\n对于函数而言也有类似的特性，只是我们不允许在函数里面定义函数，所以函数定义出来都默认是外部连接特性的，于是我们引用其他文件的函数也有两种方式\n\n- 使用前定义这个函数的原型，或者引入带有函数原型的头文件（函数原型可以重复定义，不用担心重复引入），这个函数的具体实现可以放在参与编译的任何cpp文件中，然后都可以正常使用这个函数（函数默认是外部连接性的，在函数原型前面加上extern或者不加都是可以的）\n\n如果不希望这个函数被其他文件引用，可以使用static关键字申明，这样不同文件就可以定义同名函数，互不冲突，一个文件只能调用自己的static函数\n\n## 创建struct变量的方式\n\n使用大括号进行创建\n\n```cpp\n#include \"iostream\"\n#include \"file1.h\"\n\nusing namespace std;\n\nstruct ABC {\n    int a, b, c;\n};\n\nint main() {\n    ABC abc1{1, 2, 3};\n    ABC abc2{1, 2};\n    ABC abc3{};\n    ABC abc4=ABC();\n    ABC *abc5 = new ABC{1, 2, 3};\n    cout << abc4.a << endl;\n}\n```\n\n使用大括号进行创建其实是按顺序指定结构体里面的各个成员变量的值，从前往后按定义的顺序依次赋值，后面没有被赋值的变量会被赋予零值\n\n不使用大括号申明的变量（abc4），所有成员的值都是未定义状态\n\n如果使用括号来创建变量实际上是创建了一个方法？反正不是创建变量！\n\n想要调用构造方法来创建结构体变量，可以使用`ABC abc4=ABC();`这样的语法\n\n也可以使用new运算符来创建，使用方式和上面一样，只是分配内存的位置由栈变成动态存储区\n\nnew运算符其实使用了一个语法糖的函数，使用typedef进行了简化\n\n```\nnew int -> new(sizeof(int))\nnew int[40] -> new(40*sizeof(int))\n```\n\nnew运算符还可以指定需要分配的内存地址，来自己进行内存管理，使用方法为\n\n```\nnew(006E4AB0)int[20]\nnew(006E4AB0)int\nnew(内存地址)变量类型\n```\n\n## 命名空间\n\n声明域：可以定义变量，函数的区域，局部变量的申明域是代码块，全局变量是申明域是函数的外面（申明一个引用外部文件的变量或者使用头文件里面的静态变量，也当成全局变量）\n\n潜在作用域：从定义变量开始到声明域的结尾，这个范围内的变量可能会在某些区域内被其他同名变量覆盖（隐藏）\n\n作用与：未被隐藏的潜在作用域\n\n命名空间可以定义在全局或者其他命名空间里面，可以在里面定义任意多的变量，函数，类型等，命名空间之间不会相互干扰，定义后如果不使用命名空间，里面定义的内容就不会干扰我们定义其他变量，函数等（具体的实现可以理解名字为加上了命名空间的前缀）\n\n全局内部的其他变量可以理解为在一个空命名空间里面，可以使用::来访问\n\n`using namespace xxx;`后，会覆盖前面同名的全局（局部）变量，后面定义的全局（局部）变量也可以覆盖命名空间中引入的变量\n\n放在全局表示命名空间中定义的内容全局可用，放在代码块里面表示这个代码块里面可用\n\n而`using xxx::yyy`不会覆盖前面定义的同名内容，而是直接报错\n\n命名空间可以嵌套，可以通过赋值起别名\n\n未命名的命名空间不能被其他文件使用，可以实现类似static的功能\n\n## 类的构造函数\n\n创建类对象不能直接使用{}来创建，必须有对应的构造函数来能这么写\n\n```cpp\n#include \"iostream\"\n#include \"file1.h\"\n\nusing namespace std;\n\nclass ABC {\npublic:\n    ABC() {\n\n    }\n\n    ABC(int i, int i1) {\n\n    }\n\n    int a, b, c;\n\n    ABC(int i, int i1, int i2) {\n\n    }\n};\n\nint main() {\n    ABC abc1{1, 2, 3};\n    ABC abc2{1, 2};\n    ABC abc3{};\n    ABC abc4; //不一定是0值\n    ABC *abc5 = new ABC{1, 2, 3};\n    cout << abc4.a << endl;\n}\n```\n\n也可以使用小括号来调用构造函数，两者完全等价，只是写法有所不同\n\n```cpp\n#include \"iostream\"\n#include \"file1.h\"\n\nusing namespace std;\n\nclass ABC {\npublic:\n    ABC() {\n\n    }\n\n    ABC(int i, int i1) {\n\n    }\n\n    int a, b, c;\n\n    ABC(int i, int i1, int i2) {\n\n    }\n};\n\nint main() {\n    ABC abc1 = ABC(1, 2, 3);\n    ABC abc2 = ABC(1, 2);\n    ABC abc3=ABC();\n    ABC abc4;\n    ABC *abc5 = new ABC(1, 2, 3);\n    cout << abc4.a << endl;\n}\n```\n\n也就是说，创建同一个对象有下面这些写法\n\n`ABC abc1 = ABC(1, 2, 3) <=>ABC abc1{1,2,3}<=>ABC abc1(1, 2, 3)<=> ABC abc1={1,2,3} `\n\n像分配内存在公共存储区可以使用`ABC abc1 = new ABC(1, 2, 3) <=>ABC abc1 = new ABC{1, 2, 3} `\n\n注意，不能使用`ABC abc1()`来调用无参构造函数，因为cpp会把它视为方法原型\n\n一个对象申明为const表示这个对象的成员变量，不能被构造函数以外的函数修改，如果在函数后面加上const，表示这个函数不会修改成员变量。所以const对象不能调用非const方法，因为非const方法可能会修改成员变量，而非const对象可以调用任意方法\n\n对于只有一个参数的构造函数，可以使用赋值号来调用构造函数创建对象，这种行为也叫做赋值构造\n\n```cpp\n#include \"iostream\"\n#include \"file1.h\"\n\nusing namespace std;\n\nclass ABC {\nprivate:\n    int a;\npublic:\n    ABC() {\n\n    }\n\n    ABC(int a) : a(a) {\n        cout << \"被调用1\" << endl;\n    }\n\n    ABC(double a) {\n        this->a = a;\n        cout << \"被调用2\" << endl;\n    }\n};\n\nint main() {\n    ABC a = 1; //被调用1\n    ABC b = 1.0; //被调用2\n}\n```\n\n注意：只有一个参数的构造函数以及有多个参数但是其他参数有默认值的构造函数都可以使用赋值号调用构造函数创建对象，会根据赋值号右边的值来决定使用哪个构造函数\n\n```cpp\n    ABC(int a) : a(a) {\n        cout << \"被调用1\" << endl;\n    }\n    ABC(int &a) : a(a) {\n        cout << \"被调用1\" << endl;\n    }\n    ABC(int &&a) : a(a) {\n        cout << \"被调用1\" << endl;\n    }\n```\n\n对于上面三种构造函数，首先第一种写法不能和第二和第三种写法同时存在，否则调用构造函数时会有歧义（如果不调用的话，编译也不会出错）\n\n## 对象数组\n\n创建对象数组可以有两种方式：\n\n```CPP\nABC abc[4];\nABC abc2[]={ABC(1)};\nABC abc3[]={ABC{1}};\n```\n\n- 使用类似`ABC abc[4];`的语法，调用的是类的无参构造函数（所以要保证有无参构造函数）\n- 使用初始化列表的方式，其中每个元素都可以选择自己的构造函数来创建对象\n\n## 类的作用域\n\n```cpp\nclass ABC {\nprivate:\n    int a;\n    const int b = 2;\n    int xx[b]; //错误\n}\n```\n\n在全局里面创建常量b，然后作为数组长度是可以的，但是对于类不行，因为类只是一个定义，在创建对象前不占用存储空间，所以数组不能将b替换成具体的数字，所以不能按照这种方式来定义\n\n解决方式有两种\n\n- 使用enum\n\n```cpp\nclass ABC {\nprivate:\n    int a;\n    enum {\n        b = 5\n    };\n    int xx[b];\n}\n```\n\n这么做后，编译器会在编译的时候，将b替换成5\n\n- 使用static const\n\n其实类的定义保存静态区里面，使用static后，这个成员对象就不保存在对象中，而是保存在静态区里面，因而编译器在创建对象之前，可以获知数组的长度，从而可以创建\n\n## 类的继承\n\ncpp允许基类的引用或者指针指向派生类，而调用方法时，使用的是基类方法还是派生类方法则有以下规则：\n\n- 如果方法加上了virtual，则通过引用，指针，对象调用的方法都是对象类型的方法\n- 如果没有加上virtual，则通过引用，指针调用的方法是引用，指针的类型，而通过对象调用的则是自己的方法\n\n子类在调用父类方法时，要加上父类的类型::来限定使用哪个类的方法\n\n析构函数必须是virtual的，因为析构函数是释放对象内容的一些行为，应该和实际的对象绑定在一起，而不是指针类型，对于同一种对象而言，任何时候都应该调用自己的析构函数\n\n派生类如果定义和基类同名的方法，不会形成两个重载的函数，派生类的函数会隐藏基类的函数\n\n返回类型协变：基类的返回值是基类或者基类的引用，派生类对于相同的方法返回改为了派生类或者派生类的引用，这种情况，基类方法不会被隐藏\n\n### 三种继承方式\n\nprotect的成员变量可以被派生类访问，但是不能被外部访问\n\n如果使用共有继承：`class Son : public Base {}`，基类的私有成员就还是私有，共有成员就还是共有\n\n如果使用私有继承：`class Son : private Base`，基类的所有成员变量和方法都变成私有（默认就是私有）（使用private继承的派生类可以访问，因为是作为直接派生类的private成员，所以只有直接派生类可以访问，外部和间接子类都不能访问）\n\n如果使用保护继承：`class Son : protected Base`，基类所有成员都作为保护成员（所有派生类可以访问，外部不能访问）\n\n只有在共有继承的时候，基类指针才能指向子类\n\n### 方法隐藏\n\n```cpp\n#include \"iostream\"\n#include \"vector\"\n#include \"file1.h\"\n\nusing namespace std;\n\nclass Base {\nprivate:\n    int x;\npublic:\n    void test() {\n        cout << \"base test1\" << endl;\n    }\n\n    void test(int x) {\n        cout << \"base test2\" << endl;\n    }\n};\n\nclass Son : Base {\npublic:\n    //    void test() {\n    //        cout << \"son test1\" << endl;\n    //    }\n    //\n//    void test(int x) {\n//        cout << \"son test2\" << endl;\n//    }\n\n    void test(double x) {\n        cout << \"son test2\" << endl;\n    }\n\n    void test2() {\n        test();//被重载的test隐藏了，所以不能调用基类的test方法\n    }\n};\n\n\nint main() {\n    Son son;\n    son.test2();\n}\n```\n\n如果派生类中出现了和基类同名的方法，基类所有重载的同名方法都会被隐藏，派生类和后续的派生类，在使用同名的方法时，都无法直接使用基类的方法，想要使用可以这样：`Base::test()`，这样就可以指定访问哪个类的方法\n\n外部成员可以这么访问`son.Base::test()`，前提是要有访问权限\n\n### override和final\n\n对于虚方法，我们可以加上override来表示重写了一个基类方法。对于非虚方法，是按照指针类型来调用，用的哪个方法很明显，不需要加上这个来提醒自己。一个类的方法加上virtual，表示这个作为指针的类型时，具体调用这个方式时，调用的是实际的类的方法\n\n相反的，final可以声明一个方法不能被重写\n\n```cpp\n#include \"iostream\"\n#include \"vector\"\n\nusing namespace std;\n\nclass Base {\nprivate:\n    int x;\npublic:\n    virtual void test() = 0;\n\n    virtual void test(int x) {\n        cout << \"base test2\" << endl;\n    }\n};\n\nclass Son : public Base {\npublic:\n    void test() {\n        cout << \"son test1\" << endl;\n    }\n\n    void test(int x) {\n        cout << \"son test2\" << endl;\n    }\n\n    //    void test(double x) {\n    //        cout << \"son test2\" << endl;\n    //    }\n};\n\n\nint main() {\n    Base *base = new Son();\n    base->test();\n}\n```\n\n\n\n## Cpp函数调用\n\n函数的返回值不放在栈中，一般会放在寄存器里面或者内存中的某块地址（但反正不是栈，如果是栈很多问题就无法解释）\n\n函数执行完后的返回值是一个右值，这一行代码执行完就会被释放\n\n## Cpp类的默认行为（移动构造，拷贝构造）\n\n创建一个类A\n\n```cpp\nclass A {\nprivate:\n    string name;\npublic:\n    explicit A(const string &name) : name(name) {\n        cout << \"调用拷贝构造函数  \" << name << endl;\n    }\n\n    explicit A(const string &&name){\n        cout << \"调用移动构造函数  \" << name << endl;\n    }\n\n    A() {\n        cout << \"调用默认构造函数\" << endl;\n    }\n\n    A &operator=(const A &abc) {\n        cout << \"调用拷贝构造函数\" << name << endl;\n        name = abc.name;\n        return *this;\n    }\n\n    virtual ~A() {\n        cout << \"调用析构函数  \" << name << endl;\n    }\n\n    void setName(const string &name) {\n        A::name = name;\n    }\n};\n```\n\n我们想从一个方法中拿到一个对象\n\n下面这个做法是错误的，因为变量a在函数结束后会退栈销毁掉，而引用本质上保存的是变量是地址，变量不存在了，地址也就没有意义，所以下面返回的是未定义的值\n\n```cpp\nA& getA(){\n    A a;\n    a.setName(\"初始参数\");\n    return a;\n}\n```\n\n所以应该改成下面这种写法\n\n```cpp\nA getA() {\n    A a;\n    a.setName(\"初始参数\");\n    return a;\n}\n```\n\n这么改后，因为返回值会单独占据内存中的一块区域，函数返回的时候，会先将a变量拷贝到那块临时区域，然后将地址返回到原来的函数，这样函数结束后，a变量会销毁，但是拷贝还在，所以外面函数拿到的其实是这个拷贝的对象。\n\n```cpp\nint main() {\n    getA();\n}\n```\n\n但是这样得到的对象也只是一个临时值，这一行代码结束后，这个临时的对象也就不再存在，这个临时的变量也是我们所说的右值。如果返回值不被使用也就不会被拷贝。\n\n```cpp\n#include \"iostream\"\n#include \"vector\"\n#include \"file1.h\"\n\nusing namespace std;\n\nclass A {\nprivate:\n    string name;\npublic:\n    A(const A &&name) {\n        cout << \"调用移动构造函数  \" << name.name << endl;\n    }\n\n    A() {\n        cout << \"调用默认构造函数\" << endl;\n    }\n\n    A(const A &a) : name(a.name) {\n        cout << \"调用拷贝构造函数  \" << name << endl;\n    }\n\n\n    A &operator=(const A &abc) {\n        cout << \"调用复制运算符\" << name << endl;\n        name = abc.name;\n        return *this;\n    }\n\n    virtual ~A() {\n        cout << \"调用析构函数  \" << name << endl;\n    }\n\n    void setName(const string &name) {\n        A::name = name;\n    }\n\n    const string &getName() const {\n        return name;\n    }\n};\n\n//A &getA() {\n//    A *a = new A();\n//    a->setName(\"初始参数\");\n//    return *a;\n//}\n\nA getA() {\n    A a;\n    a.setName(\"xxx\");\n    return a;\n}\n\nA useA(const A &a) {\n    cout << \"使用A:\" + a.getName() << endl;\n    return a;\n}\n\nint main() {\n    cout << \"main start\" << endl;\n    useA(getA());\n    cout << \"main end\" << endl;\n}\n```\n\n如果返回的对象在函数结束后会销毁，就不拷贝，返回这个要销毁的对象\n如果函数结束后不销毁，则调用拷贝构造创建一个对象返回\n\n这个其实是编译器帮我们做的优化，这样我们就不用编写移动构造\n\n（const A&不能作为A&返回，变量当成常量没有风险，反过来就不一定了）\n\n## constexpr 申明常量表达式\n\n申明变量的时候可以加上constexpr，表示计算这个变量只需要常量，这样这个值就可以在编译期计算出来\n\n## 使用CLION创建项目的时候，不要有中文路径\n\n## CMAKE语法\n\n[cmake常用命令的一些整理 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/315768216)\n\n## 高斯白噪声\n\n```cpp\n#include <iostream>\n#include <iterator>\n#include <random>\n\nint main() {\n    // Example data\n    std::vector<double> data = {1., 2., 3., 4., 5., 6.};\n\n    // Define random generator with Gaussian distribution\n    const double mean = 0.0;//均值\n    const double stddev = 0.1;//标准差\n    std::default_random_engine generator;\n    std::normal_distribution<double> dist(mean, stddev);\n\n    // Add Gaussian noise\n    for (auto& x : data) {\n        x = x + dist(generator);\n    }\n\n    // Output the result, for demonstration purposes\n    std::copy(begin(data), end(data), std::ostream_iterator<double>(std::cout, \" \"));\n    std::cout << \"\\n\";\n\n    return 0;\n}\n```\n\n## emplace_back和push_back的区别\n\nemplace_back放入的是移动构造后得到的对象，接收右值，调用移动构造函数\n\npush_back放入的是拷贝构造得到的对象，接收左值，调用拷贝构造函数\n\n## deque支持随机访问\n\ndeque底层是`map<int,vector>`，使用这样的一个数据结果实现双端队列\n\n[C++ STL deque容器底层实现原理（深度剖析） (biancheng.net)](http://c.biancheng.net/view/6908.html)\n\n![image-20221025020644091](pictures/image-20221025020644091-1669803907655-13-1669804077621-23.png)\n\ndeque支持随机访问，但是不能随机插入，只能添加或者删除队头和队尾的元素，这些操作的复杂度都是O(1)，相当于将一块连续的数组切分成了多个长度固定的数组，start迭代器记录第一个元素的起始位置，第一个数组的起始地址，第一个数组的中止地址，第一个map指针的地址，finish迭代器，记录最后一个元素的位置，最后一个数组的起始地址，终止地址，存放这个地址的map结点\n\n这样我们就可以知道第一个元素是啥，最后一个元素是啥了，删除后，迭代器里面存放的指针就往中间移动一个，添加元素后就在添加完成后，指针往外面移动一格，所以这些操作都是O(1) 的。如果第一个数组满了，就在前面再申请一个数组，继续存放元素，更新start迭代器的指向，在后面添加也是一样的，都是O(1)的复杂度。\n\n对于随机访问，由于每个数组的长度都是固定的，很容易根据下标，确定要访问的元素在哪个数组的哪个位置，从而实现O(1)随机访问\n\n## 智能指针\n\n为什么要有智能指针？\n\n使用普通的指针，一方面我们可能会忘记delete掉申请的内存，另一方面，如果使用指针的过程中出现异常，可能会导致delete的那条代码没有执行，导致内存泄露，所以可以使用智能指针来实现，指针指针是实现了指针功能的类对象，如果函数出现异常会调用对象的析构函数释放内存，把地址值赋值给指针指针，就不需要我们来释放内存，由编译器调用析构函数自己完成。智能指针在`<memory>`里面。智能指针不能用于非堆内存，只能传入`new`出来的内存块的地址。如果传入非堆内存，就会delete非堆地址，就会报错。\n\n智能指针可以和其他指针一起正常使用，那么就可以像指针一样赋值给其他智能指针对象，这样的话就会有问题。如果智能指针只是单纯在析构函数里面delete掉内存的话，就会出现同一块内存被重复delete的问题，解决这个问题的方案有三种\n\n- 赋值的时候进行深拷贝\n- 不允许赋值 `unique_ptr`\n- 赋值的时候，转移所有权 `auto_ptr`\n- 采用引用计数 `share_ptr`\n\n`unique_ptr`禁止了拷贝赋值，但是允许了移动赋值（可以接收函数的返回值）\n\n`auto_ptr`是在拷贝赋值中，转移对象的所属权，原来的智能指针对象会变成“悬挂的指针”，里面原生的指针会变成空指针，从而不能解引用来获取值\n\n`unique_ptr`在编译期禁止了赋值这种危险的行为，所以比`auto_ptr`更加安全。如果我们确实需要进行`unique_ptr`的赋值操作，转移内容的所属权，可以使用move()将左值变成右值即可\n\n`share_ptr`则使用引用计数来共享内容的所属权，使用起来更加方便\n\n`auto_ptr`被废弃\n\n使用智能指针unique\n\n```cpp\n#include <memory>\n#include \"iostream\"\n\nusing namespace std;\n\n#define WEBRTC_POSIX\n\nint main() {\n    unique_ptr<string> sp(new string(\"123\"));\n    unique_ptr<string> sp2{new string(\"234\")};\n    cout << *sp << \" \" << *sp2 << endl; //123 234\n    //    sp = sp2; 被禁止，编译报错\n    sp = move(sp2); //允许，但是sp2就没有用了\n    cout << *sp << endl; //234\n}\n```\n\n`share_ptr`在进行赋值前，如果原来已经有指向的对象，会将原有指针指向的内存释放掉\n\n![image-20221028105501647](pictures/image-20221028105501647-1669803907655-12.png)\n\n```cpp\n#include <memory>\n#include \"iostream\"\n\nusing namespace std;\n\n#define WEBRTC_POSIX\n\nint main() {\n    shared_ptr<string> sp(new string(\"123\"));\n    shared_ptr<string> sp2{new string(\"234\")};\n    cout << *sp << \" \" << *sp2 << endl; //123 234\n    sp = sp2;\n    cout << *sp << \" \" << *sp2 << endl;\n    sp2 = shared_ptr<string>(new string(\"345\"));\n    cout << *sp << \" \" << *sp2 << endl;\n}\n```\n\n### 手写unique_ptr\n\n```cpp\n#include \"iostream\"\n\nusing namespace std;\n\ntemplate<typename T>\nclass unique_ptr {\n    T *ptr;\npublic:\n    //普通构造\n    unique_ptr(T *ptr) : ptr(ptr) {\n    }\n\t//移动构造\n    unique_ptr(unique_ptr &&raw) {\n        ptr = raw.ptr;\n        raw.ptr = nullptr;\n    }\n\t//默认构造\n    unique_ptr() = default;\n\t//禁用拷贝赋值\n    unique_ptr &operator=(const unique_ptr &) noexcept = delete;\n\t//允许移动赋值\n    unique_ptr &operator=(unique_ptr<T> &&raw) noexcept {\n        swap(ptr, raw.ptr);\n        return *this;\n    }\n\t//取值\n    T &operator*() const noexcept {\n        return *ptr;\n    }\n\t//析构函数释放内存\n    virtual ~unique_ptr() {\n        delete ptr;\n    }\n};\n\nint main() {\n    unique_ptr<string> sp(new string(\"123\"));\n    unique_ptr<string> sp2{new string(\"234\")};\n    cout << *sp << \" \" << *sp2 << endl; //123 234\n    //    sp = sp2;// 被禁止，编译报错\n    sp = move(sp2); //允许，但是sp2就没有用了\n    cout << *sp << endl; //234\n}\n```\n\n移动赋值为啥swap\n\n```cpp\n\t//允许移动赋值\n    unique_ptr &operator=(unique_ptr<T> &&raw) noexcept {\n        swap(ptr, raw.ptr);\n        return *this;\n    }\n```\n\n移动赋值需要三步：\n\n- 将原来的内存释放掉\n- 将右值引用的ptr赋值给自己的ptr\n- 将右值引用的ptr置为nullptr防止重复delete\n\n这样显然有些麻烦，可以使用swap一步完成\n\n右值引用的声明周期只有那一行代码，那一行结束后，就会调用右值对象的析构函数释放内存\n\n互换指针，一方面自己的ptr得到对方ptr的值，完成了第一步。右值对象中ptr的指向变成了自己的原来的指向，完成了第三步，防止重复释放内存，同时右值对象在这一行结束后会销毁，会调用析构函数释放内存，完成了第二步。所以这一个swap就完成了上述的三个操作\n\n## 手写share_ptr\n\n```cpp\n#include <unordered_map>\n#include \"iostream\"\n\nusing namespace std;\n\n\nunordered_map<void *, unsigned> share_count_map;\n\ntemplate<typename T>\nclass shared_ptr {\nprivate:\n    T *ptr;\n\npublic:\n    shared_ptr() = default;\n\n    explicit shared_ptr(T *ptr) : ptr(ptr) {\n        if (ptr != nullptr) {\n            share_count_map[ptr] = 1;\n        }\n    }\n\n    shared_ptr(const shared_ptr<T> &raw) noexcept {\n        ptr = raw.ptr;\n\n    }\n\n    shared_ptr(const shared_ptr &&raw) noexcept {\n        ptr = raw.ptr;\n        share_count_map[ptr]++;\n    }\n\n    shared_ptr<T> &operator=(const shared_ptr<T> &raw) noexcept {\n        if (raw.ptr == ptr) {\n            return *this;\n        }\n        share_count_map[ptr]--;\n        if (share_count_map[ptr] == 0) {\n            share_count_map.erase(ptr);\n            delete ptr;\n        }\n        ptr = raw.ptr;\n        share_count_map[ptr]++;\n        return *this;\n    }\n\n    shared_ptr<T> &operator=(shared_ptr<T> &&raw) noexcept {\n        swap(ptr, raw.ptr);\n        return *this;\n    }\n\n    T &operator*() const noexcept {\n        return *ptr;\n    }\n\n    virtual ~shared_ptr() {\n        share_count_map[ptr]--;\n        if (share_count_map[ptr] == 0) {\n            share_count_map.erase(ptr);\n            delete ptr;\n        }\n    }\n};\n\n\nint main() {\n    shared_ptr<string> p;\n    shared_ptr<string> p2 = p;\n    shared_ptr<string> sp(new string(\"123\"));\n    shared_ptr<string> sp2{new string(\"234\")};\n    cout << *sp << \" \" << *sp2 << endl; //123 234\n    sp = sp2;\n    cout << *sp << \" \" << *sp2 << endl;\n    sp2 = shared_ptr<string>(new string(\"345\"));\n    cout << *sp << \" \" << *sp2 << endl;\n}\n```\n\nshare_ptr需要用到引用计数，但是这个引用计数表示的是一个类型的数据被多少个智能指针管理这，所以这个引用计数器应当是一个全局变量，独立于每个对象，如果放在对象里面，每个对象都有一个自己的副本，显然不行。引用计数器是所有`share_ptr`的管理者，所以应当定义在全局。\n\n```cpp\nunordered_map<void *, unsigned> share_count_map;\n```\n\n又因为要支持泛型，所以这里采用数据的内存地址作为map的key\n\n## `string::nops`其实是`usigned long long`的最大值，find没有找到就返回这个值\n\n```cpp\n#include \"iostream\"\n\nusing namespace std;\n\n#define WEBRTC_POSIX\n\nint main() {\n    cout << string::npos << endl;\n    string s = \"123\";\n    cout << (s.find(\"456\")) << endl;\n    cout << UINT64_MAX << endl;\n}\n```\n\n## cpp Default的用法\n\n```cpp\n#include \"iostream\"\n\nusing namespace std;\n\nclass Base {\npublic:\n    Base &operator=(const Base &b) noexcept {\n        cout << \"赋值运算符\" << endl;\n        return *this;\n    }\n};\n\nclass Son : public Base {\npublic:\n    Son &operator=(const Son &) noexcept = default;\n};\n\nint main() {\n    Son son;\n    Son son2;\n    son = son2; //输出 赋值运算符\n}\n```\n\ndefault表示使用编译器默认生成的函数，如果父类有自定义的，就使用父类的。仅限于特殊的函数（构造函数，析构函数，赋值运算符，拷贝构造，移动构造，移动赋值）\n\nconst 和 noexcept一起写的时候，const要放在前面\n\n## swap的原理\n\n```cpp\n_Tp __tmp = _GLIBCXX_MOVE(__a);\n__a = _GLIBCXX_MOVE(__b);\n__b = _GLIBCXX_MOVE(__tmp);\n```\n\n和我们平时写的逻辑类似，只是用了move，move会得到右值引用\n\n```cpp\n      _Tp __tmp = _GLIBCXX_MOVE(__a); //将__a的右值引用赋值给__tmp，这里会调用移动构造\n      __a = _GLIBCXX_MOVE(__b);  //将__b的右值引用赋值给__a，这里会调用移动赋值\n      __b = _GLIBCXX_MOVE(__tmp); //将__tmp的右值引用赋值给__b，这里会调用移动赋值\n```\n\n使用这种方式就可以避免调用拷贝构造和拷贝赋值，提高效率\n\n## sscanf\n\nsscanf用于从一个字符串中格式化读入参数\n\n例如下面的dtm就是被读入的字符串，后面是格式化参数，再后面是接受这些变量的值\n\n```cpp\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"iostream\"\n\nint main() {\n    int day, year;\n    char weekday[20], month[20], dtm[100];\n\t\n    strcpy(dtm, \"Saturday March 25 1989\");\n    sscanf(dtm, \"%s %s %d  %d\", weekday, month, &day, &year);\n\n    printf(\"%s %d, %d = %s\\n\", month, day, year, weekday);\n    std::cout << dtm << std::endl;\n\n    return (0);\n}\n```\n\n## Cpp 中的信号（Signal和Raise）\n\n[(884条消息) C++ Signal(信号)_肥喵王得福_ฅ・ω・ฅ的博客-CSDN博客_c++ signal](https://blog.csdn.net/u013271656/article/details/114537411)\n\nraise函数用来触发信号，signal用于监听信号并在收到信号的时候进行软中断，执行设置的处理函数\n\n```\nvoid (*signal(int sig, void (*func)(int)))(int);\n```\n\n第二个参数是一个函数，可以传入我们自定义的函数，也可以填一些系统默认值，比如`SIG_DFL`表示进行默认的行为，`SIG_IGN`表示忽略\n\n关于触发信号，STD中的`std::abord,std::atexit,std::terminate`等函数都可以触发信号，等价于`std::signal(对应的信号)`\n\n## Cpp 函数指针\n\n```cpp\n#include <csignal>\n#include <iostream>\n#include <cstdlib>\n\nusing namespace std;\n\ntypedef void (*Func)(int);\n\nvoid test(Func f) {\n    f(1);\n}\n\nvoid test(int x) {\n    cout << x << endl;\n}\n\nint main() {\n    test(test);\n}\n```\n\n函数指针定义方式和一般变量不同，所以可以使用typedef来将其变成类型的形式\n\n```cpp\n//     返回值  类型名 参数类型        \ntypedef void (*Func)(int);\n```\n\n也可以直接使用\n\n```cpp\n#include <csignal>\n#include <iostream>\n#include <cstdlib>\n\nusing namespace std;\n\ntypedef void (*Func)(int);\n\nvoid test(void (*f)(int)) {\n    f(1);\n}\n\nvoid test(int x) {\n    cout << x << endl;\n}\n\nint main() {\n    void (*f)(int);\n    f(1); //会卡死，因为函数指针没有指向\n    test(test);\n}\n```\n\n","source":"_posts/Cpp学习笔记.md","raw":"---\ntitle: Cpp学习笔记\ndate: 2022-11-30 17:34:52\ntags:\n---\n\n# Cpp学习笔记\n\n## C++类的六大函数\n\n[C++类的六大函数--构造、析构、拷贝构造、移动构造、拷贝赋值、移动赋值 - lincoding` - 博客园 (cnblogs.com)](https://www.cnblogs.com/lincz/p/10768607.html)\n\n```c++\n#include <iostream>\n#include <cassert>\n\nclass Base {\npublic:\n    virtual ~Base() = default;\n\npublic:\n    void bar(void) const noexcept {\n        std::cout << \"Base::bar\" << std::endl;\n    }\n};\n\nclass Derived : public Base {\npublic:\n    virtual ~Derived() = default;\n};\n\nvoid foo(const Base &base) {\n    base.bar();\n}\n\n// class SmartPtr定义&实现\ntemplate<typename T>\nclass SmartPtr {\nprivate:\n    T *t;\npublic:\n    // 初始化\n    explicit SmartPtr(T *t1 = nullptr) : t(t1) {}\n\n    // 拷贝构造\n    SmartPtr(const SmartPtr &s) = delete;\n\n    // 赋值构造\n    SmartPtr &operator=(const SmartPtr &s) = delete;\n\n//    // 移动构造\n//    SmartPtr(SmartPtr &&s) noexcept {\n//        this->t = s.t;\n//        s.t = nullptr;\n//    }\n\n    // 移动赋值\n    SmartPtr &operator=(SmartPtr &&s) noexcept {\n        std::swap(s.t, t);\n        return *this;\n    }\n\n    // 重载*\n    T &operator*() {\n        assert(this->t != nullptr);\n        return *(this->t);\n    }\n\n    // 重载->\n    T *operator->() {\n        assert(this->t != nullptr);\n        return this->t;\n    }\n\n    // 重载 bool\n    operator bool() {\n        return t;\n    }\n\n    // 析构函数\n    ~SmartPtr() {\n        if (this->t) {\n            delete t;\n            t = nullptr;\n        }\n    }\n    //支持子类向父类的转换，如果不用这个，编译器也会自动帮我们转换\n    template<typename U>\n    inline explicit SmartPtr(SmartPtr<U> &&other) noexcept {\n        t = other.t;\n        other.t = nullptr;\n    }\n};\n\nint main() {\n    SmartPtr<Base> ptr1{new Derived()};\n    // SmartPtr<Base> ptr2{ptr1}; // 编译Error\n    SmartPtr<Base> ptr3;\n    // ptr3 = ptr1; // 编译Error\n\n    ptr3 = std::move(ptr1); // ok\n    SmartPtr<Base> ptr4{std::move(ptr3)}; // ok\n\n    ptr4->bar(); // ok\n    foo(*ptr4); // ok\n\n    return 0;\n}\n```\n\n## explicit消除等号的隐式转换\n\n[C++ explicit关键字详解 - 矮油~ - 博客园 (cnblogs.com)](https://www.cnblogs.com/rednodel/p/9299251.html#:~:text=C%2B%2B explicit关键字详解 首先%2C C%2B%2B中的explicit关键字只能用于修饰只有一个参数的类构造函数%2C,它的作用是表明该构造函数是显示的%2C 而非隐式的%2C 跟它相对应的另一个关键字是implicit%2C 意思是隐藏的%2C类构造函数默认情况下即声明为implicit (隐式).)\n\n## C++ const修饰方法\n\n[(248条消息) C++类中const修饰的函数与重载_未来之大神的博客-CSDN博客_c++ const 重载](https://blog.csdn.net/a512745183/article/details/52590223)\n\nconst方法不能修改成员变量\n\nconst变量只能调用const方法\n\n带有const的方法和不带有const的方法可以并存，调用时，const对象调用const方法，非const变量调用非const方法\n\n## C++的左值右值，左右引用，移动语意及完美转发\n\n[谈谈C++的左值右值，左右引用，移动语意及完美转发 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/402251966)\n\n![img](pictures/]PQOUN4]Q$]R%F_J0[79J71-1669803907654-8.png)\n\n一个对象有两个部分：灵魂和躯壳，创建对象的时候会为这个对象分配内存空间这片内存就是灵魂，存放这块内存地址的变量就是躯壳（符号表），正常情况下，灵魂和躯壳是在一起的。\n\n左值：有名称的，可以获取到存储地址的变量就是左值，可以用&取到地址（有躯干的对象）\n\n右值：可以获取到值的表达式都可以成为右值，左值也可以作为右值来使用（有灵魂的表达式，1000等无法寻址的字面量，可以理解为只有灵魂）\n\n右值又可以分为纯右值和将亡值\n\n纯右值：临时对象或字面量（只有灵魂）\n\n将亡值：使用move移动构造后，剩下的值就是将亡值，它内部的变量已经被设置为空值，无法再被使用，只剩下了一个空壳，所以叫作将亡值（只有躯壳）\n\n引用是变量的别名，必须初始化\n\n左引用：对左值的引用就是左引用（&）\n\n右引用：对右值的引用就是右引用（&&）\n\nconst T&可以引用右值\n\n移动语义：将左值变成右值，将内存地址提取出来，将原来存放这片内存地址变量置为空，然后将这片内存的地址作为返回值返回（将灵魂从躯壳中抽离出来）\n\n完美转发：左值还是左值，右值还是右值（原来是灵魂，现在还是灵魂，原来有躯壳，线程还有躯壳）\n\n[聊聊C++中的完美转发 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/161039484)\n\n```c++\n#include <iostream>\n\ntemplate<typename T>\nvoid print(T & t){\n    std::cout << \"左值\" << std::endl;\n}\n\n//接受右值，但是t变量本身是会分配内存的，内配内存并接受右值后，变成了左值\ntemplate<typename T>\nvoid print(T && t){\n    std::cout << \"右值\" << std::endl;\n}\n//接受右值，但是t变量本身是会分配内存的，内配内存并接受右值后，变成了左值\n//move 抽取灵魂，全部变成右值\n//forward 利用引用折叠，原来是左值回来的还是左值原来的是右值回来的还是右值\ntemplate<typename T>\nvoid testForward(T && v){\n    print(v);\n    print(std::forward<T>(v));\n    print(std::move(v));\n}\n\nint main(int argc, char * argv[])\n{\n    testForward(1);\n\n    std::cout << \"======================\" << std::endl;\n\n    int x = 1;\n    testFoward(x);\n}\n```\n\n## C++内存模型\n\n堆：new和malloc出来的对象存放在这里\n\n栈：存放局部变量，函数参数，函数返回地址等\n\n静态区：全局变量，静态变量，虚函数，全局常量指针\n\n常量存储区：全局常量，函数指针\n\n代码区：存放代码\n\n## cin输入规则\n\n```c++\n#include <iostream>\n\nusing namespace std;\n\nsigned main() {\n    int x;\n    cin>>x;\n    getchar();\n    cin>>x;\n    cout<<x<<endl;\n}\n```\n\n对于输入整数来说，cin会一直读取，直到遇到第一个非整数字符（整数里包含的字符，也就只有数字）\n\n例如上面的输入35.8 15.8，得到的是0，因为第一次cin后，x位35，因为遇到了小数点`.`，此时光标就停留在了小数点这里，第二次cin的时候，第一个遇到的就是小数点，所以一个字符都没有读取，得到的就是0，如果读到的值大于了int的最大值，则得到的是int的最大值，如果小于int的最小值，得到的就是int的最小值，然后后面的内容都不再读取\n\n同理如果读取的是浮点数，那么会到第一个非浮点字符（数字和小数点）截止。如果这样得到的是正常的数字就返回，如果得到的是小数点开头，则会带上0，如果什么都没有读到就返回0\n\n例如：\n\n```c++\n#include <iostream>\n\nusing namespace std;\n\nsigned main() {\n    double x,y;\n    cin>>x>>y;\n    cout<<x<<\" \"<<y;\n}\n```\n\n输入11.11.12\n\n得到11.11 0.12\n\n对于char类型，会直接读取一个字符，会跳过空格，回车，制表符\n\n对于char数组和string类型，会一直读取，直到遇到第一个空格和回车，想读取空格可以使用getline(cin,ss)\n\n如果读取的字符个数超过了char数组的容量，会超容量读取……\n\n![image-20221011233123411](pictures/image-20221011233123411-1669803907655-9.png)\n\n对于cin读取字符会跳过空格和回车的问题，可以使用getchar来读取，也可以使用cin.get\n\n```c++\n#include <iostream>\n\nusing namespace std;\n\n\nsigned main() {\n    char c1, c2;\n    c1 = cin.get();\n    cin.get(c2);\n    cout << c1 << \" \" << c2 << endl;\n}\n```\n\ncin内部对get方法进行的重载，不带参数的cin.get()得到的是缓冲区下一个字符的ASCII码值，这里通过隐式类型转换变成了对应char类型的值，而带参数的get(char &)方法，也是读取一个字符，赋值给传入的char变量中\n\n如果没有遇到文件尾EOF，也没有遇到任何错误，可以使用cin.fail()会返回false,cin.good会返回true，如果遇到了文件尾，cin.eof()会返回true。遇到eof后，再使用cin读入也没有用，在有些OS中，可以使用cin.clear()来清除上面这个不可读入的状态\n\ncout.put()可以输出一个字符，putchar也可以输出一个字符，传入参数的是字符的ASCII码\n\ncin.get(ch)以及cin>> 返回值都是cin对象，如果需要bool类型，则调用的是good方法（重载了bool方法）\n\n## 输出到文件 ofstream istream\n\n输出文件使用步骤：\n\n1. 定义输出文件对象ofstream,istream\n2. 调用这个对象的open函数，打开文件，设置输入模式ios:app表示添加，ios:trunc表示清空文件,ios::out表示输出,ios::in表示输出\n3. 像cout和cin一样使用这个对象\n\n[(528条消息) ofstream的使用方法--超级精细_Ψ大鹏的博客-CSDN博客_ofstream](https://blog.csdn.net/weixin_44139428/article/details/102813246)\n\ncpp读写文件有两个指针：读文件指针指针和写文件指针，可以实现文件的随机读写\n\n文件的基本输出\n\n```c++\n#include <iostream>\n#include <fstream>\n\nusing namespace std;\n\nsigned main() {\n    cout<<\"你好\";\n    string output = \"hello world \";\n    ofstream fOut;\n    fOut.open(\"D:\\\\CppProjects\\\\test\\\\引用测试\\\\out.txt\", ios::app);\n    fOut << output;\n    fOut.close();\n}\n```\n\n文件路径可以是字符串字面量，可以是字符串或者字符数组（要以'\\0'结尾）变量\n\n如果输出失败，检查一下中文乱码问题\n\n[(528条消息) 【C语言】CLion中文乱码问题的解决方案_星拱北辰的博客-CSDN博客_clion中文乱码](https://blog.csdn.net/weixin_43896318/article/details/104700306)\n\nc++源文件应当使用GBK编码\n\n我使用的解决办法：使用管理员权限\n\n![image-20221012003422515](pictures/image-20221012003422515-1669803907655-10.png)\n\n使用相对路径：\n\n![image-20221012004649017](pictures/image-20221012004649017-1669803907655-14.png)\n\n可以在open里面使用相对路径，但是这个相对路径相对的是执行者所在的目录，直接使用编译器的运行键，文件会输出在编译器的目录下面，而不是项目路径下面。所以想要使用相对路径，可以在控制台使用g++编译，然后运行\n\n使用ifstream进行输入\n\n```c++\n#include <iostream>\n#include <fstream>\n\nusing namespace std;\n\nsigned main() {\n    ifstream fin;\n    fin.open(\"in.txt\", ios::in);\n    cout<<fin.is_open()<<endl; //判断文件是否打开\n    cout<<fin.eof()<<endl;   //判断文件是否读到文件末尾\n    string ss;\n    fin >> ss;\n    cout << ss;\n}\n```\n\n还是使用g++编译运行\n\n同时使用ifstream和ofstream\n\n```c++\n#include <iostream>\n#include <fstream>\n\nusing namespace std;\n\nsigned main() {\n    ifstream fin;\n    ofstream fout;\n    fin.open(\"in.txt\", ios::in);\n    fout.open(\"out.txt\", ios::trunc);\n    cout << fin.is_open() << endl;\n    while (!fin.eof()) {\n        string line;\n        getline(fin, line);\n        fout << line << endl;\n    }\n}\n```\n\n四舍五入：\n\n```\n1.引入头文件 #include<iomanip>\n\n2.输出用固定格式  cout<<setiosflags(ios::fixed)<<setprecision(2)<<result<<endl;\n\n​                                  //将result保留2位小数，四舍五入后输出。\n```\n\n```c++\n#include <iostream>\n#include <fstream>\n#include <iomanip>\n\nusing namespace std;\n\nsigned main() {\n    double x = 123.565656;\n    ofstream f;\n    f.open(\"out.txt\", ios::trunc);\n    f << setprecision(5) << x << endl; //保留5位有效数字\n    f << setiosflags(ios::fixed) << setprecision(5) << x << endl; //保留5位小数\n}\n/*\n123.57\n123.56566\n*/\n```\n\n## Cpp指针\n\n指针就是内存的地址\n\n```\nint b;\nint *a=&b;\n```\n\nint* a存储的是b的内存地址，&b存储的也是内存地址，两者等价\n\nb和*a得到的都是对应的值，两者也等价\n\n```c++\n#include <iostream>\n#include <fstream>\n#include <iomanip>\n\nusing namespace std;\n\nsigned main() {\n    int *a = new int;\n    *a = 123;\n    int *b = a;\n    delete b;\n    cout << *a;\n}\n```\n\n如果两个指针指向同一片内存空间，然后其中一个delete了，另一个指针访问值的时候，得到的会是随机值\n\ncpp中，指针和数组是等价的，数组数组变量本质上也是指针，所以都可以使用[]，来访问元素，因为[]的实现方式也就是让指针移动对应的偏移量然后再取值，所以本质上是一样的，比如a[0]和*a就是等价的。这对于访问数组元素也同样适用。指针+1，实际上是让指针移动等同于指向类型所占字节数的内存。两者唯一的区别就是指针是一个变量，可以修改它的值。而数组指针是一个常量，不能修改它的值，它永远都指向数组的第一个元素。等价的原因是，cpp解释数组的方式是使用指针算术，对于指针而言，也是使用相同的指针算术，所以两者使用的语法是共通的。对数组变量使用sizeof 得到的是数组元素的大小✖数组长度，而对指针变量使用sizeof得到的是指针变量的大小\n\n```c++\n#include <iostream>\n\nusing namespace std;\n\nsigned main() {\n    int *a = new int;\n    *a = 123;\n    cout << a[0];\n}\n```\n\n为数组动态分配内存可以使用new int[n]，返回的是数组的第一个元素的地址，删除的时候，要用delete[] 来删除，这样删除的就是整个数组所占的内存。使用new []和delete[] 匹配，new和delete匹配，如果两者混着用结果是不可预知的\n\n```c++\n#include <iostream>\n\nusing namespace std;\n\nsigned main() {\n    int *a = new int[12];\n    cout << a[0]; //未知值\n    delete[] a;\n}\n```\n\n## C++强制类型转换\n\n可以使用cpp版的 类型()，括号里面是要转换的数据\n\n也可以使用C语言版的（类型），括号后面跟上要转换的数据\n\n```c++\n#include <iostream>\n\nusing namespace std;\n\n\nsigned main() {\n    cout << char(49) << endl;\n    cout << int('1') << endl;\n    cout << double(1) << endl;\n\n    cout << (char) 49 << endl;\n    cout << (int) '1' << endl;\n    cout << (double) 1 << endl;\n}\n```\n\n不能用char变量存储eof（-1），需要先用int接收，如果不为eof再转换为char类型\n\n## C++逻辑运算符\n\n```c++\n#include <iostream>\n\nusing namespace std;\n\n\nsigned main() {\n    if (1 == 1 and 2 == 2 or not 3 == 3) {\n        cout << \"hello world\" << endl;\n    }\n\n}\n```\n\n可以使用&&，||，!来表示与或非，也可以使用and,or,not来表示，两种表示方法是完全等价的\n\n## Cpp字符操作\n\ncctype中有许多对单个字符的操作，比如判断是不是数字，字母，标点，空白字符，以及变成大写和变成小写\n\n并且cpp内部对各种基本类型都有变成字符串的to_string方法，以后就不需要我们自己写了！\n\n![image-20221012212231962](pictures/image-20221012212231962-1669803907655-11.png)\n\n## C++数组作为函数的参数\n\n```c++\n#include <iostream>\n\nvoid test(int nums[]) {\n    using namespace std;\n    cout << nums << endl;\n}\n\nvoid test(int *nums) { //报错\n    using namespace std;\n    cout << nums << endl;\n}\n\nint main() {\n    std::cout << \"Hello, World!\" << std::endl;\n    return 0;\n}\n```\n\n将数组作为函数的参数，实际上传递的是数组首字母的指针（地址）给函数的参数，所以函数参数列表中，使用int[]来接收或者使用int* 实际上的等价的，所以上述代码中不能用这种方式进行方法重载，因为数组变量和指针变量都可以作为参数传入到这两个函数中\n\n```c++\n#include <iostream>\n\nvoid test(int nums[]) {\n    using namespace std;\n    nums++;\n    cout << nums << endl;\n}\n\n\nint main() {\n    std::cout << \"Hello, World!\" << std::endl;\n    test(new int [0]);\n    return 0;\n}\n```\n\n数组变量和指针变量的用法几乎完全相同，只是再sizeof和数组变量不能修改上有区别\n\n函数列表上的int a[]和int* a完全等价，都是指针，都可以修改指向，使用sizeof得到的都是4字节的指针大小\n\n对于二维数组传递参数，要指明第二维的个数，不然编译器怎么知道每行有多少，每列有多少\n\n```c++\n#include <iostream>\n\nvoid test(int nums[][5]) {\n    using namespace std;\n    cout << nums[0][0] << endl;\n}\n\n\nint main() {\n    int a[5][5];\n    a[0][0] = 123;\n    test(a);\n    return 0;\n}\n```\n\n\n\n## 指针和const\n\n定义const的时候加上const 表示不能通过这个指针来修改他所指向的值，包括数组\n\nconst指针可以指向变量，可以指向常量，但是非const指针不能指向const变量（常量），否则就可以通过这个非const指针修改这个常量从而失去了const的意义\n\n```c++\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    int x1 = 1;\n    const int x2 = 2;\n//    int *p1 = &x2; //非法，不能让非const指针指向const变量\n    const int *p2 = &x1;\n    p2 = &x2; //const指针可以修改指向\n//    *p2 = 3;//但是不能通过这个指针修改数据的值\n}\n```\n\nconst指针可以修改指向，但是不能修改指向数据的值\n\n对于指向指针的指针，const指针只能可以指向const指针，非const指针只能指向非const指针，不能混着用\n\n## Cpp泛型\n\n定义泛型可以使用class也可以使用typename两者完全等价\n\n对于运算后未知的类型（可以转化的类型），可以使用decltype，但其实直接使用auto更加方便\n\n```cpp\ntemplate<class T1, class T2>\nauto del(T1 a, T2 b) {\n    decltype(a - b) c = a - b;\n    auto d = a - b;\n    return c;\n}\n```\n\n对于返回值也是泛型运算后的结果，可以使用下面这种格式\n\n```cpp\ntemplate<class T1, class T2>\nauto add(T1 a, T2 b) -> decltype(a + b) {\n    return a + b;\n}\n```\n\n但是后面的` -> decltype(a + b)`可以省略，结果也是对的\n\n```cpp\ntemplate<class T1, class T2>\nauto add(T1 a, T2 b) {\n    return a + b;\n}\n```\n\n实际上，任何返回值都可以用auto，类型申明后也可以用auto，这样编译器都可以自动帮我们推断类型\n\n如果我们想要为泛型构造一个特例，可以使用函数具象化的语法\n\n```cpp\ntemplate<class T1, class T2>\nauto add(T1 a, T2 b) {\n    return a + b;\n}\n\ntemplate<> auto add<int, int>(int a, int b) {\n    return a + b;\n}\n```\n\n在函数开头加上template<>，表示这是函数具象化的一种，然后需要在函数名后申明具象化之后的泛型\n\n我们在调用泛型方法的时候，编译器会根据传入的参数自动将这个方法隐式实例化，我们也可以显式指明泛型的类型\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\ntemplate<class T1, class T2>\nauto add(T1 a, T2 b) {\n    return a + b;\n}\n\nint main() {\n    cout << add<int, int>(1, 1.2) << endl;\n}\n```\n\n显式指明类型后，double会向int进行类型转换（向下转换），如果不实例化方法，第二个会将1.2作为double类型的变量传入\n\n对于没有参数的方法，不实例化无法进行调用，因为编译器不知道传入的泛型是啥\n\n```cpp\n#include <iostream>\n\nusing namespace std;\n\ntemplate<class T>\nT read() {\n    T x;\n    cin >> x;\n    return x;\n}\n\nint main() {\n    cout << read<int>() << endl;\n}\n```\n\n如上面这段代码，如果不加上`<int>`就会报错\n\n下面这个具象化一个泛型方法的语法，书上有，但是实际上测试的时候会编译报错，可能这种写法已经被抛弃了\n\n```\n//这个语句被编译器抛弃了\ntemplate auto add<int, int>(int,int);\n```\n\n## Cpp的多文件编写\n\ncpp的文件结构一般按照如下策略进行划分\n\n- 头文件，包含结构申明和函数原型\n- 源文件，包含函数原型的实现\n- 源文件，调用函数的函数\n\n不要在头文件里面定义方法的实现和创建变量，因为一旦这个变量被多个源文件引用后，创建变量的行为会发生冲突，编译器会告诉你变量或者方法被重复创建（如果允许的话，就可能会出现同名但是实现不同的方法，编译器就不知道要调用哪一个，但是只申明函数原型的话就不会产生冲突）\n\n头文件里面的内容一般包含如下内容\n\n- 函数原型\n- const变量\n- 内联函数\n- 泛型申明\n- 结构申明\n- 类申明\n\n申明泛型不会被编译，只会告诉编译器如何去生成代码，所以可以被重复包含\n\n结构申明，类申明并不创建变量，所以可以申明\n\n常量和内联函数有特殊的规则，所以可以包含\n\ninclude<>会直接从cpp系统目录里面找，而include\"\"会先从用户目录下面找，再从系统目录下面找\n\n一个头文件只能被包含一次，为了防止一个头文件被重复包含（一个头文件可能包含了另一个头文件）可以使用下面这个技术\n\n```cpp\n#ifndef __test_define\n#define __test_define\n//要定义的头文件\n#include \"iostream\"\n\n#endif\n```\n\n#ifndef表示，如果define了后面那个标识符，就直接跳到#endif，如果没有被定义则不跳过，执行后面的代码\n\n我们在创建头文件的时候，将头文件的内容都放在#ifndef和#endif之间，并#define一个能代表这个头文件的变量，这样就可以防止头文件被重复包含，这样就可以保证一个头文件被多次引用后，头文件不会被重复引入。\n\n```cpp\n//\n// Created by 黎明终点x on 2022/10/16.\n//\n\n#ifndef LEARN_FILE1_H\n#define LEARN_FILE1_H\n#include <iostream>\n\nstruct A{\n    int a;\n    auto getA(){\n        return a;\n    }\n};\n\nvoid print(A a);\n\n#endif //LEARN_FILE1_H\n```\n\n比如一个头文件可以像上面这样写\n\n这样，在其他文件中，无论这个文件被引入多少次，拼接到文件里的只有一次\n\n```cpp\n#include \"file1.h\"\n#include \"file1.h\"\n#include \"file1.h\"\n#include \"file2.h\"\n#include \"iostream\"\n\nusing namespace std;\n\nint main() {\n    cout << \"test start\" << endl;\n    print({1});\n    print2({2});\n\n}\n```\n\n如果不加\n\n```\n#ifndef LEARN_FILE1_H\n#define LEARN_FILE1_H\n……\n#endif //LEARN_FILE1_H\n```\n\n这个技术等价于#pragma once\n\n上面的代码就会报错，提示重复引入的头文件\n\n不能重复引入头文件的原因是同一个头文件在编译之前会重复插入到最后的可执行文件里面，导致编译的时候出现各类重复定义的错误。而不是cpp编译会检测相同头文件的#include语句。通过#ifndef，保证了一个头文件编译的时候只会引入一次，从而防止了这个错误。但是即便使用上面这个技术，也不能在头文件里面直接申明函数的实现，只能申明函数的原型，也不能定义普通变量，这个可能是因为#ifndef对函数申明不生效，并且函数的原型可以重复定义，不会出问题，比如如下代码可以通过编译\n\n```cpp\n#include \"file1.h\"\n#include \"file1.h\"\n#include \"file1.h\"\n#include \"iostream\"\n\nusing namespace std;\n\nvoid read();\nvoid read();\nvoid read();\n\nint main() {\n    cout << \"test start\" << xxxx << endl;\n    print({1});\n}\n```\n\n但是变量和已经实现的方法重复定义后就会报错\n\n但是结构体和类里面的函数可以直接实现，头文件可以使用static来定义全局变量，也可以使用inline来定义函数，这些都放在#ifndef和#endif里面，就可以解决上面这些问题\n\n```cpp\n//\n// Created by 黎明终点x on 2022/10/16.\n//\n#ifndef LEARN_FILE1_H\n#define LEARN_FILE1_H\n#include <iostream>\n\nstruct A{\n    int a;\n    auto getA(){\n        return a;\n    }\n};\nstatic int xxxx;\ninline void print(A a) {\n    std::cout << a.getA();\n}\n\n#endif //LEARN_FILE1_H\n\n```\n\n出了入口cpp文件外，每个cpp源文件都要有一个同名的.h头文件来管理，头文件里面申明的函数原因，以及类方法的原型，只能在**同名**的cpp源文件里面实现，没有头文件的cpp文件是无法使用里面的方法的，头文件实际上是申明了这个源文件可以导出的，供其他文件使用的内容，如果没有头文件则可以理解为，其他文件不能使用这个cpp文件，也就没有了意义。没有头文件的那个cpp文件就是主文件，其他文件在编译的时候会先将链接起来，得到.o文件，然后再将各个.o文件连接起来编译，得到最后的可执行文件。\n\n## muable\n\n表示是可以修改的，用于解除const的限定\n\n```cpp\n#include \"iostream\"\n\nusing namespace std;\n\nstruct AB {\n    int a;\n    mutable int b;\n};\n\nint main() {\n    const AB ab = {1, 2};\n    ab.a = 1;//报错\n    ab.b = 2;//不报错\n}\n```\n\n加上mutable后，就表示这个成员变量是可以修改的，哪怕整体被设置成了const类型\n\n## 内部连接性和外部连接性\n\n### 变量\n\n普通的成员变量定义后，外部文件可以通过extern来引用这个变量，这个变量全局只有一份，所有使用这个变量的文件共享同一块内存地址，这个特性叫外部连接性\n\n想使用其他文件中定义的变量必须申明为extern 的来引用其他文件的这个变量，否则会报错重复定义\n\n```\n//file1.cpp文件中：\nint xxx=5;\n//main.cpp文件中\nextern int xxx;\ncout<<xxx<<endl; //得到5\n```\n\n而被申明为static的变量和被申明为const的变量，每个cpp文件都有一组，互不干扰，这个特性叫做内部连接性\n\n比如下面这段代码，在file2.h中定义了一个`static int xxx;`显然这个变量初始值是0，main.cpp和file1.cpp都引入file2.h，这样在这两个cpp里面都能直接使用xxx变量，file1.cpp中的print函数修改了xxx，main.cpp直接输出，最后得到的结果是1 0，证明了这两个文件的static变量是相互独立，互不干扰的（底层实现可以理解为加上了文件名作为前缀）\n\n```cpp\n// file1.cpp\n// Created by 黎明终点x on 2022/10/16.\n//\n#pragma once\n#ifndef LEARN_FILE1_H\n#define LEARN_FILE1_H\n#include <iostream>\n\nvoid print();\n\n#endif //LEARN_FILE1_H\n\n// file1.cpp\n#include \"file1.h\"\n#include \"file2.h\"\n\nvoid print() {\n    xxx++;\n    std::cout << xxx << \"\\n\";\n}\n\n//file2.h\n//\n// Created by 黎明终点x on 2022/10/16.\n//\n#ifndef LEARN_FILE2_H\n#define LEARN_FILE2_H\n\n#endif //LEARN_FILE2_H\n\nstatic int xxx;\n\n//main.cpp\n#include \"iostream\"\n#include \"file2.h\"\n#include \"file1.h\"\n\nusing namespace std;\n\nint main() {\n    print();    //1\n    cout << xxx;//0\n}\n```\n\n如果其他文件申明了外部连接性的变量，自己又申明了同名的内部连接性变量，会使用内部连接性的变量\n\n```\n//file1.cpp文件中：\nint xxx=5;\n//main.cpp文件中\nstatic int xxx;\ncout<<xxx<<endl; //得到0\n```\n\n### 函数\n\n总结一下，一个文件中想使用其他文件的变量，可以有以下两种方式\n\n- 在头文件里面定义static变量或者const变量，cpp文件引入这个头文件就能使用这些变量，每个文件的作用域就是这个文件，文件之间互不干扰（内部连接性）\n- 在cpp源文件定义变量，其他文件使用extern引入，这种变量全局只有一份，所有文件中的变量共享一块内存空间（外部连接性）\n\n为什么其他cpp文件定义的变量我这个文件可以使用？\n\n因为编译的时候这些文件都会先和头文件连接（引入头文件的变量可以使用），然后再彼此连接在一起（其他cpp文件定义的变量可以使用），编译成机器语言之前，这些变量都按照各自的规则进行转换，放到了同一个文件中，所以再理论上也是可以互联互通的\n\n对于函数而言也有类似的特性，只是我们不允许在函数里面定义函数，所以函数定义出来都默认是外部连接特性的，于是我们引用其他文件的函数也有两种方式\n\n- 使用前定义这个函数的原型，或者引入带有函数原型的头文件（函数原型可以重复定义，不用担心重复引入），这个函数的具体实现可以放在参与编译的任何cpp文件中，然后都可以正常使用这个函数（函数默认是外部连接性的，在函数原型前面加上extern或者不加都是可以的）\n\n如果不希望这个函数被其他文件引用，可以使用static关键字申明，这样不同文件就可以定义同名函数，互不冲突，一个文件只能调用自己的static函数\n\n## 创建struct变量的方式\n\n使用大括号进行创建\n\n```cpp\n#include \"iostream\"\n#include \"file1.h\"\n\nusing namespace std;\n\nstruct ABC {\n    int a, b, c;\n};\n\nint main() {\n    ABC abc1{1, 2, 3};\n    ABC abc2{1, 2};\n    ABC abc3{};\n    ABC abc4=ABC();\n    ABC *abc5 = new ABC{1, 2, 3};\n    cout << abc4.a << endl;\n}\n```\n\n使用大括号进行创建其实是按顺序指定结构体里面的各个成员变量的值，从前往后按定义的顺序依次赋值，后面没有被赋值的变量会被赋予零值\n\n不使用大括号申明的变量（abc4），所有成员的值都是未定义状态\n\n如果使用括号来创建变量实际上是创建了一个方法？反正不是创建变量！\n\n想要调用构造方法来创建结构体变量，可以使用`ABC abc4=ABC();`这样的语法\n\n也可以使用new运算符来创建，使用方式和上面一样，只是分配内存的位置由栈变成动态存储区\n\nnew运算符其实使用了一个语法糖的函数，使用typedef进行了简化\n\n```\nnew int -> new(sizeof(int))\nnew int[40] -> new(40*sizeof(int))\n```\n\nnew运算符还可以指定需要分配的内存地址，来自己进行内存管理，使用方法为\n\n```\nnew(006E4AB0)int[20]\nnew(006E4AB0)int\nnew(内存地址)变量类型\n```\n\n## 命名空间\n\n声明域：可以定义变量，函数的区域，局部变量的申明域是代码块，全局变量是申明域是函数的外面（申明一个引用外部文件的变量或者使用头文件里面的静态变量，也当成全局变量）\n\n潜在作用域：从定义变量开始到声明域的结尾，这个范围内的变量可能会在某些区域内被其他同名变量覆盖（隐藏）\n\n作用与：未被隐藏的潜在作用域\n\n命名空间可以定义在全局或者其他命名空间里面，可以在里面定义任意多的变量，函数，类型等，命名空间之间不会相互干扰，定义后如果不使用命名空间，里面定义的内容就不会干扰我们定义其他变量，函数等（具体的实现可以理解名字为加上了命名空间的前缀）\n\n全局内部的其他变量可以理解为在一个空命名空间里面，可以使用::来访问\n\n`using namespace xxx;`后，会覆盖前面同名的全局（局部）变量，后面定义的全局（局部）变量也可以覆盖命名空间中引入的变量\n\n放在全局表示命名空间中定义的内容全局可用，放在代码块里面表示这个代码块里面可用\n\n而`using xxx::yyy`不会覆盖前面定义的同名内容，而是直接报错\n\n命名空间可以嵌套，可以通过赋值起别名\n\n未命名的命名空间不能被其他文件使用，可以实现类似static的功能\n\n## 类的构造函数\n\n创建类对象不能直接使用{}来创建，必须有对应的构造函数来能这么写\n\n```cpp\n#include \"iostream\"\n#include \"file1.h\"\n\nusing namespace std;\n\nclass ABC {\npublic:\n    ABC() {\n\n    }\n\n    ABC(int i, int i1) {\n\n    }\n\n    int a, b, c;\n\n    ABC(int i, int i1, int i2) {\n\n    }\n};\n\nint main() {\n    ABC abc1{1, 2, 3};\n    ABC abc2{1, 2};\n    ABC abc3{};\n    ABC abc4; //不一定是0值\n    ABC *abc5 = new ABC{1, 2, 3};\n    cout << abc4.a << endl;\n}\n```\n\n也可以使用小括号来调用构造函数，两者完全等价，只是写法有所不同\n\n```cpp\n#include \"iostream\"\n#include \"file1.h\"\n\nusing namespace std;\n\nclass ABC {\npublic:\n    ABC() {\n\n    }\n\n    ABC(int i, int i1) {\n\n    }\n\n    int a, b, c;\n\n    ABC(int i, int i1, int i2) {\n\n    }\n};\n\nint main() {\n    ABC abc1 = ABC(1, 2, 3);\n    ABC abc2 = ABC(1, 2);\n    ABC abc3=ABC();\n    ABC abc4;\n    ABC *abc5 = new ABC(1, 2, 3);\n    cout << abc4.a << endl;\n}\n```\n\n也就是说，创建同一个对象有下面这些写法\n\n`ABC abc1 = ABC(1, 2, 3) <=>ABC abc1{1,2,3}<=>ABC abc1(1, 2, 3)<=> ABC abc1={1,2,3} `\n\n像分配内存在公共存储区可以使用`ABC abc1 = new ABC(1, 2, 3) <=>ABC abc1 = new ABC{1, 2, 3} `\n\n注意，不能使用`ABC abc1()`来调用无参构造函数，因为cpp会把它视为方法原型\n\n一个对象申明为const表示这个对象的成员变量，不能被构造函数以外的函数修改，如果在函数后面加上const，表示这个函数不会修改成员变量。所以const对象不能调用非const方法，因为非const方法可能会修改成员变量，而非const对象可以调用任意方法\n\n对于只有一个参数的构造函数，可以使用赋值号来调用构造函数创建对象，这种行为也叫做赋值构造\n\n```cpp\n#include \"iostream\"\n#include \"file1.h\"\n\nusing namespace std;\n\nclass ABC {\nprivate:\n    int a;\npublic:\n    ABC() {\n\n    }\n\n    ABC(int a) : a(a) {\n        cout << \"被调用1\" << endl;\n    }\n\n    ABC(double a) {\n        this->a = a;\n        cout << \"被调用2\" << endl;\n    }\n};\n\nint main() {\n    ABC a = 1; //被调用1\n    ABC b = 1.0; //被调用2\n}\n```\n\n注意：只有一个参数的构造函数以及有多个参数但是其他参数有默认值的构造函数都可以使用赋值号调用构造函数创建对象，会根据赋值号右边的值来决定使用哪个构造函数\n\n```cpp\n    ABC(int a) : a(a) {\n        cout << \"被调用1\" << endl;\n    }\n    ABC(int &a) : a(a) {\n        cout << \"被调用1\" << endl;\n    }\n    ABC(int &&a) : a(a) {\n        cout << \"被调用1\" << endl;\n    }\n```\n\n对于上面三种构造函数，首先第一种写法不能和第二和第三种写法同时存在，否则调用构造函数时会有歧义（如果不调用的话，编译也不会出错）\n\n## 对象数组\n\n创建对象数组可以有两种方式：\n\n```CPP\nABC abc[4];\nABC abc2[]={ABC(1)};\nABC abc3[]={ABC{1}};\n```\n\n- 使用类似`ABC abc[4];`的语法，调用的是类的无参构造函数（所以要保证有无参构造函数）\n- 使用初始化列表的方式，其中每个元素都可以选择自己的构造函数来创建对象\n\n## 类的作用域\n\n```cpp\nclass ABC {\nprivate:\n    int a;\n    const int b = 2;\n    int xx[b]; //错误\n}\n```\n\n在全局里面创建常量b，然后作为数组长度是可以的，但是对于类不行，因为类只是一个定义，在创建对象前不占用存储空间，所以数组不能将b替换成具体的数字，所以不能按照这种方式来定义\n\n解决方式有两种\n\n- 使用enum\n\n```cpp\nclass ABC {\nprivate:\n    int a;\n    enum {\n        b = 5\n    };\n    int xx[b];\n}\n```\n\n这么做后，编译器会在编译的时候，将b替换成5\n\n- 使用static const\n\n其实类的定义保存静态区里面，使用static后，这个成员对象就不保存在对象中，而是保存在静态区里面，因而编译器在创建对象之前，可以获知数组的长度，从而可以创建\n\n## 类的继承\n\ncpp允许基类的引用或者指针指向派生类，而调用方法时，使用的是基类方法还是派生类方法则有以下规则：\n\n- 如果方法加上了virtual，则通过引用，指针，对象调用的方法都是对象类型的方法\n- 如果没有加上virtual，则通过引用，指针调用的方法是引用，指针的类型，而通过对象调用的则是自己的方法\n\n子类在调用父类方法时，要加上父类的类型::来限定使用哪个类的方法\n\n析构函数必须是virtual的，因为析构函数是释放对象内容的一些行为，应该和实际的对象绑定在一起，而不是指针类型，对于同一种对象而言，任何时候都应该调用自己的析构函数\n\n派生类如果定义和基类同名的方法，不会形成两个重载的函数，派生类的函数会隐藏基类的函数\n\n返回类型协变：基类的返回值是基类或者基类的引用，派生类对于相同的方法返回改为了派生类或者派生类的引用，这种情况，基类方法不会被隐藏\n\n### 三种继承方式\n\nprotect的成员变量可以被派生类访问，但是不能被外部访问\n\n如果使用共有继承：`class Son : public Base {}`，基类的私有成员就还是私有，共有成员就还是共有\n\n如果使用私有继承：`class Son : private Base`，基类的所有成员变量和方法都变成私有（默认就是私有）（使用private继承的派生类可以访问，因为是作为直接派生类的private成员，所以只有直接派生类可以访问，外部和间接子类都不能访问）\n\n如果使用保护继承：`class Son : protected Base`，基类所有成员都作为保护成员（所有派生类可以访问，外部不能访问）\n\n只有在共有继承的时候，基类指针才能指向子类\n\n### 方法隐藏\n\n```cpp\n#include \"iostream\"\n#include \"vector\"\n#include \"file1.h\"\n\nusing namespace std;\n\nclass Base {\nprivate:\n    int x;\npublic:\n    void test() {\n        cout << \"base test1\" << endl;\n    }\n\n    void test(int x) {\n        cout << \"base test2\" << endl;\n    }\n};\n\nclass Son : Base {\npublic:\n    //    void test() {\n    //        cout << \"son test1\" << endl;\n    //    }\n    //\n//    void test(int x) {\n//        cout << \"son test2\" << endl;\n//    }\n\n    void test(double x) {\n        cout << \"son test2\" << endl;\n    }\n\n    void test2() {\n        test();//被重载的test隐藏了，所以不能调用基类的test方法\n    }\n};\n\n\nint main() {\n    Son son;\n    son.test2();\n}\n```\n\n如果派生类中出现了和基类同名的方法，基类所有重载的同名方法都会被隐藏，派生类和后续的派生类，在使用同名的方法时，都无法直接使用基类的方法，想要使用可以这样：`Base::test()`，这样就可以指定访问哪个类的方法\n\n外部成员可以这么访问`son.Base::test()`，前提是要有访问权限\n\n### override和final\n\n对于虚方法，我们可以加上override来表示重写了一个基类方法。对于非虚方法，是按照指针类型来调用，用的哪个方法很明显，不需要加上这个来提醒自己。一个类的方法加上virtual，表示这个作为指针的类型时，具体调用这个方式时，调用的是实际的类的方法\n\n相反的，final可以声明一个方法不能被重写\n\n```cpp\n#include \"iostream\"\n#include \"vector\"\n\nusing namespace std;\n\nclass Base {\nprivate:\n    int x;\npublic:\n    virtual void test() = 0;\n\n    virtual void test(int x) {\n        cout << \"base test2\" << endl;\n    }\n};\n\nclass Son : public Base {\npublic:\n    void test() {\n        cout << \"son test1\" << endl;\n    }\n\n    void test(int x) {\n        cout << \"son test2\" << endl;\n    }\n\n    //    void test(double x) {\n    //        cout << \"son test2\" << endl;\n    //    }\n};\n\n\nint main() {\n    Base *base = new Son();\n    base->test();\n}\n```\n\n\n\n## Cpp函数调用\n\n函数的返回值不放在栈中，一般会放在寄存器里面或者内存中的某块地址（但反正不是栈，如果是栈很多问题就无法解释）\n\n函数执行完后的返回值是一个右值，这一行代码执行完就会被释放\n\n## Cpp类的默认行为（移动构造，拷贝构造）\n\n创建一个类A\n\n```cpp\nclass A {\nprivate:\n    string name;\npublic:\n    explicit A(const string &name) : name(name) {\n        cout << \"调用拷贝构造函数  \" << name << endl;\n    }\n\n    explicit A(const string &&name){\n        cout << \"调用移动构造函数  \" << name << endl;\n    }\n\n    A() {\n        cout << \"调用默认构造函数\" << endl;\n    }\n\n    A &operator=(const A &abc) {\n        cout << \"调用拷贝构造函数\" << name << endl;\n        name = abc.name;\n        return *this;\n    }\n\n    virtual ~A() {\n        cout << \"调用析构函数  \" << name << endl;\n    }\n\n    void setName(const string &name) {\n        A::name = name;\n    }\n};\n```\n\n我们想从一个方法中拿到一个对象\n\n下面这个做法是错误的，因为变量a在函数结束后会退栈销毁掉，而引用本质上保存的是变量是地址，变量不存在了，地址也就没有意义，所以下面返回的是未定义的值\n\n```cpp\nA& getA(){\n    A a;\n    a.setName(\"初始参数\");\n    return a;\n}\n```\n\n所以应该改成下面这种写法\n\n```cpp\nA getA() {\n    A a;\n    a.setName(\"初始参数\");\n    return a;\n}\n```\n\n这么改后，因为返回值会单独占据内存中的一块区域，函数返回的时候，会先将a变量拷贝到那块临时区域，然后将地址返回到原来的函数，这样函数结束后，a变量会销毁，但是拷贝还在，所以外面函数拿到的其实是这个拷贝的对象。\n\n```cpp\nint main() {\n    getA();\n}\n```\n\n但是这样得到的对象也只是一个临时值，这一行代码结束后，这个临时的对象也就不再存在，这个临时的变量也是我们所说的右值。如果返回值不被使用也就不会被拷贝。\n\n```cpp\n#include \"iostream\"\n#include \"vector\"\n#include \"file1.h\"\n\nusing namespace std;\n\nclass A {\nprivate:\n    string name;\npublic:\n    A(const A &&name) {\n        cout << \"调用移动构造函数  \" << name.name << endl;\n    }\n\n    A() {\n        cout << \"调用默认构造函数\" << endl;\n    }\n\n    A(const A &a) : name(a.name) {\n        cout << \"调用拷贝构造函数  \" << name << endl;\n    }\n\n\n    A &operator=(const A &abc) {\n        cout << \"调用复制运算符\" << name << endl;\n        name = abc.name;\n        return *this;\n    }\n\n    virtual ~A() {\n        cout << \"调用析构函数  \" << name << endl;\n    }\n\n    void setName(const string &name) {\n        A::name = name;\n    }\n\n    const string &getName() const {\n        return name;\n    }\n};\n\n//A &getA() {\n//    A *a = new A();\n//    a->setName(\"初始参数\");\n//    return *a;\n//}\n\nA getA() {\n    A a;\n    a.setName(\"xxx\");\n    return a;\n}\n\nA useA(const A &a) {\n    cout << \"使用A:\" + a.getName() << endl;\n    return a;\n}\n\nint main() {\n    cout << \"main start\" << endl;\n    useA(getA());\n    cout << \"main end\" << endl;\n}\n```\n\n如果返回的对象在函数结束后会销毁，就不拷贝，返回这个要销毁的对象\n如果函数结束后不销毁，则调用拷贝构造创建一个对象返回\n\n这个其实是编译器帮我们做的优化，这样我们就不用编写移动构造\n\n（const A&不能作为A&返回，变量当成常量没有风险，反过来就不一定了）\n\n## constexpr 申明常量表达式\n\n申明变量的时候可以加上constexpr，表示计算这个变量只需要常量，这样这个值就可以在编译期计算出来\n\n## 使用CLION创建项目的时候，不要有中文路径\n\n## CMAKE语法\n\n[cmake常用命令的一些整理 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/315768216)\n\n## 高斯白噪声\n\n```cpp\n#include <iostream>\n#include <iterator>\n#include <random>\n\nint main() {\n    // Example data\n    std::vector<double> data = {1., 2., 3., 4., 5., 6.};\n\n    // Define random generator with Gaussian distribution\n    const double mean = 0.0;//均值\n    const double stddev = 0.1;//标准差\n    std::default_random_engine generator;\n    std::normal_distribution<double> dist(mean, stddev);\n\n    // Add Gaussian noise\n    for (auto& x : data) {\n        x = x + dist(generator);\n    }\n\n    // Output the result, for demonstration purposes\n    std::copy(begin(data), end(data), std::ostream_iterator<double>(std::cout, \" \"));\n    std::cout << \"\\n\";\n\n    return 0;\n}\n```\n\n## emplace_back和push_back的区别\n\nemplace_back放入的是移动构造后得到的对象，接收右值，调用移动构造函数\n\npush_back放入的是拷贝构造得到的对象，接收左值，调用拷贝构造函数\n\n## deque支持随机访问\n\ndeque底层是`map<int,vector>`，使用这样的一个数据结果实现双端队列\n\n[C++ STL deque容器底层实现原理（深度剖析） (biancheng.net)](http://c.biancheng.net/view/6908.html)\n\n![image-20221025020644091](pictures/image-20221025020644091-1669803907655-13-1669804077621-23.png)\n\ndeque支持随机访问，但是不能随机插入，只能添加或者删除队头和队尾的元素，这些操作的复杂度都是O(1)，相当于将一块连续的数组切分成了多个长度固定的数组，start迭代器记录第一个元素的起始位置，第一个数组的起始地址，第一个数组的中止地址，第一个map指针的地址，finish迭代器，记录最后一个元素的位置，最后一个数组的起始地址，终止地址，存放这个地址的map结点\n\n这样我们就可以知道第一个元素是啥，最后一个元素是啥了，删除后，迭代器里面存放的指针就往中间移动一个，添加元素后就在添加完成后，指针往外面移动一格，所以这些操作都是O(1) 的。如果第一个数组满了，就在前面再申请一个数组，继续存放元素，更新start迭代器的指向，在后面添加也是一样的，都是O(1)的复杂度。\n\n对于随机访问，由于每个数组的长度都是固定的，很容易根据下标，确定要访问的元素在哪个数组的哪个位置，从而实现O(1)随机访问\n\n## 智能指针\n\n为什么要有智能指针？\n\n使用普通的指针，一方面我们可能会忘记delete掉申请的内存，另一方面，如果使用指针的过程中出现异常，可能会导致delete的那条代码没有执行，导致内存泄露，所以可以使用智能指针来实现，指针指针是实现了指针功能的类对象，如果函数出现异常会调用对象的析构函数释放内存，把地址值赋值给指针指针，就不需要我们来释放内存，由编译器调用析构函数自己完成。智能指针在`<memory>`里面。智能指针不能用于非堆内存，只能传入`new`出来的内存块的地址。如果传入非堆内存，就会delete非堆地址，就会报错。\n\n智能指针可以和其他指针一起正常使用，那么就可以像指针一样赋值给其他智能指针对象，这样的话就会有问题。如果智能指针只是单纯在析构函数里面delete掉内存的话，就会出现同一块内存被重复delete的问题，解决这个问题的方案有三种\n\n- 赋值的时候进行深拷贝\n- 不允许赋值 `unique_ptr`\n- 赋值的时候，转移所有权 `auto_ptr`\n- 采用引用计数 `share_ptr`\n\n`unique_ptr`禁止了拷贝赋值，但是允许了移动赋值（可以接收函数的返回值）\n\n`auto_ptr`是在拷贝赋值中，转移对象的所属权，原来的智能指针对象会变成“悬挂的指针”，里面原生的指针会变成空指针，从而不能解引用来获取值\n\n`unique_ptr`在编译期禁止了赋值这种危险的行为，所以比`auto_ptr`更加安全。如果我们确实需要进行`unique_ptr`的赋值操作，转移内容的所属权，可以使用move()将左值变成右值即可\n\n`share_ptr`则使用引用计数来共享内容的所属权，使用起来更加方便\n\n`auto_ptr`被废弃\n\n使用智能指针unique\n\n```cpp\n#include <memory>\n#include \"iostream\"\n\nusing namespace std;\n\n#define WEBRTC_POSIX\n\nint main() {\n    unique_ptr<string> sp(new string(\"123\"));\n    unique_ptr<string> sp2{new string(\"234\")};\n    cout << *sp << \" \" << *sp2 << endl; //123 234\n    //    sp = sp2; 被禁止，编译报错\n    sp = move(sp2); //允许，但是sp2就没有用了\n    cout << *sp << endl; //234\n}\n```\n\n`share_ptr`在进行赋值前，如果原来已经有指向的对象，会将原有指针指向的内存释放掉\n\n![image-20221028105501647](pictures/image-20221028105501647-1669803907655-12.png)\n\n```cpp\n#include <memory>\n#include \"iostream\"\n\nusing namespace std;\n\n#define WEBRTC_POSIX\n\nint main() {\n    shared_ptr<string> sp(new string(\"123\"));\n    shared_ptr<string> sp2{new string(\"234\")};\n    cout << *sp << \" \" << *sp2 << endl; //123 234\n    sp = sp2;\n    cout << *sp << \" \" << *sp2 << endl;\n    sp2 = shared_ptr<string>(new string(\"345\"));\n    cout << *sp << \" \" << *sp2 << endl;\n}\n```\n\n### 手写unique_ptr\n\n```cpp\n#include \"iostream\"\n\nusing namespace std;\n\ntemplate<typename T>\nclass unique_ptr {\n    T *ptr;\npublic:\n    //普通构造\n    unique_ptr(T *ptr) : ptr(ptr) {\n    }\n\t//移动构造\n    unique_ptr(unique_ptr &&raw) {\n        ptr = raw.ptr;\n        raw.ptr = nullptr;\n    }\n\t//默认构造\n    unique_ptr() = default;\n\t//禁用拷贝赋值\n    unique_ptr &operator=(const unique_ptr &) noexcept = delete;\n\t//允许移动赋值\n    unique_ptr &operator=(unique_ptr<T> &&raw) noexcept {\n        swap(ptr, raw.ptr);\n        return *this;\n    }\n\t//取值\n    T &operator*() const noexcept {\n        return *ptr;\n    }\n\t//析构函数释放内存\n    virtual ~unique_ptr() {\n        delete ptr;\n    }\n};\n\nint main() {\n    unique_ptr<string> sp(new string(\"123\"));\n    unique_ptr<string> sp2{new string(\"234\")};\n    cout << *sp << \" \" << *sp2 << endl; //123 234\n    //    sp = sp2;// 被禁止，编译报错\n    sp = move(sp2); //允许，但是sp2就没有用了\n    cout << *sp << endl; //234\n}\n```\n\n移动赋值为啥swap\n\n```cpp\n\t//允许移动赋值\n    unique_ptr &operator=(unique_ptr<T> &&raw) noexcept {\n        swap(ptr, raw.ptr);\n        return *this;\n    }\n```\n\n移动赋值需要三步：\n\n- 将原来的内存释放掉\n- 将右值引用的ptr赋值给自己的ptr\n- 将右值引用的ptr置为nullptr防止重复delete\n\n这样显然有些麻烦，可以使用swap一步完成\n\n右值引用的声明周期只有那一行代码，那一行结束后，就会调用右值对象的析构函数释放内存\n\n互换指针，一方面自己的ptr得到对方ptr的值，完成了第一步。右值对象中ptr的指向变成了自己的原来的指向，完成了第三步，防止重复释放内存，同时右值对象在这一行结束后会销毁，会调用析构函数释放内存，完成了第二步。所以这一个swap就完成了上述的三个操作\n\n## 手写share_ptr\n\n```cpp\n#include <unordered_map>\n#include \"iostream\"\n\nusing namespace std;\n\n\nunordered_map<void *, unsigned> share_count_map;\n\ntemplate<typename T>\nclass shared_ptr {\nprivate:\n    T *ptr;\n\npublic:\n    shared_ptr() = default;\n\n    explicit shared_ptr(T *ptr) : ptr(ptr) {\n        if (ptr != nullptr) {\n            share_count_map[ptr] = 1;\n        }\n    }\n\n    shared_ptr(const shared_ptr<T> &raw) noexcept {\n        ptr = raw.ptr;\n\n    }\n\n    shared_ptr(const shared_ptr &&raw) noexcept {\n        ptr = raw.ptr;\n        share_count_map[ptr]++;\n    }\n\n    shared_ptr<T> &operator=(const shared_ptr<T> &raw) noexcept {\n        if (raw.ptr == ptr) {\n            return *this;\n        }\n        share_count_map[ptr]--;\n        if (share_count_map[ptr] == 0) {\n            share_count_map.erase(ptr);\n            delete ptr;\n        }\n        ptr = raw.ptr;\n        share_count_map[ptr]++;\n        return *this;\n    }\n\n    shared_ptr<T> &operator=(shared_ptr<T> &&raw) noexcept {\n        swap(ptr, raw.ptr);\n        return *this;\n    }\n\n    T &operator*() const noexcept {\n        return *ptr;\n    }\n\n    virtual ~shared_ptr() {\n        share_count_map[ptr]--;\n        if (share_count_map[ptr] == 0) {\n            share_count_map.erase(ptr);\n            delete ptr;\n        }\n    }\n};\n\n\nint main() {\n    shared_ptr<string> p;\n    shared_ptr<string> p2 = p;\n    shared_ptr<string> sp(new string(\"123\"));\n    shared_ptr<string> sp2{new string(\"234\")};\n    cout << *sp << \" \" << *sp2 << endl; //123 234\n    sp = sp2;\n    cout << *sp << \" \" << *sp2 << endl;\n    sp2 = shared_ptr<string>(new string(\"345\"));\n    cout << *sp << \" \" << *sp2 << endl;\n}\n```\n\nshare_ptr需要用到引用计数，但是这个引用计数表示的是一个类型的数据被多少个智能指针管理这，所以这个引用计数器应当是一个全局变量，独立于每个对象，如果放在对象里面，每个对象都有一个自己的副本，显然不行。引用计数器是所有`share_ptr`的管理者，所以应当定义在全局。\n\n```cpp\nunordered_map<void *, unsigned> share_count_map;\n```\n\n又因为要支持泛型，所以这里采用数据的内存地址作为map的key\n\n## `string::nops`其实是`usigned long long`的最大值，find没有找到就返回这个值\n\n```cpp\n#include \"iostream\"\n\nusing namespace std;\n\n#define WEBRTC_POSIX\n\nint main() {\n    cout << string::npos << endl;\n    string s = \"123\";\n    cout << (s.find(\"456\")) << endl;\n    cout << UINT64_MAX << endl;\n}\n```\n\n## cpp Default的用法\n\n```cpp\n#include \"iostream\"\n\nusing namespace std;\n\nclass Base {\npublic:\n    Base &operator=(const Base &b) noexcept {\n        cout << \"赋值运算符\" << endl;\n        return *this;\n    }\n};\n\nclass Son : public Base {\npublic:\n    Son &operator=(const Son &) noexcept = default;\n};\n\nint main() {\n    Son son;\n    Son son2;\n    son = son2; //输出 赋值运算符\n}\n```\n\ndefault表示使用编译器默认生成的函数，如果父类有自定义的，就使用父类的。仅限于特殊的函数（构造函数，析构函数，赋值运算符，拷贝构造，移动构造，移动赋值）\n\nconst 和 noexcept一起写的时候，const要放在前面\n\n## swap的原理\n\n```cpp\n_Tp __tmp = _GLIBCXX_MOVE(__a);\n__a = _GLIBCXX_MOVE(__b);\n__b = _GLIBCXX_MOVE(__tmp);\n```\n\n和我们平时写的逻辑类似，只是用了move，move会得到右值引用\n\n```cpp\n      _Tp __tmp = _GLIBCXX_MOVE(__a); //将__a的右值引用赋值给__tmp，这里会调用移动构造\n      __a = _GLIBCXX_MOVE(__b);  //将__b的右值引用赋值给__a，这里会调用移动赋值\n      __b = _GLIBCXX_MOVE(__tmp); //将__tmp的右值引用赋值给__b，这里会调用移动赋值\n```\n\n使用这种方式就可以避免调用拷贝构造和拷贝赋值，提高效率\n\n## sscanf\n\nsscanf用于从一个字符串中格式化读入参数\n\n例如下面的dtm就是被读入的字符串，后面是格式化参数，再后面是接受这些变量的值\n\n```cpp\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"iostream\"\n\nint main() {\n    int day, year;\n    char weekday[20], month[20], dtm[100];\n\t\n    strcpy(dtm, \"Saturday March 25 1989\");\n    sscanf(dtm, \"%s %s %d  %d\", weekday, month, &day, &year);\n\n    printf(\"%s %d, %d = %s\\n\", month, day, year, weekday);\n    std::cout << dtm << std::endl;\n\n    return (0);\n}\n```\n\n## Cpp 中的信号（Signal和Raise）\n\n[(884条消息) C++ Signal(信号)_肥喵王得福_ฅ・ω・ฅ的博客-CSDN博客_c++ signal](https://blog.csdn.net/u013271656/article/details/114537411)\n\nraise函数用来触发信号，signal用于监听信号并在收到信号的时候进行软中断，执行设置的处理函数\n\n```\nvoid (*signal(int sig, void (*func)(int)))(int);\n```\n\n第二个参数是一个函数，可以传入我们自定义的函数，也可以填一些系统默认值，比如`SIG_DFL`表示进行默认的行为，`SIG_IGN`表示忽略\n\n关于触发信号，STD中的`std::abord,std::atexit,std::terminate`等函数都可以触发信号，等价于`std::signal(对应的信号)`\n\n## Cpp 函数指针\n\n```cpp\n#include <csignal>\n#include <iostream>\n#include <cstdlib>\n\nusing namespace std;\n\ntypedef void (*Func)(int);\n\nvoid test(Func f) {\n    f(1);\n}\n\nvoid test(int x) {\n    cout << x << endl;\n}\n\nint main() {\n    test(test);\n}\n```\n\n函数指针定义方式和一般变量不同，所以可以使用typedef来将其变成类型的形式\n\n```cpp\n//     返回值  类型名 参数类型        \ntypedef void (*Func)(int);\n```\n\n也可以直接使用\n\n```cpp\n#include <csignal>\n#include <iostream>\n#include <cstdlib>\n\nusing namespace std;\n\ntypedef void (*Func)(int);\n\nvoid test(void (*f)(int)) {\n    f(1);\n}\n\nvoid test(int x) {\n    cout << x << endl;\n}\n\nint main() {\n    void (*f)(int);\n    f(1); //会卡死，因为函数指针没有指向\n    test(test);\n}\n```\n\n","slug":"Cpp学习笔记","published":1,"updated":"2022-11-30T10:33:43.441Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clb3jhene00017sww3r2p6646","content":"<h1 id=\"Cpp学习笔记\"><a href=\"#Cpp学习笔记\" class=\"headerlink\" title=\"Cpp学习笔记\"></a>Cpp学习笔记</h1><h2 id=\"C-类的六大函数\"><a href=\"#C-类的六大函数\" class=\"headerlink\" title=\"C++类的六大函数\"></a>C++类的六大函数</h2><p>[C++类的六大函数–构造、析构、拷贝构造、移动构造、拷贝赋值、移动赋值 - lincoding` - 博客园 (cnblogs.com)](<a href=\"https://www.cnblogs.com/lincz/p/10768607.html\">https://www.cnblogs.com/lincz/p/10768607.html</a>)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cassert&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">virtual</span> ~<span class=\"built_in\">Base</span>() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bar</span><span class=\"params\">(<span class=\"type\">void</span>)</span> <span class=\"type\">const</span> <span class=\"keyword\">noexcept</span> </span>&#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;Base::bar&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span> : <span class=\"keyword\">public</span> Base &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">virtual</span> ~<span class=\"built_in\">Derived</span>() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">foo</span><span class=\"params\">(<span class=\"type\">const</span> Base &amp;base)</span> </span>&#123;</span><br><span class=\"line\">    base.<span class=\"built_in\">bar</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// class SmartPtr定义&amp;实现</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SmartPtr</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    T *t;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 初始化</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">SmartPtr</span><span class=\"params\">(T *t1 = <span class=\"literal\">nullptr</span>)</span> : t(t1) &#123;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 拷贝构造</span></span><br><span class=\"line\">    <span class=\"built_in\">SmartPtr</span>(<span class=\"type\">const</span> SmartPtr &amp;s) = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 赋值构造</span></span><br><span class=\"line\">    SmartPtr &amp;<span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> SmartPtr &amp;s) = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    // 移动构造</span></span><br><span class=\"line\"><span class=\"comment\">//    SmartPtr(SmartPtr &amp;&amp;s) noexcept &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        this-&gt;t = s.t;</span></span><br><span class=\"line\"><span class=\"comment\">//        s.t = nullptr;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 移动赋值</span></span><br><span class=\"line\">    SmartPtr &amp;<span class=\"keyword\">operator</span>=(SmartPtr &amp;&amp;s) <span class=\"keyword\">noexcept</span> &#123;</span><br><span class=\"line\">        std::<span class=\"built_in\">swap</span>(s.t, t);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 重载*</span></span><br><span class=\"line\">    T &amp;<span class=\"keyword\">operator</span>*() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(<span class=\"keyword\">this</span>-&gt;t != <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *(<span class=\"keyword\">this</span>-&gt;t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 重载-&gt;</span></span><br><span class=\"line\">    T *<span class=\"keyword\">operator</span>-&gt;() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(<span class=\"keyword\">this</span>-&gt;t != <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 重载 bool</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">operator</span> <span class=\"title\">bool</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 析构函数</span></span><br><span class=\"line\">    ~<span class=\"built_in\">SmartPtr</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;t) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> t;</span><br><span class=\"line\">            t = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//支持子类向父类的转换，如果不用这个，编译器也会自动帮我们转换</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> U&gt;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">inline</span> <span class=\"keyword\">explicit</span> <span class=\"title\">SmartPtr</span><span class=\"params\">(SmartPtr&lt;U&gt; &amp;&amp;other)</span> <span class=\"keyword\">noexcept</span> </span>&#123;</span><br><span class=\"line\">        t = other.t;</span><br><span class=\"line\">        other.t = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    SmartPtr&lt;Base&gt; ptr1&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">Derived</span>()&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// SmartPtr&lt;Base&gt; ptr2&#123;ptr1&#125;; // 编译Error</span></span><br><span class=\"line\">    SmartPtr&lt;Base&gt; ptr3;</span><br><span class=\"line\">    <span class=\"comment\">// ptr3 = ptr1; // 编译Error</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ptr3 = std::<span class=\"built_in\">move</span>(ptr1); <span class=\"comment\">// ok</span></span><br><span class=\"line\">    SmartPtr&lt;Base&gt; ptr4&#123;std::<span class=\"built_in\">move</span>(ptr3)&#125;; <span class=\"comment\">// ok</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ptr4-&gt;<span class=\"built_in\">bar</span>(); <span class=\"comment\">// ok</span></span><br><span class=\"line\">    <span class=\"built_in\">foo</span>(*ptr4); <span class=\"comment\">// ok</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"explicit消除等号的隐式转换\"><a href=\"#explicit消除等号的隐式转换\" class=\"headerlink\" title=\"explicit消除等号的隐式转换\"></a>explicit消除等号的隐式转换</h2><p>[C++ explicit关键字详解 - 矮油~ - 博客园 (cnblogs.com)](<a href=\"https://www.cnblogs.com/rednodel/p/9299251.html#:~:text=C%2B%2B\">https://www.cnblogs.com/rednodel/p/9299251.html#:~:text=C%2B%2B</a> explicit关键字详解 首先%2C C%2B%2B中的explicit关键字只能用于修饰只有一个参数的类构造函数%2C,它的作用是表明该构造函数是显示的%2C 而非隐式的%2C 跟它相对应的另一个关键字是implicit%2C 意思是隐藏的%2C类构造函数默认情况下即声明为implicit (隐式).)</p>\n<h2 id=\"C-const修饰方法\"><a href=\"#C-const修饰方法\" class=\"headerlink\" title=\"C++ const修饰方法\"></a>C++ const修饰方法</h2><p><a href=\"https://blog.csdn.net/a512745183/article/details/52590223\">(248条消息) C++类中const修饰的函数与重载_未来之大神的博客-CSDN博客_c++ const 重载</a></p>\n<p>const方法不能修改成员变量</p>\n<p>const变量只能调用const方法</p>\n<p>带有const的方法和不带有const的方法可以并存，调用时，const对象调用const方法，非const变量调用非const方法</p>\n<h2 id=\"C-的左值右值，左右引用，移动语意及完美转发\"><a href=\"#C-的左值右值，左右引用，移动语意及完美转发\" class=\"headerlink\" title=\"C++的左值右值，左右引用，移动语意及完美转发\"></a>C++的左值右值，左右引用，移动语意及完美转发</h2><p><a href=\"https://zhuanlan.zhihu.com/p/402251966\">谈谈C++的左值右值，左右引用，移动语意及完美转发 - 知乎 (zhihu.com)</a></p>\n<p><img src=\"/pictures/%5DPQOUN4%5DQ$%5DR%25F_J0%5B79J71-1669803907654-8.png\" alt=\"img\"></p>\n<p>一个对象有两个部分：灵魂和躯壳，创建对象的时候会为这个对象分配内存空间这片内存就是灵魂，存放这块内存地址的变量就是躯壳（符号表），正常情况下，灵魂和躯壳是在一起的。</p>\n<p>左值：有名称的，可以获取到存储地址的变量就是左值，可以用&amp;取到地址（有躯干的对象）</p>\n<p>右值：可以获取到值的表达式都可以成为右值，左值也可以作为右值来使用（有灵魂的表达式，1000等无法寻址的字面量，可以理解为只有灵魂）</p>\n<p>右值又可以分为纯右值和将亡值</p>\n<p>纯右值：临时对象或字面量（只有灵魂）</p>\n<p>将亡值：使用move移动构造后，剩下的值就是将亡值，它内部的变量已经被设置为空值，无法再被使用，只剩下了一个空壳，所以叫作将亡值（只有躯壳）</p>\n<p>引用是变量的别名，必须初始化</p>\n<p>左引用：对左值的引用就是左引用（&amp;）</p>\n<p>右引用：对右值的引用就是右引用（&amp;&amp;）</p>\n<p>const T&amp;可以引用右值</p>\n<p>移动语义：将左值变成右值，将内存地址提取出来，将原来存放这片内存地址变量置为空，然后将这片内存的地址作为返回值返回（将灵魂从躯壳中抽离出来）</p>\n<p>完美转发：左值还是左值，右值还是右值（原来是灵魂，现在还是灵魂，原来有躯壳，线程还有躯壳）</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/161039484\">聊聊C++中的完美转发 - 知乎 (zhihu.com)</a></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(T &amp; t)</span></span>&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;左值&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//接受右值，但是t变量本身是会分配内存的，内配内存并接受右值后，变成了左值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(T &amp;&amp; t)</span></span>&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;右值&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//接受右值，但是t变量本身是会分配内存的，内配内存并接受右值后，变成了左值</span></span><br><span class=\"line\"><span class=\"comment\">//move 抽取灵魂，全部变成右值</span></span><br><span class=\"line\"><span class=\"comment\">//forward 利用引用折叠，原来是左值回来的还是左值原来的是右值回来的还是右值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">testForward</span><span class=\"params\">(T &amp;&amp; v)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(v);</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(std::forward&lt;T&gt;(v));</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(std::<span class=\"built_in\">move</span>(v));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> * argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">testForward</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;======================&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">testFoward</span>(x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"C-内存模型\"><a href=\"#C-内存模型\" class=\"headerlink\" title=\"C++内存模型\"></a>C++内存模型</h2><p>堆：new和malloc出来的对象存放在这里</p>\n<p>栈：存放局部变量，函数参数，函数返回地址等</p>\n<p>静态区：全局变量，静态变量，虚函数，全局常量指针</p>\n<p>常量存储区：全局常量，函数指针</p>\n<p>代码区：存放代码</p>\n<h2 id=\"cin输入规则\"><a href=\"#cin输入规则\" class=\"headerlink\" title=\"cin输入规则\"></a>cin输入规则</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x;</span><br><span class=\"line\">    cin&gt;&gt;x;</span><br><span class=\"line\">    <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    cin&gt;&gt;x;</span><br><span class=\"line\">    cout&lt;&lt;x&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于输入整数来说，cin会一直读取，直到遇到第一个非整数字符（整数里包含的字符，也就只有数字）</p>\n<p>例如上面的输入35.8 15.8，得到的是0，因为第一次cin后，x位35，因为遇到了小数点<code>.</code>，此时光标就停留在了小数点这里，第二次cin的时候，第一个遇到的就是小数点，所以一个字符都没有读取，得到的就是0，如果读到的值大于了int的最大值，则得到的是int的最大值，如果小于int的最小值，得到的就是int的最小值，然后后面的内容都不再读取</p>\n<p>同理如果读取的是浮点数，那么会到第一个非浮点字符（数字和小数点）截止。如果这样得到的是正常的数字就返回，如果得到的是小数点开头，则会带上0，如果什么都没有读到就返回0</p>\n<p>例如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">double</span> x,y;</span><br><span class=\"line\">    cin&gt;&gt;x&gt;&gt;y;</span><br><span class=\"line\">    cout&lt;&lt;x&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输入11.11.12</p>\n<p>得到11.11 0.12</p>\n<p>对于char类型，会直接读取一个字符，会跳过空格，回车，制表符</p>\n<p>对于char数组和string类型，会一直读取，直到遇到第一个空格和回车，想读取空格可以使用getline(cin,ss)</p>\n<p>如果读取的字符个数超过了char数组的容量，会超容量读取……</p>\n<p><img src=\"/pictures/image-20221011233123411-1669803907655-9.png\" alt=\"image-20221011233123411\"></p>\n<p>对于cin读取字符会跳过空格和回车的问题，可以使用getchar来读取，也可以使用cin.get</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> c1, c2;</span><br><span class=\"line\">    c1 = cin.<span class=\"built_in\">get</span>();</span><br><span class=\"line\">    cin.<span class=\"built_in\">get</span>(c2);</span><br><span class=\"line\">    cout &lt;&lt; c1 &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; c2 &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>cin内部对get方法进行的重载，不带参数的cin.get()得到的是缓冲区下一个字符的ASCII码值，这里通过隐式类型转换变成了对应char类型的值，而带参数的get(char &amp;)方法，也是读取一个字符，赋值给传入的char变量中</p>\n<p>如果没有遇到文件尾EOF，也没有遇到任何错误，可以使用cin.fail()会返回false,cin.good会返回true，如果遇到了文件尾，cin.eof()会返回true。遇到eof后，再使用cin读入也没有用，在有些OS中，可以使用cin.clear()来清除上面这个不可读入的状态</p>\n<p>cout.put()可以输出一个字符，putchar也可以输出一个字符，传入参数的是字符的ASCII码</p>\n<p>cin.get(ch)以及cin&gt;&gt; 返回值都是cin对象，如果需要bool类型，则调用的是good方法（重载了bool方法）</p>\n<h2 id=\"输出到文件-ofstream-istream\"><a href=\"#输出到文件-ofstream-istream\" class=\"headerlink\" title=\"输出到文件 ofstream istream\"></a>输出到文件 ofstream istream</h2><p>输出文件使用步骤：</p>\n<ol>\n<li>定义输出文件对象ofstream,istream</li>\n<li>调用这个对象的open函数，打开文件，设置输入模式ios:app表示添加，ios:trunc表示清空文件,ios::out表示输出,ios::in表示输出</li>\n<li>像cout和cin一样使用这个对象</li>\n</ol>\n<p><a href=\"https://blog.csdn.net/weixin_44139428/article/details/102813246\">(528条消息) ofstream的使用方法–超级精细_Ψ大鹏的博客-CSDN博客_ofstream</a></p>\n<p>cpp读写文件有两个指针：读文件指针指针和写文件指针，可以实现文件的随机读写</p>\n<p>文件的基本输出</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;你好&quot;</span>;</span><br><span class=\"line\">    string output = <span class=\"string\">&quot;hello world &quot;</span>;</span><br><span class=\"line\">    ofstream fOut;</span><br><span class=\"line\">    fOut.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;D:\\\\CppProjects\\\\test\\\\引用测试\\\\out.txt&quot;</span>, ios::app);</span><br><span class=\"line\">    fOut &lt;&lt; output;</span><br><span class=\"line\">    fOut.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>文件路径可以是字符串字面量，可以是字符串或者字符数组（要以’\\0’结尾）变量</p>\n<p>如果输出失败，检查一下中文乱码问题</p>\n<p><a href=\"https://blog.csdn.net/weixin_43896318/article/details/104700306\">(528条消息) 【C语言】CLion中文乱码问题的解决方案_星拱北辰的博客-CSDN博客_clion中文乱码</a></p>\n<p>c++源文件应当使用GBK编码</p>\n<p>我使用的解决办法：使用管理员权限</p>\n<p><img src=\"/pictures/image-20221012003422515-1669803907655-10.png\" alt=\"image-20221012003422515\"></p>\n<p>使用相对路径：</p>\n<p><img src=\"/pictures/image-20221012004649017-1669803907655-14.png\" alt=\"image-20221012004649017\"></p>\n<p>可以在open里面使用相对路径，但是这个相对路径相对的是执行者所在的目录，直接使用编译器的运行键，文件会输出在编译器的目录下面，而不是项目路径下面。所以想要使用相对路径，可以在控制台使用g++编译，然后运行</p>\n<p>使用ifstream进行输入</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ifstream fin;</span><br><span class=\"line\">    fin.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;in.txt&quot;</span>, ios::in);</span><br><span class=\"line\">    cout&lt;&lt;fin.<span class=\"built_in\">is_open</span>()&lt;&lt;endl; <span class=\"comment\">//判断文件是否打开</span></span><br><span class=\"line\">    cout&lt;&lt;fin.<span class=\"built_in\">eof</span>()&lt;&lt;endl;   <span class=\"comment\">//判断文件是否读到文件末尾</span></span><br><span class=\"line\">    string ss;</span><br><span class=\"line\">    fin &gt;&gt; ss;</span><br><span class=\"line\">    cout &lt;&lt; ss;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还是使用g++编译运行</p>\n<p>同时使用ifstream和ofstream</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ifstream fin;</span><br><span class=\"line\">    ofstream fout;</span><br><span class=\"line\">    fin.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;in.txt&quot;</span>, ios::in);</span><br><span class=\"line\">    fout.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;out.txt&quot;</span>, ios::trunc);</span><br><span class=\"line\">    cout &lt;&lt; fin.<span class=\"built_in\">is_open</span>() &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!fin.<span class=\"built_in\">eof</span>()) &#123;</span><br><span class=\"line\">        string line;</span><br><span class=\"line\">        <span class=\"built_in\">getline</span>(fin, line);</span><br><span class=\"line\">        fout &lt;&lt; line &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>四舍五入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.引入头文件 #include&lt;iomanip&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">2.输出用固定格式  cout&lt;&lt;setiosflags(ios::fixed)&lt;&lt;setprecision(2)&lt;&lt;result&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\">​                                  //将result保留2位小数，四舍五入后输出。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">double</span> x = <span class=\"number\">123.565656</span>;</span><br><span class=\"line\">    ofstream f;</span><br><span class=\"line\">    f.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;out.txt&quot;</span>, ios::trunc);</span><br><span class=\"line\">    f &lt;&lt; <span class=\"built_in\">setprecision</span>(<span class=\"number\">5</span>) &lt;&lt; x &lt;&lt; endl; <span class=\"comment\">//保留5位有效数字</span></span><br><span class=\"line\">    f &lt;&lt; <span class=\"built_in\">setiosflags</span>(ios::fixed) &lt;&lt; <span class=\"built_in\">setprecision</span>(<span class=\"number\">5</span>) &lt;&lt; x &lt;&lt; endl; <span class=\"comment\">//保留5位小数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">123.57</span></span><br><span class=\"line\"><span class=\"comment\">123.56566</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Cpp指针\"><a href=\"#Cpp指针\" class=\"headerlink\" title=\"Cpp指针\"></a>Cpp指针</h2><p>指针就是内存的地址</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int b;</span><br><span class=\"line\">int *a=&amp;b;</span><br></pre></td></tr></table></figure>\n\n<p>int* a存储的是b的内存地址，&amp;b存储的也是内存地址，两者等价</p>\n<p>b和*a得到的都是对应的值，两者也等价</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> *a = <span class=\"keyword\">new</span> <span class=\"type\">int</span>;</span><br><span class=\"line\">    *a = <span class=\"number\">123</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> *b = a;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> b;</span><br><span class=\"line\">    cout &lt;&lt; *a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果两个指针指向同一片内存空间，然后其中一个delete了，另一个指针访问值的时候，得到的会是随机值</p>\n<p>cpp中，指针和数组是等价的，数组数组变量本质上也是指针，所以都可以使用[]，来访问元素，因为[]的实现方式也就是让指针移动对应的偏移量然后再取值，所以本质上是一样的，比如a[0]和*a就是等价的。这对于访问数组元素也同样适用。指针+1，实际上是让指针移动等同于指向类型所占字节数的内存。两者唯一的区别就是指针是一个变量，可以修改它的值。而数组指针是一个常量，不能修改它的值，它永远都指向数组的第一个元素。等价的原因是，cpp解释数组的方式是使用指针算术，对于指针而言，也是使用相同的指针算术，所以两者使用的语法是共通的。对数组变量使用sizeof 得到的是数组元素的大小✖数组长度，而对指针变量使用sizeof得到的是指针变量的大小</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> *a = <span class=\"keyword\">new</span> <span class=\"type\">int</span>;</span><br><span class=\"line\">    *a = <span class=\"number\">123</span>;</span><br><span class=\"line\">    cout &lt;&lt; a[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>为数组动态分配内存可以使用new int[n]，返回的是数组的第一个元素的地址，删除的时候，要用delete[] 来删除，这样删除的就是整个数组所占的内存。使用new []和delete[] 匹配，new和delete匹配，如果两者混着用结果是不可预知的</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> *a = <span class=\"keyword\">new</span> <span class=\"type\">int</span>[<span class=\"number\">12</span>];</span><br><span class=\"line\">    cout &lt;&lt; a[<span class=\"number\">0</span>]; <span class=\"comment\">//未知值</span></span><br><span class=\"line\">    <span class=\"keyword\">delete</span>[] a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"C-强制类型转换\"><a href=\"#C-强制类型转换\" class=\"headerlink\" title=\"C++强制类型转换\"></a>C++强制类型转换</h2><p>可以使用cpp版的 类型()，括号里面是要转换的数据</p>\n<p>也可以使用C语言版的（类型），括号后面跟上要转换的数据</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">char</span>(<span class=\"number\">49</span>) &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">int</span>(<span class=\"string\">&#x27;1&#x27;</span>) &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">double</span>(<span class=\"number\">1</span>) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; (<span class=\"type\">char</span>) <span class=\"number\">49</span> &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; (<span class=\"type\">int</span>) <span class=\"string\">&#x27;1&#x27;</span> &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; (<span class=\"type\">double</span>) <span class=\"number\">1</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不能用char变量存储eof（-1），需要先用int接收，如果不为eof再转换为char类型</p>\n<h2 id=\"C-逻辑运算符\"><a href=\"#C-逻辑运算符\" class=\"headerlink\" title=\"C++逻辑运算符\"></a>C++逻辑运算符</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">1</span> == <span class=\"number\">1</span> <span class=\"keyword\">and</span> <span class=\"number\">2</span> == <span class=\"number\">2</span> <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> <span class=\"number\">3</span> == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;hello world&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以使用&amp;&amp;，||，!来表示与或非，也可以使用and,or,not来表示，两种表示方法是完全等价的</p>\n<h2 id=\"Cpp字符操作\"><a href=\"#Cpp字符操作\" class=\"headerlink\" title=\"Cpp字符操作\"></a>Cpp字符操作</h2><p>cctype中有许多对单个字符的操作，比如判断是不是数字，字母，标点，空白字符，以及变成大写和变成小写</p>\n<p>并且cpp内部对各种基本类型都有变成字符串的to_string方法，以后就不需要我们自己写了！</p>\n<p><img src=\"/pictures/image-20221012212231962-1669803907655-11.png\" alt=\"image-20221012212231962\"></p>\n<h2 id=\"C-数组作为函数的参数\"><a href=\"#C-数组作为函数的参数\" class=\"headerlink\" title=\"C++数组作为函数的参数\"></a>C++数组作为函数的参数</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"type\">int</span> nums[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\">    cout &lt;&lt; nums &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"type\">int</span> *nums)</span> </span>&#123; <span class=\"comment\">//报错</span></span><br><span class=\"line\">    <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\">    cout &lt;&lt; nums &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Hello, World!&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将数组作为函数的参数，实际上传递的是数组首字母的指针（地址）给函数的参数，所以函数参数列表中，使用int[]来接收或者使用int* 实际上的等价的，所以上述代码中不能用这种方式进行方法重载，因为数组变量和指针变量都可以作为参数传入到这两个函数中</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"type\">int</span> nums[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\">    nums++;</span><br><span class=\"line\">    cout &lt;&lt; nums &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Hello, World!&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"built_in\">test</span>(<span class=\"keyword\">new</span> <span class=\"type\">int</span> [<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>数组变量和指针变量的用法几乎完全相同，只是再sizeof和数组变量不能修改上有区别</p>\n<p>函数列表上的int a[]和int* a完全等价，都是指针，都可以修改指向，使用sizeof得到的都是4字节的指针大小</p>\n<p>对于二维数组传递参数，要指明第二维的个数，不然编译器怎么知道每行有多少，每列有多少</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"type\">int</span> nums[][<span class=\"number\">5</span>])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\">    cout &lt;&lt; nums[<span class=\"number\">0</span>][<span class=\"number\">0</span>] &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a[<span class=\"number\">5</span>][<span class=\"number\">5</span>];</span><br><span class=\"line\">    a[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">123</span>;</span><br><span class=\"line\">    <span class=\"built_in\">test</span>(a);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"指针和const\"><a href=\"#指针和const\" class=\"headerlink\" title=\"指针和const\"></a>指针和const</h2><p>定义const的时候加上const 表示不能通过这个指针来修改他所指向的值，包括数组</p>\n<p>const指针可以指向变量，可以指向常量，但是非const指针不能指向const变量（常量），否则就可以通过这个非const指针修改这个常量从而失去了const的意义</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x1 = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> x2 = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"comment\">//    int *p1 = &amp;x2; //非法，不能让非const指针指向const变量</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> *p2 = &amp;x1;</span><br><span class=\"line\">    p2 = &amp;x2; <span class=\"comment\">//const指针可以修改指向</span></span><br><span class=\"line\"><span class=\"comment\">//    *p2 = 3;//但是不能通过这个指针修改数据的值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>const指针可以修改指向，但是不能修改指向数据的值</p>\n<p>对于指向指针的指针，const指针只能可以指向const指针，非const指针只能指向非const指针，不能混着用</p>\n<h2 id=\"Cpp泛型\"><a href=\"#Cpp泛型\" class=\"headerlink\" title=\"Cpp泛型\"></a>Cpp泛型</h2><p>定义泛型可以使用class也可以使用typename两者完全等价</p>\n<p>对于运算后未知的类型（可以转化的类型），可以使用decltype，但其实直接使用auto更加方便</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T1, <span class=\"keyword\">class</span> T2&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">del</span><span class=\"params\">(T1 a, T2 b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">decltype</span>(a - b) c = a - b;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> d = a - b;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于返回值也是泛型运算后的结果，可以使用下面这种格式</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T1, <span class=\"keyword\">class</span> T2&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">add</span><span class=\"params\">(T1 a, T2 b)</span> -&gt; <span class=\"title\">decltype</span><span class=\"params\">(a + b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是后面的<code> -&gt; decltype(a + b)</code>可以省略，结果也是对的</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T1, <span class=\"keyword\">class</span> T2&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">add</span><span class=\"params\">(T1 a, T2 b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实际上，任何返回值都可以用auto，类型申明后也可以用auto，这样编译器都可以自动帮我们推断类型</p>\n<p>如果我们想要为泛型构造一个特例，可以使用函数具象化的语法</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T1, <span class=\"keyword\">class</span> T2&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">add</span><span class=\"params\">(T1 a, T2 b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;&gt; <span class=\"keyword\">auto</span> <span class=\"built_in\">add</span>&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在函数开头加上template&lt;&gt;，表示这是函数具象化的一种，然后需要在函数名后申明具象化之后的泛型</p>\n<p>我们在调用泛型方法的时候，编译器会根据传入的参数自动将这个方法隐式实例化，我们也可以显式指明泛型的类型</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T1, <span class=\"keyword\">class</span> T2&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">add</span><span class=\"params\">(T1 a, T2 b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">add</span>&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;(<span class=\"number\">1</span>, <span class=\"number\">1.2</span>) &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>显式指明类型后，double会向int进行类型转换（向下转换），如果不实例化方法，第二个会将1.2作为double类型的变量传入</p>\n<p>对于没有参数的方法，不实例化无法进行调用，因为编译器不知道传入的泛型是啥</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    T x;</span><br><span class=\"line\">    cin &gt;&gt; x;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">read</span>&lt;<span class=\"type\">int</span>&gt;() &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如上面这段代码，如果不加上<code>&lt;int&gt;</code>就会报错</p>\n<p>下面这个具象化一个泛型方法的语法，书上有，但是实际上测试的时候会编译报错，可能这种写法已经被抛弃了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//这个语句被编译器抛弃了</span><br><span class=\"line\">template auto add&lt;int, int&gt;(int,int);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Cpp的多文件编写\"><a href=\"#Cpp的多文件编写\" class=\"headerlink\" title=\"Cpp的多文件编写\"></a>Cpp的多文件编写</h2><p>cpp的文件结构一般按照如下策略进行划分</p>\n<ul>\n<li>头文件，包含结构申明和函数原型</li>\n<li>源文件，包含函数原型的实现</li>\n<li>源文件，调用函数的函数</li>\n</ul>\n<p>不要在头文件里面定义方法的实现和创建变量，因为一旦这个变量被多个源文件引用后，创建变量的行为会发生冲突，编译器会告诉你变量或者方法被重复创建（如果允许的话，就可能会出现同名但是实现不同的方法，编译器就不知道要调用哪一个，但是只申明函数原型的话就不会产生冲突）</p>\n<p>头文件里面的内容一般包含如下内容</p>\n<ul>\n<li>函数原型</li>\n<li>const变量</li>\n<li>内联函数</li>\n<li>泛型申明</li>\n<li>结构申明</li>\n<li>类申明</li>\n</ul>\n<p>申明泛型不会被编译，只会告诉编译器如何去生成代码，所以可以被重复包含</p>\n<p>结构申明，类申明并不创建变量，所以可以申明</p>\n<p>常量和内联函数有特殊的规则，所以可以包含</p>\n<p>include&lt;&gt;会直接从cpp系统目录里面找，而include””会先从用户目录下面找，再从系统目录下面找</p>\n<p>一个头文件只能被包含一次，为了防止一个头文件被重复包含（一个头文件可能包含了另一个头文件）可以使用下面这个技术</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> __test_define</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __test_define</span></span><br><span class=\"line\"><span class=\"comment\">//要定义的头文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<p>#ifndef表示，如果define了后面那个标识符，就直接跳到#endif，如果没有被定义则不跳过，执行后面的代码</p>\n<p>我们在创建头文件的时候，将头文件的内容都放在#ifndef和#endif之间，并#define一个能代表这个头文件的变量，这样就可以防止头文件被重复包含，这样就可以保证一个头文件被多次引用后，头文件不会被重复引入。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by 黎明终点x on 2022/10/16.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> LEARN_FILE1_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LEARN_FILE1_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">A</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">getA</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(A a)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">//LEARN_FILE1_H</span></span></span><br></pre></td></tr></table></figure>\n\n<p>比如一个头文件可以像上面这样写</p>\n<p>这样，在其他文件中，无论这个文件被引入多少次，拼接到文件里的只有一次</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;file1.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;file1.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;file1.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;file2.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;test start&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(&#123;<span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">    <span class=\"built_in\">print2</span>(&#123;<span class=\"number\">2</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果不加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ifndef LEARN_FILE1_H</span><br><span class=\"line\">#define LEARN_FILE1_H</span><br><span class=\"line\">……</span><br><span class=\"line\">#endif //LEARN_FILE1_H</span><br></pre></td></tr></table></figure>\n\n<p>这个技术等价于#pragma once</p>\n<p>上面的代码就会报错，提示重复引入的头文件</p>\n<p>不能重复引入头文件的原因是同一个头文件在编译之前会重复插入到最后的可执行文件里面，导致编译的时候出现各类重复定义的错误。而不是cpp编译会检测相同头文件的#include语句。通过#ifndef，保证了一个头文件编译的时候只会引入一次，从而防止了这个错误。但是即便使用上面这个技术，也不能在头文件里面直接申明函数的实现，只能申明函数的原型，也不能定义普通变量，这个可能是因为#ifndef对函数申明不生效，并且函数的原型可以重复定义，不会出问题，比如如下代码可以通过编译</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;file1.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;file1.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;file1.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;test start&quot;</span> &lt;&lt; xxxx &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(&#123;<span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是变量和已经实现的方法重复定义后就会报错</p>\n<p>但是结构体和类里面的函数可以直接实现，头文件可以使用static来定义全局变量，也可以使用inline来定义函数，这些都放在#ifndef和#endif里面，就可以解决上面这些问题</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by 黎明终点x on 2022/10/16.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> LEARN_FILE1_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LEARN_FILE1_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">A</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">getA</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> xxxx;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(A a)</span> </span>&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; a.<span class=\"built_in\">getA</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">//LEARN_FILE1_H</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>出了入口cpp文件外，每个cpp源文件都要有一个同名的.h头文件来管理，头文件里面申明的函数原因，以及类方法的原型，只能在<strong>同名</strong>的cpp源文件里面实现，没有头文件的cpp文件是无法使用里面的方法的，头文件实际上是申明了这个源文件可以导出的，供其他文件使用的内容，如果没有头文件则可以理解为，其他文件不能使用这个cpp文件，也就没有了意义。没有头文件的那个cpp文件就是主文件，其他文件在编译的时候会先将链接起来，得到.o文件，然后再将各个.o文件连接起来编译，得到最后的可执行文件。</p>\n<h2 id=\"muable\"><a href=\"#muable\" class=\"headerlink\" title=\"muable\"></a>muable</h2><p>表示是可以修改的，用于解除const的限定</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">AB</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">mutable</span> <span class=\"type\">int</span> b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> AB ab = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\">    ab.a = <span class=\"number\">1</span>;<span class=\"comment\">//报错</span></span><br><span class=\"line\">    ab.b = <span class=\"number\">2</span>;<span class=\"comment\">//不报错</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>加上mutable后，就表示这个成员变量是可以修改的，哪怕整体被设置成了const类型</p>\n<h2 id=\"内部连接性和外部连接性\"><a href=\"#内部连接性和外部连接性\" class=\"headerlink\" title=\"内部连接性和外部连接性\"></a>内部连接性和外部连接性</h2><h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>普通的成员变量定义后，外部文件可以通过extern来引用这个变量，这个变量全局只有一份，所有使用这个变量的文件共享同一块内存地址，这个特性叫外部连接性</p>\n<p>想使用其他文件中定义的变量必须申明为extern 的来引用其他文件的这个变量，否则会报错重复定义</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//file1.cpp文件中：</span><br><span class=\"line\">int xxx=5;</span><br><span class=\"line\">//main.cpp文件中</span><br><span class=\"line\">extern int xxx;</span><br><span class=\"line\">cout&lt;&lt;xxx&lt;&lt;endl; //得到5</span><br></pre></td></tr></table></figure>\n\n<p>而被申明为static的变量和被申明为const的变量，每个cpp文件都有一组，互不干扰，这个特性叫做内部连接性</p>\n<p>比如下面这段代码，在file2.h中定义了一个<code>static int xxx;</code>显然这个变量初始值是0，main.cpp和file1.cpp都引入file2.h，这样在这两个cpp里面都能直接使用xxx变量，file1.cpp中的print函数修改了xxx，main.cpp直接输出，最后得到的结果是1 0，证明了这两个文件的static变量是相互独立，互不干扰的（底层实现可以理解为加上了文件名作为前缀）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file1.cpp</span></span><br><span class=\"line\"><span class=\"comment\">// Created by 黎明终点x on 2022/10/16.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> LEARN_FILE1_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LEARN_FILE1_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">//LEARN_FILE1_H</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// file1.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;file1.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;file2.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    xxx++;</span><br><span class=\"line\">    std::cout &lt;&lt; xxx &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//file2.h</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by 黎明终点x on 2022/10/16.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> LEARN_FILE2_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LEARN_FILE2_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">//LEARN_FILE2_H</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> xxx;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//main.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;file2.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;file1.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>();    <span class=\"comment\">//1</span></span><br><span class=\"line\">    cout &lt;&lt; xxx;<span class=\"comment\">//0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果其他文件申明了外部连接性的变量，自己又申明了同名的内部连接性变量，会使用内部连接性的变量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//file1.cpp文件中：</span><br><span class=\"line\">int xxx=5;</span><br><span class=\"line\">//main.cpp文件中</span><br><span class=\"line\">static int xxx;</span><br><span class=\"line\">cout&lt;&lt;xxx&lt;&lt;endl; //得到0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><p>总结一下，一个文件中想使用其他文件的变量，可以有以下两种方式</p>\n<ul>\n<li>在头文件里面定义static变量或者const变量，cpp文件引入这个头文件就能使用这些变量，每个文件的作用域就是这个文件，文件之间互不干扰（内部连接性）</li>\n<li>在cpp源文件定义变量，其他文件使用extern引入，这种变量全局只有一份，所有文件中的变量共享一块内存空间（外部连接性）</li>\n</ul>\n<p>为什么其他cpp文件定义的变量我这个文件可以使用？</p>\n<p>因为编译的时候这些文件都会先和头文件连接（引入头文件的变量可以使用），然后再彼此连接在一起（其他cpp文件定义的变量可以使用），编译成机器语言之前，这些变量都按照各自的规则进行转换，放到了同一个文件中，所以再理论上也是可以互联互通的</p>\n<p>对于函数而言也有类似的特性，只是我们不允许在函数里面定义函数，所以函数定义出来都默认是外部连接特性的，于是我们引用其他文件的函数也有两种方式</p>\n<ul>\n<li>使用前定义这个函数的原型，或者引入带有函数原型的头文件（函数原型可以重复定义，不用担心重复引入），这个函数的具体实现可以放在参与编译的任何cpp文件中，然后都可以正常使用这个函数（函数默认是外部连接性的，在函数原型前面加上extern或者不加都是可以的）</li>\n</ul>\n<p>如果不希望这个函数被其他文件引用，可以使用static关键字申明，这样不同文件就可以定义同名函数，互不冲突，一个文件只能调用自己的static函数</p>\n<h2 id=\"创建struct变量的方式\"><a href=\"#创建struct变量的方式\" class=\"headerlink\" title=\"创建struct变量的方式\"></a>创建struct变量的方式</h2><p>使用大括号进行创建</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;file1.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ABC</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a, b, c;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ABC abc1&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">    ABC abc2&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\">    ABC abc3&#123;&#125;;</span><br><span class=\"line\">    ABC abc4=<span class=\"built_in\">ABC</span>();</span><br><span class=\"line\">    ABC *abc5 = <span class=\"keyword\">new</span> ABC&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">    cout &lt;&lt; abc4.a &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用大括号进行创建其实是按顺序指定结构体里面的各个成员变量的值，从前往后按定义的顺序依次赋值，后面没有被赋值的变量会被赋予零值</p>\n<p>不使用大括号申明的变量（abc4），所有成员的值都是未定义状态</p>\n<p>如果使用括号来创建变量实际上是创建了一个方法？反正不是创建变量！</p>\n<p>想要调用构造方法来创建结构体变量，可以使用<code>ABC abc4=ABC();</code>这样的语法</p>\n<p>也可以使用new运算符来创建，使用方式和上面一样，只是分配内存的位置由栈变成动态存储区</p>\n<p>new运算符其实使用了一个语法糖的函数，使用typedef进行了简化</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new int -&gt; new(sizeof(int))</span><br><span class=\"line\">new int[40] -&gt; new(40*sizeof(int))</span><br></pre></td></tr></table></figure>\n\n<p>new运算符还可以指定需要分配的内存地址，来自己进行内存管理，使用方法为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new(006E4AB0)int[20]</span><br><span class=\"line\">new(006E4AB0)int</span><br><span class=\"line\">new(内存地址)变量类型</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h2><p>声明域：可以定义变量，函数的区域，局部变量的申明域是代码块，全局变量是申明域是函数的外面（申明一个引用外部文件的变量或者使用头文件里面的静态变量，也当成全局变量）</p>\n<p>潜在作用域：从定义变量开始到声明域的结尾，这个范围内的变量可能会在某些区域内被其他同名变量覆盖（隐藏）</p>\n<p>作用与：未被隐藏的潜在作用域</p>\n<p>命名空间可以定义在全局或者其他命名空间里面，可以在里面定义任意多的变量，函数，类型等，命名空间之间不会相互干扰，定义后如果不使用命名空间，里面定义的内容就不会干扰我们定义其他变量，函数等（具体的实现可以理解名字为加上了命名空间的前缀）</p>\n<p>全局内部的其他变量可以理解为在一个空命名空间里面，可以使用::来访问</p>\n<p><code>using namespace xxx;</code>后，会覆盖前面同名的全局（局部）变量，后面定义的全局（局部）变量也可以覆盖命名空间中引入的变量</p>\n<p>放在全局表示命名空间中定义的内容全局可用，放在代码块里面表示这个代码块里面可用</p>\n<p>而<code>using xxx::yyy</code>不会覆盖前面定义的同名内容，而是直接报错</p>\n<p>命名空间可以嵌套，可以通过赋值起别名</p>\n<p>未命名的命名空间不能被其他文件使用，可以实现类似static的功能</p>\n<h2 id=\"类的构造函数\"><a href=\"#类的构造函数\" class=\"headerlink\" title=\"类的构造函数\"></a>类的构造函数</h2><p>创建类对象不能直接使用{}来创建，必须有对应的构造函数来能这么写</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;file1.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ABC</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">ABC</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">ABC</span>(<span class=\"type\">int</span> i, <span class=\"type\">int</span> i1) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> a, b, c;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">ABC</span>(<span class=\"type\">int</span> i, <span class=\"type\">int</span> i1, <span class=\"type\">int</span> i2) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ABC abc1&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">    ABC abc2&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\">    ABC abc3&#123;&#125;;</span><br><span class=\"line\">    ABC abc4; <span class=\"comment\">//不一定是0值</span></span><br><span class=\"line\">    ABC *abc5 = <span class=\"keyword\">new</span> ABC&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">    cout &lt;&lt; abc4.a &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也可以使用小括号来调用构造函数，两者完全等价，只是写法有所不同</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;file1.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ABC</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">ABC</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">ABC</span>(<span class=\"type\">int</span> i, <span class=\"type\">int</span> i1) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> a, b, c;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">ABC</span>(<span class=\"type\">int</span> i, <span class=\"type\">int</span> i1, <span class=\"type\">int</span> i2) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ABC abc1 = <span class=\"built_in\">ABC</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">    ABC abc2 = <span class=\"built_in\">ABC</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    ABC abc3=<span class=\"built_in\">ABC</span>();</span><br><span class=\"line\">    ABC abc4;</span><br><span class=\"line\">    ABC *abc5 = <span class=\"keyword\">new</span> <span class=\"built_in\">ABC</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">    cout &lt;&lt; abc4.a &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也就是说，创建同一个对象有下面这些写法</p>\n<p><code>ABC abc1 = ABC(1, 2, 3) &lt;=&gt;ABC abc1&#123;1,2,3&#125;&lt;=&gt;ABC abc1(1, 2, 3)&lt;=&gt; ABC abc1=&#123;1,2,3&#125; </code></p>\n<p>像分配内存在公共存储区可以使用<code>ABC abc1 = new ABC(1, 2, 3) &lt;=&gt;ABC abc1 = new ABC&#123;1, 2, 3&#125; </code></p>\n<p>注意，不能使用<code>ABC abc1()</code>来调用无参构造函数，因为cpp会把它视为方法原型</p>\n<p>一个对象申明为const表示这个对象的成员变量，不能被构造函数以外的函数修改，如果在函数后面加上const，表示这个函数不会修改成员变量。所以const对象不能调用非const方法，因为非const方法可能会修改成员变量，而非const对象可以调用任意方法</p>\n<p>对于只有一个参数的构造函数，可以使用赋值号来调用构造函数创建对象，这种行为也叫做赋值构造</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;file1.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ABC</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> a;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">ABC</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">ABC</span>(<span class=\"type\">int</span> a) : <span class=\"built_in\">a</span>(a) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;被调用1&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">ABC</span>(<span class=\"type\">double</span> a) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;a = a;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;被调用2&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ABC a = <span class=\"number\">1</span>; <span class=\"comment\">//被调用1</span></span><br><span class=\"line\">    ABC b = <span class=\"number\">1.0</span>; <span class=\"comment\">//被调用2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意：只有一个参数的构造函数以及有多个参数但是其他参数有默认值的构造函数都可以使用赋值号调用构造函数创建对象，会根据赋值号右边的值来决定使用哪个构造函数</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ABC</span>(<span class=\"type\">int</span> a) : <span class=\"built_in\">a</span>(a) &#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;被调用1&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">ABC</span>(<span class=\"type\">int</span> &amp;a) : <span class=\"built_in\">a</span>(a) &#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;被调用1&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">ABC</span>(<span class=\"type\">int</span> &amp;&amp;a) : <span class=\"built_in\">a</span>(a) &#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;被调用1&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于上面三种构造函数，首先第一种写法不能和第二和第三种写法同时存在，否则调用构造函数时会有歧义（如果不调用的话，编译也不会出错）</p>\n<h2 id=\"对象数组\"><a href=\"#对象数组\" class=\"headerlink\" title=\"对象数组\"></a>对象数组</h2><p>创建对象数组可以有两种方式：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ABC abc[<span class=\"number\">4</span>];</span><br><span class=\"line\">ABC abc2[]=&#123;<span class=\"built_in\">ABC</span>(<span class=\"number\">1</span>)&#125;;</span><br><span class=\"line\">ABC abc3[]=&#123;ABC&#123;<span class=\"number\">1</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用类似<code>ABC abc[4];</code>的语法，调用的是类的无参构造函数（所以要保证有无参构造函数）</li>\n<li>使用初始化列表的方式，其中每个元素都可以选择自己的构造函数来创建对象</li>\n</ul>\n<h2 id=\"类的作用域\"><a href=\"#类的作用域\" class=\"headerlink\" title=\"类的作用域\"></a>类的作用域</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ABC</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> a;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> xx[b]; <span class=\"comment\">//错误</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在全局里面创建常量b，然后作为数组长度是可以的，但是对于类不行，因为类只是一个定义，在创建对象前不占用存储空间，所以数组不能将b替换成具体的数字，所以不能按照这种方式来定义</p>\n<p>解决方式有两种</p>\n<ul>\n<li>使用enum</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ABC</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">enum</span> &#123;</span><br><span class=\"line\">        b = <span class=\"number\">5</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> xx[b];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这么做后，编译器会在编译的时候，将b替换成5</p>\n<ul>\n<li>使用static const</li>\n</ul>\n<p>其实类的定义保存静态区里面，使用static后，这个成员对象就不保存在对象中，而是保存在静态区里面，因而编译器在创建对象之前，可以获知数组的长度，从而可以创建</p>\n<h2 id=\"类的继承\"><a href=\"#类的继承\" class=\"headerlink\" title=\"类的继承\"></a>类的继承</h2><p>cpp允许基类的引用或者指针指向派生类，而调用方法时，使用的是基类方法还是派生类方法则有以下规则：</p>\n<ul>\n<li>如果方法加上了virtual，则通过引用，指针，对象调用的方法都是对象类型的方法</li>\n<li>如果没有加上virtual，则通过引用，指针调用的方法是引用，指针的类型，而通过对象调用的则是自己的方法</li>\n</ul>\n<p>子类在调用父类方法时，要加上父类的类型::来限定使用哪个类的方法</p>\n<p>析构函数必须是virtual的，因为析构函数是释放对象内容的一些行为，应该和实际的对象绑定在一起，而不是指针类型，对于同一种对象而言，任何时候都应该调用自己的析构函数</p>\n<p>派生类如果定义和基类同名的方法，不会形成两个重载的函数，派生类的函数会隐藏基类的函数</p>\n<p>返回类型协变：基类的返回值是基类或者基类的引用，派生类对于相同的方法返回改为了派生类或者派生类的引用，这种情况，基类方法不会被隐藏</p>\n<h3 id=\"三种继承方式\"><a href=\"#三种继承方式\" class=\"headerlink\" title=\"三种继承方式\"></a>三种继承方式</h3><p>protect的成员变量可以被派生类访问，但是不能被外部访问</p>\n<p>如果使用共有继承：<code>class Son : public Base &#123;&#125;</code>，基类的私有成员就还是私有，共有成员就还是共有</p>\n<p>如果使用私有继承：<code>class Son : private Base</code>，基类的所有成员变量和方法都变成私有（默认就是私有）（使用private继承的派生类可以访问，因为是作为直接派生类的private成员，所以只有直接派生类可以访问，外部和间接子类都不能访问）</p>\n<p>如果使用保护继承：<code>class Son : protected Base</code>，基类所有成员都作为保护成员（所有派生类可以访问，外部不能访问）</p>\n<p>只有在共有继承的时候，基类指针才能指向子类</p>\n<h3 id=\"方法隐藏\"><a href=\"#方法隐藏\" class=\"headerlink\" title=\"方法隐藏\"></a>方法隐藏</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;vector&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;file1.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> x;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;base test1&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;base test2&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Son</span> : Base &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">//    void test() &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//        cout &lt;&lt; &quot;son test1&quot; &lt;&lt; endl;</span></span><br><span class=\"line\">    <span class=\"comment\">//    &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//    void test(int x) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        cout &lt;&lt; &quot;son test2&quot; &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"type\">double</span> x)</span> </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;son test2&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">test</span>();<span class=\"comment\">//被重载的test隐藏了，所以不能调用基类的test方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Son son;</span><br><span class=\"line\">    son.<span class=\"built_in\">test2</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果派生类中出现了和基类同名的方法，基类所有重载的同名方法都会被隐藏，派生类和后续的派生类，在使用同名的方法时，都无法直接使用基类的方法，想要使用可以这样：<code>Base::test()</code>，这样就可以指定访问哪个类的方法</p>\n<p>外部成员可以这么访问<code>son.Base::test()</code>，前提是要有访问权限</p>\n<h3 id=\"override和final\"><a href=\"#override和final\" class=\"headerlink\" title=\"override和final\"></a>override和final</h3><p>对于虚方法，我们可以加上override来表示重写了一个基类方法。对于非虚方法，是按照指针类型来调用，用的哪个方法很明显，不需要加上这个来提醒自己。一个类的方法加上virtual，表示这个作为指针的类型时，具体调用这个方式时，调用的是实际的类的方法</p>\n<p>相反的，final可以声明一个方法不能被重写</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;vector&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> x;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;base test2&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Son</span> : <span class=\"keyword\">public</span> Base &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;son test1&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;son test2&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//    void test(double x) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//        cout &lt;&lt; &quot;son test2&quot; &lt;&lt; endl;</span></span><br><span class=\"line\">    <span class=\"comment\">//    &#125;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Base *base = <span class=\"keyword\">new</span> <span class=\"built_in\">Son</span>();</span><br><span class=\"line\">    base-&gt;<span class=\"built_in\">test</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Cpp函数调用\"><a href=\"#Cpp函数调用\" class=\"headerlink\" title=\"Cpp函数调用\"></a>Cpp函数调用</h2><p>函数的返回值不放在栈中，一般会放在寄存器里面或者内存中的某块地址（但反正不是栈，如果是栈很多问题就无法解释）</p>\n<p>函数执行完后的返回值是一个右值，这一行代码执行完就会被释放</p>\n<h2 id=\"Cpp类的默认行为（移动构造，拷贝构造）\"><a href=\"#Cpp类的默认行为（移动构造，拷贝构造）\" class=\"headerlink\" title=\"Cpp类的默认行为（移动构造，拷贝构造）\"></a>Cpp类的默认行为（移动构造，拷贝构造）</h2><p>创建一个类A</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    string name;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">A</span><span class=\"params\">(<span class=\"type\">const</span> string &amp;name)</span> : name(name) &#123;</span></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;调用拷贝构造函数  &quot;</span> &lt;&lt; name &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">A</span><span class=\"params\">(<span class=\"type\">const</span> string &amp;&amp;name)</span></span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;调用移动构造函数  &quot;</span> &lt;&lt; name &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">A</span>() &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;调用默认构造函数&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    A &amp;<span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> A &amp;abc) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;调用拷贝构造函数&quot;</span> &lt;&lt; name &lt;&lt; endl;</span><br><span class=\"line\">        name = abc.name;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">virtual</span> ~<span class=\"built_in\">A</span>() &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;调用析构函数  &quot;</span> &lt;&lt; name &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setName</span><span class=\"params\">(<span class=\"type\">const</span> string &amp;name)</span> </span>&#123;</span><br><span class=\"line\">        A::name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>我们想从一个方法中拿到一个对象</p>\n<p>下面这个做法是错误的，因为变量a在函数结束后会退栈销毁掉，而引用本质上保存的是变量是地址，变量不存在了，地址也就没有意义，所以下面返回的是未定义的值</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">A&amp; <span class=\"title\">getA</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    A a;</span><br><span class=\"line\">    a.<span class=\"built_in\">setName</span>(<span class=\"string\">&quot;初始参数&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以应该改成下面这种写法</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">A <span class=\"title\">getA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    A a;</span><br><span class=\"line\">    a.<span class=\"built_in\">setName</span>(<span class=\"string\">&quot;初始参数&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这么改后，因为返回值会单独占据内存中的一块区域，函数返回的时候，会先将a变量拷贝到那块临时区域，然后将地址返回到原来的函数，这样函数结束后，a变量会销毁，但是拷贝还在，所以外面函数拿到的其实是这个拷贝的对象。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">getA</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是这样得到的对象也只是一个临时值，这一行代码结束后，这个临时的对象也就不再存在，这个临时的变量也是我们所说的右值。如果返回值不被使用也就不会被拷贝。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;vector&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;file1.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    string name;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">A</span>(<span class=\"type\">const</span> A &amp;&amp;name) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;调用移动构造函数  &quot;</span> &lt;&lt; name.name &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">A</span>() &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;调用默认构造函数&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">A</span>(<span class=\"type\">const</span> A &amp;a) : <span class=\"built_in\">name</span>(a.name) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;调用拷贝构造函数  &quot;</span> &lt;&lt; name &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    A &amp;<span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> A &amp;abc) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;调用复制运算符&quot;</span> &lt;&lt; name &lt;&lt; endl;</span><br><span class=\"line\">        name = abc.name;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">virtual</span> ~<span class=\"built_in\">A</span>() &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;调用析构函数  &quot;</span> &lt;&lt; name &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setName</span><span class=\"params\">(<span class=\"type\">const</span> string &amp;name)</span> </span>&#123;</span><br><span class=\"line\">        A::name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">const</span> string &amp;<span class=\"title\">getName</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//A &amp;getA() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//    A *a = new A();</span></span><br><span class=\"line\"><span class=\"comment\">//    a-&gt;setName(&quot;初始参数&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//    return *a;</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">A <span class=\"title\">getA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    A a;</span><br><span class=\"line\">    a.<span class=\"built_in\">setName</span>(<span class=\"string\">&quot;xxx&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">A <span class=\"title\">useA</span><span class=\"params\">(<span class=\"type\">const</span> A &amp;a)</span> </span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;使用A:&quot;</span> + a.<span class=\"built_in\">getName</span>() &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;main start&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"built_in\">useA</span>(<span class=\"built_in\">getA</span>());</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;main end&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果返回的对象在函数结束后会销毁，就不拷贝，返回这个要销毁的对象<br>如果函数结束后不销毁，则调用拷贝构造创建一个对象返回</p>\n<p>这个其实是编译器帮我们做的优化，这样我们就不用编写移动构造</p>\n<p>（const A&amp;不能作为A&amp;返回，变量当成常量没有风险，反过来就不一定了）</p>\n<h2 id=\"constexpr-申明常量表达式\"><a href=\"#constexpr-申明常量表达式\" class=\"headerlink\" title=\"constexpr 申明常量表达式\"></a>constexpr 申明常量表达式</h2><p>申明变量的时候可以加上constexpr，表示计算这个变量只需要常量，这样这个值就可以在编译期计算出来</p>\n<h2 id=\"使用CLION创建项目的时候，不要有中文路径\"><a href=\"#使用CLION创建项目的时候，不要有中文路径\" class=\"headerlink\" title=\"使用CLION创建项目的时候，不要有中文路径\"></a>使用CLION创建项目的时候，不要有中文路径</h2><h2 id=\"CMAKE语法\"><a href=\"#CMAKE语法\" class=\"headerlink\" title=\"CMAKE语法\"></a>CMAKE语法</h2><p><a href=\"https://zhuanlan.zhihu.com/p/315768216\">cmake常用命令的一些整理 - 知乎 (zhihu.com)</a></p>\n<h2 id=\"高斯白噪声\"><a href=\"#高斯白噪声\" class=\"headerlink\" title=\"高斯白噪声\"></a>高斯白噪声</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iterator&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;random&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Example data</span></span><br><span class=\"line\">    std::vector&lt;<span class=\"type\">double</span>&gt; data = &#123;<span class=\"number\">1.</span>, <span class=\"number\">2.</span>, <span class=\"number\">3.</span>, <span class=\"number\">4.</span>, <span class=\"number\">5.</span>, <span class=\"number\">6.</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Define random generator with Gaussian distribution</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">double</span> mean = <span class=\"number\">0.0</span>;<span class=\"comment\">//均值</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">double</span> stddev = <span class=\"number\">0.1</span>;<span class=\"comment\">//标准差</span></span><br><span class=\"line\">    std::default_random_engine generator;</span><br><span class=\"line\">    <span class=\"function\">std::normal_distribution&lt;<span class=\"type\">double</span>&gt; <span class=\"title\">dist</span><span class=\"params\">(mean, stddev)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Add Gaussian noise</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; x : data) &#123;</span><br><span class=\"line\">        x = x + <span class=\"built_in\">dist</span>(generator);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Output the result, for demonstration purposes</span></span><br><span class=\"line\">    std::<span class=\"built_in\">copy</span>(<span class=\"built_in\">begin</span>(data), <span class=\"built_in\">end</span>(data), std::<span class=\"built_in\">ostream_iterator</span>&lt;<span class=\"type\">double</span>&gt;(std::cout, <span class=\"string\">&quot; &quot;</span>));</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"emplace-back和push-back的区别\"><a href=\"#emplace-back和push-back的区别\" class=\"headerlink\" title=\"emplace_back和push_back的区别\"></a>emplace_back和push_back的区别</h2><p>emplace_back放入的是移动构造后得到的对象，接收右值，调用移动构造函数</p>\n<p>push_back放入的是拷贝构造得到的对象，接收左值，调用拷贝构造函数</p>\n<h2 id=\"deque支持随机访问\"><a href=\"#deque支持随机访问\" class=\"headerlink\" title=\"deque支持随机访问\"></a>deque支持随机访问</h2><p>deque底层是<code>map&lt;int,vector&gt;</code>，使用这样的一个数据结果实现双端队列</p>\n<p><a href=\"http://c.biancheng.net/view/6908.html\">C++ STL deque容器底层实现原理（深度剖析） (biancheng.net)</a></p>\n<p><img src=\"/pictures/image-20221025020644091-1669803907655-13-1669804077621-23.png\" alt=\"image-20221025020644091\"></p>\n<p>deque支持随机访问，但是不能随机插入，只能添加或者删除队头和队尾的元素，这些操作的复杂度都是O(1)，相当于将一块连续的数组切分成了多个长度固定的数组，start迭代器记录第一个元素的起始位置，第一个数组的起始地址，第一个数组的中止地址，第一个map指针的地址，finish迭代器，记录最后一个元素的位置，最后一个数组的起始地址，终止地址，存放这个地址的map结点</p>\n<p>这样我们就可以知道第一个元素是啥，最后一个元素是啥了，删除后，迭代器里面存放的指针就往中间移动一个，添加元素后就在添加完成后，指针往外面移动一格，所以这些操作都是O(1) 的。如果第一个数组满了，就在前面再申请一个数组，继续存放元素，更新start迭代器的指向，在后面添加也是一样的，都是O(1)的复杂度。</p>\n<p>对于随机访问，由于每个数组的长度都是固定的，很容易根据下标，确定要访问的元素在哪个数组的哪个位置，从而实现O(1)随机访问</p>\n<h2 id=\"智能指针\"><a href=\"#智能指针\" class=\"headerlink\" title=\"智能指针\"></a>智能指针</h2><p>为什么要有智能指针？</p>\n<p>使用普通的指针，一方面我们可能会忘记delete掉申请的内存，另一方面，如果使用指针的过程中出现异常，可能会导致delete的那条代码没有执行，导致内存泄露，所以可以使用智能指针来实现，指针指针是实现了指针功能的类对象，如果函数出现异常会调用对象的析构函数释放内存，把地址值赋值给指针指针，就不需要我们来释放内存，由编译器调用析构函数自己完成。智能指针在<code>&lt;memory&gt;</code>里面。智能指针不能用于非堆内存，只能传入<code>new</code>出来的内存块的地址。如果传入非堆内存，就会delete非堆地址，就会报错。</p>\n<p>智能指针可以和其他指针一起正常使用，那么就可以像指针一样赋值给其他智能指针对象，这样的话就会有问题。如果智能指针只是单纯在析构函数里面delete掉内存的话，就会出现同一块内存被重复delete的问题，解决这个问题的方案有三种</p>\n<ul>\n<li>赋值的时候进行深拷贝</li>\n<li>不允许赋值 <code>unique_ptr</code></li>\n<li>赋值的时候，转移所有权 <code>auto_ptr</code></li>\n<li>采用引用计数 <code>share_ptr</code></li>\n</ul>\n<p><code>unique_ptr</code>禁止了拷贝赋值，但是允许了移动赋值（可以接收函数的返回值）</p>\n<p><code>auto_ptr</code>是在拷贝赋值中，转移对象的所属权，原来的智能指针对象会变成“悬挂的指针”，里面原生的指针会变成空指针，从而不能解引用来获取值</p>\n<p><code>unique_ptr</code>在编译期禁止了赋值这种危险的行为，所以比<code>auto_ptr</code>更加安全。如果我们确实需要进行<code>unique_ptr</code>的赋值操作，转移内容的所属权，可以使用move()将左值变成右值即可</p>\n<p><code>share_ptr</code>则使用引用计数来共享内容的所属权，使用起来更加方便</p>\n<p><code>auto_ptr</code>被废弃</p>\n<p>使用智能指针unique</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WEBRTC_POSIX</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">unique_ptr&lt;string&gt; <span class=\"title\">sp</span><span class=\"params\">(<span class=\"keyword\">new</span> string(<span class=\"string\">&quot;123&quot;</span>))</span></span>;</span><br><span class=\"line\">    unique_ptr&lt;string&gt; sp2&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">string</span>(<span class=\"string\">&quot;234&quot;</span>)&#125;;</span><br><span class=\"line\">    cout &lt;&lt; *sp &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; *sp2 &lt;&lt; endl; <span class=\"comment\">//123 234</span></span><br><span class=\"line\">    <span class=\"comment\">//    sp = sp2; 被禁止，编译报错</span></span><br><span class=\"line\">    sp = <span class=\"built_in\">move</span>(sp2); <span class=\"comment\">//允许，但是sp2就没有用了</span></span><br><span class=\"line\">    cout &lt;&lt; *sp &lt;&lt; endl; <span class=\"comment\">//234</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>share_ptr</code>在进行赋值前，如果原来已经有指向的对象，会将原有指针指向的内存释放掉</p>\n<p><img src=\"/pictures/image-20221028105501647-1669803907655-12.png\" alt=\"image-20221028105501647\"></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WEBRTC_POSIX</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">shared_ptr&lt;string&gt; <span class=\"title\">sp</span><span class=\"params\">(<span class=\"keyword\">new</span> string(<span class=\"string\">&quot;123&quot;</span>))</span></span>;</span><br><span class=\"line\">    shared_ptr&lt;string&gt; sp2&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">string</span>(<span class=\"string\">&quot;234&quot;</span>)&#125;;</span><br><span class=\"line\">    cout &lt;&lt; *sp &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; *sp2 &lt;&lt; endl; <span class=\"comment\">//123 234</span></span><br><span class=\"line\">    sp = sp2;</span><br><span class=\"line\">    cout &lt;&lt; *sp &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; *sp2 &lt;&lt; endl;</span><br><span class=\"line\">    sp2 = <span class=\"built_in\">shared_ptr</span>&lt;string&gt;(<span class=\"keyword\">new</span> <span class=\"built_in\">string</span>(<span class=\"string\">&quot;345&quot;</span>));</span><br><span class=\"line\">    cout &lt;&lt; *sp &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; *sp2 &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"手写unique-ptr\"><a href=\"#手写unique-ptr\" class=\"headerlink\" title=\"手写unique_ptr\"></a>手写unique_ptr</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">unique_ptr</span> &#123;</span><br><span class=\"line\">    T *ptr;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">//普通构造</span></span><br><span class=\"line\">    <span class=\"built_in\">unique_ptr</span>(T *ptr) : <span class=\"built_in\">ptr</span>(ptr) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//移动构造</span></span><br><span class=\"line\">    <span class=\"built_in\">unique_ptr</span>(unique_ptr &amp;&amp;raw) &#123;</span><br><span class=\"line\">        ptr = raw.ptr;</span><br><span class=\"line\">        raw.ptr = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//默认构造</span></span><br><span class=\"line\">    <span class=\"built_in\">unique_ptr</span>() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//禁用拷贝赋值</span></span><br><span class=\"line\">    unique_ptr &amp;<span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> unique_ptr &amp;) <span class=\"keyword\">noexcept</span> = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//允许移动赋值</span></span><br><span class=\"line\">    unique_ptr &amp;<span class=\"keyword\">operator</span>=(unique_ptr&lt;T&gt; &amp;&amp;raw) <span class=\"keyword\">noexcept</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(ptr, raw.ptr);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//取值</span></span><br><span class=\"line\">    T &amp;<span class=\"keyword\">operator</span>*() <span class=\"type\">const</span> <span class=\"keyword\">noexcept</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *ptr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//析构函数释放内存</span></span><br><span class=\"line\">    <span class=\"keyword\">virtual</span> ~<span class=\"built_in\">unique_ptr</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> ptr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">unique_ptr&lt;string&gt; <span class=\"title\">sp</span><span class=\"params\">(<span class=\"keyword\">new</span> string(<span class=\"string\">&quot;123&quot;</span>))</span></span>;</span><br><span class=\"line\">    unique_ptr&lt;string&gt; sp2&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">string</span>(<span class=\"string\">&quot;234&quot;</span>)&#125;;</span><br><span class=\"line\">    cout &lt;&lt; *sp &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; *sp2 &lt;&lt; endl; <span class=\"comment\">//123 234</span></span><br><span class=\"line\">    <span class=\"comment\">//    sp = sp2;// 被禁止，编译报错</span></span><br><span class=\"line\">    sp = <span class=\"built_in\">move</span>(sp2); <span class=\"comment\">//允许，但是sp2就没有用了</span></span><br><span class=\"line\">    cout &lt;&lt; *sp &lt;&lt; endl; <span class=\"comment\">//234</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>移动赋值为啥swap</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//允许移动赋值</span></span><br><span class=\"line\">   unique_ptr &amp;<span class=\"keyword\">operator</span>=(unique_ptr&lt;T&gt; &amp;&amp;raw) <span class=\"keyword\">noexcept</span> &#123;</span><br><span class=\"line\">       <span class=\"built_in\">swap</span>(ptr, raw.ptr);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>移动赋值需要三步：</p>\n<ul>\n<li>将原来的内存释放掉</li>\n<li>将右值引用的ptr赋值给自己的ptr</li>\n<li>将右值引用的ptr置为nullptr防止重复delete</li>\n</ul>\n<p>这样显然有些麻烦，可以使用swap一步完成</p>\n<p>右值引用的声明周期只有那一行代码，那一行结束后，就会调用右值对象的析构函数释放内存</p>\n<p>互换指针，一方面自己的ptr得到对方ptr的值，完成了第一步。右值对象中ptr的指向变成了自己的原来的指向，完成了第三步，防止重复释放内存，同时右值对象在这一行结束后会销毁，会调用析构函数释放内存，完成了第二步。所以这一个swap就完成了上述的三个操作</p>\n<h2 id=\"手写share-ptr\"><a href=\"#手写share-ptr\" class=\"headerlink\" title=\"手写share_ptr\"></a>手写share_ptr</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unordered_map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">unordered_map&lt;<span class=\"type\">void</span> *, <span class=\"type\">unsigned</span>&gt; share_count_map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">shared_ptr</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    T *ptr;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">shared_ptr</span>() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">shared_ptr</span><span class=\"params\">(T *ptr)</span> : ptr(ptr) &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ptr != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            share_count_map[ptr] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">shared_ptr</span>(<span class=\"type\">const</span> shared_ptr&lt;T&gt; &amp;raw) <span class=\"keyword\">noexcept</span> &#123;</span><br><span class=\"line\">        ptr = raw.ptr;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">shared_ptr</span>(<span class=\"type\">const</span> shared_ptr &amp;&amp;raw) <span class=\"keyword\">noexcept</span> &#123;</span><br><span class=\"line\">        ptr = raw.ptr;</span><br><span class=\"line\">        share_count_map[ptr]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    shared_ptr&lt;T&gt; &amp;<span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> shared_ptr&lt;T&gt; &amp;raw) <span class=\"keyword\">noexcept</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (raw.ptr == ptr) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        share_count_map[ptr]--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (share_count_map[ptr] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            share_count_map.<span class=\"built_in\">erase</span>(ptr);</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> ptr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ptr = raw.ptr;</span><br><span class=\"line\">        share_count_map[ptr]++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    shared_ptr&lt;T&gt; &amp;<span class=\"keyword\">operator</span>=(shared_ptr&lt;T&gt; &amp;&amp;raw) <span class=\"keyword\">noexcept</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(ptr, raw.ptr);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    T &amp;<span class=\"keyword\">operator</span>*() <span class=\"type\">const</span> <span class=\"keyword\">noexcept</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *ptr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">virtual</span> ~<span class=\"built_in\">shared_ptr</span>() &#123;</span><br><span class=\"line\">        share_count_map[ptr]--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (share_count_map[ptr] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            share_count_map.<span class=\"built_in\">erase</span>(ptr);</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> ptr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    shared_ptr&lt;string&gt; p;</span><br><span class=\"line\">    shared_ptr&lt;string&gt; p2 = p;</span><br><span class=\"line\">    <span class=\"function\">shared_ptr&lt;string&gt; <span class=\"title\">sp</span><span class=\"params\">(<span class=\"keyword\">new</span> string(<span class=\"string\">&quot;123&quot;</span>))</span></span>;</span><br><span class=\"line\">    shared_ptr&lt;string&gt; sp2&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">string</span>(<span class=\"string\">&quot;234&quot;</span>)&#125;;</span><br><span class=\"line\">    cout &lt;&lt; *sp &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; *sp2 &lt;&lt; endl; <span class=\"comment\">//123 234</span></span><br><span class=\"line\">    sp = sp2;</span><br><span class=\"line\">    cout &lt;&lt; *sp &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; *sp2 &lt;&lt; endl;</span><br><span class=\"line\">    sp2 = <span class=\"built_in\">shared_ptr</span>&lt;string&gt;(<span class=\"keyword\">new</span> <span class=\"built_in\">string</span>(<span class=\"string\">&quot;345&quot;</span>));</span><br><span class=\"line\">    cout &lt;&lt; *sp &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; *sp2 &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>share_ptr需要用到引用计数，但是这个引用计数表示的是一个类型的数据被多少个智能指针管理这，所以这个引用计数器应当是一个全局变量，独立于每个对象，如果放在对象里面，每个对象都有一个自己的副本，显然不行。引用计数器是所有<code>share_ptr</code>的管理者，所以应当定义在全局。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unordered_map&lt;<span class=\"type\">void</span> *, <span class=\"type\">unsigned</span>&gt; share_count_map;</span><br></pre></td></tr></table></figure>\n\n<p>又因为要支持泛型，所以这里采用数据的内存地址作为map的key</p>\n<h2 id=\"string-nops其实是usigned-long-long的最大值，find没有找到就返回这个值\"><a href=\"#string-nops其实是usigned-long-long的最大值，find没有找到就返回这个值\" class=\"headerlink\" title=\"string::nops其实是usigned long long的最大值，find没有找到就返回这个值\"></a><code>string::nops</code>其实是<code>usigned long long</code>的最大值，find没有找到就返回这个值</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WEBRTC_POSIX</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; string::npos &lt;&lt; endl;</span><br><span class=\"line\">    string s = <span class=\"string\">&quot;123&quot;</span>;</span><br><span class=\"line\">    cout &lt;&lt; (s.<span class=\"built_in\">find</span>(<span class=\"string\">&quot;456&quot;</span>)) &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; UINT64_MAX &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"cpp-Default的用法\"><a href=\"#cpp-Default的用法\" class=\"headerlink\" title=\"cpp Default的用法\"></a>cpp Default的用法</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Base &amp;<span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> Base &amp;b) <span class=\"keyword\">noexcept</span> &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;赋值运算符&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Son</span> : <span class=\"keyword\">public</span> Base &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Son &amp;<span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> Son &amp;) <span class=\"keyword\">noexcept</span> = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Son son;</span><br><span class=\"line\">    Son son2;</span><br><span class=\"line\">    son = son2; <span class=\"comment\">//输出 赋值运算符</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>default表示使用编译器默认生成的函数，如果父类有自定义的，就使用父类的。仅限于特殊的函数（构造函数，析构函数，赋值运算符，拷贝构造，移动构造，移动赋值）</p>\n<p>const 和 noexcept一起写的时候，const要放在前面</p>\n<h2 id=\"swap的原理\"><a href=\"#swap的原理\" class=\"headerlink\" title=\"swap的原理\"></a>swap的原理</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_Tp __tmp = _GLIBCXX_MOVE(__a);</span><br><span class=\"line\">__a = _GLIBCXX_MOVE(__b);</span><br><span class=\"line\">__b = _GLIBCXX_MOVE(__tmp);</span><br></pre></td></tr></table></figure>\n\n<p>和我们平时写的逻辑类似，只是用了move，move会得到右值引用</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_Tp __tmp = _GLIBCXX_MOVE(__a); <span class=\"comment\">//将__a的右值引用赋值给__tmp，这里会调用移动构造</span></span><br><span class=\"line\">__a = _GLIBCXX_MOVE(__b);  <span class=\"comment\">//将__b的右值引用赋值给__a，这里会调用移动赋值</span></span><br><span class=\"line\">__b = _GLIBCXX_MOVE(__tmp); <span class=\"comment\">//将__tmp的右值引用赋值给__b，这里会调用移动赋值</span></span><br></pre></td></tr></table></figure>\n\n<p>使用这种方式就可以避免调用拷贝构造和拷贝赋值，提高效率</p>\n<h2 id=\"sscanf\"><a href=\"#sscanf\" class=\"headerlink\" title=\"sscanf\"></a>sscanf</h2><p>sscanf用于从一个字符串中格式化读入参数</p>\n<p>例如下面的dtm就是被读入的字符串，后面是格式化参数，再后面是接受这些变量的值</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> day, year;</span><br><span class=\"line\">    <span class=\"type\">char</span> weekday[<span class=\"number\">20</span>], month[<span class=\"number\">20</span>], dtm[<span class=\"number\">100</span>];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(dtm, <span class=\"string\">&quot;Saturday March 25 1989&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">sscanf</span>(dtm, <span class=\"string\">&quot;%s %s %d  %d&quot;</span>, weekday, month, &amp;day, &amp;year);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s %d, %d = %s\\n&quot;</span>, month, day, year, weekday);</span><br><span class=\"line\">    std::cout &lt;&lt; dtm &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Cpp-中的信号（Signal和Raise）\"><a href=\"#Cpp-中的信号（Signal和Raise）\" class=\"headerlink\" title=\"Cpp 中的信号（Signal和Raise）\"></a>Cpp 中的信号（Signal和Raise）</h2><p><a href=\"https://blog.csdn.net/u013271656/article/details/114537411\">(884条消息) C++ Signal(信号)_肥喵王得福_ฅ・ω・ฅ的博客-CSDN博客_c++ signal</a></p>\n<p>raise函数用来触发信号，signal用于监听信号并在收到信号的时候进行软中断，执行设置的处理函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void (*signal(int sig, void (*func)(int)))(int);</span><br></pre></td></tr></table></figure>\n\n<p>第二个参数是一个函数，可以传入我们自定义的函数，也可以填一些系统默认值，比如<code>SIG_DFL</code>表示进行默认的行为，<code>SIG_IGN</code>表示忽略</p>\n<p>关于触发信号，STD中的<code>std::abord,std::atexit,std::terminate</code>等函数都可以触发信号，等价于<code>std::signal(对应的信号)</code></p>\n<h2 id=\"Cpp-函数指针\"><a href=\"#Cpp-函数指针\" class=\"headerlink\" title=\"Cpp 函数指针\"></a>Cpp 函数指针</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;csignal&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">void</span> <span class=\"params\">(*Func)</span><span class=\"params\">(<span class=\"type\">int</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">(Func f)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">f</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; x &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">test</span>(test);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>函数指针定义方式和一般变量不同，所以可以使用typedef来将其变成类型的形式</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//     返回值  类型名 参数类型        </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">void</span> <span class=\"params\">(*Func)</span><span class=\"params\">(<span class=\"type\">int</span>)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>也可以直接使用</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;csignal&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">void</span> <span class=\"params\">(*Func)</span><span class=\"params\">(<span class=\"type\">int</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"type\">void</span> (*f)(<span class=\"type\">int</span>))</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">f</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; x &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">void</span> (*f)(<span class=\"type\">int</span>);</span><br><span class=\"line\">    <span class=\"built_in\">f</span>(<span class=\"number\">1</span>); <span class=\"comment\">//会卡死，因为函数指针没有指向</span></span><br><span class=\"line\">    <span class=\"built_in\">test</span>(test);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Cpp学习笔记\"><a href=\"#Cpp学习笔记\" class=\"headerlink\" title=\"Cpp学习笔记\"></a>Cpp学习笔记</h1><h2 id=\"C-类的六大函数\"><a href=\"#C-类的六大函数\" class=\"headerlink\" title=\"C++类的六大函数\"></a>C++类的六大函数</h2><p>[C++类的六大函数–构造、析构、拷贝构造、移动构造、拷贝赋值、移动赋值 - lincoding` - 博客园 (cnblogs.com)](<a href=\"https://www.cnblogs.com/lincz/p/10768607.html\">https://www.cnblogs.com/lincz/p/10768607.html</a>)</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cassert&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">virtual</span> ~<span class=\"built_in\">Base</span>() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bar</span><span class=\"params\">(<span class=\"type\">void</span>)</span> <span class=\"type\">const</span> <span class=\"keyword\">noexcept</span> </span>&#123;</span><br><span class=\"line\">        std::cout &lt;&lt; <span class=\"string\">&quot;Base::bar&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Derived</span> : <span class=\"keyword\">public</span> Base &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">virtual</span> ~<span class=\"built_in\">Derived</span>() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">foo</span><span class=\"params\">(<span class=\"type\">const</span> Base &amp;base)</span> </span>&#123;</span><br><span class=\"line\">    base.<span class=\"built_in\">bar</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// class SmartPtr定义&amp;实现</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SmartPtr</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    T *t;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 初始化</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">SmartPtr</span><span class=\"params\">(T *t1 = <span class=\"literal\">nullptr</span>)</span> : t(t1) &#123;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 拷贝构造</span></span><br><span class=\"line\">    <span class=\"built_in\">SmartPtr</span>(<span class=\"type\">const</span> SmartPtr &amp;s) = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 赋值构造</span></span><br><span class=\"line\">    SmartPtr &amp;<span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> SmartPtr &amp;s) = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    // 移动构造</span></span><br><span class=\"line\"><span class=\"comment\">//    SmartPtr(SmartPtr &amp;&amp;s) noexcept &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        this-&gt;t = s.t;</span></span><br><span class=\"line\"><span class=\"comment\">//        s.t = nullptr;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 移动赋值</span></span><br><span class=\"line\">    SmartPtr &amp;<span class=\"keyword\">operator</span>=(SmartPtr &amp;&amp;s) <span class=\"keyword\">noexcept</span> &#123;</span><br><span class=\"line\">        std::<span class=\"built_in\">swap</span>(s.t, t);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 重载*</span></span><br><span class=\"line\">    T &amp;<span class=\"keyword\">operator</span>*() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(<span class=\"keyword\">this</span>-&gt;t != <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *(<span class=\"keyword\">this</span>-&gt;t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 重载-&gt;</span></span><br><span class=\"line\">    T *<span class=\"keyword\">operator</span>-&gt;() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(<span class=\"keyword\">this</span>-&gt;t != <span class=\"literal\">nullptr</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 重载 bool</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">operator</span> <span class=\"title\">bool</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 析构函数</span></span><br><span class=\"line\">    ~<span class=\"built_in\">SmartPtr</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;t) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> t;</span><br><span class=\"line\">            t = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//支持子类向父类的转换，如果不用这个，编译器也会自动帮我们转换</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> U&gt;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">inline</span> <span class=\"keyword\">explicit</span> <span class=\"title\">SmartPtr</span><span class=\"params\">(SmartPtr&lt;U&gt; &amp;&amp;other)</span> <span class=\"keyword\">noexcept</span> </span>&#123;</span><br><span class=\"line\">        t = other.t;</span><br><span class=\"line\">        other.t = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    SmartPtr&lt;Base&gt; ptr1&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">Derived</span>()&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// SmartPtr&lt;Base&gt; ptr2&#123;ptr1&#125;; // 编译Error</span></span><br><span class=\"line\">    SmartPtr&lt;Base&gt; ptr3;</span><br><span class=\"line\">    <span class=\"comment\">// ptr3 = ptr1; // 编译Error</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ptr3 = std::<span class=\"built_in\">move</span>(ptr1); <span class=\"comment\">// ok</span></span><br><span class=\"line\">    SmartPtr&lt;Base&gt; ptr4&#123;std::<span class=\"built_in\">move</span>(ptr3)&#125;; <span class=\"comment\">// ok</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ptr4-&gt;<span class=\"built_in\">bar</span>(); <span class=\"comment\">// ok</span></span><br><span class=\"line\">    <span class=\"built_in\">foo</span>(*ptr4); <span class=\"comment\">// ok</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"explicit消除等号的隐式转换\"><a href=\"#explicit消除等号的隐式转换\" class=\"headerlink\" title=\"explicit消除等号的隐式转换\"></a>explicit消除等号的隐式转换</h2><p>[C++ explicit关键字详解 - 矮油~ - 博客园 (cnblogs.com)](<a href=\"https://www.cnblogs.com/rednodel/p/9299251.html#:~:text=C%2B%2B\">https://www.cnblogs.com/rednodel/p/9299251.html#:~:text=C%2B%2B</a> explicit关键字详解 首先%2C C%2B%2B中的explicit关键字只能用于修饰只有一个参数的类构造函数%2C,它的作用是表明该构造函数是显示的%2C 而非隐式的%2C 跟它相对应的另一个关键字是implicit%2C 意思是隐藏的%2C类构造函数默认情况下即声明为implicit (隐式).)</p>\n<h2 id=\"C-const修饰方法\"><a href=\"#C-const修饰方法\" class=\"headerlink\" title=\"C++ const修饰方法\"></a>C++ const修饰方法</h2><p><a href=\"https://blog.csdn.net/a512745183/article/details/52590223\">(248条消息) C++类中const修饰的函数与重载_未来之大神的博客-CSDN博客_c++ const 重载</a></p>\n<p>const方法不能修改成员变量</p>\n<p>const变量只能调用const方法</p>\n<p>带有const的方法和不带有const的方法可以并存，调用时，const对象调用const方法，非const变量调用非const方法</p>\n<h2 id=\"C-的左值右值，左右引用，移动语意及完美转发\"><a href=\"#C-的左值右值，左右引用，移动语意及完美转发\" class=\"headerlink\" title=\"C++的左值右值，左右引用，移动语意及完美转发\"></a>C++的左值右值，左右引用，移动语意及完美转发</h2><p><a href=\"https://zhuanlan.zhihu.com/p/402251966\">谈谈C++的左值右值，左右引用，移动语意及完美转发 - 知乎 (zhihu.com)</a></p>\n<p><img src=\"/pictures/%5DPQOUN4%5DQ$%5DR%25F_J0%5B79J71-1669803907654-8.png\" alt=\"img\"></p>\n<p>一个对象有两个部分：灵魂和躯壳，创建对象的时候会为这个对象分配内存空间这片内存就是灵魂，存放这块内存地址的变量就是躯壳（符号表），正常情况下，灵魂和躯壳是在一起的。</p>\n<p>左值：有名称的，可以获取到存储地址的变量就是左值，可以用&amp;取到地址（有躯干的对象）</p>\n<p>右值：可以获取到值的表达式都可以成为右值，左值也可以作为右值来使用（有灵魂的表达式，1000等无法寻址的字面量，可以理解为只有灵魂）</p>\n<p>右值又可以分为纯右值和将亡值</p>\n<p>纯右值：临时对象或字面量（只有灵魂）</p>\n<p>将亡值：使用move移动构造后，剩下的值就是将亡值，它内部的变量已经被设置为空值，无法再被使用，只剩下了一个空壳，所以叫作将亡值（只有躯壳）</p>\n<p>引用是变量的别名，必须初始化</p>\n<p>左引用：对左值的引用就是左引用（&amp;）</p>\n<p>右引用：对右值的引用就是右引用（&amp;&amp;）</p>\n<p>const T&amp;可以引用右值</p>\n<p>移动语义：将左值变成右值，将内存地址提取出来，将原来存放这片内存地址变量置为空，然后将这片内存的地址作为返回值返回（将灵魂从躯壳中抽离出来）</p>\n<p>完美转发：左值还是左值，右值还是右值（原来是灵魂，现在还是灵魂，原来有躯壳，线程还有躯壳）</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/161039484\">聊聊C++中的完美转发 - 知乎 (zhihu.com)</a></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(T &amp; t)</span></span>&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;左值&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//接受右值，但是t变量本身是会分配内存的，内配内存并接受右值后，变成了左值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(T &amp;&amp; t)</span></span>&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;右值&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//接受右值，但是t变量本身是会分配内存的，内配内存并接受右值后，变成了左值</span></span><br><span class=\"line\"><span class=\"comment\">//move 抽取灵魂，全部变成右值</span></span><br><span class=\"line\"><span class=\"comment\">//forward 利用引用折叠，原来是左值回来的还是左值原来的是右值回来的还是右值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">testForward</span><span class=\"params\">(T &amp;&amp; v)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(v);</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(std::forward&lt;T&gt;(v));</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(std::<span class=\"built_in\">move</span>(v));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> * argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">testForward</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;======================&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">testFoward</span>(x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"C-内存模型\"><a href=\"#C-内存模型\" class=\"headerlink\" title=\"C++内存模型\"></a>C++内存模型</h2><p>堆：new和malloc出来的对象存放在这里</p>\n<p>栈：存放局部变量，函数参数，函数返回地址等</p>\n<p>静态区：全局变量，静态变量，虚函数，全局常量指针</p>\n<p>常量存储区：全局常量，函数指针</p>\n<p>代码区：存放代码</p>\n<h2 id=\"cin输入规则\"><a href=\"#cin输入规则\" class=\"headerlink\" title=\"cin输入规则\"></a>cin输入规则</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x;</span><br><span class=\"line\">    cin&gt;&gt;x;</span><br><span class=\"line\">    <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    cin&gt;&gt;x;</span><br><span class=\"line\">    cout&lt;&lt;x&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于输入整数来说，cin会一直读取，直到遇到第一个非整数字符（整数里包含的字符，也就只有数字）</p>\n<p>例如上面的输入35.8 15.8，得到的是0，因为第一次cin后，x位35，因为遇到了小数点<code>.</code>，此时光标就停留在了小数点这里，第二次cin的时候，第一个遇到的就是小数点，所以一个字符都没有读取，得到的就是0，如果读到的值大于了int的最大值，则得到的是int的最大值，如果小于int的最小值，得到的就是int的最小值，然后后面的内容都不再读取</p>\n<p>同理如果读取的是浮点数，那么会到第一个非浮点字符（数字和小数点）截止。如果这样得到的是正常的数字就返回，如果得到的是小数点开头，则会带上0，如果什么都没有读到就返回0</p>\n<p>例如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">double</span> x,y;</span><br><span class=\"line\">    cin&gt;&gt;x&gt;&gt;y;</span><br><span class=\"line\">    cout&lt;&lt;x&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输入11.11.12</p>\n<p>得到11.11 0.12</p>\n<p>对于char类型，会直接读取一个字符，会跳过空格，回车，制表符</p>\n<p>对于char数组和string类型，会一直读取，直到遇到第一个空格和回车，想读取空格可以使用getline(cin,ss)</p>\n<p>如果读取的字符个数超过了char数组的容量，会超容量读取……</p>\n<p><img src=\"/pictures/image-20221011233123411-1669803907655-9.png\" alt=\"image-20221011233123411\"></p>\n<p>对于cin读取字符会跳过空格和回车的问题，可以使用getchar来读取，也可以使用cin.get</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> c1, c2;</span><br><span class=\"line\">    c1 = cin.<span class=\"built_in\">get</span>();</span><br><span class=\"line\">    cin.<span class=\"built_in\">get</span>(c2);</span><br><span class=\"line\">    cout &lt;&lt; c1 &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; c2 &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>cin内部对get方法进行的重载，不带参数的cin.get()得到的是缓冲区下一个字符的ASCII码值，这里通过隐式类型转换变成了对应char类型的值，而带参数的get(char &amp;)方法，也是读取一个字符，赋值给传入的char变量中</p>\n<p>如果没有遇到文件尾EOF，也没有遇到任何错误，可以使用cin.fail()会返回false,cin.good会返回true，如果遇到了文件尾，cin.eof()会返回true。遇到eof后，再使用cin读入也没有用，在有些OS中，可以使用cin.clear()来清除上面这个不可读入的状态</p>\n<p>cout.put()可以输出一个字符，putchar也可以输出一个字符，传入参数的是字符的ASCII码</p>\n<p>cin.get(ch)以及cin&gt;&gt; 返回值都是cin对象，如果需要bool类型，则调用的是good方法（重载了bool方法）</p>\n<h2 id=\"输出到文件-ofstream-istream\"><a href=\"#输出到文件-ofstream-istream\" class=\"headerlink\" title=\"输出到文件 ofstream istream\"></a>输出到文件 ofstream istream</h2><p>输出文件使用步骤：</p>\n<ol>\n<li>定义输出文件对象ofstream,istream</li>\n<li>调用这个对象的open函数，打开文件，设置输入模式ios:app表示添加，ios:trunc表示清空文件,ios::out表示输出,ios::in表示输出</li>\n<li>像cout和cin一样使用这个对象</li>\n</ol>\n<p><a href=\"https://blog.csdn.net/weixin_44139428/article/details/102813246\">(528条消息) ofstream的使用方法–超级精细_Ψ大鹏的博客-CSDN博客_ofstream</a></p>\n<p>cpp读写文件有两个指针：读文件指针指针和写文件指针，可以实现文件的随机读写</p>\n<p>文件的基本输出</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;你好&quot;</span>;</span><br><span class=\"line\">    string output = <span class=\"string\">&quot;hello world &quot;</span>;</span><br><span class=\"line\">    ofstream fOut;</span><br><span class=\"line\">    fOut.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;D:\\\\CppProjects\\\\test\\\\引用测试\\\\out.txt&quot;</span>, ios::app);</span><br><span class=\"line\">    fOut &lt;&lt; output;</span><br><span class=\"line\">    fOut.<span class=\"built_in\">close</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>文件路径可以是字符串字面量，可以是字符串或者字符数组（要以’\\0’结尾）变量</p>\n<p>如果输出失败，检查一下中文乱码问题</p>\n<p><a href=\"https://blog.csdn.net/weixin_43896318/article/details/104700306\">(528条消息) 【C语言】CLion中文乱码问题的解决方案_星拱北辰的博客-CSDN博客_clion中文乱码</a></p>\n<p>c++源文件应当使用GBK编码</p>\n<p>我使用的解决办法：使用管理员权限</p>\n<p><img src=\"/pictures/image-20221012003422515-1669803907655-10.png\" alt=\"image-20221012003422515\"></p>\n<p>使用相对路径：</p>\n<p><img src=\"/pictures/image-20221012004649017-1669803907655-14.png\" alt=\"image-20221012004649017\"></p>\n<p>可以在open里面使用相对路径，但是这个相对路径相对的是执行者所在的目录，直接使用编译器的运行键，文件会输出在编译器的目录下面，而不是项目路径下面。所以想要使用相对路径，可以在控制台使用g++编译，然后运行</p>\n<p>使用ifstream进行输入</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ifstream fin;</span><br><span class=\"line\">    fin.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;in.txt&quot;</span>, ios::in);</span><br><span class=\"line\">    cout&lt;&lt;fin.<span class=\"built_in\">is_open</span>()&lt;&lt;endl; <span class=\"comment\">//判断文件是否打开</span></span><br><span class=\"line\">    cout&lt;&lt;fin.<span class=\"built_in\">eof</span>()&lt;&lt;endl;   <span class=\"comment\">//判断文件是否读到文件末尾</span></span><br><span class=\"line\">    string ss;</span><br><span class=\"line\">    fin &gt;&gt; ss;</span><br><span class=\"line\">    cout &lt;&lt; ss;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还是使用g++编译运行</p>\n<p>同时使用ifstream和ofstream</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ifstream fin;</span><br><span class=\"line\">    ofstream fout;</span><br><span class=\"line\">    fin.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;in.txt&quot;</span>, ios::in);</span><br><span class=\"line\">    fout.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;out.txt&quot;</span>, ios::trunc);</span><br><span class=\"line\">    cout &lt;&lt; fin.<span class=\"built_in\">is_open</span>() &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!fin.<span class=\"built_in\">eof</span>()) &#123;</span><br><span class=\"line\">        string line;</span><br><span class=\"line\">        <span class=\"built_in\">getline</span>(fin, line);</span><br><span class=\"line\">        fout &lt;&lt; line &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>四舍五入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.引入头文件 #include&lt;iomanip&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">2.输出用固定格式  cout&lt;&lt;setiosflags(ios::fixed)&lt;&lt;setprecision(2)&lt;&lt;result&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\">​                                  //将result保留2位小数，四舍五入后输出。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">double</span> x = <span class=\"number\">123.565656</span>;</span><br><span class=\"line\">    ofstream f;</span><br><span class=\"line\">    f.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;out.txt&quot;</span>, ios::trunc);</span><br><span class=\"line\">    f &lt;&lt; <span class=\"built_in\">setprecision</span>(<span class=\"number\">5</span>) &lt;&lt; x &lt;&lt; endl; <span class=\"comment\">//保留5位有效数字</span></span><br><span class=\"line\">    f &lt;&lt; <span class=\"built_in\">setiosflags</span>(ios::fixed) &lt;&lt; <span class=\"built_in\">setprecision</span>(<span class=\"number\">5</span>) &lt;&lt; x &lt;&lt; endl; <span class=\"comment\">//保留5位小数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">123.57</span></span><br><span class=\"line\"><span class=\"comment\">123.56566</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Cpp指针\"><a href=\"#Cpp指针\" class=\"headerlink\" title=\"Cpp指针\"></a>Cpp指针</h2><p>指针就是内存的地址</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int b;</span><br><span class=\"line\">int *a=&amp;b;</span><br></pre></td></tr></table></figure>\n\n<p>int* a存储的是b的内存地址，&amp;b存储的也是内存地址，两者等价</p>\n<p>b和*a得到的都是对应的值，两者也等价</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> *a = <span class=\"keyword\">new</span> <span class=\"type\">int</span>;</span><br><span class=\"line\">    *a = <span class=\"number\">123</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> *b = a;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> b;</span><br><span class=\"line\">    cout &lt;&lt; *a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果两个指针指向同一片内存空间，然后其中一个delete了，另一个指针访问值的时候，得到的会是随机值</p>\n<p>cpp中，指针和数组是等价的，数组数组变量本质上也是指针，所以都可以使用[]，来访问元素，因为[]的实现方式也就是让指针移动对应的偏移量然后再取值，所以本质上是一样的，比如a[0]和*a就是等价的。这对于访问数组元素也同样适用。指针+1，实际上是让指针移动等同于指向类型所占字节数的内存。两者唯一的区别就是指针是一个变量，可以修改它的值。而数组指针是一个常量，不能修改它的值，它永远都指向数组的第一个元素。等价的原因是，cpp解释数组的方式是使用指针算术，对于指针而言，也是使用相同的指针算术，所以两者使用的语法是共通的。对数组变量使用sizeof 得到的是数组元素的大小✖数组长度，而对指针变量使用sizeof得到的是指针变量的大小</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> *a = <span class=\"keyword\">new</span> <span class=\"type\">int</span>;</span><br><span class=\"line\">    *a = <span class=\"number\">123</span>;</span><br><span class=\"line\">    cout &lt;&lt; a[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>为数组动态分配内存可以使用new int[n]，返回的是数组的第一个元素的地址，删除的时候，要用delete[] 来删除，这样删除的就是整个数组所占的内存。使用new []和delete[] 匹配，new和delete匹配，如果两者混着用结果是不可预知的</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> *a = <span class=\"keyword\">new</span> <span class=\"type\">int</span>[<span class=\"number\">12</span>];</span><br><span class=\"line\">    cout &lt;&lt; a[<span class=\"number\">0</span>]; <span class=\"comment\">//未知值</span></span><br><span class=\"line\">    <span class=\"keyword\">delete</span>[] a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"C-强制类型转换\"><a href=\"#C-强制类型转换\" class=\"headerlink\" title=\"C++强制类型转换\"></a>C++强制类型转换</h2><p>可以使用cpp版的 类型()，括号里面是要转换的数据</p>\n<p>也可以使用C语言版的（类型），括号后面跟上要转换的数据</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">char</span>(<span class=\"number\">49</span>) &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">int</span>(<span class=\"string\">&#x27;1&#x27;</span>) &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">double</span>(<span class=\"number\">1</span>) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; (<span class=\"type\">char</span>) <span class=\"number\">49</span> &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; (<span class=\"type\">int</span>) <span class=\"string\">&#x27;1&#x27;</span> &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; (<span class=\"type\">double</span>) <span class=\"number\">1</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不能用char变量存储eof（-1），需要先用int接收，如果不为eof再转换为char类型</p>\n<h2 id=\"C-逻辑运算符\"><a href=\"#C-逻辑运算符\" class=\"headerlink\" title=\"C++逻辑运算符\"></a>C++逻辑运算符</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">1</span> == <span class=\"number\">1</span> <span class=\"keyword\">and</span> <span class=\"number\">2</span> == <span class=\"number\">2</span> <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> <span class=\"number\">3</span> == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;hello world&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以使用&amp;&amp;，||，!来表示与或非，也可以使用and,or,not来表示，两种表示方法是完全等价的</p>\n<h2 id=\"Cpp字符操作\"><a href=\"#Cpp字符操作\" class=\"headerlink\" title=\"Cpp字符操作\"></a>Cpp字符操作</h2><p>cctype中有许多对单个字符的操作，比如判断是不是数字，字母，标点，空白字符，以及变成大写和变成小写</p>\n<p>并且cpp内部对各种基本类型都有变成字符串的to_string方法，以后就不需要我们自己写了！</p>\n<p><img src=\"/pictures/image-20221012212231962-1669803907655-11.png\" alt=\"image-20221012212231962\"></p>\n<h2 id=\"C-数组作为函数的参数\"><a href=\"#C-数组作为函数的参数\" class=\"headerlink\" title=\"C++数组作为函数的参数\"></a>C++数组作为函数的参数</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"type\">int</span> nums[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\">    cout &lt;&lt; nums &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"type\">int</span> *nums)</span> </span>&#123; <span class=\"comment\">//报错</span></span><br><span class=\"line\">    <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\">    cout &lt;&lt; nums &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Hello, World!&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将数组作为函数的参数，实际上传递的是数组首字母的指针（地址）给函数的参数，所以函数参数列表中，使用int[]来接收或者使用int* 实际上的等价的，所以上述代码中不能用这种方式进行方法重载，因为数组变量和指针变量都可以作为参数传入到这两个函数中</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"type\">int</span> nums[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\">    nums++;</span><br><span class=\"line\">    cout &lt;&lt; nums &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Hello, World!&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"built_in\">test</span>(<span class=\"keyword\">new</span> <span class=\"type\">int</span> [<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>数组变量和指针变量的用法几乎完全相同，只是再sizeof和数组变量不能修改上有区别</p>\n<p>函数列表上的int a[]和int* a完全等价，都是指针，都可以修改指向，使用sizeof得到的都是4字节的指针大小</p>\n<p>对于二维数组传递参数，要指明第二维的个数，不然编译器怎么知道每行有多少，每列有多少</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"type\">int</span> nums[][<span class=\"number\">5</span>])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\">    cout &lt;&lt; nums[<span class=\"number\">0</span>][<span class=\"number\">0</span>] &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a[<span class=\"number\">5</span>][<span class=\"number\">5</span>];</span><br><span class=\"line\">    a[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">123</span>;</span><br><span class=\"line\">    <span class=\"built_in\">test</span>(a);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"指针和const\"><a href=\"#指针和const\" class=\"headerlink\" title=\"指针和const\"></a>指针和const</h2><p>定义const的时候加上const 表示不能通过这个指针来修改他所指向的值，包括数组</p>\n<p>const指针可以指向变量，可以指向常量，但是非const指针不能指向const变量（常量），否则就可以通过这个非const指针修改这个常量从而失去了const的意义</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x1 = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> x2 = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"comment\">//    int *p1 = &amp;x2; //非法，不能让非const指针指向const变量</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> *p2 = &amp;x1;</span><br><span class=\"line\">    p2 = &amp;x2; <span class=\"comment\">//const指针可以修改指向</span></span><br><span class=\"line\"><span class=\"comment\">//    *p2 = 3;//但是不能通过这个指针修改数据的值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>const指针可以修改指向，但是不能修改指向数据的值</p>\n<p>对于指向指针的指针，const指针只能可以指向const指针，非const指针只能指向非const指针，不能混着用</p>\n<h2 id=\"Cpp泛型\"><a href=\"#Cpp泛型\" class=\"headerlink\" title=\"Cpp泛型\"></a>Cpp泛型</h2><p>定义泛型可以使用class也可以使用typename两者完全等价</p>\n<p>对于运算后未知的类型（可以转化的类型），可以使用decltype，但其实直接使用auto更加方便</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T1, <span class=\"keyword\">class</span> T2&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">del</span><span class=\"params\">(T1 a, T2 b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">decltype</span>(a - b) c = a - b;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> d = a - b;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于返回值也是泛型运算后的结果，可以使用下面这种格式</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T1, <span class=\"keyword\">class</span> T2&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">add</span><span class=\"params\">(T1 a, T2 b)</span> -&gt; <span class=\"title\">decltype</span><span class=\"params\">(a + b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是后面的<code> -&gt; decltype(a + b)</code>可以省略，结果也是对的</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T1, <span class=\"keyword\">class</span> T2&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">add</span><span class=\"params\">(T1 a, T2 b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实际上，任何返回值都可以用auto，类型申明后也可以用auto，这样编译器都可以自动帮我们推断类型</p>\n<p>如果我们想要为泛型构造一个特例，可以使用函数具象化的语法</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T1, <span class=\"keyword\">class</span> T2&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">add</span><span class=\"params\">(T1 a, T2 b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;&gt; <span class=\"keyword\">auto</span> <span class=\"built_in\">add</span>&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在函数开头加上template&lt;&gt;，表示这是函数具象化的一种，然后需要在函数名后申明具象化之后的泛型</p>\n<p>我们在调用泛型方法的时候，编译器会根据传入的参数自动将这个方法隐式实例化，我们也可以显式指明泛型的类型</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T1, <span class=\"keyword\">class</span> T2&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">add</span><span class=\"params\">(T1 a, T2 b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">add</span>&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;(<span class=\"number\">1</span>, <span class=\"number\">1.2</span>) &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>显式指明类型后，double会向int进行类型转换（向下转换），如果不实例化方法，第二个会将1.2作为double类型的变量传入</p>\n<p>对于没有参数的方法，不实例化无法进行调用，因为编译器不知道传入的泛型是啥</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</span></span><br><span class=\"line\"><span class=\"function\">T <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    T x;</span><br><span class=\"line\">    cin &gt;&gt; x;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">read</span>&lt;<span class=\"type\">int</span>&gt;() &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如上面这段代码，如果不加上<code>&lt;int&gt;</code>就会报错</p>\n<p>下面这个具象化一个泛型方法的语法，书上有，但是实际上测试的时候会编译报错，可能这种写法已经被抛弃了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//这个语句被编译器抛弃了</span><br><span class=\"line\">template auto add&lt;int, int&gt;(int,int);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Cpp的多文件编写\"><a href=\"#Cpp的多文件编写\" class=\"headerlink\" title=\"Cpp的多文件编写\"></a>Cpp的多文件编写</h2><p>cpp的文件结构一般按照如下策略进行划分</p>\n<ul>\n<li>头文件，包含结构申明和函数原型</li>\n<li>源文件，包含函数原型的实现</li>\n<li>源文件，调用函数的函数</li>\n</ul>\n<p>不要在头文件里面定义方法的实现和创建变量，因为一旦这个变量被多个源文件引用后，创建变量的行为会发生冲突，编译器会告诉你变量或者方法被重复创建（如果允许的话，就可能会出现同名但是实现不同的方法，编译器就不知道要调用哪一个，但是只申明函数原型的话就不会产生冲突）</p>\n<p>头文件里面的内容一般包含如下内容</p>\n<ul>\n<li>函数原型</li>\n<li>const变量</li>\n<li>内联函数</li>\n<li>泛型申明</li>\n<li>结构申明</li>\n<li>类申明</li>\n</ul>\n<p>申明泛型不会被编译，只会告诉编译器如何去生成代码，所以可以被重复包含</p>\n<p>结构申明，类申明并不创建变量，所以可以申明</p>\n<p>常量和内联函数有特殊的规则，所以可以包含</p>\n<p>include&lt;&gt;会直接从cpp系统目录里面找，而include””会先从用户目录下面找，再从系统目录下面找</p>\n<p>一个头文件只能被包含一次，为了防止一个头文件被重复包含（一个头文件可能包含了另一个头文件）可以使用下面这个技术</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> __test_define</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __test_define</span></span><br><span class=\"line\"><span class=\"comment\">//要定义的头文件</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n\n<p>#ifndef表示，如果define了后面那个标识符，就直接跳到#endif，如果没有被定义则不跳过，执行后面的代码</p>\n<p>我们在创建头文件的时候，将头文件的内容都放在#ifndef和#endif之间，并#define一个能代表这个头文件的变量，这样就可以防止头文件被重复包含，这样就可以保证一个头文件被多次引用后，头文件不会被重复引入。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by 黎明终点x on 2022/10/16.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> LEARN_FILE1_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LEARN_FILE1_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">A</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">getA</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(A a)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">//LEARN_FILE1_H</span></span></span><br></pre></td></tr></table></figure>\n\n<p>比如一个头文件可以像上面这样写</p>\n<p>这样，在其他文件中，无论这个文件被引入多少次，拼接到文件里的只有一次</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;file1.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;file1.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;file1.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;file2.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;test start&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(&#123;<span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">    <span class=\"built_in\">print2</span>(&#123;<span class=\"number\">2</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果不加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ifndef LEARN_FILE1_H</span><br><span class=\"line\">#define LEARN_FILE1_H</span><br><span class=\"line\">……</span><br><span class=\"line\">#endif //LEARN_FILE1_H</span><br></pre></td></tr></table></figure>\n\n<p>这个技术等价于#pragma once</p>\n<p>上面的代码就会报错，提示重复引入的头文件</p>\n<p>不能重复引入头文件的原因是同一个头文件在编译之前会重复插入到最后的可执行文件里面，导致编译的时候出现各类重复定义的错误。而不是cpp编译会检测相同头文件的#include语句。通过#ifndef，保证了一个头文件编译的时候只会引入一次，从而防止了这个错误。但是即便使用上面这个技术，也不能在头文件里面直接申明函数的实现，只能申明函数的原型，也不能定义普通变量，这个可能是因为#ifndef对函数申明不生效，并且函数的原型可以重复定义，不会出问题，比如如下代码可以通过编译</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;file1.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;file1.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;file1.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;test start&quot;</span> &lt;&lt; xxxx &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(&#123;<span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是变量和已经实现的方法重复定义后就会报错</p>\n<p>但是结构体和类里面的函数可以直接实现，头文件可以使用static来定义全局变量，也可以使用inline来定义函数，这些都放在#ifndef和#endif里面，就可以解决上面这些问题</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by 黎明终点x on 2022/10/16.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> LEARN_FILE1_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LEARN_FILE1_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">A</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">getA</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> xxxx;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">(A a)</span> </span>&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; a.<span class=\"built_in\">getA</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">//LEARN_FILE1_H</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>出了入口cpp文件外，每个cpp源文件都要有一个同名的.h头文件来管理，头文件里面申明的函数原因，以及类方法的原型，只能在<strong>同名</strong>的cpp源文件里面实现，没有头文件的cpp文件是无法使用里面的方法的，头文件实际上是申明了这个源文件可以导出的，供其他文件使用的内容，如果没有头文件则可以理解为，其他文件不能使用这个cpp文件，也就没有了意义。没有头文件的那个cpp文件就是主文件，其他文件在编译的时候会先将链接起来，得到.o文件，然后再将各个.o文件连接起来编译，得到最后的可执行文件。</p>\n<h2 id=\"muable\"><a href=\"#muable\" class=\"headerlink\" title=\"muable\"></a>muable</h2><p>表示是可以修改的，用于解除const的限定</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">AB</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">mutable</span> <span class=\"type\">int</span> b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> AB ab = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\">    ab.a = <span class=\"number\">1</span>;<span class=\"comment\">//报错</span></span><br><span class=\"line\">    ab.b = <span class=\"number\">2</span>;<span class=\"comment\">//不报错</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>加上mutable后，就表示这个成员变量是可以修改的，哪怕整体被设置成了const类型</p>\n<h2 id=\"内部连接性和外部连接性\"><a href=\"#内部连接性和外部连接性\" class=\"headerlink\" title=\"内部连接性和外部连接性\"></a>内部连接性和外部连接性</h2><h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>普通的成员变量定义后，外部文件可以通过extern来引用这个变量，这个变量全局只有一份，所有使用这个变量的文件共享同一块内存地址，这个特性叫外部连接性</p>\n<p>想使用其他文件中定义的变量必须申明为extern 的来引用其他文件的这个变量，否则会报错重复定义</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//file1.cpp文件中：</span><br><span class=\"line\">int xxx=5;</span><br><span class=\"line\">//main.cpp文件中</span><br><span class=\"line\">extern int xxx;</span><br><span class=\"line\">cout&lt;&lt;xxx&lt;&lt;endl; //得到5</span><br></pre></td></tr></table></figure>\n\n<p>而被申明为static的变量和被申明为const的变量，每个cpp文件都有一组，互不干扰，这个特性叫做内部连接性</p>\n<p>比如下面这段代码，在file2.h中定义了一个<code>static int xxx;</code>显然这个变量初始值是0，main.cpp和file1.cpp都引入file2.h，这样在这两个cpp里面都能直接使用xxx变量，file1.cpp中的print函数修改了xxx，main.cpp直接输出，最后得到的结果是1 0，证明了这两个文件的static变量是相互独立，互不干扰的（底层实现可以理解为加上了文件名作为前缀）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file1.cpp</span></span><br><span class=\"line\"><span class=\"comment\">// Created by 黎明终点x on 2022/10/16.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">pragma</span> once</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> LEARN_FILE1_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LEARN_FILE1_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">//LEARN_FILE1_H</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// file1.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;file1.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;file2.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    xxx++;</span><br><span class=\"line\">    std::cout &lt;&lt; xxx &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//file2.h</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by 黎明终点x on 2022/10/16.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> LEARN_FILE2_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LEARN_FILE2_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">//LEARN_FILE2_H</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> xxx;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//main.cpp</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;file2.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;file1.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>();    <span class=\"comment\">//1</span></span><br><span class=\"line\">    cout &lt;&lt; xxx;<span class=\"comment\">//0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果其他文件申明了外部连接性的变量，自己又申明了同名的内部连接性变量，会使用内部连接性的变量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//file1.cpp文件中：</span><br><span class=\"line\">int xxx=5;</span><br><span class=\"line\">//main.cpp文件中</span><br><span class=\"line\">static int xxx;</span><br><span class=\"line\">cout&lt;&lt;xxx&lt;&lt;endl; //得到0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><p>总结一下，一个文件中想使用其他文件的变量，可以有以下两种方式</p>\n<ul>\n<li>在头文件里面定义static变量或者const变量，cpp文件引入这个头文件就能使用这些变量，每个文件的作用域就是这个文件，文件之间互不干扰（内部连接性）</li>\n<li>在cpp源文件定义变量，其他文件使用extern引入，这种变量全局只有一份，所有文件中的变量共享一块内存空间（外部连接性）</li>\n</ul>\n<p>为什么其他cpp文件定义的变量我这个文件可以使用？</p>\n<p>因为编译的时候这些文件都会先和头文件连接（引入头文件的变量可以使用），然后再彼此连接在一起（其他cpp文件定义的变量可以使用），编译成机器语言之前，这些变量都按照各自的规则进行转换，放到了同一个文件中，所以再理论上也是可以互联互通的</p>\n<p>对于函数而言也有类似的特性，只是我们不允许在函数里面定义函数，所以函数定义出来都默认是外部连接特性的，于是我们引用其他文件的函数也有两种方式</p>\n<ul>\n<li>使用前定义这个函数的原型，或者引入带有函数原型的头文件（函数原型可以重复定义，不用担心重复引入），这个函数的具体实现可以放在参与编译的任何cpp文件中，然后都可以正常使用这个函数（函数默认是外部连接性的，在函数原型前面加上extern或者不加都是可以的）</li>\n</ul>\n<p>如果不希望这个函数被其他文件引用，可以使用static关键字申明，这样不同文件就可以定义同名函数，互不冲突，一个文件只能调用自己的static函数</p>\n<h2 id=\"创建struct变量的方式\"><a href=\"#创建struct变量的方式\" class=\"headerlink\" title=\"创建struct变量的方式\"></a>创建struct变量的方式</h2><p>使用大括号进行创建</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;file1.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">ABC</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a, b, c;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ABC abc1&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">    ABC abc2&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\">    ABC abc3&#123;&#125;;</span><br><span class=\"line\">    ABC abc4=<span class=\"built_in\">ABC</span>();</span><br><span class=\"line\">    ABC *abc5 = <span class=\"keyword\">new</span> ABC&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">    cout &lt;&lt; abc4.a &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用大括号进行创建其实是按顺序指定结构体里面的各个成员变量的值，从前往后按定义的顺序依次赋值，后面没有被赋值的变量会被赋予零值</p>\n<p>不使用大括号申明的变量（abc4），所有成员的值都是未定义状态</p>\n<p>如果使用括号来创建变量实际上是创建了一个方法？反正不是创建变量！</p>\n<p>想要调用构造方法来创建结构体变量，可以使用<code>ABC abc4=ABC();</code>这样的语法</p>\n<p>也可以使用new运算符来创建，使用方式和上面一样，只是分配内存的位置由栈变成动态存储区</p>\n<p>new运算符其实使用了一个语法糖的函数，使用typedef进行了简化</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new int -&gt; new(sizeof(int))</span><br><span class=\"line\">new int[40] -&gt; new(40*sizeof(int))</span><br></pre></td></tr></table></figure>\n\n<p>new运算符还可以指定需要分配的内存地址，来自己进行内存管理，使用方法为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new(006E4AB0)int[20]</span><br><span class=\"line\">new(006E4AB0)int</span><br><span class=\"line\">new(内存地址)变量类型</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h2><p>声明域：可以定义变量，函数的区域，局部变量的申明域是代码块，全局变量是申明域是函数的外面（申明一个引用外部文件的变量或者使用头文件里面的静态变量，也当成全局变量）</p>\n<p>潜在作用域：从定义变量开始到声明域的结尾，这个范围内的变量可能会在某些区域内被其他同名变量覆盖（隐藏）</p>\n<p>作用与：未被隐藏的潜在作用域</p>\n<p>命名空间可以定义在全局或者其他命名空间里面，可以在里面定义任意多的变量，函数，类型等，命名空间之间不会相互干扰，定义后如果不使用命名空间，里面定义的内容就不会干扰我们定义其他变量，函数等（具体的实现可以理解名字为加上了命名空间的前缀）</p>\n<p>全局内部的其他变量可以理解为在一个空命名空间里面，可以使用::来访问</p>\n<p><code>using namespace xxx;</code>后，会覆盖前面同名的全局（局部）变量，后面定义的全局（局部）变量也可以覆盖命名空间中引入的变量</p>\n<p>放在全局表示命名空间中定义的内容全局可用，放在代码块里面表示这个代码块里面可用</p>\n<p>而<code>using xxx::yyy</code>不会覆盖前面定义的同名内容，而是直接报错</p>\n<p>命名空间可以嵌套，可以通过赋值起别名</p>\n<p>未命名的命名空间不能被其他文件使用，可以实现类似static的功能</p>\n<h2 id=\"类的构造函数\"><a href=\"#类的构造函数\" class=\"headerlink\" title=\"类的构造函数\"></a>类的构造函数</h2><p>创建类对象不能直接使用{}来创建，必须有对应的构造函数来能这么写</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;file1.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ABC</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">ABC</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">ABC</span>(<span class=\"type\">int</span> i, <span class=\"type\">int</span> i1) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> a, b, c;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">ABC</span>(<span class=\"type\">int</span> i, <span class=\"type\">int</span> i1, <span class=\"type\">int</span> i2) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ABC abc1&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">    ABC abc2&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\">    ABC abc3&#123;&#125;;</span><br><span class=\"line\">    ABC abc4; <span class=\"comment\">//不一定是0值</span></span><br><span class=\"line\">    ABC *abc5 = <span class=\"keyword\">new</span> ABC&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">    cout &lt;&lt; abc4.a &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也可以使用小括号来调用构造函数，两者完全等价，只是写法有所不同</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;file1.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ABC</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">ABC</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">ABC</span>(<span class=\"type\">int</span> i, <span class=\"type\">int</span> i1) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> a, b, c;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">ABC</span>(<span class=\"type\">int</span> i, <span class=\"type\">int</span> i1, <span class=\"type\">int</span> i2) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ABC abc1 = <span class=\"built_in\">ABC</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">    ABC abc2 = <span class=\"built_in\">ABC</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    ABC abc3=<span class=\"built_in\">ABC</span>();</span><br><span class=\"line\">    ABC abc4;</span><br><span class=\"line\">    ABC *abc5 = <span class=\"keyword\">new</span> <span class=\"built_in\">ABC</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">    cout &lt;&lt; abc4.a &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也就是说，创建同一个对象有下面这些写法</p>\n<p><code>ABC abc1 = ABC(1, 2, 3) &lt;=&gt;ABC abc1&#123;1,2,3&#125;&lt;=&gt;ABC abc1(1, 2, 3)&lt;=&gt; ABC abc1=&#123;1,2,3&#125; </code></p>\n<p>像分配内存在公共存储区可以使用<code>ABC abc1 = new ABC(1, 2, 3) &lt;=&gt;ABC abc1 = new ABC&#123;1, 2, 3&#125; </code></p>\n<p>注意，不能使用<code>ABC abc1()</code>来调用无参构造函数，因为cpp会把它视为方法原型</p>\n<p>一个对象申明为const表示这个对象的成员变量，不能被构造函数以外的函数修改，如果在函数后面加上const，表示这个函数不会修改成员变量。所以const对象不能调用非const方法，因为非const方法可能会修改成员变量，而非const对象可以调用任意方法</p>\n<p>对于只有一个参数的构造函数，可以使用赋值号来调用构造函数创建对象，这种行为也叫做赋值构造</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;file1.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ABC</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> a;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">ABC</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">ABC</span>(<span class=\"type\">int</span> a) : <span class=\"built_in\">a</span>(a) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;被调用1&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">ABC</span>(<span class=\"type\">double</span> a) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;a = a;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;被调用2&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ABC a = <span class=\"number\">1</span>; <span class=\"comment\">//被调用1</span></span><br><span class=\"line\">    ABC b = <span class=\"number\">1.0</span>; <span class=\"comment\">//被调用2</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意：只有一个参数的构造函数以及有多个参数但是其他参数有默认值的构造函数都可以使用赋值号调用构造函数创建对象，会根据赋值号右边的值来决定使用哪个构造函数</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ABC</span>(<span class=\"type\">int</span> a) : <span class=\"built_in\">a</span>(a) &#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;被调用1&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">ABC</span>(<span class=\"type\">int</span> &amp;a) : <span class=\"built_in\">a</span>(a) &#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;被调用1&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">ABC</span>(<span class=\"type\">int</span> &amp;&amp;a) : <span class=\"built_in\">a</span>(a) &#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;被调用1&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于上面三种构造函数，首先第一种写法不能和第二和第三种写法同时存在，否则调用构造函数时会有歧义（如果不调用的话，编译也不会出错）</p>\n<h2 id=\"对象数组\"><a href=\"#对象数组\" class=\"headerlink\" title=\"对象数组\"></a>对象数组</h2><p>创建对象数组可以有两种方式：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ABC abc[<span class=\"number\">4</span>];</span><br><span class=\"line\">ABC abc2[]=&#123;<span class=\"built_in\">ABC</span>(<span class=\"number\">1</span>)&#125;;</span><br><span class=\"line\">ABC abc3[]=&#123;ABC&#123;<span class=\"number\">1</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用类似<code>ABC abc[4];</code>的语法，调用的是类的无参构造函数（所以要保证有无参构造函数）</li>\n<li>使用初始化列表的方式，其中每个元素都可以选择自己的构造函数来创建对象</li>\n</ul>\n<h2 id=\"类的作用域\"><a href=\"#类的作用域\" class=\"headerlink\" title=\"类的作用域\"></a>类的作用域</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ABC</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> a;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> xx[b]; <span class=\"comment\">//错误</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在全局里面创建常量b，然后作为数组长度是可以的，但是对于类不行，因为类只是一个定义，在创建对象前不占用存储空间，所以数组不能将b替换成具体的数字，所以不能按照这种方式来定义</p>\n<p>解决方式有两种</p>\n<ul>\n<li>使用enum</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ABC</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">enum</span> &#123;</span><br><span class=\"line\">        b = <span class=\"number\">5</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> xx[b];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这么做后，编译器会在编译的时候，将b替换成5</p>\n<ul>\n<li>使用static const</li>\n</ul>\n<p>其实类的定义保存静态区里面，使用static后，这个成员对象就不保存在对象中，而是保存在静态区里面，因而编译器在创建对象之前，可以获知数组的长度，从而可以创建</p>\n<h2 id=\"类的继承\"><a href=\"#类的继承\" class=\"headerlink\" title=\"类的继承\"></a>类的继承</h2><p>cpp允许基类的引用或者指针指向派生类，而调用方法时，使用的是基类方法还是派生类方法则有以下规则：</p>\n<ul>\n<li>如果方法加上了virtual，则通过引用，指针，对象调用的方法都是对象类型的方法</li>\n<li>如果没有加上virtual，则通过引用，指针调用的方法是引用，指针的类型，而通过对象调用的则是自己的方法</li>\n</ul>\n<p>子类在调用父类方法时，要加上父类的类型::来限定使用哪个类的方法</p>\n<p>析构函数必须是virtual的，因为析构函数是释放对象内容的一些行为，应该和实际的对象绑定在一起，而不是指针类型，对于同一种对象而言，任何时候都应该调用自己的析构函数</p>\n<p>派生类如果定义和基类同名的方法，不会形成两个重载的函数，派生类的函数会隐藏基类的函数</p>\n<p>返回类型协变：基类的返回值是基类或者基类的引用，派生类对于相同的方法返回改为了派生类或者派生类的引用，这种情况，基类方法不会被隐藏</p>\n<h3 id=\"三种继承方式\"><a href=\"#三种继承方式\" class=\"headerlink\" title=\"三种继承方式\"></a>三种继承方式</h3><p>protect的成员变量可以被派生类访问，但是不能被外部访问</p>\n<p>如果使用共有继承：<code>class Son : public Base &#123;&#125;</code>，基类的私有成员就还是私有，共有成员就还是共有</p>\n<p>如果使用私有继承：<code>class Son : private Base</code>，基类的所有成员变量和方法都变成私有（默认就是私有）（使用private继承的派生类可以访问，因为是作为直接派生类的private成员，所以只有直接派生类可以访问，外部和间接子类都不能访问）</p>\n<p>如果使用保护继承：<code>class Son : protected Base</code>，基类所有成员都作为保护成员（所有派生类可以访问，外部不能访问）</p>\n<p>只有在共有继承的时候，基类指针才能指向子类</p>\n<h3 id=\"方法隐藏\"><a href=\"#方法隐藏\" class=\"headerlink\" title=\"方法隐藏\"></a>方法隐藏</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;vector&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;file1.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> x;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;base test1&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;base test2&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Son</span> : Base &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">//    void test() &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//        cout &lt;&lt; &quot;son test1&quot; &lt;&lt; endl;</span></span><br><span class=\"line\">    <span class=\"comment\">//    &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//    void test(int x) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        cout &lt;&lt; &quot;son test2&quot; &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"type\">double</span> x)</span> </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;son test2&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">test</span>();<span class=\"comment\">//被重载的test隐藏了，所以不能调用基类的test方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Son son;</span><br><span class=\"line\">    son.<span class=\"built_in\">test2</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果派生类中出现了和基类同名的方法，基类所有重载的同名方法都会被隐藏，派生类和后续的派生类，在使用同名的方法时，都无法直接使用基类的方法，想要使用可以这样：<code>Base::test()</code>，这样就可以指定访问哪个类的方法</p>\n<p>外部成员可以这么访问<code>son.Base::test()</code>，前提是要有访问权限</p>\n<h3 id=\"override和final\"><a href=\"#override和final\" class=\"headerlink\" title=\"override和final\"></a>override和final</h3><p>对于虚方法，我们可以加上override来表示重写了一个基类方法。对于非虚方法，是按照指针类型来调用，用的哪个方法很明显，不需要加上这个来提醒自己。一个类的方法加上virtual，表示这个作为指针的类型时，具体调用这个方式时，调用的是实际的类的方法</p>\n<p>相反的，final可以声明一个方法不能被重写</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;vector&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"type\">int</span> x;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;base test2&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Son</span> : <span class=\"keyword\">public</span> Base &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;son test1&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;son test2&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//    void test(double x) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//        cout &lt;&lt; &quot;son test2&quot; &lt;&lt; endl;</span></span><br><span class=\"line\">    <span class=\"comment\">//    &#125;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Base *base = <span class=\"keyword\">new</span> <span class=\"built_in\">Son</span>();</span><br><span class=\"line\">    base-&gt;<span class=\"built_in\">test</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Cpp函数调用\"><a href=\"#Cpp函数调用\" class=\"headerlink\" title=\"Cpp函数调用\"></a>Cpp函数调用</h2><p>函数的返回值不放在栈中，一般会放在寄存器里面或者内存中的某块地址（但反正不是栈，如果是栈很多问题就无法解释）</p>\n<p>函数执行完后的返回值是一个右值，这一行代码执行完就会被释放</p>\n<h2 id=\"Cpp类的默认行为（移动构造，拷贝构造）\"><a href=\"#Cpp类的默认行为（移动构造，拷贝构造）\" class=\"headerlink\" title=\"Cpp类的默认行为（移动构造，拷贝构造）\"></a>Cpp类的默认行为（移动构造，拷贝构造）</h2><p>创建一个类A</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    string name;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">A</span><span class=\"params\">(<span class=\"type\">const</span> string &amp;name)</span> : name(name) &#123;</span></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;调用拷贝构造函数  &quot;</span> &lt;&lt; name &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">A</span><span class=\"params\">(<span class=\"type\">const</span> string &amp;&amp;name)</span></span>&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;调用移动构造函数  &quot;</span> &lt;&lt; name &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">A</span>() &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;调用默认构造函数&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    A &amp;<span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> A &amp;abc) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;调用拷贝构造函数&quot;</span> &lt;&lt; name &lt;&lt; endl;</span><br><span class=\"line\">        name = abc.name;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">virtual</span> ~<span class=\"built_in\">A</span>() &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;调用析构函数  &quot;</span> &lt;&lt; name &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setName</span><span class=\"params\">(<span class=\"type\">const</span> string &amp;name)</span> </span>&#123;</span><br><span class=\"line\">        A::name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>我们想从一个方法中拿到一个对象</p>\n<p>下面这个做法是错误的，因为变量a在函数结束后会退栈销毁掉，而引用本质上保存的是变量是地址，变量不存在了，地址也就没有意义，所以下面返回的是未定义的值</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">A&amp; <span class=\"title\">getA</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    A a;</span><br><span class=\"line\">    a.<span class=\"built_in\">setName</span>(<span class=\"string\">&quot;初始参数&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以应该改成下面这种写法</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">A <span class=\"title\">getA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    A a;</span><br><span class=\"line\">    a.<span class=\"built_in\">setName</span>(<span class=\"string\">&quot;初始参数&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这么改后，因为返回值会单独占据内存中的一块区域，函数返回的时候，会先将a变量拷贝到那块临时区域，然后将地址返回到原来的函数，这样函数结束后，a变量会销毁，但是拷贝还在，所以外面函数拿到的其实是这个拷贝的对象。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">getA</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是这样得到的对象也只是一个临时值，这一行代码结束后，这个临时的对象也就不再存在，这个临时的变量也是我们所说的右值。如果返回值不被使用也就不会被拷贝。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;vector&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;file1.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    string name;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">A</span>(<span class=\"type\">const</span> A &amp;&amp;name) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;调用移动构造函数  &quot;</span> &lt;&lt; name.name &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">A</span>() &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;调用默认构造函数&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">A</span>(<span class=\"type\">const</span> A &amp;a) : <span class=\"built_in\">name</span>(a.name) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;调用拷贝构造函数  &quot;</span> &lt;&lt; name &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    A &amp;<span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> A &amp;abc) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;调用复制运算符&quot;</span> &lt;&lt; name &lt;&lt; endl;</span><br><span class=\"line\">        name = abc.name;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">virtual</span> ~<span class=\"built_in\">A</span>() &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;调用析构函数  &quot;</span> &lt;&lt; name &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setName</span><span class=\"params\">(<span class=\"type\">const</span> string &amp;name)</span> </span>&#123;</span><br><span class=\"line\">        A::name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">const</span> string &amp;<span class=\"title\">getName</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//A &amp;getA() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//    A *a = new A();</span></span><br><span class=\"line\"><span class=\"comment\">//    a-&gt;setName(&quot;初始参数&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//    return *a;</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">A <span class=\"title\">getA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    A a;</span><br><span class=\"line\">    a.<span class=\"built_in\">setName</span>(<span class=\"string\">&quot;xxx&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">A <span class=\"title\">useA</span><span class=\"params\">(<span class=\"type\">const</span> A &amp;a)</span> </span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;使用A:&quot;</span> + a.<span class=\"built_in\">getName</span>() &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;main start&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"built_in\">useA</span>(<span class=\"built_in\">getA</span>());</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;main end&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果返回的对象在函数结束后会销毁，就不拷贝，返回这个要销毁的对象<br>如果函数结束后不销毁，则调用拷贝构造创建一个对象返回</p>\n<p>这个其实是编译器帮我们做的优化，这样我们就不用编写移动构造</p>\n<p>（const A&amp;不能作为A&amp;返回，变量当成常量没有风险，反过来就不一定了）</p>\n<h2 id=\"constexpr-申明常量表达式\"><a href=\"#constexpr-申明常量表达式\" class=\"headerlink\" title=\"constexpr 申明常量表达式\"></a>constexpr 申明常量表达式</h2><p>申明变量的时候可以加上constexpr，表示计算这个变量只需要常量，这样这个值就可以在编译期计算出来</p>\n<h2 id=\"使用CLION创建项目的时候，不要有中文路径\"><a href=\"#使用CLION创建项目的时候，不要有中文路径\" class=\"headerlink\" title=\"使用CLION创建项目的时候，不要有中文路径\"></a>使用CLION创建项目的时候，不要有中文路径</h2><h2 id=\"CMAKE语法\"><a href=\"#CMAKE语法\" class=\"headerlink\" title=\"CMAKE语法\"></a>CMAKE语法</h2><p><a href=\"https://zhuanlan.zhihu.com/p/315768216\">cmake常用命令的一些整理 - 知乎 (zhihu.com)</a></p>\n<h2 id=\"高斯白噪声\"><a href=\"#高斯白噪声\" class=\"headerlink\" title=\"高斯白噪声\"></a>高斯白噪声</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iterator&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;random&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Example data</span></span><br><span class=\"line\">    std::vector&lt;<span class=\"type\">double</span>&gt; data = &#123;<span class=\"number\">1.</span>, <span class=\"number\">2.</span>, <span class=\"number\">3.</span>, <span class=\"number\">4.</span>, <span class=\"number\">5.</span>, <span class=\"number\">6.</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Define random generator with Gaussian distribution</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">double</span> mean = <span class=\"number\">0.0</span>;<span class=\"comment\">//均值</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">double</span> stddev = <span class=\"number\">0.1</span>;<span class=\"comment\">//标准差</span></span><br><span class=\"line\">    std::default_random_engine generator;</span><br><span class=\"line\">    <span class=\"function\">std::normal_distribution&lt;<span class=\"type\">double</span>&gt; <span class=\"title\">dist</span><span class=\"params\">(mean, stddev)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Add Gaussian noise</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; x : data) &#123;</span><br><span class=\"line\">        x = x + <span class=\"built_in\">dist</span>(generator);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Output the result, for demonstration purposes</span></span><br><span class=\"line\">    std::<span class=\"built_in\">copy</span>(<span class=\"built_in\">begin</span>(data), <span class=\"built_in\">end</span>(data), std::<span class=\"built_in\">ostream_iterator</span>&lt;<span class=\"type\">double</span>&gt;(std::cout, <span class=\"string\">&quot; &quot;</span>));</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"emplace-back和push-back的区别\"><a href=\"#emplace-back和push-back的区别\" class=\"headerlink\" title=\"emplace_back和push_back的区别\"></a>emplace_back和push_back的区别</h2><p>emplace_back放入的是移动构造后得到的对象，接收右值，调用移动构造函数</p>\n<p>push_back放入的是拷贝构造得到的对象，接收左值，调用拷贝构造函数</p>\n<h2 id=\"deque支持随机访问\"><a href=\"#deque支持随机访问\" class=\"headerlink\" title=\"deque支持随机访问\"></a>deque支持随机访问</h2><p>deque底层是<code>map&lt;int,vector&gt;</code>，使用这样的一个数据结果实现双端队列</p>\n<p><a href=\"http://c.biancheng.net/view/6908.html\">C++ STL deque容器底层实现原理（深度剖析） (biancheng.net)</a></p>\n<p><img src=\"/pictures/image-20221025020644091-1669803907655-13-1669804077621-23.png\" alt=\"image-20221025020644091\"></p>\n<p>deque支持随机访问，但是不能随机插入，只能添加或者删除队头和队尾的元素，这些操作的复杂度都是O(1)，相当于将一块连续的数组切分成了多个长度固定的数组，start迭代器记录第一个元素的起始位置，第一个数组的起始地址，第一个数组的中止地址，第一个map指针的地址，finish迭代器，记录最后一个元素的位置，最后一个数组的起始地址，终止地址，存放这个地址的map结点</p>\n<p>这样我们就可以知道第一个元素是啥，最后一个元素是啥了，删除后，迭代器里面存放的指针就往中间移动一个，添加元素后就在添加完成后，指针往外面移动一格，所以这些操作都是O(1) 的。如果第一个数组满了，就在前面再申请一个数组，继续存放元素，更新start迭代器的指向，在后面添加也是一样的，都是O(1)的复杂度。</p>\n<p>对于随机访问，由于每个数组的长度都是固定的，很容易根据下标，确定要访问的元素在哪个数组的哪个位置，从而实现O(1)随机访问</p>\n<h2 id=\"智能指针\"><a href=\"#智能指针\" class=\"headerlink\" title=\"智能指针\"></a>智能指针</h2><p>为什么要有智能指针？</p>\n<p>使用普通的指针，一方面我们可能会忘记delete掉申请的内存，另一方面，如果使用指针的过程中出现异常，可能会导致delete的那条代码没有执行，导致内存泄露，所以可以使用智能指针来实现，指针指针是实现了指针功能的类对象，如果函数出现异常会调用对象的析构函数释放内存，把地址值赋值给指针指针，就不需要我们来释放内存，由编译器调用析构函数自己完成。智能指针在<code>&lt;memory&gt;</code>里面。智能指针不能用于非堆内存，只能传入<code>new</code>出来的内存块的地址。如果传入非堆内存，就会delete非堆地址，就会报错。</p>\n<p>智能指针可以和其他指针一起正常使用，那么就可以像指针一样赋值给其他智能指针对象，这样的话就会有问题。如果智能指针只是单纯在析构函数里面delete掉内存的话，就会出现同一块内存被重复delete的问题，解决这个问题的方案有三种</p>\n<ul>\n<li>赋值的时候进行深拷贝</li>\n<li>不允许赋值 <code>unique_ptr</code></li>\n<li>赋值的时候，转移所有权 <code>auto_ptr</code></li>\n<li>采用引用计数 <code>share_ptr</code></li>\n</ul>\n<p><code>unique_ptr</code>禁止了拷贝赋值，但是允许了移动赋值（可以接收函数的返回值）</p>\n<p><code>auto_ptr</code>是在拷贝赋值中，转移对象的所属权，原来的智能指针对象会变成“悬挂的指针”，里面原生的指针会变成空指针，从而不能解引用来获取值</p>\n<p><code>unique_ptr</code>在编译期禁止了赋值这种危险的行为，所以比<code>auto_ptr</code>更加安全。如果我们确实需要进行<code>unique_ptr</code>的赋值操作，转移内容的所属权，可以使用move()将左值变成右值即可</p>\n<p><code>share_ptr</code>则使用引用计数来共享内容的所属权，使用起来更加方便</p>\n<p><code>auto_ptr</code>被废弃</p>\n<p>使用智能指针unique</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WEBRTC_POSIX</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">unique_ptr&lt;string&gt; <span class=\"title\">sp</span><span class=\"params\">(<span class=\"keyword\">new</span> string(<span class=\"string\">&quot;123&quot;</span>))</span></span>;</span><br><span class=\"line\">    unique_ptr&lt;string&gt; sp2&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">string</span>(<span class=\"string\">&quot;234&quot;</span>)&#125;;</span><br><span class=\"line\">    cout &lt;&lt; *sp &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; *sp2 &lt;&lt; endl; <span class=\"comment\">//123 234</span></span><br><span class=\"line\">    <span class=\"comment\">//    sp = sp2; 被禁止，编译报错</span></span><br><span class=\"line\">    sp = <span class=\"built_in\">move</span>(sp2); <span class=\"comment\">//允许，但是sp2就没有用了</span></span><br><span class=\"line\">    cout &lt;&lt; *sp &lt;&lt; endl; <span class=\"comment\">//234</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>share_ptr</code>在进行赋值前，如果原来已经有指向的对象，会将原有指针指向的内存释放掉</p>\n<p><img src=\"/pictures/image-20221028105501647-1669803907655-12.png\" alt=\"image-20221028105501647\"></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WEBRTC_POSIX</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">shared_ptr&lt;string&gt; <span class=\"title\">sp</span><span class=\"params\">(<span class=\"keyword\">new</span> string(<span class=\"string\">&quot;123&quot;</span>))</span></span>;</span><br><span class=\"line\">    shared_ptr&lt;string&gt; sp2&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">string</span>(<span class=\"string\">&quot;234&quot;</span>)&#125;;</span><br><span class=\"line\">    cout &lt;&lt; *sp &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; *sp2 &lt;&lt; endl; <span class=\"comment\">//123 234</span></span><br><span class=\"line\">    sp = sp2;</span><br><span class=\"line\">    cout &lt;&lt; *sp &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; *sp2 &lt;&lt; endl;</span><br><span class=\"line\">    sp2 = <span class=\"built_in\">shared_ptr</span>&lt;string&gt;(<span class=\"keyword\">new</span> <span class=\"built_in\">string</span>(<span class=\"string\">&quot;345&quot;</span>));</span><br><span class=\"line\">    cout &lt;&lt; *sp &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; *sp2 &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"手写unique-ptr\"><a href=\"#手写unique-ptr\" class=\"headerlink\" title=\"手写unique_ptr\"></a>手写unique_ptr</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">unique_ptr</span> &#123;</span><br><span class=\"line\">    T *ptr;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">//普通构造</span></span><br><span class=\"line\">    <span class=\"built_in\">unique_ptr</span>(T *ptr) : <span class=\"built_in\">ptr</span>(ptr) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//移动构造</span></span><br><span class=\"line\">    <span class=\"built_in\">unique_ptr</span>(unique_ptr &amp;&amp;raw) &#123;</span><br><span class=\"line\">        ptr = raw.ptr;</span><br><span class=\"line\">        raw.ptr = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//默认构造</span></span><br><span class=\"line\">    <span class=\"built_in\">unique_ptr</span>() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//禁用拷贝赋值</span></span><br><span class=\"line\">    unique_ptr &amp;<span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> unique_ptr &amp;) <span class=\"keyword\">noexcept</span> = <span class=\"keyword\">delete</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//允许移动赋值</span></span><br><span class=\"line\">    unique_ptr &amp;<span class=\"keyword\">operator</span>=(unique_ptr&lt;T&gt; &amp;&amp;raw) <span class=\"keyword\">noexcept</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(ptr, raw.ptr);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//取值</span></span><br><span class=\"line\">    T &amp;<span class=\"keyword\">operator</span>*() <span class=\"type\">const</span> <span class=\"keyword\">noexcept</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *ptr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//析构函数释放内存</span></span><br><span class=\"line\">    <span class=\"keyword\">virtual</span> ~<span class=\"built_in\">unique_ptr</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> ptr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">unique_ptr&lt;string&gt; <span class=\"title\">sp</span><span class=\"params\">(<span class=\"keyword\">new</span> string(<span class=\"string\">&quot;123&quot;</span>))</span></span>;</span><br><span class=\"line\">    unique_ptr&lt;string&gt; sp2&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">string</span>(<span class=\"string\">&quot;234&quot;</span>)&#125;;</span><br><span class=\"line\">    cout &lt;&lt; *sp &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; *sp2 &lt;&lt; endl; <span class=\"comment\">//123 234</span></span><br><span class=\"line\">    <span class=\"comment\">//    sp = sp2;// 被禁止，编译报错</span></span><br><span class=\"line\">    sp = <span class=\"built_in\">move</span>(sp2); <span class=\"comment\">//允许，但是sp2就没有用了</span></span><br><span class=\"line\">    cout &lt;&lt; *sp &lt;&lt; endl; <span class=\"comment\">//234</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>移动赋值为啥swap</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//允许移动赋值</span></span><br><span class=\"line\">   unique_ptr &amp;<span class=\"keyword\">operator</span>=(unique_ptr&lt;T&gt; &amp;&amp;raw) <span class=\"keyword\">noexcept</span> &#123;</span><br><span class=\"line\">       <span class=\"built_in\">swap</span>(ptr, raw.ptr);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>移动赋值需要三步：</p>\n<ul>\n<li>将原来的内存释放掉</li>\n<li>将右值引用的ptr赋值给自己的ptr</li>\n<li>将右值引用的ptr置为nullptr防止重复delete</li>\n</ul>\n<p>这样显然有些麻烦，可以使用swap一步完成</p>\n<p>右值引用的声明周期只有那一行代码，那一行结束后，就会调用右值对象的析构函数释放内存</p>\n<p>互换指针，一方面自己的ptr得到对方ptr的值，完成了第一步。右值对象中ptr的指向变成了自己的原来的指向，完成了第三步，防止重复释放内存，同时右值对象在这一行结束后会销毁，会调用析构函数释放内存，完成了第二步。所以这一个swap就完成了上述的三个操作</p>\n<h2 id=\"手写share-ptr\"><a href=\"#手写share-ptr\" class=\"headerlink\" title=\"手写share_ptr\"></a>手写share_ptr</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unordered_map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">unordered_map&lt;<span class=\"type\">void</span> *, <span class=\"type\">unsigned</span>&gt; share_count_map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">shared_ptr</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    T *ptr;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">shared_ptr</span>() = <span class=\"keyword\">default</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">shared_ptr</span><span class=\"params\">(T *ptr)</span> : ptr(ptr) &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ptr != <span class=\"literal\">nullptr</span>) &#123;</span><br><span class=\"line\">            share_count_map[ptr] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">shared_ptr</span>(<span class=\"type\">const</span> shared_ptr&lt;T&gt; &amp;raw) <span class=\"keyword\">noexcept</span> &#123;</span><br><span class=\"line\">        ptr = raw.ptr;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">shared_ptr</span>(<span class=\"type\">const</span> shared_ptr &amp;&amp;raw) <span class=\"keyword\">noexcept</span> &#123;</span><br><span class=\"line\">        ptr = raw.ptr;</span><br><span class=\"line\">        share_count_map[ptr]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    shared_ptr&lt;T&gt; &amp;<span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> shared_ptr&lt;T&gt; &amp;raw) <span class=\"keyword\">noexcept</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (raw.ptr == ptr) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        share_count_map[ptr]--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (share_count_map[ptr] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            share_count_map.<span class=\"built_in\">erase</span>(ptr);</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> ptr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ptr = raw.ptr;</span><br><span class=\"line\">        share_count_map[ptr]++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    shared_ptr&lt;T&gt; &amp;<span class=\"keyword\">operator</span>=(shared_ptr&lt;T&gt; &amp;&amp;raw) <span class=\"keyword\">noexcept</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">swap</span>(ptr, raw.ptr);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    T &amp;<span class=\"keyword\">operator</span>*() <span class=\"type\">const</span> <span class=\"keyword\">noexcept</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *ptr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">virtual</span> ~<span class=\"built_in\">shared_ptr</span>() &#123;</span><br><span class=\"line\">        share_count_map[ptr]--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (share_count_map[ptr] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            share_count_map.<span class=\"built_in\">erase</span>(ptr);</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> ptr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    shared_ptr&lt;string&gt; p;</span><br><span class=\"line\">    shared_ptr&lt;string&gt; p2 = p;</span><br><span class=\"line\">    <span class=\"function\">shared_ptr&lt;string&gt; <span class=\"title\">sp</span><span class=\"params\">(<span class=\"keyword\">new</span> string(<span class=\"string\">&quot;123&quot;</span>))</span></span>;</span><br><span class=\"line\">    shared_ptr&lt;string&gt; sp2&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">string</span>(<span class=\"string\">&quot;234&quot;</span>)&#125;;</span><br><span class=\"line\">    cout &lt;&lt; *sp &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; *sp2 &lt;&lt; endl; <span class=\"comment\">//123 234</span></span><br><span class=\"line\">    sp = sp2;</span><br><span class=\"line\">    cout &lt;&lt; *sp &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; *sp2 &lt;&lt; endl;</span><br><span class=\"line\">    sp2 = <span class=\"built_in\">shared_ptr</span>&lt;string&gt;(<span class=\"keyword\">new</span> <span class=\"built_in\">string</span>(<span class=\"string\">&quot;345&quot;</span>));</span><br><span class=\"line\">    cout &lt;&lt; *sp &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; *sp2 &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>share_ptr需要用到引用计数，但是这个引用计数表示的是一个类型的数据被多少个智能指针管理这，所以这个引用计数器应当是一个全局变量，独立于每个对象，如果放在对象里面，每个对象都有一个自己的副本，显然不行。引用计数器是所有<code>share_ptr</code>的管理者，所以应当定义在全局。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unordered_map&lt;<span class=\"type\">void</span> *, <span class=\"type\">unsigned</span>&gt; share_count_map;</span><br></pre></td></tr></table></figure>\n\n<p>又因为要支持泛型，所以这里采用数据的内存地址作为map的key</p>\n<h2 id=\"string-nops其实是usigned-long-long的最大值，find没有找到就返回这个值\"><a href=\"#string-nops其实是usigned-long-long的最大值，find没有找到就返回这个值\" class=\"headerlink\" title=\"string::nops其实是usigned long long的最大值，find没有找到就返回这个值\"></a><code>string::nops</code>其实是<code>usigned long long</code>的最大值，find没有找到就返回这个值</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WEBRTC_POSIX</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; string::npos &lt;&lt; endl;</span><br><span class=\"line\">    string s = <span class=\"string\">&quot;123&quot;</span>;</span><br><span class=\"line\">    cout &lt;&lt; (s.<span class=\"built_in\">find</span>(<span class=\"string\">&quot;456&quot;</span>)) &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; UINT64_MAX &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"cpp-Default的用法\"><a href=\"#cpp-Default的用法\" class=\"headerlink\" title=\"cpp Default的用法\"></a>cpp Default的用法</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Base &amp;<span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> Base &amp;b) <span class=\"keyword\">noexcept</span> &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;赋值运算符&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Son</span> : <span class=\"keyword\">public</span> Base &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Son &amp;<span class=\"keyword\">operator</span>=(<span class=\"type\">const</span> Son &amp;) <span class=\"keyword\">noexcept</span> = <span class=\"keyword\">default</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Son son;</span><br><span class=\"line\">    Son son2;</span><br><span class=\"line\">    son = son2; <span class=\"comment\">//输出 赋值运算符</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>default表示使用编译器默认生成的函数，如果父类有自定义的，就使用父类的。仅限于特殊的函数（构造函数，析构函数，赋值运算符，拷贝构造，移动构造，移动赋值）</p>\n<p>const 和 noexcept一起写的时候，const要放在前面</p>\n<h2 id=\"swap的原理\"><a href=\"#swap的原理\" class=\"headerlink\" title=\"swap的原理\"></a>swap的原理</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_Tp __tmp = _GLIBCXX_MOVE(__a);</span><br><span class=\"line\">__a = _GLIBCXX_MOVE(__b);</span><br><span class=\"line\">__b = _GLIBCXX_MOVE(__tmp);</span><br></pre></td></tr></table></figure>\n\n<p>和我们平时写的逻辑类似，只是用了move，move会得到右值引用</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_Tp __tmp = _GLIBCXX_MOVE(__a); <span class=\"comment\">//将__a的右值引用赋值给__tmp，这里会调用移动构造</span></span><br><span class=\"line\">__a = _GLIBCXX_MOVE(__b);  <span class=\"comment\">//将__b的右值引用赋值给__a，这里会调用移动赋值</span></span><br><span class=\"line\">__b = _GLIBCXX_MOVE(__tmp); <span class=\"comment\">//将__tmp的右值引用赋值给__b，这里会调用移动赋值</span></span><br></pre></td></tr></table></figure>\n\n<p>使用这种方式就可以避免调用拷贝构造和拷贝赋值，提高效率</p>\n<h2 id=\"sscanf\"><a href=\"#sscanf\" class=\"headerlink\" title=\"sscanf\"></a>sscanf</h2><p>sscanf用于从一个字符串中格式化读入参数</p>\n<p>例如下面的dtm就是被读入的字符串，后面是格式化参数，再后面是接受这些变量的值</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;iostream&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> day, year;</span><br><span class=\"line\">    <span class=\"type\">char</span> weekday[<span class=\"number\">20</span>], month[<span class=\"number\">20</span>], dtm[<span class=\"number\">100</span>];</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(dtm, <span class=\"string\">&quot;Saturday March 25 1989&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">sscanf</span>(dtm, <span class=\"string\">&quot;%s %s %d  %d&quot;</span>, weekday, month, &amp;day, &amp;year);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s %d, %d = %s\\n&quot;</span>, month, day, year, weekday);</span><br><span class=\"line\">    std::cout &lt;&lt; dtm &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Cpp-中的信号（Signal和Raise）\"><a href=\"#Cpp-中的信号（Signal和Raise）\" class=\"headerlink\" title=\"Cpp 中的信号（Signal和Raise）\"></a>Cpp 中的信号（Signal和Raise）</h2><p><a href=\"https://blog.csdn.net/u013271656/article/details/114537411\">(884条消息) C++ Signal(信号)_肥喵王得福_ฅ・ω・ฅ的博客-CSDN博客_c++ signal</a></p>\n<p>raise函数用来触发信号，signal用于监听信号并在收到信号的时候进行软中断，执行设置的处理函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void (*signal(int sig, void (*func)(int)))(int);</span><br></pre></td></tr></table></figure>\n\n<p>第二个参数是一个函数，可以传入我们自定义的函数，也可以填一些系统默认值，比如<code>SIG_DFL</code>表示进行默认的行为，<code>SIG_IGN</code>表示忽略</p>\n<p>关于触发信号，STD中的<code>std::abord,std::atexit,std::terminate</code>等函数都可以触发信号，等价于<code>std::signal(对应的信号)</code></p>\n<h2 id=\"Cpp-函数指针\"><a href=\"#Cpp-函数指针\" class=\"headerlink\" title=\"Cpp 函数指针\"></a>Cpp 函数指针</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;csignal&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">void</span> <span class=\"params\">(*Func)</span><span class=\"params\">(<span class=\"type\">int</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">(Func f)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">f</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; x &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">test</span>(test);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>函数指针定义方式和一般变量不同，所以可以使用typedef来将其变成类型的形式</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//     返回值  类型名 参数类型        </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">void</span> <span class=\"params\">(*Func)</span><span class=\"params\">(<span class=\"type\">int</span>)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>也可以直接使用</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;csignal&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">void</span> <span class=\"params\">(*Func)</span><span class=\"params\">(<span class=\"type\">int</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"type\">void</span> (*f)(<span class=\"type\">int</span>))</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">f</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; x &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">void</span> (*f)(<span class=\"type\">int</span>);</span><br><span class=\"line\">    <span class=\"built_in\">f</span>(<span class=\"number\">1</span>); <span class=\"comment\">//会卡死，因为函数指针没有指向</span></span><br><span class=\"line\">    <span class=\"built_in\">test</span>(test);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Springboot(上篇)","date":"2022-11-30T10:53:29.000Z","_content":"## Springboot2基础\n\nhttps://blog.csdn.net/u011863024/article/details/113667634\n\n### 入门案例\n\nMAVEN的settings.xml中需要添加如下配置文件：\n\n```xml\n<mirrors>\n\t<mirror>\n\t\t<id>nexus-aliyun</id>\n\t\t<mirrorOf>central</mirrorOf>\n\t\t<name>Nexus aliyun</name>\n\t\t<url>http://maven.aliyun.com/nexus/content/groups/public</url>\n\t</mirror>\n</mirrors>\n\n<profiles>\n\t<profile>\n\t\t<id>jdk-1.8</id>\n\n\t\t<activation>\n\t\t\t<activeByDefault>true</activeByDefault>\n\t\t\t<jdk>1.8</jdk>\n\t\t</activation>\n\n\t\t<properties>\n\t\t\t<maven.compiler.source>1.8</maven.compiler.source>\n\t\t\t<maven.compiler.target>1.8</maven.compiler.target>\n\t\t\t<maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>\n\t\t</properties>\n\t</profile>\n</profiles>\n```\n\npom依赖\n\n```xml\n<-- Spring项目必须导入父依赖 版本是所使用的Springboot的版本-->\n<parent>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-parent</artifactId>\n\t<version>2.3.4.RELEASE</version>\n</parent>\n<-- Spring \tWeb项目导入这个依赖即可-->\n<dependencies>\n\t<dependency>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-web</artifactId>\n\t</dependency>\n</dependencies>\n```\n\n打包部署：使用maven的插件\n\n```xml\n<build>\n\t<plugins>\n\t\t<plugin>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t</plugin>\n\t</plugins>\n</build>\n```\n\n可以直接使用java -jar运行\n\n可见Springboot相对于SpringMVC的优点：\n\n简化配置，Springboot所整合的框架都可以在yml或者properties文件中同一配置，并且所有的配置Springboot都设置了默认值，并且通过maven来管理项目，通过简单的几项配置即可完成所需jar包的导入\n\n简化部署，Springboot内置了Tomcat服务器，可以直接通过main方法启动：\n\n```java\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class MainApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(MainApplication.class, args);\n    }\n}\n```\n\n业务部分兼容SpringMVC的所有功能：\n\n```java\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class HelloController {\n    @RequestMapping(\"/hello\")\n    public String handle01(){\n        return \"Hello, Spring Boot 2!\";\n    }\n}\n```\n\nSpringMVC需要打成war包，而Springboot通过MAVEN插件可以直接打成可以运行的jar包\n\n### Springboot版本管理\n\n```xml\n<parent>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-parent</artifactId>\n\t<version>2.3.4.RELEASE</version>\n</parent>\n```\n\n父项目可以用于进行版本管理，Springboot的父项目中帮我们定义了平时常用的jar包中匹配的版本号，从而避免一些版本不匹配的问题\n\n这个也成为自动版本仲裁机制，如果不想使用Springboot指定的版本，我们可以自己设定版本（例如Mysql），重写里面的版本号（最近优先原则）\n\n```xml\n<properties>\n\t<mysql.version>5.1.43</mysql.version>\n</properties>\n```\n\n`spring-boot-starter-* `: *代表某种场景，只要引入这个场景的starter就代表引入了这个场景所有常规的依赖\n\n`*-spring-boot-starter-*`：第三方提供的starter\n\n### Springboot自动配置\n\n引入并配置好了Tomcat\n字符编码拦截器，文件上传解析器，视图解析器等\n引入配置好了SpringMVC\nSpringbootApplication.run的返回值就是Spring容器，里面有工作的所有组件\n\n#### @SpringbootApplication\n\n拥有默认包扫描规则:主程序所在的包，以及它的子包中的类都能被扫描，也可以通过配置\n@SpringbootApplication(scanBasePackage=\"com.demo\")来改变包的扫描路径\n@SpringbootApplication等于以下三个注解(三合一注解):\n@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan(\"com.demo\")\n\n可以用这三个注解代替@SpringbootApplication\n\nproperties中配置的属性最后都会映射到一个配置类上，这个类会在容器中创建对象\nSpringboot的所有配置功能都在spring-boot-starter-autoconfigure配置中设置\n自动配置功能是按需加载的，引入了对应的场景后，对应的场景的自动配置才会生效\n\n### @Configuration和@Bean向添加Spring容器添加组件\n\n@Configuration会将这个类申明为Springboot的一个配置类\n\n在配置类中可以通过@Bean注解添加bean\n\n添加的bean的名称就是我们的方法名，添加的bean就是方法的返回值，也可以通过@Bean(\"cat\")在括号中设置bean的名称\n\nSpringboot.run的返回值就是Spring容器，我们可以在里面拿到容器中注册的所有bean\n\n```JAVA\n@SpringBootApplication\npublic class Demo2Application {\n    public static void main(String[] args) {\n        ConfigurableApplicationContext run = SpringApplication.run(Demo2Application.class, args);\n        for (String name : run.getBeanDefinitionNames()) {\n            System.out.println(name);\n        }\n    }\n}\n```\n\n如果出现了组件依赖的情况，可以直接调用其他注册组件的方法来设置bean\n\n```java\n@Configuration\npublic class MyConfig {\n    @Bean\n    Mypage page(){\n        Mypage mypage = new Mypage();\n        mypage.setUser(user01());\n        return mypage;\n    }\n    @Bean\n    User user01(){\n        return new User(\"name\",\"132\");\n    }\n}\n```\n\n设置的bean可以在Spring容器中拿到，并且调用生成bean的方法拿到的bean和在Spring容器中拿到的bean是一样的：\n\n```java\n@SpringBootApplication\n@MapperScan(\"com.example.demo.mapper\")//检测mapper的包\n@MapperScan(\"com.example.demo.dao\")//检测mapper的包\npublic class Demo2Application {\n    public static void main(String[] args) {\n        ConfigurableApplicationContext run = SpringApplication.run(Demo2Application.class, args);\n        for (String name : run.getBeanDefinitionNames()) {\n            System.out.println(name);\n        }\n        User user01 = run.getBean(\"user01\", User.class);\n        Mypage mypage=run.getBean(Mypage.class);\n        System.out.println(user01==mypage.getUser());//返回true\n    }\n}\n```\n\n包括带有@Configuration的类也是Spring容器中组件的一个，也可以拿到这个bean，调用里面生成bean的方法拿到的bean仍然是唯一的，并不会生成一个新的bean：\n\n```java\n@SpringBootApplication\n@MapperScan(\"com.example.demo.mapper\")//检测mapper的包\n@MapperScan(\"com.example.demo.dao\")//检测mapper的包\npublic class Demo2Application {\n    public static void main(String[] args) {\n        ConfigurableApplicationContext run = SpringApplication.run(Demo2Application.class, args);\n        User user01 = run.getBean(\"user01\", User.class);\n        Mypage mypage=run.getBean(Mypage.class);\n        MyConfig config = run.getBean(MyConfig.class);\n        System.out.println(config.user01()==user01);//true\n        System.out.println(config.user01()== mypage.getUser());//true\n        System.out.println(user01==mypage.getUser());//true\n    }\n}\n```\n\n这是因为我们拿到的MyConfig其实是通过CGLIB代理过的对象：\n\n```java\ncom.example.demo.config.MyConfig$$EnhancerBySpringCGLIB$$a35275ef@6bf54260\n```\n\n这个对象调用组件注册方法前，会先判断这个组件是否出现在Spring容器中，如果出现在了Spring容器中则返回Spring容器中的对象，否则才会new一个对象。\n\n#### @Configuration(proxyBeanMethods = false)\n\nproxyBeanMethods 默认为true，当这个属性值为true时Spring会帮我们生成上述的代理对象来保证Spring容器中对象的唯一性，用于设置组件之间的依赖关系（如果设置为false则不能在bean中注入其他属性），来容器外多次调用生成组件的方法返回的都是同一个对象。\n\n如果设置为false，则不会生成代理对象，Spring容器可以更快的启动，但此时不能设置组件的依赖关系，外部调用生成组件的方法会生成多个对象。\n\n扫描范围内的@Controller之类的注解的用法和SpringMVC相同\n\n#### @Import\n\n@Import 导入组件参数是class数组\n容器中会自动创建一个这个类型的bean，默认名称是这个类的全限定名\n\n#### @Condition 满足某些条件时做某些事情(条件装配)\n\n@ConditionalOnBean 容器中有这个bean的时候才在容器启动时执行这个方法，可以通过name和type来指定。可以标注在方法上，也可以标注在类上，表示这个类的方法都需要满足这个条件。\n@ConditionalOnMissingBean 没有这个bean的时候执行这个方法\n还有其他的条件装配，这里只列举其中几个\n@ImportResource(\"文件路径\") 这个注解可以加载xml配置文件，往Spring容器中添加组件\n\n#### 配置绑定\n\n原生java 使用Properties类的load方法加载配置文件，然后遍历\nSpring方式\n需要放在容器中才能使用Spring的功能，即必须加上@Component\n@ConfigurationProperties(prefix=\"xxx\") 将前缀为这个的配置文件和类中对应名称的属性值进行绑定，然后就可以通过这个类的对象拿到配置文件中的属性值\n@EnableConfigurationProperties(xxx.class)将这个注解加在配置类上 开启属性配置功能，用这个注解代替@Component注解(对于一些我们无法修改的第三方的包可以用这种方式来绑定组件)将我们，@ConfigurationProperties也要加在需要绑定的类上，上面这个注解只是帮我们将其注册到容器中并开启指定类的配置绑定功能\n\n#### 自动配置原理\n\n三合一注解：@SpringbootApplication\n\n@SpringbootConfiguration 声明启动类是Spring容器的主配置类，功能和@Configuration一致\n@ComponentScan 指定包扫描路径\n@EnableAutoConfiguration 开启自动配置这个注解是以下两个注解的合成:\n@ConfigurationPackage（指定默认包规则）\n自动配置包，里面有@Import注解，用于引入包扫描器，将主类所在的包下面的组件进行批量注册(main方法所在的包)\n@Import(AutoConfigurationImportSelector.class)\nSpringboot会在容器启动时，加载一些必须加载的组件，这些组件被写在各个jar包的META-INFO下的Spring.Factories中，其中有一个名为autoconfigure的jar包里面的这个目录下有这个配置文件，而这个注解就是用于加载这些配置文件(所有场景的jar包)的，这些配置会被全部加载进来，但最后会按需配置(条件装配)\n\n按需加载功能通过使用注解来生效：\n\n@ConditionalOnClass(xxx.class)：如果类路径中有这个类就生效（编译时会编译失败，但是我们引入的jar是已经编译好的class文件）\n\n@ConditionalOnMissingBean(value = xxx.class ， name=\"yyyy\")：如果容器中有这个bean才会生效\n\n![image-20220428183847161](D:\\学习笔记\\picture\\123123123.png)\n\n如果这些注解加载类上，必须上面的条件都满足，才会在Spring容器的启动的时候加载这个类里面的方法向容器中添加组件，如果加在方法上，表示满足这些条件后，组件注册方法才会生效（执行）\n\n```java\n\t@Configuration(proxyBeanMethods = false)\n\t@Conditional(DefaultDispatcherServletCondition.class)\n\t@ConditionalOnClass(ServletRegistration.class)\n\t@EnableConfigurationProperties({ HttpProperties.class, WebMvcProperties.class })\n\tprotected static class DispatcherServletConfiguration {\n```\n\n@ConditionalWebApplication(type = Type.SERVLET) 判断当前的应用类型（是基于Servlet还是基于Reator）\n\n@AutoConfigurationOrder() 设置配置的优先级，这里这个配置类的优先级设置为高\n\n@Configuration(proxyBeanMethods = false) 前面说过，声明为组件，并使用轻量级配置\n\n@AutoConfigureAfter(ServletWebServerFactoryAutoConfiguration.class) 声明这个类要在ServletWebServerFactoryAutoConfiguration这个类之后配置\n\n上述添加都满足后，我们再看类中注册bean的方法：\n\n```java\n\t\t@Bean(name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)\n\t\tpublic DispatcherServlet dispatcherServlet(HttpProperties httpProperties, WebMvcProperties webMvcProperties) {\n\t\t\tDispatcherServlet dispatcherServlet = new DispatcherServlet();\n\t\t\tdispatcherServlet.setDispatchOptionsRequest(webMvcProperties.isDispatchOptionsRequest());\n\t\t\tdispatcherServlet.setDispatchTraceRequest(webMvcProperties.isDispatchTraceRequest());\n\t\t\tdispatcherServlet.setThrowExceptionIfNoHandlerFound(webMvcProperties.isThrowExceptionIfNoHandlerFound());\n\t\t\tdispatcherServlet.setPublishEvents(webMvcProperties.isPublishRequestHandledEvents());\n\t\t\tdispatcherServlet.setEnableLoggingRequestDetails(httpProperties.isLogRequestDetails());\n\t\t\treturn dispatcherServlet;\n\t\t}\n```\n\n@Bean注解下的方法，如果传入了对象参数，Springboot会自动在Spring容器中找到这个对象并作为参数传入\n\nSpringMVC中我们需要向Spring容器中注入DispatcherServlet类型的对象才能使用SpringMVC的Web功能，而Springboot帮我们在Spring容器中添加了这个对象，因而不需要我们手动去设置。\n\n```java\n\t\t@Bean\n\t\t@ConditionalOnBean(MultipartResolver.class)\n\t\t@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)\n\t\tpublic MultipartResolver multipartResolver(MultipartResolver resolver) {\n\t\t\t// Detect if the user has created a MultipartResolver but named it incorrectly\n\t\t\treturn resolver;\n\t\t}\n```\n\n这个方法负责注入处理文件上传的文件解析器，\n\n@ConditionalOnBean(MultipartResolver.class) ：Spring容器中有MultipartResolver这个类的对象\n\n@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)：但是名字不是我们想要的名字\n\n于是我们就执行这个方法，添加一个名字也是我们的想要的bean，@Bean注解添加的bean的名称就是我们的方法名，这样就保证了组件名字的一致性\n\n再举一个例子：用来处理Http请求的编码类，防止出现中文乱码\n\n```java\n@Configuration(proxyBeanMethods = false)\n@EnableConfigurationProperties(HttpProperties.class)\n@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n@ConditionalOnClass(CharacterEncodingFilter.class)\n@ConditionalOnProperty(prefix = \"spring.http.encoding\", value = \"enabled\", matchIfMissing = true)\npublic class HttpEncodingAutoConfiguration {\n```\n\n注解含义和之前都是类似的\n\n```java\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic CharacterEncodingFilter characterEncodingFilter() {\n\t\tCharacterEncodingFilter filter = new OrderedCharacterEncodingFilter();\n\t\tfilter.setEncoding(this.properties.getCharset().name());\n\t\tfilter.setForceRequestEncoding(this.properties.shouldForce(Type.REQUEST));\n\t\tfilter.setForceResponseEncoding(this.properties.shouldForce(Type.RESPONSE));\n\t\treturn filter;\n\t}\n```\n\n@ConditionalOnMissingBean 如果没有CharacterEncodingFilter类型的bean，就执行下面这个方法，向容器中添加这个类型的bean\n\n通过使用注解@ConditionalOnMissingBean，Spring会向容器中添加所有我们需要的组件，但如果用户自己配置了组件，则以用户配置的组件优先\n\n#### 总结：\n\n![image-20220429002822205](D:\\学习笔记\\picture\\image-20220429002822205-1669804541526-41.png)\n\nSpring容器会加载指定路径下所有的自动配置类，然后这些配置类会根据@Condition系列注解配置的条件判断是否生效，每个自动配置类在注册组件时，属性值需要从xxxProperties类中拿，xxxProperties中是属性值会有默认值，同时也和我们设置的配置文件绑定在一起。所以我们向修改组件可以通过修改配置文件来做到。容器有有了对应的组件也就有了对应的功能。注册组件前会先判断用户是否注册了对应类型的组件，如果注册了就以用户的优先，所以我们可以通过在配置类中使用@Bean注解来定制化我们自己想要的组件。\n\ndebug=true：开启自动配置报告\n\n更多配置信息可以查阅官方文档：https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties\n\nspring.banner.image.location=xxx.jpg 指定spring加载的图标，默认路径是classpath下的banner.jpg\n\nxxxxCustomize 自定义组件\n\n### 开发小技巧\n\n#### Lombok\n\n引入依赖：\n\n```xml\n\t\t<dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <version>1.18.22</version>\n        </dependency>\n```\n\n还需要下载Lombok插件\n\n@Data ：设置set get方法，设置toString，hashcode，equals方法\n\n@AllArgsConstructor 全参数构造器\n\n@NoArgsConstructor 无参数构造器\n\n@Slf4j 自动添加一个log对象，用于打印日志\n\n#### detTools\n\n引入依赖：\n\n```xml\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-devtools</artifactId>\n            <optional>true</optional>\n        </dependency>\n```\n\n调试时，代码的即使更新\n\n修改静态文件时，重新编译即可\n\n#### Spring Initailzer\n\n帮我们创建全局的包结构和自动引入各种常用依赖，甚至还帮我们创建了.gitignore之类的文件\n\n## Springboot核心功能（2.2.4）\n\n### 配置文件\n\n#### Yaml语法\n\nproperties的优先级高于yml\n\n- key: value；kv之间有空格\n- 大小写敏感\n- 使用缩进表示层级关系\n- 缩进不允许使用tab，只允许空格\n- 缩进的空格数不重要，只要相同层级的元素左对齐即可\n- '#'表示注释\n- 字符串无需加引号，如果要加，单引号’’、双引号\"\"表示字符串内容会被 转义、不转义\n\nkv表示：k: v\n\n注意要有空格\n\n数组可以用y: [xx,xxx]来表示\n\n也可以用\n\n```\ny: \n  - xx\n  - xxx\n```\n\n`-`代表集合中的一个元素\n\n可以用一个类和配置文件来绑定\n\n```java\npackage com.demo.test;\n\nimport lombok.Data;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.util.*;\n\n@Data\n@Configuration\n@ConfigurationProperties(prefix = \"person\")\npublic class Person {\n    private String userName;\n    private Boolean boss;\n    private Date birth;\n    private Integer age;\n    private Pet pet;\n    private String[] interests;\n    private List<String> animal;\n    private Map<String, Object> score;\n    private Set<Double> salarys;\n    private Map<String, List<Pet>> allPets;\n}\n\n@Data\nclass Pet {\n    private String name;\n    private Double weight;\n}\n```\n\n在yml配置对应的属性：\n\n```yml\nperson:\n  userName: zhangsan\n  boss: false\n  birth: 2019/12/12 20:12:33\n  age: 18\n  pet: \n    name: tomcat\n    weight: 23.4\n  interests: [篮球,游泳]\n  animal: \n    - jerry\n    - mario\n  score:\n    english: \n      first: 30\n      second: 40\n      third: 50\n    math: [131,140,148]\n    chinese: {first: 128,second: 136}\n  salarys: [3999,4999.98,5999.99]\n  allPets:\n    sick:\n      - {name: tom}\n      - {name: jerry,weight: 47}\n    health: [{name: mario,weight: 47}]\n```\n\n#### 编写配置文件时，添加提示\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-configuration-processor</artifactId>\n    <optional>true</optional>\n</dependency>\n\n<!-- 下面插件作用是工程打包时，不将spring-boot-configuration-processor打进包内，让其只在编码的时候有用 -->\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n            <configuration>\n                <excludes>\n                    <exclude>\n                        <groupId>org.springframework.boot</groupId>\n                        <artifactId>spring-boot-configuration-processor</artifactId>\n                    </exclude>\n                </excludes>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n```\n\n大写字母等价于小写字母前加上- 也就是：N 和-n的意义相同\n\n### Web开发\n\nSpringboot框架是框架的框架\n\n#### 静态资源\n\nSpringboot默认的静态资源目录是在resources目录下的：\n\n/static\n\n/public\n\n/resources\n\n/META-INF/resources\n\n这些目录静态资源都可以直接访问\n\n例如：http://localhost:8080/123.png\n\n如果是他们在他们的子目录下，则需要加上子目录的包名\n\n##### 请求顺序\n\n在请求进来时，先判断Controller能不能处理，如果不能处理再交给静态资源处理器来处理，否则返回404\n\n##### 配置静态资源的访问前缀\n\n访问静态资源默认是没有前缀的，但是实际上我们需要加上前缀来对资源进行一些个性化的拦截（登录拦截动态资源，而为静态资源放行）\n\n设置静态资源前缀：\n\n```yml\nspring:\n  mvc:\n    static-path-pattern: /res/**\n```\n\n表示和这个正则表达式匹配的可以由静态资源处理器来处理\n\n##### 设置静态资源的目录\n\n```yml\nspring:\n  resources:\n    static-locations: [classpath:/static/,classpath:/static/img/]\n```\n\n![image-20220429142943211](D:\\学习笔记\\picture\\image-20220429142943211-1669804541526-50.png)\n\n底层是一个String数组，所以我们采用数组（列表）的写法\n\nwebjars：用于编写web应用的jar包（例如JQuery）\n\n在pom引入后，可以在webjars/目录下访问\n\n##### 欢迎页\n\n如果静态目录下有index.html页面，访问`http://localhost:8080/`也就是项目路径时，会默认显示index.html页面\n\n但是如果配置了\n\n```\nspring:\n  mvc:\n    static-path-pattern: /res/**\n```\n\n会让欢迎页功能失效，也会让图标功能失效\n\n##### 图标功能\n\n在静态目录下添加favicon.ico作为所有页面的图标，然后用ctrl+F5强制刷新并清空缓存可以看到效果\n\n##### 静态资源访问底层原理\n\n```java\n\t\t@Override\n\t\tpublic void addResourceHandlers(ResourceHandlerRegistry registry) {\n\t\t\tif (!this.resourceProperties.isAddMappings()) {\n\t\t\t\tlogger.debug(\"Default resource handling disabled\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tDuration cachePeriod = this.resourceProperties.getCache().getPeriod();\n\t\t\tCacheControl cacheControl = this.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();\n\t\t\tif (!registry.hasMappingForPattern(\"/webjars/**\")) {\n\t\t\t\tcustomizeResourceHandlerRegistration(registry.addResourceHandler(\"/webjars/**\")\n\t\t\t\t\t\t.addResourceLocations(\"classpath:/META-INF/resources/webjars/\")\n\t\t\t\t\t\t.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));\n\t\t\t}\n\t\t\tString staticPathPattern = this.mvcProperties.getStaticPathPattern();\n\t\t\tif (!registry.hasMappingForPattern(staticPathPattern)) {\n\t\t\t\tcustomizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)\n\t\t\t\t\t\t.addResourceLocations(getResourceLocations(this.resourceProperties.getStaticLocations()))\n\t\t\t\t\t\t.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));\n\t\t\t}\n\t\t}\n```\n\n`resourceProperties.isAddMappings() `对应配置：\n\n```yml\nspring:\n  resources:\n    add-mappings: false\n```\n\n从源码可知，如果配置成了false，后面的逻辑都不会执行，也就禁用了静态资源的访问功能（默认是true）\n\n`Duration cachePeriod = this.resourceProperties.getCache().getPeriod();`\n\n这条语句用于获取配置：\n\n```yml\nspring:\n  resources:\n    cache:\n      period: 11000\n```\n\n也就是设置静态资源的缓存时间，在这段时间内不用再重新加载静态资源，可以直接从浏览器缓存中获取，单位是秒\n\n通过缓存拿到的资源状态码会显示304\n\nwebjars访问规则：\n\n```java\n\t\t\tif (!registry.hasMappingForPattern(\"/webjars/**\")) {\n\t\t\t\tcustomizeResourceHandlerRegistration(registry.addResourceHandler(\"/webjars/**\")\n\t\t\t\t\t\t.addResourceLocations(\"classpath:/META-INF/resources/webjars/\")\n\t\t\t\t\t\t.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));\n\t\t\t}\n```\n\n如果在Controller中没有设置`/webjars/**`的路由，就在访问带有webjars的前缀时，访问classpath:/META-INF/resources/webjars/这个目录下的资源，同时设置缓存时间和缓存控制\n\n##### 静态资源访问规则：\n\n```java\n\t\t\tString staticPathPattern = this.mvcProperties.getStaticPathPattern();\n\t\t\tif (!registry.hasMappingForPattern(staticPathPattern)) {\n\t\t\t\tcustomizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)\n\t\t\t\t\t\t.addResourceLocations(getResourceLocations(this.resourceProperties.getStaticLocations()))\n\t\t\t\t\t\t.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));\n\t\t\t}\n```\n\n如果在Controller中没有设置staticPathPattern的url访问规则，则在访问staticPathPattern规则下的资源时，访问this.resourceProperties.getStaticLocations()路径下对应静态资源，同时设置缓存时间。\n\nstaticPathPattern：\n\n![image-20220429154312189](D:\\学习笔记\\picture\\image-20220429154312189-1669804541526-51.png)\n\n这就解释了为什么静态资源访问的url是/ 而没有前缀\n\nstaticLocations：\n\n![image-20220429154625565](D:\\学习笔记\\picture\\image-20220429154625565-1669804541526-52.png)\n\n这就也就静态资源默认路径的由来，如果我们进行了配置，staticLocations就会被更新为配置文件中的值。\n\n关于欢迎页：\n\n```java\nWelcomePageHandlerMapping(TemplateAvailabilityProviders templateAvailabilityProviders,\n\t\t\tApplicationContext applicationContext, Optional<Resource> welcomePage, String staticPathPattern) {\n\t\tif (welcomePage.isPresent() && \"/**\".equals(staticPathPattern)) {\n\t\t\tlogger.info(\"Adding welcome page: \" + welcomePage.get());\n\t\t\tsetRootViewName(\"forward:index.html\");\n\t\t}\n\t\telse if (welcomeTemplateExists(templateAvailabilityProviders, applicationContext)) {\n\t\t\tlogger.info(\"Adding welcome page template: index\");\n\t\t\tsetRootViewName(\"index\");\n\t\t}\n\t}\n```\n\n`\"/**\".equals(staticPathPattern)`我们可以看到，只有在静态路径没有被配置时，欢迎页才会生效\n\n### Restful风格开发\n\n对于原生的HTML中的form元素没有PUT和DELETE方法，可以使用post方法模拟这两个请求（如果用一些能直接发这两种请求的工具则不需要以下流程，因为在HTTP层就已经是PUT和DELETE了，所以这一项是选择性开启）\n\nWebMvcAutoConfiguration类中有这样的一段配置：\n\n```java\n\t@Bean\n\t@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)\n\t@ConditionalOnProperty(prefix = \"spring.mvc.hiddenmethod.filter\", name = \"enabled\", matchIfMissing = false)\n\tpublic OrderedHiddenHttpMethodFilter hiddenHttpMethodFilter() {\n\t\treturn new OrderedHiddenHttpMethodFilter();\n\t}\n```\n\n注意到@ConditionalOnProperty(prefix = \"spring.mvc.hiddenmethod.filter\", name = \"enabled\", matchIfMissing = false)，需要我们在配置文件中，将spring.mvc.hiddenmethod.filter 设置为enabled 才可以：\n\n```yml\nspring:\n  mvc:\n    hiddenmethod:\n      filter:\n        enabled: true\n```\n\n前端需要添加隐藏参数_method，才能使用PUT方法和DELETE方法：\n\n```html\n<form action=\"/user\" method=\"get\">\n    <input value=\"REST-GET提交\" type=\"submit\" />\n</form>\n\n<form action=\"/user\" method=\"post\">\n    <input value=\"REST-POST提交\" type=\"submit\" />\n</form>\n\n<form action=\"/user\" method=\"post\">\n    <input name=\"_method\" type=\"hidden\" value=\"DELETE\"/>\n    <input value=\"REST-DELETE 提交\" type=\"submit\"/>\n</form>\n\n<form action=\"/user\" method=\"post\">\n    <input name=\"_method\" type=\"hidden\" value=\"PUT\" />\n    <input value=\"REST-PUT提交\"type=\"submit\" />\n<form>\n\n```\n\nRest原理（表单提交要使用REST的时候）\n\n```java\n\t@Override\n\tprotected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n\t\t\tthrows ServletException, IOException {\n\n\t\tHttpServletRequest requestToUse = request;\n\n\t\tif (\"POST\".equals(request.getMethod()) && request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) == null) {\n\t\t\tString paramValue = request.getParameter(this.methodParam);\n\t\t\tif (StringUtils.hasLength(paramValue)) {\n\t\t\t\tString method = paramValue.toUpperCase(Locale.ENGLISH);\n\t\t\t\tif (ALLOWED_METHODS.contains(method)) {\n\t\t\t\t\trequestToUse = new HttpMethodRequestWrapper(request, method);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfilterChain.doFilter(requestToUse, response);\n\t}\n```\n\n在执行拦截器前，会先获取到我们_method字段的参数，然后根据这个字段重新设置我们的请求方法，然后生成一个HttpServletRequest的包装类（这个类也实现了HttpServletRequest接口），然后将原来的request和新设置的方法传进去，从而完成方法的替换，然后再去执行接下来的逻辑。\n\n使用@GetMapping(\"/\") @PostMapping(\"/\") 等更方便\n\n### 请求映射原理\n\nDispatcherServlet实现了HttpServlet接口，所以本质上就是一个Servlet，而Servlet的功能就是接收从服务器发送来的请求，并予以返回值的框架。\n\nDispatcherServlet里面实现了doGet，doPost等方法，这些方法都会调用processRequest方法，在这个方法中调用doService方法，在doService方法再调用doDispatch方法，而处理请求的核心代码就在这个方法中。\n\n```java\n\tprotected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {\n\t\tHttpServletRequest processedRequest = request;\n\t\tHandlerExecutionChain mappedHandler = null;\n\t\tboolean multipartRequestParsed = false;\n\n\t\tWebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\n\n\t\ttry {\n\t\t\tModelAndView mv = null;\n\t\t\tException dispatchException = null;\n\n\t\t\ttry {\n                //判断是不是文件上传请求\n\t\t\t\tprocessedRequest = checkMultipart(request);\n\t\t\t\tmultipartRequestParsed = (processedRequest != request);\n\n\t\t\t\t// Determine handler for the current request.\n\t\t\t\tmappedHandler = getHandler(processedRequest);\n\t\t\t\tif (mappedHandler == null) {\n\t\t\t\t\tnoHandlerFound(processedRequest, response);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Determine handler adapter for the current request.\n\t\t\t\tHandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());\n\n\t\t\t\t// Process last-modified header, if supported by the handler.\n\t\t\t\tString method = request.getMethod();\n\t\t\t\tboolean isGet = \"GET\".equals(method);\n\t\t\t\tif (isGet || \"HEAD\".equals(method)) {\n\t\t\t\t\tlong lastModified = ha.getLastModified(request, mappedHandler.getHandler());\n\t\t\t\t\tif (new ServletWebRequest(request, response).checkNotModified(lastModified) && isGet) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!mappedHandler.applyPreHandle(processedRequest, response)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Actually invoke the handler.\n\t\t\t\tmv = ha.handle(processedRequest, response, mappedHandler.getHandler());\n\n\t\t\t\tif (asyncManager.isConcurrentHandlingStarted()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tapplyDefaultViewName(processedRequest, mv);\n\t\t\t\tmappedHandler.applyPostHandle(processedRequest, response, mv);\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tdispatchException = ex;\n\t\t\t}\n\t\t\tcatch (Throwable err) {\n\t\t\t\t// As of 4.3, we're processing Errors thrown from handler methods as well,\n\t\t\t\t// making them available for @ExceptionHandler methods and other scenarios.\n\t\t\t\tdispatchException = new NestedServletException(\"Handler dispatch failed\", err);\n\t\t\t}\n\t\t\tprocessDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\ttriggerAfterCompletion(processedRequest, response, mappedHandler, ex);\n\t\t}\n\t\tcatch (Throwable err) {\n\t\t\ttriggerAfterCompletion(processedRequest, response, mappedHandler,\n\t\t\t\t\tnew NestedServletException(\"Handler processing failed\", err));\n\t\t}\n\t\tfinally {\n\t\t\tif (asyncManager.isConcurrentHandlingStarted()) {\n\t\t\t\t// Instead of postHandle and afterCompletion\n\t\t\t\tif (mappedHandler != null) {\n\t\t\t\t\tmappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Clean up any resources used by a multipart request.\n\t\t\t\tif (multipartRequestParsed) {\n\t\t\t\t\tcleanupMultipart(processedRequest);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```\n\n**mappedHandler = getHandler(processedRequest)**\n\n根据请求获取对应url的处理器\n\n```java\n\t@Nullable\n\tprotected HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception {\n\t\tif (this.handlerMappings != null) {\n\t\t\tfor (HandlerMapping mapping : this.handlerMappings) {\n\t\t\t\tHandlerExecutionChain handler = mapping.getHandler(request);\n\t\t\t\tif (handler != null) {\n\t\t\t\t\treturn handler;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n```\n\n遍历容器中所有的HandlerMapping，找到第一个能处理这个请求的handler并返回\n\nSpring帮我们注册的handler有欢迎页的handler，我们在Controller定义的handler，以及我们自定义的handler\n\n先根据URL找到URL匹配的处理器handler，先找到方法也匹配的handler，如果有多个匹配则报错\n\n### Springboot参数注解\n\n#### @PathVariable  路径参数\n\n将路径的一部分作为参数/user/{id}\n数字或者字符串变量，加上这个注解后可以获取到路径参数中对应的名称。如果是一个Map型变量加上了这个注解则会将所有参数以kv的形式传入到这个Map中\n\n#### @RequestHeader  请求头参数\n\n可以拿到请求头中对应的参数，如果参数类型是Map,MultiValueMap,HttpHeaders则会拿到所有的请求头参数\n\n#### @RequestParam  请求参数\n\n用来获取路由参数\n例如/user?age=13\n如果等号左边有相同的值，则会以列表的形式读取进来\n如果参数列表是Map类型，则会将所有方法参数都读进来，类型是String,String或者String,Object\n\n#### @CookieValue  Cookie参数\n\n可以获取指定Cookie的值\n参数类型可以是String，也可以是Cookie类型的变量，用getName和getValue来获取KV的值\n\n#### @RequestBody  请求体\n\n获取请求体中的所有参数，如果参数类型是String会把参数url原样拿过来，如果是其他对象类型，会将参数按照属性名装配进去后返回\n\n#### @RequestAttribute 请求域参数\n\n设置获取请求域的参数，请求域的参数可以通过request的setAttribute来设置，也可以用过getAttribute来获取，在进行路由转发的时候可以使用这种方式传递参数，转发方式:\nreturn \"forward:/success\" 在forward后面设置转发的路由，这样可以让多个路由映射到同一个功能上\n\n#### @MatrixVariable  矩阵变量\n\n```\n/cars/sell;low=34;brand=byd,audi,yd\n```\n\nURL中还可以通过矩阵变量传递参数，每个参数用分号`;`分割，List类型的参数可以直接用逗号`,`分割，相同参数会被封装成一个list\n\n在参数中加上这个注解@MatrixVariable来获取值\n\n每个矩阵变量依附于它前面的路由变量，每个路径变量都可以有一个一系列矩阵变量，可以通过设置@MatrixVariable中的pathVar属性来获取指定变量参数后面的矩阵变量\n\n```java\n@RestController\npublic class ParameterTestController {\n\n    ///cars/sell;low=34;brand=byd,audi,yd\n    @GetMapping(\"/cars/{path}\")\n    public Map carsSell(@MatrixVariable(\"low\") Integer low,\n                        @MatrixVariable(\"brand\") List<String> brand,\n                        @PathVariable(\"path\") String path){\n        Map<String,Object> map = new HashMap<>();\n\n        map.put(\"low\",low);\n        map.put(\"brand\",brand);\n        map.put(\"path\",path);\n        return map;\n    }\n\n    // /boss/1;age=20/2;age=10\n\n    @GetMapping(\"/boss/{bossId}/{empId}\")\n    public Map boss(@MatrixVariable(value = \"age\",pathVar = \"bossId\") Integer bossAge,\n                    @MatrixVariable(value = \"age\",pathVar = \"empId\") Integer empAge){\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"bossAge\",bossAge);\n        map.put(\"empAge\",empAge);\n        return map;\n    }\n}\n```\n\nSpringboot禁用了矩阵变量的功能，需要我们手动开启\n\n原因：\n\n```java\n\t\t@Override\n\t\t@SuppressWarnings(\"deprecation\")\n\t\tpublic void configurePathMatch(PathMatchConfigurer configurer) {\n\t\t\tconfigurer.setUseSuffixPatternMatch(this.mvcProperties.getPathmatch().isUseSuffixPattern());\n\t\t\tconfigurer.setUseRegisteredSuffixPatternMatch(\n\t\t\t\t\tthis.mvcProperties.getPathmatch().isUseRegisteredSuffixPattern());\n\t\t\tthis.dispatcherServletPath.ifAvailable((dispatcherPath) -> {\n\t\t\t\tString servletUrlMapping = dispatcherPath.getServletUrlMapping();\n\t\t\t\tif (servletUrlMapping.equals(\"/\") && singleDispatcherServlet()) {\n\t\t\t\t\tUrlPathHelper urlPathHelper = new UrlPathHelper();\n\t\t\t\t\turlPathHelper.setAlwaysUseFullPath(true);\n\t\t\t\t\tconfigurer.setUrlPathHelper(urlPathHelper);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n```\n\n路由匹配在上述方法中进行，而路由解析需要用到UrlPathHelper，而在UrlPathHelper中：\n\n```java\n/**\n\t * Set if \";\" (semicolon) content should be stripped from the request URI.\n\t * <p>Default is \"true\".\n\t */\n\tpublic void setRemoveSemicolonContent(boolean removeSemicolonContent) {\n\t\tcheckReadOnly();\n\t\tthis.removeSemicolonContent = removeSemicolonContent;\n\t}\n```\n\n上面提到如果removeSemicolonContent这个变量是true，则会移除我们分号后面的内容，因而我们获取不到矩阵参数\n\n所以我们在组件中设置一个这个变量为false的组件即可：\n\n可以单独写一个类实现接口，JDK8有接口默认方法，所以们不用实现所有的类：\n\n```java\n@Configuration(proxyBeanMethods = false)\npublic class WebConfig implements WebMvcConfigurer {\n    @Override\n    public void configurePathMatch(PathMatchConfigurer configurer) {\n\n        UrlPathHelper urlPathHelper = new UrlPathHelper();\n        // 不移除；后面的内容。矩阵变量功能就可以生效\n        urlPathHelper.setRemoveSemicolonContent(false);\n        configurer.setUrlPathHelper(urlPathHelper);\n    }\n}\n```\n\n也可以在配置类中用@Bean注入：\n\n```java\n@Configuration(proxyBeanMethods = false)\npublic class WebConfig{\n    @Bean\n    public WebMvcConfigurer webMvcConfigurer(){\n        return new WebMvcConfigurer() {\n                        @Override\n            public void configurePathMatch(PathMatchConfigurer configurer) {\n                UrlPathHelper urlPathHelper = new UrlPathHelper();\n                // 不移除；后面的内容。矩阵变量功能就可以生效\n                urlPathHelper.setRemoveSemicolonContent(false);\n                configurer.setUrlPathHelper(urlPathHelper);\n            }\n        }\n    }\n}\n```\n\n（但是重写这个方法的话，其他方法怎么办呢……可能Spring还做了一些其他的事情……，不过我们知道这个怎么配置，大致的原因是什么即可）\n\n#### Springboot参数注解原理\n\n```java\n\tprotected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {\n\t\tHttpServletRequest processedRequest = request;\n\t\tHandlerExecutionChain mappedHandler = null;\n\t\tboolean multipartRequestParsed = false;\n\n\t\tWebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\n\n\t\ttry {\n\t\t\tModelAndView mv = null;\n\t\t\tException dispatchException = null;\n\n\t\t\ttry {\n                //判断是不是文件上传请求\n\t\t\t\tprocessedRequest = checkMultipart(request);\n\t\t\t\tmultipartRequestParsed = (processedRequest != request);\n\n\t\t\t\t// Determine handler for the current request.\n\t\t\t\tmappedHandler = getHandler(processedRequest);\n\t\t\t\tif (mappedHandler == null) {\n\t\t\t\t\tnoHandlerFound(processedRequest, response);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Determine handler adapter for the current request.\n\t\t\t\tHandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());\n\n\t\t\t\t// Process last-modified header, if supported by the handler.\n\t\t\t\tString method = request.getMethod();\n\t\t\t\tboolean isGet = \"GET\".equals(method);\n\t\t\t\tif (isGet || \"HEAD\".equals(method)) {\n\t\t\t\t\tlong lastModified = ha.getLastModified(request, mappedHandler.getHandler());\n\t\t\t\t\tif (new ServletWebRequest(request, response).checkNotModified(lastModified) && isGet) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!mappedHandler.applyPreHandle(processedRequest, response)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Actually invoke the handler.\n\t\t\t\tmv = ha.handle(processedRequest, response, mappedHandler.getHandler());\n\n\t\t\t\tif (asyncManager.isConcurrentHandlingStarted()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tapplyDefaultViewName(processedRequest, mv);\n\t\t\t\tmappedHandler.applyPostHandle(processedRequest, response, mv);\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tdispatchException = ex;\n\t\t\t}\n\t\t\tcatch (Throwable err) {\n\t\t\t\t// As of 4.3, we're processing Errors thrown from handler methods as well,\n\t\t\t\t// making them available for @ExceptionHandler methods and other scenarios.\n\t\t\t\tdispatchException = new NestedServletException(\"Handler dispatch failed\", err);\n\t\t\t}\n\t\t\tprocessDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\ttriggerAfterCompletion(processedRequest, response, mappedHandler, ex);\n\t\t}\n\t\tcatch (Throwable err) {\n\t\t\ttriggerAfterCompletion(processedRequest, response, mappedHandler,\n\t\t\t\t\tnew NestedServletException(\"Handler processing failed\", err));\n\t\t}\n\t\tfinally {\n\t\t\tif (asyncManager.isConcurrentHandlingStarted()) {\n\t\t\t\t// Instead of postHandle and afterCompletion\n\t\t\t\tif (mappedHandler != null) {\n\t\t\t\t\tmappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Clean up any resources used by a multipart request.\n\t\t\t\tif (multipartRequestParsed) {\n\t\t\t\t\tcleanupMultipart(processedRequest);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```\n\n##### 获取handler\n\nmappedHandler = getHandler(processedRequest);\n\n获取能处理这个请求的handler，而所谓的handler就是在Controller中通过URL找到的对应的方法，拿到方法的各种信息。\n\n##### 获取适配器\n\nHandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());\n\n获取能处理这个handler的适配器，适配器用于解析上述各种注解的参数，相当于一个大的反射工具\n\nHandlerAdapter 里面有这些方法：\n\n```java\npublic interface HandlerAdapter {\n\t//是否能处理这个handler\n\tboolean supports(Object handler);\n    /*\n    对应的实现类，直接比较是不是我们想要的类型的对象\n    @Override\n\tpublic final boolean supports(Object handler) {\n\t\treturn (handler instanceof HandlerMethod && supportsInternal((HandlerMethod) handler));\n\t}\n    \n    */\n    \n    \n\t//如果能处理则调用这个方法处理请求\n\t@Nullable\n\tModelAndView handle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception;\n\n\tlong getLastModified(HttpServletRequest request, Object handler);\n\n}\n```\n\n获取对应的handlerAdapter的方法：\n\n```java\n\tprotected HandlerAdapter getHandlerAdapter(Object handler) throws ServletException {\n\t\tif (this.handlerAdapters != null) {\n\t\t\tfor (HandlerAdapter adapter : this.handlerAdapters) {\n\t\t\t\tif (adapter.supports(handler)) {\n\t\t\t\t\treturn adapter;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthrow new ServletException(\"No adapter for handler [\" + handler +\n\t\t\t\t\"]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler\");\n\t}\n```\n\n遍历容器中注册的所有HandlerAdapter，找到能支持这个handler的HandlerAdapter\n\n![image-20220430192846168](D:\\学习笔记\\picture\\image-20220430192846168-1669804541526-53.png)\n\nRequestMappingHandlerAdapter ：用于处理Controller的方法中带哟@RequestMapping注解的方法（也就是我们所写的普通方法）\n\nHandlerFunctionAdapter ：用于处理函数式编程的方法对应的Controller\n\n##### 浏览器缓存\n\n```java\n    String method = request.getMethod();\n    boolean isGet = \"GET\".equals(method);\n    if (isGet || \"HEAD\".equals(method)) {\n        long lastModified = ha.getLastModified(request, mappedHandler.getHandler());\n        if (new ServletWebRequest(request, response).checkNotModified(lastModified) && isGet) {\n            return;\n        }\n    }\n```\n\n判断是不是GET方法或者方法，这个String method是我们之前设置的方法名（回顾之前用内置参数模拟PUT,DELETE方法，这里的HEAD方法也是这样），如果是HEAD方法则直接返回（并不是真正的请求），如果是GET方法的则判断静态资源最后的修改时间，如果没有修改则提示客户端可以从浏览器缓存中获取静态资源\n\n##### 执行方法\n\n```\nmv = ha.handle(processedRequest, response, mappedHandler.getHandler());\n```\n\n返回值是视图解析器(->代表调用)\n\n```\nhandle -> handleInternal->invokeHandlerMethod\n```\n\ninvokeHandlerMethod方法中\n\n根据不同的类型的注解解析参数，并设置参数的值：\n\n```\nif (this.argumentResolvers != null) {\n    invocableMethod.setHandlerMethodArgumentResolvers(this.argumentResolvers);\n}\n```\n\n解析返回值：\n\n```\nif (this.returnValueHandlers != null) {\n    invocableMethod.setHandlerMethodReturnValueHandlers(this.returnValueHandlers);\n}\n```\n\n准备工作完成，真正执行方法：\n\n```\ninvocableMethod.invokeAndHandle(webRequest, mavContainer);\n```\n\n在这个方法中调用**invokeForRequest**方法：\n\n```java\n\t@Nullable\n\tpublic Object invokeForRequest(NativeWebRequest request, @Nullable ModelAndViewContainer mavContainer,\n\t\t\tObject... providedArgs) throws Exception {\n\n\t\tObject[] args = getMethodArgumentValues(request, mavContainer, providedArgs);\n\t\tif (logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"Arguments: \" + Arrays.toString(args));\n\t\t}\n\t\treturn doInvoke(args);\n\t}\n```\n\n第一条语句：\n\n```\nObject[] args = getMethodArgumentValues(request, mavContainer, providedArgs);\n```\n\n用于获取这个方法所有所需的参数\n\n```java\n\tprotected Object[] getMethodArgumentValues(NativeWebRequest request, @Nullable ModelAndViewContainer mavContainer,\n\t\t\tObject... providedArgs) throws Exception {\n\t\t//拿到所有参数的信息，但是此时参数还没有值\n\t\tMethodParameter[] parameters = getMethodParameters();\n\t\tif (ObjectUtils.isEmpty(parameters)) {\n\t\t\treturn EMPTY_ARGS;\n\t\t}\n\t\t//创建等大的数组作为参数列表，准备设置值\n\t\tObject[] args = new Object[parameters.length];\n\t\tfor (int i = 0; i < parameters.length; i++) {\n\t\t\tMethodParameter parameter = parameters[i];\n\t\t\tparameter.initParameterNameDiscovery(this.parameterNameDiscoverer);\n\t\t\targs[i] = findProvidedArgument(parameter, providedArgs);\n\t\t\tif (args[i] != null) {\n\t\t\t\tcontinue;\n\t\t\t}\n            //判断在所有的参数解析器中是否有能够处理这个参数的解析器\n\t\t\tif (!this.resolvers.supportsParameter(parameter)) {\n\t\t\t\tthrow new IllegalStateException(formatArgumentError(parameter, \"No suitable resolver\"));\n\t\t\t}\n\t\t\ttry {\n            //解析参数的值\n\t\t\t\targs[i] = this.resolvers.resolveArgument(parameter, mavContainer, request, this.dataBinderFactory);\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\t// Leave stack trace for later, exception may actually be resolved and handled...\n\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\tString exMsg = ex.getMessage();\n\t\t\t\t\tif (exMsg != null && !exMsg.contains(parameter.getExecutable().toGenericString())) {\n\t\t\t\t\t\tlogger.debug(formatArgumentError(parameter, exMsg));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthrow ex;\n\t\t\t}\n\t\t}\n\t\treturn args;\n\t}\n```\n\n**this.resolvers.supportsParameter(parameter)** //判断在所有的视图解析器中是否有能够处理这个参数的解析器\n\n判断方法是看是否能找到合适的参数解析器：\n\n```\n\t@Override\n\tpublic boolean supportsParameter(MethodParameter parameter) {\n\t\treturn getArgumentResolver(parameter) != null;\n\t}\n```\n\n查找过程getArgumentResolver：\n\n先判断缓存map里面有没有，如果有就直接拿到，如果没有则遍历所有的视图解析器，判断是否支持解析这个参数，如果支持则放入缓存中并返回这个视图解析器。\n\n判断方法：1. 是否有对应的参数注解 2.参数类型是否满足要去 3.其他\n\n```java\n@Nullable\n\tprivate HandlerMethodArgumentResolver getArgumentResolver(MethodParameter parameter) {\n\t\tHandlerMethodArgumentResolver result = this.argumentResolverCache.get(parameter);\n\t\tif (result == null) {\n\t\t\tfor (HandlerMethodArgumentResolver resolver : this.argumentResolvers) {\n\t\t\t\tif (resolver.supportsParameter(parameter)) {\n\t\t\t\t\tresult = resolver;\n\t\t\t\t\tthis.argumentResolverCache.put(parameter, result);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n```\n\n**args[i] = this.resolvers.resolveArgument(parameter, mavContainer, request, this.dataBinderFactory)** 解析参数的值\n\n进入后来到可以来到：\n\n```java\n\t@Nullable\n\tprotected Object resolveName(String name, MethodParameter parameter, NativeWebRequest request) throws Exception {\n\t\tMap<String, String> uriTemplateVars = (Map<String, String>) request.getAttribute(\n\t\t\t\tHandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST);\n\t\treturn (uriTemplateVars != null ? uriTemplateVars.get(name) : null);\n\t}\n```\n\n这个方法用于获取参数的值，不同注解的的解析器有不同的实现，上面这个是@PathVariable参数注解的解析器。\n\n之前我们看到Springboot用urlPathHelper解析了URL中的各种参数，解析后Springboot会将其放到HttpServletRequest的请求域中，然后再这里直接根据参数名从请求域中获取参数的值\n\n获取后回到原来的方法中，设置参数的值\n\n##### 进行一些善后处理\n\nmappedHandler.applyPostHandle(processedRequest, response, mv);\n\n##### 处理最后的结果\n\n也就设置最后要去哪个页面，需要处理哪些参数\n\nprocessDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);\n\n### Servlet API\n\nSpringboot给Servlet API类型的参数赋值时，解析用的方法和上面加了注解的参数一致，只是用的参数解析器不同。这里用的参数解析器只用判断参数的类型即可，如果是指定的类型比如HttpServletRequest 类型，他就会封装出一个对应的请求对象并进行引用赋值。\n\n### 复杂参数\n\nMap，Model类型的参数对应HttpServletRequest的请求域，操作这两个参数（map.put）就相当于操作request的请求域(request.setAttribute)\n\n```java\n@GetMapping(\"/params\")\npublic String testParam(Map<String,Object> map,\n                        Model model,\n                        HttpServletRequest request,\n                        HttpServletResponse response){\n    //下面三位都是可以给request域中放数据\n    map.put(\"hello\",\"world666\");\n    model.addAttribute(\"world\",\"hello666\");\n    request.setAttribute(\"message\",\"HelloWorld\");\n\n    Cookie cookie = new Cookie(\"c1\",\"v1\");\n    response.addCookie(cookie);\n    return \"forward:/success\";\n}\n\n@ResponseBody\n@GetMapping(\"/success\")\npublic Map success(@RequestAttribute(value = \"msg\",required = false) String msg,\n                   @RequestAttribute(value = \"code\",required = false)Integer code,\n                   HttpServletRequest request){\n    Object msg1 = request.getAttribute(\"msg\");\n\n    Map<String,Object> map = new HashMap<>();\n    Object hello = request.getAttribute(\"hello\");//得出testParam方法赋予的值 world666\n    Object world = request.getAttribute(\"world\");//得出testParam方法赋予的值 hello666\n    Object message = request.getAttribute(\"message\");//得出testParam方法赋予的值 HelloWorld\n\n    map.put(\"reqMethod_msg\",msg1);\n    map.put(\"annotation_msg\",msg);\n    map.put(\"hello\",hello);\n    map.put(\"world\",world);\n    map.put(\"message\",message);\n\n    return map;\n}\n```\n\nresponse可以方Cookie\n\n#### Map，Model\n\n底层都会调用ModelAndViewContainer的getModel方法获取到一个MAP型的变量，因而在经过参数解析器解析后，这两个指向的对象实际上是同一个\n\nModelAndViewContainer 故名意思就是模型和视图的容器，Model用于存放数据，View用于存放视图（页面的地址），这两个都在这个容器中\n\n这两个参数操作的是request中请求域的参数，而这两个类型的参数是怎么操作请求域的呢？\n\n解析参数的时候如果参数类型是Map或者Model，则会创建一个BindingAwareModelMap变量来装载请求域中的参数，这个类既是Map也是Model，所以可以完成赋值。\n\n![](D:\\学习笔记\\picture\\watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE4NjMwMjQ=,size_16,color_FFFFFF,t_70#pic_center.png)\n\n请求结束后，我们再来到具体的逻辑：\n\n```java\n\tpublic void invokeAndHandle(ServletWebRequest webRequest, ModelAndViewContainer mavContainer,\n\t\t\tObject... providedArgs) throws Exception {\n\t\t//执行方法，得到返回值是\"forward:/success\"\n\t\tObject returnValue = invokeForRequest(webRequest, mavContainer, providedArgs);\n        //设置请求状态\n\t\tsetResponseStatus(webRequest);\n\n\t\tif (returnValue == null) {\n\t\t\tif (isRequestNotModified(webRequest) || getResponseStatus() != null || mavContainer.isRequestHandled()) {\n\t\t\t\tdisableContentCachingIfNecessary(webRequest);\n\t\t\t\tmavContainer.setRequestHandled(true);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\telse if (StringUtils.hasText(getResponseStatusReason())) {\n\t\t\tmavContainer.setRequestHandled(true);\n\t\t\treturn;\n\t\t}\n\n\t\tmavContainer.setRequestHandled(false);\n\t\tAssert.state(this.returnValueHandlers != null, \"No return value handlers\");\n\t\ttry {\n            //处理返回值,这里有我们要的转发逻辑，里面会传入我们方法的返回值returnValue\n\t\t\tthis.returnValueHandlers.handleReturnValue(\n\t\t\t\t\treturnValue, getReturnValueType(returnValue), mavContainer, webRequest);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(formatErrorForReturnValue(returnValue), ex);\n\t\t\t}\n\t\t\tthrow ex;\n\t\t}\n\t}\n```\n\n我们深入handleReturnValue方法可以来到这个方法里面：\n\n```java\n\t@Override\n\tpublic void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType,\n\t\t\tModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {\n\t\t//判断返回值是不是字符串\n\t\tif (returnValue instanceof CharSequence) {\n\t\t\tString viewName = returnValue.toString();\n            //如果是字符串则设置容器中view的名称(转发路径)\n\t\t\tmavContainer.setViewName(viewName);\n\t\t\tif (isRedirectViewName(viewName)) {\n\t\t\t\tmavContainer.setRedirectModelScenario(true);\n\t\t\t}\n\t\t}\n\t\telse if (returnValue != null) {\n\t\t\t// should not happen\n\t\t\tthrow new UnsupportedOperationException(\"Unexpected return type: \" +\n\t\t\t\t\treturnType.getParameterType().getName() + \" in method: \" + returnType.getMethod());\n\t\t}\n\t}\n```\n\n在方法执行完成后我们会得到一个ModelAndView对象：\n\n```\nmv = ha.handle(processedRequest, response, mappedHandler.getHandler());\n```\n\nmv里面包含我们想要的数据（model）和转发的地址（view）\n\n然后传入到\n\n```\nmappedHandler.applyPostHandle(processedRequest, response, mv);\n```\n\n进行最后结果的处理\n\n深入这个方法后来到：\n\n```\nrender(mv, request, response);\n```\n\n这个方法用于渲染页面\n\n核心逻辑是：\n\n封装成视图对象：\n\n```java\nview = resolveViewName(/*视图名*/viewName,/*视图数据*/ mv.getModelInternal(), locale, request);\n```\n\n然后渲染视图：\n\n```java\nview.render(mv.getModelInternal(), request, response);\n/////////////////////////////////////////////////////////////\n//这个方法的逻辑是：\n@Override\n\tpublic void render(@Nullable Map<String, ?> model, HttpServletRequest request,\n\t\t\tHttpServletResponse response) throws Exception {\n\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"View \" + formatViewName() +\n\t\t\t\t\t\", model \" + (model != null ? model : Collections.emptyMap()) +\n\t\t\t\t\t(this.staticAttributes.isEmpty() ? \"\" : \", static attributes \" + this.staticAttributes));\n\t\t}\n\t\t//这一步，将我们model中的数据放到一个新的map里面mergedModel\n\t\tMap<String, Object> mergedModel = createMergedOutputModel(model, request, response);\n\t\tprepareResponse(request, response);\n\t\trenderMergedOutputModel(mergedModel, getRequestToExpose(request), response);\n\t}\n```\n\nrenderMergedOutputModel方法中会执行语句：exposeModelAsRequestAttributes(model, request);\n\n```java\n\tprotected void exposeModelAsRequestAttributes(Map<String, Object> model,\n\t\t\tHttpServletRequest request) throws Exception {\n\n\t\tmodel.forEach((name, value) -> {\n\t\t\tif (value != null) {\n\t\t\t\trequest.setAttribute(name, value);\n\t\t\t}\n\t\t\telse {\n\t\t\t\trequest.removeAttribute(name);\n\t\t\t}\n\t\t});\n\t}\n```\n\n显然这个方法的作用就是将model中的数据放到新的request的请求域中，这就解释了我们转发请求后，为啥新的方法中能拿到上一个请域的参数\n\n### Springboot自定义参数\n\n```java\n@RestController\npublic class ParameterTestController {\n    @PostMapping(\"/saveuser\")\n    public Person saveuser(Person person){\n        return person;\n    }\n}\n```\n\n参数列表是我们自定义的对象时，Spring会自动帮我们将参数按照参数名装配进去（如果包含了其他引用类型要用pet.name,pte.age的形式传过来才能解析）\n\n![image-20220502111900935](D:\\学习笔记\\picture\\image-20220502111900935-1669804541526-54.png)\n\n参数解析过程和前面讲的一样，只是用的参数解析器不同，这里用的参数解析器是`ServletModelAttributeMethodProcessor`\n\n能用这个的处理器的条件是加了@ModelAttribute的注解或者它不是简单数据类型（即是引用类型）\n\n```java\n\t@Override\n\tpublic boolean supportsParameter(MethodParameter parameter) {\n\t\treturn (parameter.hasParameterAnnotation(ModelAttribute.class) ||\n\t\t\t\t(this.annotationNotRequired && !BeanUtils.isSimpleProperty(parameter.getParameterType())));\n\t}\n```\n\n然后给Person参数的赋值过程如下：\n\n```java\n\t@Override\n\t@Nullable\n\tpublic final Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,\n\t\t\tNativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception {\n\n\t\tAssert.state(mavContainer != null, \"ModelAttributeMethodProcessor requires ModelAndViewContainer\");\n\t\tAssert.state(binderFactory != null, \"ModelAttributeMethodProcessor requires WebDataBinderFactory\");\n\n\t\tString name = ModelFactory.getNameForParameter(parameter);\n\t\tModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class);\n\t\tif (ann != null) {\n\t\t\tmavContainer.setBinding(name, ann.binding());\n\t\t}\n\n\t\tObject attribute = null;\n\t\tBindingResult bindingResult = null;\n\t\t//如果请求域中已经有了就直接返回\n\t\tif (mavContainer.containsAttribute(name)) {\n\t\t\tattribute = mavContainer.getModel().get(name);\n\t\t}\n\t\telse {\n\t\t\t// Create attribute instance\n\t\t\ttry {\n                //根据对象属性创建一个空对象（也就是上文中属性值为null的对象）\n\t\t\t\tattribute = createAttribute(name, parameter, binderFactory, webRequest);\n\t\t\t}\n\t\t\tcatch (BindException ex) {\n\t\t\t\tif (isBindExceptionRequired(parameter)) {\n\t\t\t\t\t// No BindingResult parameter -> fail with BindException\n\t\t\t\t\tthrow ex;\n\t\t\t\t}\n\t\t\t\t// Otherwise, expose null/empty value and associated BindingResult\n\t\t\t\tif (parameter.getParameterType() == Optional.class) {\n\t\t\t\t\tattribute = Optional.empty();\n\t\t\t\t}\n\t\t\t\tbindingResult = ex.getBindingResult();\n\t\t\t}\n\t\t}\n\n\t\tif (bindingResult == null) {\n\t\t\t// Bean property binding and validation;\n\t\t\t// skipped in case of binding failure on construction.\n            //为我们刚才创建的空对象绑定属性\n\t\t\tWebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name);\n\t\t\tif (binder.getTarget() != null) {\n\t\t\t\tif (!mavContainer.isBindingDisabled(name)) {\n                    //实际绑定属性\n\t\t\t\t\tbindRequestParameters(binder, webRequest);\n\t\t\t\t}\n\t\t\t\tvalidateIfApplicable(binder, parameter);\n\t\t\t\tif (binder.getBindingResult().hasErrors() && isBindExceptionRequired(binder, parameter)) {\n\t\t\t\t\tthrow new BindException(binder.getBindingResult());\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Value type adaptation, also covering java.util.Optional\n\t\t\tif (!parameter.getParameterType().isInstance(attribute)) {\n\t\t\t\tattribute = binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter);\n\t\t\t}\n\t\t\tbindingResult = binder.getBindingResult();\n\t\t}\n\n\t\t// Add resolved attribute and BindingResult at the end of the model\n\t\tMap<String, Object> bindingResultModel = bindingResult.getModel();\n\t\tmavContainer.removeAttributes(bindingResultModel);\n\t\tmavContainer.addAllAttributes(bindingResultModel);\n\n\t\treturn attribute;\n\t}\n```\n\nWebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name);\n\nWebDataBinder 是属性绑定器，这个类里面有各种数据类型之间的转换器，可以利用反射和转换器根据webRequest里面拿到的数据为对象属性赋值\n\n![image-20220501131802770](https://s2.loli.net/2022/05/26/kJjRoQfiZYBhDeN.png)\n\n实际绑定的过程是在`bindRequestParameters(binder, webRequest);`这个方法里面，这个方法过后对象属性就有值了\n\n`MutablePropertyValues mpvs = new MutablePropertyValues(request.getParameterMap());`通过这个方法拿到request中的所有kv属性值，然后接下来遍历对象中的所有参数，然后根据属性名从这个mpvs里面找就能拿到对应的属性值，但是拿到后还需要将原来的类型（一般是String，也可能是文件流之类的）转换为我们需要的类型，所以在绑定的时候还会遍历所有的属性转换器（Converter），找到可以进行转换的属性转换器，然后将其放入缓存，用转换器来进行属性值的转换，然后就可以为对象中的属性值赋值。\n\n#### 自定义类型转换器\n\n上面使用的都是Springboot提供的转换器，使用Spring为我们提供的转换规则，我们也可以自定义一个转换规则。\n\n```java\n@Configuration\npublic class MyConfig {\n    //1、WebMvcConfigurer定制化SpringMVC的功能\n    @Bean\n    public WebMvcConfigurer webMvcConfigurer(){\n        return new WebMvcConfigurer() {\n\n            @Override\n            public void addFormatters(FormatterRegistry registry) {\n                registry.addConverter(new Converter<String, Pet>() {\n\n                    @Override\n                    public Pet convert(String source) {\n                        // 啊猫,3\n                        if(!StringUtils.isEmpty(source)){\n                            Pet pet = new Pet();\n                            String[] split = source.split(\",\");\n                            pet.setName(split[0]);\n                            pet.setAge(Integer.parseInt(split[1]));\n                            return pet;\n                        }\n                        return null;\n                    }\n                });\n            }\n        };\n    }\n}\n```\n\n**WebMvcConfigurer**是Spring给我们提供的扩展功能的接口，我们可以重写其中的很多方法来定制化我们想要的功能\n\n在我们添加自定义的转换器后，Springboot在处理参数的时候就可以根据转换前后的参数类型找到能够使用的Converter进行转换，这样就不会报String无法转换成Pet的异常。\n\n并且Converter类带有@FunctionalInterface注解，申明了是一个函数式接口，我们可以直接传入Lamda表达式来进行设置。\n\n### 响应数据与内容协商\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n```\n\n在这个依赖中会自动帮我们引入JSON的依赖，可以帮我们将返回值处理成JSON格式的数据\n\n在Controller中，如果方法上带有@ResponBody注解，则会将返回值以JSON格式返回给前端\n\n#### 原理解析\n\n我们再来到处理请求的流程里面：\n\n```java\n\t@Override\n\tprotected ModelAndView handleInternal(HttpServletRequest request,\n\t\t\tHttpServletResponse response, HandlerMethod handlerMethod) throws Exception {\n\n\t\tModelAndView mav;\n\t\tcheckRequest(request);\n\n\t\t// Execute invokeHandlerMethod in synchronized block if required.\n\t\tif (this.synchronizeOnSession) {\n\t\t\tHttpSession session = request.getSession(false);\n\t\t\tif (session != null) {\n\t\t\t\tObject mutex = WebUtils.getSessionMutex(session);\n\t\t\t\tsynchronized (mutex) {\n\t\t\t\t\tmav = invokeHandlerMethod(request, response, handlerMethod);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// No HttpSession available -> no mutex necessary\n\t\t\t\tmav = invokeHandlerMethod(request, response, handlerMethod);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// No synchronization on session demanded at all...\n            //因为没有session锁，所以我们会来到这个方法中\n\t\t\tmav = invokeHandlerMethod(request, response, handlerMethod);\n\t\t}\n\n\t\tif (!response.containsHeader(HEADER_CACHE_CONTROL)) {\n\t\t\tif (getSessionAttributesHandler(handlerMethod).hasSessionAttributes()) {\n\t\t\t\tapplyCacheSeconds(response, this.cacheSecondsForSessionAttributeHandlers);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprepareResponse(response);\n\t\t\t}\n\t\t}\n\n\t\treturn mav;\n\t}\n```\n\nmav = invokeHandlerMethod(request, response, handlerMethod)  这个方法的逻辑如下：（其实解析参数的时候我们也进去过）\n\n```java\n    if (this.argumentResolvers != null) {\n        //传入所有参数解析器\n        invocableMethod.setHandlerMethodArgumentResolvers(this.argumentResolvers);\n    }\n    if (this.returnValueHandlers != null) {\n        //传入所有的返回值处理器\n        invocableMethod.setHandlerMethodReturnValueHandlers(this.returnValueHandlers);\n    }\n```\n\n然后来到invokeAndHandle方法来处理请求：\n\n```java\n\tpublic void invokeAndHandle(ServletWebRequest webRequest, ModelAndViewContainer mavContainer,\n\t\t\tObject... providedArgs) throws Exception {\n\t\t//执行方法并拿到返回值（里面的逻辑就是获取参数值和执行controller的方法，在上一节分析过）\n\t\tObject returnValue = invokeForRequest(webRequest, mavContainer, providedArgs);\n        //设置请求返回值状态\n\t\tsetResponseStatus(webRequest);\n\t\t//如果返回值为空，则不用处理返回值，直接返回\n\t\tif (returnValue == null) {\n\t\t\tif (isRequestNotModified(webRequest) || getResponseStatus() != null || mavContainer.isRequestHandled()) {\n\t\t\t\tdisableContentCachingIfNecessary(webRequest);\n\t\t\t\tmavContainer.setRequestHandled(true);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}//判断请求处理是否失败，如果失败也不处理返回值直接返回\n\t\telse if (StringUtils.hasText(getResponseStatusReason())) {\n\t\t\tmavContainer.setRequestHandled(true);\n\t\t\treturn;\n\t\t}\n\n\t\tmavContainer.setRequestHandled(false);\n\t\tAssert.state(this.returnValueHandlers != null, \"No return value handlers\");\n\t\ttry {\n        //重点：处理返回值的方法，参数为返回值，返回值类型，容器，请求\n\t\t\tthis.returnValueHandlers.handleReturnValue(\n\t\t\t\t\treturnValue, getReturnValueType(returnValue), mavContainer, webRequest);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(formatErrorForReturnValue(returnValue), ex);\n\t\t\t}\n\t\t\tthrow ex;\n\t\t}\n\t}\n```\n\n处理返回值的方法：\n\n```\nthis.returnValueHandlers.handleReturnValue(returnValue, getReturnValueType(returnValue), mavContainer, webRequest);\n```\n\n方法体：\n\n```java\n\t@Override\n\tpublic void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType,\n\t\t\tModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {\n\t\t//根据返回值和返回值类型获得返回值处理器\n\t\tHandlerMethodReturnValueHandler handler = selectHandler(returnValue, returnType);\n\t\tif (handler == null) {\n\t\t\tthrow new IllegalArgumentException(\"Unknown return value type: \" + returnType.getParameterType().getName());\n\t\t}\n        //用返回值处理器处理返回值\n\t\thandler.handleReturnValue(returnValue, returnType, mavContainer, webRequest);\n\t}\n```\n\nselectHandler(returnValue, returnType) ：\n\n```java\n\t@Nullable\n\tprivate HandlerMethodReturnValueHandler selectHandler(@Nullable Object value, MethodParameter returnType) {\n\t\tboolean isAsyncValue = isAsyncReturnValue(value, returnType);\n\t\tfor (HandlerMethodReturnValueHandler handler : this.returnValueHandlers) {\n\t\t\tif (isAsyncValue && !(handler instanceof AsyncHandlerMethodReturnValueHandler)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (handler.supportsReturnType(returnType)) {\n\t\t\t\treturn handler;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n```\n\n遍历所有的返回值处理器，判断哪个能够用来处理返回值，判断依据大多都是判断返回值类型是不是这个处理器想要的类型，或者有没有对应的注解\n\nSpringMVC能支持的返回值类型有：\n\n![image-20220502131627510](D:\\学习笔记\\picture\\image-20220502131627510-1669804541526-56.png)\n\n我们在方法上加了@ResponseBody注解，所以使用最后一种处理器\n\n找到返回值处理器后，用处理器处理返回值：\n\n```java\nhandler.handleReturnValue(returnValue, returnType, mavContainer, webRequest);\n```\n\n方法体：\n\n```java\n\t@Override\n\tpublic void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType,\n\t\t\tModelAndViewContainer mavContainer, NativeWebRequest webRequest)\n\t\t\tthrows IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {\n\n\t\tmavContainer.setRequestHandled(true);\n        //请求\n\t\tServletServerHttpRequest inputMessage = createInputMessage(webRequest);\n        //响应\n\t\tServletServerHttpResponse outputMessage = createOutputMessage(webRequest);\n\n\t\t// Try even with null return value. ResponseBodyAdvice could get involved.\n\t\twriteWithMessageConverters(returnValue, returnType, inputMessage, outputMessage);\n\t}\n```\n\n其中核心的是：\n\n```\nwriteWithMessageConverters(returnValue, returnType, inputMessage, outputMessage);\n```\n\n方法体：\n\n```java\nprotected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType,\n\t\t\tServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)\n\t\t\tthrows IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {\n\n\t\tObject body;\n\t\tClass<?> valueType;\n\t\tType targetType;\n\n\t\tif (value instanceof CharSequence) {\n\t\t\tbody = value.toString();\n\t\t\tvalueType = String.class;\n\t\t\ttargetType = String.class;\n\t\t}\n\t\telse {\n            //获取返回值\n\t\t\tbody = value;\n            //原类型\n\t\t\tvalueType = getReturnValueType(body, returnType);\n\t\t\ttargetType = GenericTypeResolver.resolveType(getGenericType(returnType), returnType.getContainingClass());\n\t\t}\n\t\t//判断返回值是否是资源文件\n\t\tif (isResourceType(value, returnType)) {\n\t\t\toutputMessage.getHeaders().set(HttpHeaders.ACCEPT_RANGES, \"bytes\");\n\t\t\tif (value != null && inputMessage.getHeaders().getFirst(HttpHeaders.RANGE) != null &&\n\t\t\t\t\toutputMessage.getServletResponse().getStatus() == 200) {\n\t\t\t\tResource resource = (Resource) value;\n\t\t\t\ttry {\n\t\t\t\t\tList<HttpRange> httpRanges = inputMessage.getHeaders().getRange();\n\t\t\t\t\toutputMessage.getServletResponse().setStatus(HttpStatus.PARTIAL_CONTENT.value());\n\t\t\t\t\tbody = HttpRange.toResourceRegions(httpRanges, resource);\n\t\t\t\t\tvalueType = body.getClass();\n\t\t\t\t\ttargetType = RESOURCE_REGION_LIST_TYPE;\n\t\t\t\t}\n\t\t\t\tcatch (IllegalArgumentException ex) {\n\t\t\t\t\toutputMessage.getHeaders().set(HttpHeaders.CONTENT_RANGE, \"bytes */\" + resource.contentLength());\n\t\t\t\t\toutputMessage.getServletResponse().setStatus(HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE.value());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tMediaType selectedMediaType = null;\n    \t//判断响应中是否已经有了返回类型，如果有就赋值，因为之前可能已经处理了一部分而确定了返回值\n\t\tMediaType contentType = outputMessage.getHeaders().getContentType();\n\t\tboolean isContentTypePreset = contentType != null && contentType.isConcrete();\n    \t//如果找到了返回值类型\n\t\tif (isContentTypePreset) {\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Found 'Content-Type:\" + contentType + \"' in response\");\n\t\t\t}\n\t\t\tselectedMediaType = contentType;\n\t\t}\n\t\telse {\n            //如果没找到返回类型\n            //获得被包装的请求\n\t\t\tHttpServletRequest request = inputMessage.getServletRequest();\n            //获得浏览器能接收什么样的媒体类型(text/html之类的)\n\t\t\tList<MediaType> acceptableTypes = getAcceptableMediaTypes(request);\n            //获得服务器能生产什么样的媒体类型(json之类的)\n\t\t\tList<MediaType> producibleTypes = getProducibleMediaTypes(request, valueType, targetType);\n\n\t\t\tif (body != null && producibleTypes.isEmpty()) {\n\t\t\t\tthrow new HttpMessageNotWritableException(\n\t\t\t\t\t\t\"No converter found for return value of type: \" + valueType);\n\t\t\t}\n\t\t\tList<MediaType> mediaTypesToUse = new ArrayList<>();\n            //暴力的两层for循环，找出浏览器能接受并且服务器能生产的数据\n\t\t\tfor (MediaType requestedType : acceptableTypes) {\n\t\t\t\tfor (MediaType producibleType : producibleTypes) {\n\t\t\t\t\tif (requestedType.isCompatibleWith(producibleType)) {\n\t\t\t\t\t\tmediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (mediaTypesToUse.isEmpty()) {\n\t\t\t\tif (body != null) {\n\t\t\t\t\tthrow new HttpMediaTypeNotAcceptableException(producibleTypes);\n\t\t\t\t}\n\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug(\"No match for \" + acceptableTypes + \", supported: \" + producibleTypes);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n            //按照优先级排序(q的值)\n\t\t\tMediaType.sortBySpecificityAndQuality(mediaTypesToUse);\n\t\t\t//确定返回的媒体类型（优先级最高的）\n\t\t\tfor (MediaType mediaType : mediaTypesToUse) {\n\t\t\t\tif (mediaType.isConcrete()) {\n\t\t\t\t\tselectedMediaType = mediaType;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if (mediaType.isPresentIn(ALL_APPLICATION_MEDIA_TYPES)) {\n\t\t\t\t\tselectedMediaType = MediaType.APPLICATION_OCTET_STREAM;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Using '\" + selectedMediaType + \"', given \" +\n\t\t\t\t\t\tacceptableTypes + \" and supported \" + producibleTypes);\n\t\t\t}\n\t\t}\n\n\t\tif (selectedMediaType != null) {\n\t\t\tselectedMediaType = selectedMediaType.removeQualityValue();\n            //遍历所有的类型转换器，找到能实现的转换器\n\t\t\tfor (HttpMessageConverter<?> converter : this.messageConverters) {\n\t\t\t\tGenericHttpMessageConverter genericConverter = (converter instanceof GenericHttpMessageConverter ?\n\t\t\t\t\t\t(GenericHttpMessageConverter<?>) converter : null);\n                //判断是否支持我们协商的返回值\n\t\t\t\tif (genericConverter != null ?\n\t\t\t\t\t\t((GenericHttpMessageConverter) converter).canWrite(targetType, valueType, selectedMediaType) :\n\t\t\t\t\t\tconverter.canWrite(valueType, selectedMediaType)) {\n\t\t\t\t\tbody = getAdvice().beforeBodyWrite(body, returnType, selectedMediaType,\n\t\t\t\t\t\t\t(Class<? extends HttpMessageConverter<?>>) converter.getClass(),\n\t\t\t\t\t\t\tinputMessage, outputMessage);\n\t\t\t\t\tif (body != null) {\n\t\t\t\t\t\tObject theBody = body;\n\t\t\t\t\t\tLogFormatUtils.traceDebug(logger, traceOn ->\n\t\t\t\t\t\t\t\t\"Writing [\" + LogFormatUtils.formatValue(theBody, !traceOn) + \"]\");\n\t\t\t\t\t\taddContentDispositionHeader(inputMessage, outputMessage);\n\t\t\t\t\t\tif (genericConverter != null) {\n                            //往outMessage中写入转换后的JSON数据\n\t\t\t\t\t\t\tgenericConverter.write(body, targetType, selectedMediaType, outputMessage);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t((HttpMessageConverter) converter).write(body, selectedMediaType, outputMessage);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\t\t\tlogger.debug(\"Nothing to write: null body\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (body != null) {\n\t\t\tSet<MediaType> producibleMediaTypes =\n\t\t\t\t\t(Set<MediaType>) inputMessage.getServletRequest()\n\t\t\t\t\t\t\t.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE);\n\n\t\t\tif (isContentTypePreset || !CollectionUtils.isEmpty(producibleMediaTypes)) {\n\t\t\t\tthrow new HttpMessageNotWritableException(\n\t\t\t\t\t\t\"No converter for [\" + valueType + \"] with preset Content-Type '\" + contentType + \"'\");\n\t\t\t}\n\t\t\tthrow new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes);\n\t\t}\n\t}\n```\n\n用MessageConverters将返回值转化为JSON格式\n\n1.内容协商：浏览器会告诉服务器它能接收什么样的数据\n\n![image-20220502145831045](D:\\学习笔记\\picture\\image-20220502145831045-1669804541526-55.png)\n\nq代表权值，也就是优先级，表示优先接收text/html之类的数据，如果没有再接收image/webp，如果还没有就接收所有类型的数据\n\n```java\n            //获得被包装的请求\n\t\t\tHttpServletRequest request = inputMessage.getServletRequest();\n            //获得浏览器能接收什么样的数据(text/html之类的，这个方法会获取request中ACCEPT字段的值，并封装成List)\n\t\t\tList<MediaType> acceptableTypes = getAcceptableMediaTypes(request);\n            //获得服务器能生产什么样的数据(json之类的)\n\t\t\tList<MediaType> producibleTypes = getProducibleMediaTypes(request, valueType, targetType);\n\n\t\t\tif (body != null && producibleTypes.isEmpty()) {\n\t\t\t\tthrow new HttpMessageNotWritableException(\n\t\t\t\t\t\t\"No converter found for return value of type: \" + valueType);\n\t\t\t}\n\t\t\tList<MediaType> mediaTypesToUse = new ArrayList<>();\n            //暴力的两层for循环，找出浏览器能接受并且服务器能生产的数据\n\t\t\tfor (MediaType requestedType : acceptableTypes) {\n\t\t\t\tfor (MediaType producibleType : producibleTypes) {\n\t\t\t\t\tif (requestedType.isCompatibleWith(producibleType)) {\n\t\t\t\t\t\tmediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (mediaTypesToUse.isEmpty()) {\n\t\t\t\tif (body != null) {\n\t\t\t\t\tthrow new HttpMediaTypeNotAcceptableException(producibleTypes);\n\t\t\t\t}\n\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug(\"No match for \" + acceptableTypes + \", supported: \" + producibleTypes);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n            //按照优先级排序(q的值)\n\t\t\tMediaType.sortBySpecificityAndQuality(mediaTypesToUse);\n\t\t\t//确定返回值类型（优先级最高的）\n\t\t\tfor (MediaType mediaType : mediaTypesToUse) {\n\t\t\t\tif (mediaType.isConcrete()) {\n\t\t\t\t\tselectedMediaType = mediaType;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if (mediaType.isPresentIn(ALL_APPLICATION_MEDIA_TYPES)) {\n\t\t\t\t\tselectedMediaType = MediaType.APPLICATION_OCTET_STREAM;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Using '\" + selectedMediaType + \"', given \" +\n\t\t\t\t\t\tacceptableTypes + \" and supported \" + producibleTypes);\n\t\t\t}\n```\n\n2.浏览器会根据自己能生产的类型的数据进行内容协商，确定最后返回值的类型\n\n3.消息转换\n\nHttpMessageConverter消息转换器是一个接口，里面定义了消息转换的相关方法，用这些方法来进行返回值类型的转换\n\n```java\npublic interface HttpMessageConverter<T> {\n    //是否能将mediaType媒体类型的数据转换为clazz类型的数据\n\tboolean canRead(Class<?> clazz, @Nullable MediaType mediaType);\n    //是否能将clazz类型的数据转换为mediaType媒体类型的数据\n\tboolean canWrite(Class<?> clazz, @Nullable MediaType mediaType);\nrn the list of supported media types, potentially an immutable copy\n\t */\n    //能支持转换的媒体类型\n\tList<MediaType> getSupportedMediaTypes();\n\t//从转换器中读取T类型数据\n\tT read(Class<? extends T> clazz, HttpInputMessage inputMessage)\n\t\t\tthrows IOException, HttpMessageNotReadableException;\n    //向outputMessage中写入T类型的数据\n\tvoid write(T t, @Nullable MediaType contentType, HttpOutputMessage outputMessage)\n\t\t\tthrows IOException, HttpMessageNotWritableException;\n\n}\n```\n\nSpringMVC中内置的所有类型转换器\n\n![image-20220502154807257](https://s2.loli.net/2022/05/26/oGiReDN7mcwLOJU.png)\n\n遍历所有的类型转化器，判断哪个类型转换器能处理这个请求（将对象类型转换为JSON数据）\n\n其中MappingJackson2HttpMessageConverter类向的能处理我们的对象类型（实际上它能处理所有类型的返回值）\n\n然后用MappingJackson2HttpMessageConverter的write方法向outputMessage中写入转换后的JSON数据\n\n#### 原理总结\n\n![image-20220502160312589](D:\\学习笔记\\picture\\image-20220502160312589-1669804541526-58.png)\n\n根据@ResponBody注解判断使用RequestResponseBodyMethodProccessor这个返回值处理器，这个返回值处理器又会根据返回值选择不同的Converter来转换数据的格式，例如返回资源文件：\n\n```java\n   /*\n   import org.springframework.core.io.FileSystemResource;\n   import org.springframework.core.io.Resource;\n   */\n   @GetMapping(\"/file\")\n    @ResponseBody\n    public Resource testParam(){\n        return new FileSystemResource(\"src/main/resources/application.yml\");\n    }\n```\n\n最后得到的就不是JSON格式的数据了：\n\n![image-20220502161738933](https://s2.loli.net/2022/05/26/r1xqvUn4L8oemGl.png)\n\n#### 内容协商\n\n如果在pom文件中引入这个依赖（这个jar包可以把对象转换为XML格式的数据）\n\n```xml\n <dependency>\n     <groupId>com.fasterxml.jackson.dataformat</groupId>\n     <artifactId>jackson-dataformat-xml</artifactId>\n</dependency>\n```\n\n那么返回给浏览器的数据就是XML的数据，这是因为在浏览器的响应头中设置的优先级\n\n![image-20220502145831045](https://s2.loli.net/2022/05/26/mPwSYCWdg5kVABR.png)\n\nxhtml+xml的优先级高(q=0.9)，比q=0.8的`*/*`要高，所以Spring会优先将其转换为XML格式的数据，而如果我们在PostMan中将Accept字段的值设置为`*/*`，就会得到JSON格式的数据。我们需要不同格式的数据只需要改变Header中Accept的字段的值即可。这些得益于Spring的内容协商功能。\n\n原理：\n\n```java\nList<MediaType> acceptableTypes = getAcceptableMediaTypes(request);\n```\n\n获取浏览器支持的类型，这个方法中会获取request中的ACCEPT字段并解析成List<MediaType>类型\n\n```java\nList<MediaType> producibleTypes = getProducibleMediaTypes(request, valueType, targetType);\n```\n\n获得服务器可以返回的媒体类型\n\n方法体：\n\n```java\n\tprotected List<MediaType> getProducibleMediaTypes(\n\t\t\tHttpServletRequest request, Class<?> valueClass, @Nullable Type targetType) {\n\t\t//从请求域中获取媒体类型\n\t\tSet<MediaType> mediaTypes =\n\t\t\t\t(Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE);\n        //如果非空则直接返回\n\t\tif (!CollectionUtils.isEmpty(mediaTypes)) {\n\t\t\treturn new ArrayList<>(mediaTypes);\n\t\t}\n\t\telse if (!this.allSupportedMediaTypes.isEmpty()) {\n\t\t\tList<MediaType> result = new ArrayList<>();\n            //遍历所有的类型转换器Converter\n\t\t\tfor (HttpMessageConverter<?> converter : this.messageConverters) {\n                //如果这个类型转换器是一个合法的转换器\n\t\t\t\tif (converter instanceof GenericHttpMessageConverter && targetType != null) {\n                    //转换器是否支持valueClass类型的数据（GenericHttpMessageConverter这个类有三个参数，媒体类型为空）\n                    //targetType,valueClass都是从返回参数中得到的，targetType只为GenericHttpMessageConverter类服务\n\t\t\t\t\tif (((GenericHttpMessageConverter<?>) converter).canWrite(targetType, valueClass, null)) \t\t\t\t\t {\n                        //将转换器能转换出的媒体类型添加到集合中\n\t\t\t\t\t\tresult.addAll(converter.getSupportedMediaTypes());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (converter.canWrite(valueClass, null)) {\n\t\t\t\t\tresult.addAll(converter.getSupportedMediaTypes());\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t\telse {\n\t\t\treturn Collections.singletonList(MediaType.ALL);\n\t\t}\n\t}\n```\n\n内容协商原理（writeWithMessageConverters方法执行流程，源码在上一章有）：\n\n1. 判断请求域中是否已经有返回值类型（可能在拦截的时候做了处理）\n\n2. 获得浏览器支持的媒体类型（基于内容协商管理器contentNegotiationManager，使用请求头策略HeaderContentNegotiationStrategy获取）\n\n3. 获得服务器能产生的媒体类型：\n\n   1.遍历所有的转换器，找到所有支持返回类型的转换器(A -> 转换器 -> B，已知A，找到所有的转换器)\n\n   2.将这些转换器能转换出的媒体类型统计出来\n\n4. 遍历浏览器支持的媒体类型和服务器能产生的媒体类型，找到所有能匹配的媒体类型\n\n5. 对找到的媒体类型按照优先级排序（设置的q的值），取最大的作为返回的媒体类型\n\n6. 再次遍历所有的转化器，找到能转换的转换器（A（返回值类型） -> 转换器 -> B（媒体类型），已知A,B找到转换器）\n\n7. 用转换器实现A（返回值类型） -> 转换器 -> B（媒体类型）的转换\n\n#### 自定义内容协商策略\n\n浏览器的ACCEPT字段我们提交form表单后没办法随意修改，所以我们可以将协商内容放在参数部分\n\n```yml\nspring:\n  mvc:\n    contentnegotiation:\n      favor-parameter: true  #开启请求参数内容协商模式\n```\n\n开启参数内容协商后，我们就可以用format参数决定返回值的类型（json，xml）\n\n（如果内容协商失败，会返回406）\n\n获取浏览器的请求类型：\n\n```java\n\t@Override\n\tpublic List<MediaType> resolveMediaTypes(NativeWebRequest request) throws HttpMediaTypeNotAcceptableException {\n\t\tfor (ContentNegotiationStrategy strategy : this.strategies) {\n\t\t\tList<MediaType> mediaTypes = strategy.resolveMediaTypes(request);\n\t\t\tif (mediaTypes.equals(MEDIA_TYPE_ALL_LIST)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\treturn mediaTypes;\n\t\t}\n\t\treturn MEDIA_TYPE_ALL_LIST;\n\t}\n```\n\n在将favor-parameter设置为true后，这里再寻找浏览器能接受的媒体类型时会多一种策略：根据参数确定媒体类型，而这个策略排在根据请求头确定媒体类型的策略之前，所以会按照参数策略确定媒体类型。\n\n![image-20220502222239380](https://s2.loli.net/2022/05/26/y2jnEmiaZMSI8PJ.png)\n\n确定过程是先拿到请求参数对应的format字段的值（比如json），然后根据这个值得到对应的媒体类型，可以忽略大小写\n\n```java\n\t@Nullable\n\tprotected MediaType lookupMediaType(String extension) {\n\t\treturn this.mediaTypes.get(extension.toLowerCase(Locale.ENGLISH));\n\t}\n```\n\n```java\n\tpublic List<MediaType> resolveMediaTypeKey(NativeWebRequest webRequest, @Nullable String key)\n\t\t\tthrows HttpMediaTypeNotAcceptableException {\n\n\t\tif (StringUtils.hasText(key)) {\n\t\t\tMediaType mediaType = lookupMediaType(key);\n\t\t\tif (mediaType != null) {\n\t\t\t\thandleMatch(key, mediaType);\n\t\t\t\treturn Collections.singletonList(mediaType);\n\t\t\t}\n\t\t\tmediaType = handleNoMatch(webRequest, key);\n\t\t\tif (mediaType != null) {\n\t\t\t\taddMapping(key, mediaType);\n\t\t\t\treturn Collections.singletonList(mediaType);\n\t\t\t}\n\t\t}\n\t\treturn MEDIA_TYPE_ALL_LIST;\n\t}\n```\n\n如果拿到的媒体类型是`\"*/*\"`，则使用下一个策略，如果所有策略都返回`*/*`，则返回`*/*`\n\n#### 内容协商适用场景\n\n假如我们有这个场景：\n\n1.浏览器发请求，返回xml格式的数据\n\n2.AJAX发请求返回JSON格式的数据\n\n3.App发请求返回一个名为\"x-atguigu\"格式的数据\n\n在容器启动的时候，Spring会帮我们注册默认的Converter进入Spring容器：\n\n```java\n\tprotected final void addDefaultHttpMessageConverters(List<HttpMessageConverter<?>> messageConverters) {\n\t\tmessageConverters.add(new ByteArrayHttpMessageConverter());\n\t\tmessageConverters.add(new StringHttpMessageConverter());\n\t\tmessageConverters.add(new ResourceHttpMessageConverter());\n\t\tmessageConverters.add(new ResourceRegionHttpMessageConverter());\n\t\ttry {\n\t\t\tmessageConverters.add(new SourceHttpMessageConverter<>());\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\t// Ignore when no TransformerFactory implementation is available...\n\t\t}\n\t\tmessageConverters.add(new AllEncompassingFormHttpMessageConverter());\n\n\t\tif (romePresent) {\n\t\t\tmessageConverters.add(new AtomFeedHttpMessageConverter());\n\t\t\tmessageConverters.add(new RssChannelHttpMessageConverter());\n\t\t}\n\n\t\tif (jackson2XmlPresent) {\n\t\t\tJackson2ObjectMapperBuilder builder = Jackson2ObjectMapperBuilder.xml();\n\t\t\tif (this.applicationContext != null) {\n\t\t\t\tbuilder.applicationContext(this.applicationContext);\n\t\t\t}\n\t\t\tmessageConverters.add(new MappingJackson2XmlHttpMessageConverter(builder.build()));\n\t\t}\n\t\telse if (jaxb2Present) {\n\t\t\tmessageConverters.add(new Jaxb2RootElementHttpMessageConverter());\n\t\t}\n\n\t\tif (jackson2Present) {\n\t\t\tJackson2ObjectMapperBuilder builder = Jackson2ObjectMapperBuilder.json();\n\t\t\tif (this.applicationContext != null) {\n\t\t\t\tbuilder.applicationContext(this.applicationContext);\n\t\t\t}\n\t\t\tmessageConverters.add(new MappingJackson2HttpMessageConverter(builder.build()));\n\t\t}\n\t\telse if (gsonPresent) {\n\t\t\tmessageConverters.add(new GsonHttpMessageConverter());\n\t\t}\n\t\telse if (jsonbPresent) {\n\t\t\tmessageConverters.add(new JsonbHttpMessageConverter());\n\t\t}\n\n\t\tif (jackson2SmilePresent) {\n\t\t\tJackson2ObjectMapperBuilder builder = Jackson2ObjectMapperBuilder.smile();\n\t\t\tif (this.applicationContext != null) {\n\t\t\t\tbuilder.applicationContext(this.applicationContext);\n\t\t\t}\n\t\t\tmessageConverters.add(new MappingJackson2SmileHttpMessageConverter(builder.build()));\n\t\t}\n\t\tif (jackson2CborPresent) {\n\t\t\tJackson2ObjectMapperBuilder builder = Jackson2ObjectMapperBuilder.cbor();\n\t\t\tif (this.applicationContext != null) {\n\t\t\t\tbuilder.applicationContext(this.applicationContext);\n\t\t\t}\n\t\t\tmessageConverters.add(new MappingJackson2CborHttpMessageConverter(builder.build()));\n\t\t}\n\t}\n```\n\n其中我们注意到有诸如jackson2XmlPresent是否为true的判断，而这个值的true还是false取决于：\n\n```java\n\tstatic {\n\t\tClassLoader classLoader = WebMvcConfigurationSupport.class.getClassLoader();\n\t\tromePresent = ClassUtils.isPresent(\"com.rometools.rome.feed.WireFeed\", classLoader);\n\t\tjaxb2Present = ClassUtils.isPresent(\"javax.xml.bind.Binder\", classLoader);\n\t\tjackson2Present = ClassUtils.isPresent(\"com.fasterxml.jackson.databind.ObjectMapper\", classLoader) &&\n\t\t\t\tClassUtils.isPresent(\"com.fasterxml.jackson.core.JsonGenerator\", classLoader);\n\t\tjackson2XmlPresent = ClassUtils.isPresent(\"com.fasterxml.jackson.dataformat.xml.XmlMapper\", classLoader);\n\t\tjackson2SmilePresent = ClassUtils.isPresent(\"com.fasterxml.jackson.dataformat.smile.SmileFactory\", classLoader);\n\t\tjackson2CborPresent = ClassUtils.isPresent(\"com.fasterxml.jackson.dataformat.cbor.CBORFactory\", classLoader);\n\t\tgsonPresent = ClassUtils.isPresent(\"com.google.gson.Gson\", classLoader);\n\t\tjsonbPresent = ClassUtils.isPresent(\"javax.json.bind.Jsonb\", classLoader);\n\t}\n```\n\n所以引入这个依赖后，才可以实现对象和XML格式之间的转换。\n\n适用类工具ClassUtils判断某个类是否存在\n\n我们想自定义消息转换器，方法和前面一样，向Spring容器中注册WebMvcConfigurer组件，在里面通过实现里面的方法来定制化我们想要的功能。\n\n这里面有两个方法可以让我们定制化消息转换器：\n\n```java\n\t@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n\n    }\n\n    @Override\n    public void extendMessageConverters(List<HttpMessageConverter<?>> converters) {\n        WebMvcConfigurer.super.extendMessageConverters(converters);\n    }\n```\n\n上面那个会覆盖默认的类型转换器，下面那个会在默认类型转换器的基础上添加新的消息转换器\n\n```\nClass<T> 类的 isAssignableFrom方法 用于判断某个类是不是一个类或者它的子类\n```\n\n```java\n    @Override\n    public List<MediaType> getSupportedMediaTypes() {\n        return MediaType.parseMediaTypes(\"application/atguigu\");\n    }\n```\n\n通过字符串得到一个application/atguigu类型的消息转换器（集合类型）\n\n实现一个自定义的消息转换器：\n\n```java\npublic class AtGuiguConverter implements HttpMessageConverter<Pet> {\n    \n    @Override\n    public boolean canRead(Class<?> clazz, MediaType mediaType) {\n        return false;\n    }\n    //支持转换什么类型的数据（Pet）\n    @Override\n    public boolean canWrite(Class<?> clazz, MediaType mediaType) {\n        return clazz.isAssignableFrom(Pet.class);\n    }\n    //支持转换成什么类型的数据（application/atguigu类型）\n    @Override\n    public List<MediaType> getSupportedMediaTypes() {\n        return MediaType.parseMediaTypes(\"application/atguigu\");\n    }\n    @Override\n    public Pet read(Class<? extends Pet> clazz, HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException {\n        return null;\n    }\n    //如何转换，定制化转换规则\n    @Override\n    public void write(Pet pet, MediaType contentType, HttpOutputMessage outputMessage) throws IOException, HttpMessageNotWritableException {\n        //转换后得到数据\n        String data=pet.getName()+\":\"+pet.getAge();\n        //拿到封装在outputMessage的输出流\n        OutputStream body = outputMessage.getBody();\n        //往输出流中写入数据\n        body.write(data.getBytes(StandardCharsets.UTF_8));\n    }\n}\n```\n\n![image-20220503004520534](https://s2.loli.net/2022/05/26/RcgDOuXW3svw4Et.png)\n\n在WebMvcConfigurer中添加转换器：\n\n```java\n@Configuration\npublic class MyConfig {\n    //1、WebMvcConfigurer定制化SpringMVC的功能\n    @Bean\n    public WebMvcConfigurer webMvcConfigurer(){\n        return new WebMvcConfigurer() {\n            @Override\n            public void extendMessageConverters(List<HttpMessageConverter<?>> converters) {\n                converters.add(new AtGuiguConverter());\n            }\n}\n\n```\n\n实现功能：\n\n![image-20220503004520534](https://s2.loli.net/2022/05/26/RcgDOuXW3svw4Et.png)\n\n我们新添加的转换器和默认转换器的适用流程都是一样的\n\n![image-20220503142857435](https://s2.loli.net/2022/05/26/yIM4q2z6xwtFp9U.png)\n\n#### 添加参数和媒体映射关系\n\n如果我们想在url中设置format字段，当format=gg（可以是url参数，也可以是请求体中的参数）时，内容协商后的媒体类型是atguigu，那么就需要我们在内容协商管理器中添加我们自定义的映射规则。（和前面一样要在WebMvcConfigurer里面实现里面的方法configureContentNegotiation）\n\n```java\n@Configuration\npublic class MyConfig {\n    //1、WebMvcConfigurer定制化SpringMVC的功能\n    @Bean\n    public WebMvcConfigurer webMvcConfigurer(){\n        return new WebMvcConfigurer() {\n\n            @Override\n            public void extendMessageConverters(List<HttpMessageConverter<?>> converters) {\n                converters.add(new AtGuiguConverter());\n            }\n\n            @Override\n            public void configureContentNegotiation(ContentNegotiationConfigurer configurer) {\n                Map<String, MediaType> map=new HashMap<>();\n                map.put(\"json\",MediaType.APPLICATION_JSON);\n                map.put(\"xml\",MediaType.APPLICATION_XML);\n                map.put(\"gg\",MediaType.parseMediaType(\"application/atguigu\"));\n                ParameterContentNegotiationStrategy paramStrage = new ParameterContentNegotiationStrategy(map);\n                configurer.strategies(Arrays.asList(paramStrage));\n            }\n        };\n    }\n}\n```\n\n我们回顾一下之前所讲的内容：\n\n在进行内容协商的时候要获取浏览器能接受的媒体类型，服务器要根据浏览器能接受的媒体类型返回对应格式的数据，而获取媒体类型时Spring会使用内容协商管理器遍历所有注册到Spring容器中的内容协商策略（获取浏览器支持的媒体类型的途径），在默认情况下，内容协商策略只有根据请求头获取媒体类型（HeaderContentNegotiationStrategy），而在spring.mvc.contentnegotiation.favor-parameter设置为true后，Spring容器中会多出一种策略：按照请求参数获取媒体类型（ParameterContentNegotiationStrategy），创建这个策略对象需要传入一个`Map<String, MediaType>`类型的参数，代表format值和媒体类型的对应关系，默认情况下只有json和xml，所以我们需要把这两个加上的同时将gg和application/atguigu媒体类型建立关系，然后创建新的策略对象添加进策略协商管理器中。可以看到结果生效：\n\n![image-20220503152216636](https://s2.loli.net/2022/05/26/DYvVo7rbaQ9LEnF.png)\n\n但是我们也发现根据请求设置媒体类型的策略失效了：\n\n![image-20220503152319677](https://s2.loli.net/2022/05/26/ax6Z2SLFEBJvcAH.png)\n\n这是因为我们在配置类中用configurer.strategies(Arrays.asList(paramStrage));重新设置了内容协商管理器的所有策略（覆盖了默认情况，而不是添加），我们没有添加HeaderContentNegotiationStrategy策略，所以请求头会失效。同时在没有获取到浏览器的媒体类型时，会默认将媒体类型视为`*/*`，即接受所有的类型：\n\n```java\n\t@Override\n\tpublic List<MediaType> resolveMediaTypes(NativeWebRequest request) throws HttpMediaTypeNotAcceptableException {\n\t\tfor (ContentNegotiationStrategy strategy : this.strategies) {\n\t\t\tList<MediaType> mediaTypes = strategy.resolveMediaTypes(request);\n\t\t\tif (mediaTypes.equals(MEDIA_TYPE_ALL_LIST)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\treturn mediaTypes;\n\t\t}\n\t\treturn MEDIA_TYPE_ALL_LIST;\n\t}\n```\n\n而服务器能产生json,xml,atguigu等类型的数据，都能与`*/*`匹配，其中json优先级最高，排序后是第一个，所以会默认使用json格式的数据返回。\n\n```java\n                ParameterContentNegotiationStrategy paramStrage = new ParameterContentNegotiationStrategy(map);\n                HeaderContentNegotiationStrategy headerStrage=new HeaderContentNegotiationStrategy();\n                configurer.strategies(Arrays.asList(paramStrage,headerStrage));\n```\n\n添加请求头策略后又重新生效\n\n在请求头策略和参数策略同时存在时，优先使用参数策略。\n\n如果不想获取format字段的数据作为协商依据，可以通过paramStrage.setParameterName(\"ff\")方法更换为其他字段。\n\n```java\n@Override\npublic void configureContentNegotiation(ContentNegotiationConfigurer configurer) {\n    Map<String, MediaType> map=new HashMap<>();\n    map.put(\"json\",MediaType.APPLICATION_JSON);\n    map.put(\"xml\",MediaType.APPLICATION_XML);\n    map.put(\"gg\",MediaType.parseMediaType(\"application/atguigu\"));\n    ParameterContentNegotiationStrategy paramStrage = new ParameterContentNegotiationStrategy(map);\n    paramStrage.setParameterName(\"ff\");\n    HeaderContentNegotiationStrategy headerStrage=new HeaderContentNegotiationStrategy();\n    configurer.strategies(Arrays.asList(paramStrage,headerStrage));\n}\n```\n\n### 视图解析\n\nhttps://blog.csdn.net/u011863024/article/details/113667946\n\n#### Thymeleaf模板引擎\n\nThymeleaf模板引擎适用于开发后台管理界面（给管理人员使用而非具体的用户），没有与后端分离，性能也较差，但是开发起来会容易很多。\n\n使用Thymeleaf模板的html页面，放在前面也能运行，使用的是没有数据的普通页面，放在Spring的资源目录下就会经过视图的渲染而获得数据\n\n引入依赖：\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-thymeleaf</artifactId>\n</dependency>\n```\n\n自动配好的策略\n\n1. 所有thymeleaf的配置值都在 ThymeleafProperties\n2. 配置好了 **SpringTemplateEngine**\n3. 配好了 **ThymeleafViewResolver**\n4. 我们只需要直接开发页面\n\n在寻找html页面时会在classpath:/templates/目录下面找，并且会自动帮我们加上.html的后缀名，这两个和我们的字符串拼接再一起共同构成html的请求路径\n\n```\npublic static final String DEFAULT_PREFIX = \"classpath:/templates/\";//模板放置处\npublic static final String DEFAULT_SUFFIX = \".html\";//文件的后缀名\n```\n\nJSP语法：\n\n##### 基本语法\n\n| 表达式名字 | 语法 | 用途                               |\n| ---------- | ---- | ---------------------------------- |\n| 变量取值   | ${…} | 获取请求域、session域、对象等值    |\n| 选择变量   | *{…} | 获取上下文对象值                   |\n| 消息       | #{…} | 获取国际化等值                     |\n| 链接       | @{…} | 生成链接                           |\n| 片段表达式 | ~{…} | jsp:include 作用，引入公共页面片段 |\n\n##### 简单使用\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<h1 th:text=\"${msg}\">nice</h1>\n<h2>\n    <a href=\"www.baidu.com\" th:href=\"${link}\">去百度</a>  <br/>\n    <a href=\"www.google.com\" th:href=\"@{/link}\">去百度</a>\n</h2>\n</body>\n</html>\n```\n\n直接打开这个html页面显示的\"去百度\"这个原始内容，经过Spring加载后会显示变量\n\n```\nxmlns:th=\"http://www.thymeleaf.org\"\n```\n\n这个用于引入命名空间\n\n修改标签的值：`th:text=\"${msg}\"`\n\n设置页面跳转的值：\n\n`th:href=\"${link}\"` 将链接内容替换为model中link变量的值（替换的是变量的值）\n\n`th:href=\"@{/link}\"`  将链接内容替换为/link（替换的字面量的值）\n\n用${}获取我们放在model中的数据\n\n```java\n@Controller\npublic class ViewTestController {\n    @GetMapping(\"/hello\")\n    public String hello(Model model){\n        //model中的数据会被放在请求域中 request.setAttribute(\"a\",aa)\n        model.addAttribute(\"msg\",\"一定要大力发展工业文化\");\n        model.addAttribute(\"link\",\"http://www.baidu.com\");\n        return \"success\";\n    }\n}\n```\n\n设置标签内部属性的值：\n\n```hmtl\n<img src=\"../../images/gtvglogo.png\"  \n     th:attr=\"src=@{/images/gtvglogo.png},title=#{logo},alt=#{logo}\" />\n```\n\n可以在双引号中使用单引号进行字符串拼接操作\n\nTip：@GetMapping(value={}) 这些注解的value字段可以是数组，表示这些注解对应到同一个controller\n\nthymleaf原则:model有值就用model里的值，model里没有值就用html中的值。\n\n官网:thymeleaf.org/doc\n\nth:action=\"@{/login}\" 加在form表单上，表示设置form表单请求的url\n\ncontroller返回 \"redirect:/main.html\"表示进行请求重定向\n\nth:text=${msg} 修改内容，用这个可以动态修改文本自己标签页\n\n除了能获得model中的数据，也默认能有session中的数据（参数名需要叫session）\n\nthymeleaf行内写法:[[${session.user.name}]]\n\n跳转到template目录下的basic目录下，返回\"basic/index\"即可\n\nhtml中需要用src属性，thymeleaf用th:src=\"@{/}\"\n\nhtml需要用href属性的，thymeleaf用th:href=\"@{/}\"\n\n##### 模板引入\n\nhtml页面可能会有很多功能的部分，例如导航条，侧边栏等。如果要修改这些部分的话需要修改所以的html页面，十分繁琐，所以我们可以使用thymeleaf的模板语法来将html可能会用到的功能组件保存起来，再需要使用的时候从组件库中引入组件（组件可以是任何公共的部分，例如公共的css，js，html元素），这样在修改组件的时候直接修改组件库的内容即可。\n\n引入组件的方式可以使用thymleaf提供的fragment字段来设置一个唯一的标识，也可以使用html'的属性选择器（比如设置了id，引入的时候使用#id来引入）\n\n使用fragment字段：\n\n```html\n<head th:fragment=\"commonheader\">\n    <!--common-->\n    <link href=\"css/style.css\" th:href=\"@{/css/style.css}\" rel=\"stylesheet\">\n</head>\n```\n\n引入的时候：\n\n```html\n<div th:include=\"common :: commonheader\"> </div>\n```\n\ncommon是存放组件的**html文件**的名称，commonheader是我们设置的th:fragmen字段的值\n\n使用id：\n\n```html\n<div id=\"commonscript\">\n    <!-- Placed js at the end of the document so the pages load faster -->\n    <script th:src=\"@{/js/jquery-1.10.2.min.js}\"></script>\n    <script th:src=\"@{/js/jquery-ui-1.9.2.custom.min.js}\"></script>\n    <script th:src=\"@{/js/jquery-migrate-1.2.1.min.js}\"></script>\n    <script th:src=\"@{/js/bootstrap.min.js}\"></script>\n    <script th:src=\"@{/js/modernizr.min.js}\"></script>\n    <script th:src=\"@{/js/jquery.nicescroll.js}\"></script>\n    <!--common scripts for all pages-->\n    <script th:src=\"@{/js/scripts.js}\"></script>\n</div>\n```\n\n引入的时候：\n\n```html\n<div th:replace=\"common :: #commonscript\"></div>\n```\n\n其实就是多加了一个#\n\n组件库里的链接(href)和内容(src) ，都要替换成th的格式\n\n编写组件库common.html：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\"><!--注意要添加xmlns:th才能添加thymeleaf的标签-->\n<head th:fragment=\"commonheader\">\n    <!--common-->\n    <link href=\"css/style.css\" th:href=\"@{/css/style.css}\" rel=\"stylesheet\">\n    <link href=\"css/style-responsive.css\" th:href=\"@{/css/style-responsive.css}\" rel=\"stylesheet\">\n    ...\n</head>\n<body>\n<!-- left side start-->\n<div id=\"leftmenu\" class=\"left-side sticky-left-side\">\n\t...\n\n    <div class=\"left-side-inner\">\n\t\t...\n\n        <!--sidebar nav start-->\n        <ul class=\"nav nav-pills nav-stacked custom-nav\">\n            <li><a th:href=\"@{/main.html}\"><i class=\"fa fa-home\"></i> <span>Dashboard</span></a></li>\n            ...\n            <li class=\"menu-list nav-active\"><a href=\"#\"><i class=\"fa fa-th-list\"></i> <span>Data Tables</span></a>\n                <ul class=\"sub-menu-list\">\n                    <li><a th:href=\"@{/basic_table}\"> Basic Table</a></li>\n                    <li><a th:href=\"@{/dynamic_table}\"> Advanced Table</a></li>\n                    <li><a th:href=\"@{/responsive_table}\"> Responsive Table</a></li>\n                    <li><a th:href=\"@{/editable_table}\"> Edit Table</a></li>\n                </ul>\n            </li>\n            ...\n        </ul>\n        <!--sidebar nav end-->\n    </div>\n</div>\n<!-- left side end-->\n\n\n<!-- header section start-->\n<div th:fragment=\"headermenu\" class=\"header-section\">\n\n    <!--toggle button start-->\n    <a class=\"toggle-btn\"><i class=\"fa fa-bars\"></i></a>\n    <!--toggle button end-->\n\t...\n\n</div>\n<!-- header section end-->\n\n<div id=\"commonscript\">\n    <!-- Placed js at the end of the document so the pages load faster -->\n    <script th:src=\"@{/js/jquery-1.10.2.min.js}\"></script>\n    <script th:src=\"@{/js/jquery-ui-1.9.2.custom.min.js}\"></script>\n    <script th:src=\"@{/js/jquery-migrate-1.2.1.min.js}\"></script>\n    <script th:src=\"@{/js/bootstrap.min.js}\"></script>\n    <script th:src=\"@{/js/modernizr.min.js}\"></script>\n    <script th:src=\"@{/js/jquery.nicescroll.js}\"></script>\n    <!--common scripts for all pages-->\n    <script th:src=\"@{/js/scripts.js}\"></script>\n</div>\n</body>\n</html>\n```\n\n引入组件：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0\">\n  <meta name=\"description\" content=\"\">\n  <meta name=\"author\" content=\"ThemeBucket\">\n  <link rel=\"shortcut icon\" href=\"#\" type=\"image/png\">\n\n  <title>Basic Table</title>\n    <div th:include=\"common :: commonheader\"> </div><!--将common.html的代码段 插进来-->\n</head>\n\n<body class=\"sticky-header\">\n\n<section>\n<div th:replace=\"common :: #leftmenu\"></div>\n    \n    <!-- main content start-->\n    <div class=\"main-content\" >\n\n        <div th:replace=\"common :: headermenu\"></div>\n        ...\n    </div>\n    <!-- main content end-->\n</section>\n\n<!-- Placed js at the end of the document so the pages load faster -->\n<div th:replace=\"common :: #commonscript\"></div>\n</body>\n</html>\n```\n\n##### 引入语法\n\nhttps://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#difference-between-thinsert-and-threplace-and-thinclude\n\n（其实都用div即可）\n\n假如在footer.html中有\n\n```html\n<footer th:fragment=\"copy\">\n\thello,lth\n</footer>\n```\n\n1.insert 引入用的标签在外，被引入的标签在内\n\n```html\n<div th:insert=\"footer :: copy\"></div>\n```\n\n替换后的效果是：\n\n```html\n<div>\n    <footer>\n        hello,lth\n    </footer>\n</div>\n```\n\n2.replace 只保留被引入的标签\n\n```html\n<div th:replace=\"footer :: copy\"></div>\n```\n\n替换后：\n\n```html\n  <footer>\n    hello,lth\n  </footer>\n```\n\n3.include 只保留引入用的标签\n\n```html\n<div th:include=\"footer :: copy\"></div>\n```\n\n替换后：\n\n```html\n  <div>\n    hello,lth\n  </div>\n```\n\n##### 集合遍历\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n    <tr th:each=\"pet,status:${pets}\">\n        <td>[[${status.index}]]</td>\n        <td>[[${pet.name}]]</td>\n        <td>[[${pet.age}]]</td>\n        <br>\n    </tr>\n</body>\n</html>\n```\n\n除了我们集合中对应的对象，每个集合还默认会有一个status对象（默认在第二个参数里），里面有相关的索引信息\n\n#### 视图解析原理\n\n视图解析流程与前面所说一致，拿到返回值后，会根据返回值的类型以及注解判断使用哪种视图解析器，而对于返回值是String类型，且没有加上@ResponBody注解，则会使用ViewNameMethodReturnValueHandler这个返回值解析器来解析返回值。\n\n处理过程：\n\n```java\n\t@Override\n\tpublic void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType,\n\t\t\tModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {\n\t\t//如果返回值是字符串\n\t\tif (returnValue instanceof CharSequence) {\n\t\t\tString viewName = returnValue.toString();\n            //将视图的地址放入到视图容器中\n\t\t\tmavContainer.setViewName(viewName);\n            //判断是否能重定向\n\t\t\tif (isRedirectViewName(viewName)) {\n                //将重定向标志设置为true\n\t\t\t\tmavContainer.setRedirectModelScenario(true);\n\t\t\t}\n\t\t}\n\t\telse if (returnValue != null) {\n\t\t\t// should not happen\n\t\t\tthrow new UnsupportedOperationException(\"Unexpected return type: \" +\n\t\t\t\t\treturnType.getParameterType().getName() + \" in method: \" + returnType.getMethod());\n\t\t}\n\t}\n```\n\n在方法执行过程中，方法中数据（model）和视图地址（view）都会放在一个ModelAndViewContainer视图容器中\n\nisRedirectViewName(viewName)方法：\n\n```java\n\tprotected boolean isRedirectViewName(String viewName) {\n\t\treturn (PatternMatchUtils.simpleMatch(this.redirectPatterns, viewName) || viewName.startsWith(\"redirect:\"));\n\t}\n```\n\n如果返回的字符符串和redirectPatterns设置的正则表达式匹配，或者以\"redirect:\"开头，则将这个字符串视为重定向。所以我们在加上redirect:作为前缀后可以进行请求重定向。\n\n如果我们方法去请求参数中有我们的自定义对象，那么这个自定义对象也会被放到mavContainer中\n\n在invokeHandlerMethod方法执行完后，会执行下面的getModelAndView方法\n\n```java\n\t@Nullable\n\tprivate ModelAndView getModelAndView(ModelAndViewContainer mavContainer,\n\t\t\tModelFactory modelFactory, NativeWebRequest webRequest) throws Exception {\n\t\t//拿到mavContainer容器\n\t\tmodelFactory.updateModel(webRequest, mavContainer);\n\t\tif (mavContainer.isRequestHandled()) {\n\t\t\treturn null;\n\t\t}\n        //获取容器中的model，这里的model和我们在方法参数中通过设置Map型参数或者Model型参数拿到的对象是同一个，类型都是ModelMap类型，对应request的请求域\n\t\tModelMap model = mavContainer.getModel();\n        //使用model(数据),视图名(view)创建一个ModelAndView对象\n\t\tModelAndView mav = new ModelAndView(mavContainer.getViewName(), model, mavContainer.getStatus());\n\t\tif (!mavContainer.isViewReference()) {\n\t\t\tmav.setView((View) mavContainer.getView());\n\t\t}\n        //如果model带有@RedirectAttribute注解，则会将这个model放入到下一次请求的参数中\n\t\tif (model instanceof RedirectAttributes) {\n\t\t\tMap<String, ?> flashAttributes = ((RedirectAttributes) model).getFlashAttributes();\n\t\t\tHttpServletRequest request = webRequest.getNativeRequest(HttpServletRequest.class);\n\t\t\tif (request != null) {\n\t\t\t\tRequestContextUtils.getOutputFlashMap(request).putAll(flashAttributes);\n\t\t\t}\n\t\t}\n\t\treturn mav;\n\t}\n```\n\n1.所有请求的执行结果都是一个ModelAndView对象：\n\n```java\nmv = ha.handle(processedRequest, response, mappedHandler.getHandler());\n```\n\n2.如果视图名称为null，则会根据uri给它一个默认的视图名\n\n```\napplyDefaultViewName(processedRequest, mv);\n```\n\n例如：\n\n```java\n    @GetMapping(\"/success\")\n    public String hello(Model model, HttpSession httpSession){\n        return null;\n    }\n```\n\n会返回template目录下的success.html页面\n\n3.处理派发结果\n\n```\nprocessDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);\n```\n\n```java\n\tprivate void processDispatchResult(HttpServletRequest request, HttpServletResponse response,\n\t\t\t@Nullable HandlerExecutionChain mappedHandler, @Nullable ModelAndView mv,\n\t\t\t@Nullable Exception exception) throws Exception {\n\n\t\tboolean errorView = false;\n\t\t//如果有异常，处理异常\n\t\tif (exception != null) {\n\t\t\tif (exception instanceof ModelAndViewDefiningException) {\n\t\t\t\tlogger.debug(\"ModelAndViewDefiningException encountered\", exception);\n\t\t\t\tmv = ((ModelAndViewDefiningException) exception).getModelAndView();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tObject handler = (mappedHandler != null ? mappedHandler.getHandler() : null);\n\t\t\t\tmv = processHandlerException(request, response, handler, exception);\n\t\t\t\terrorView = (mv != null);\n\t\t\t}\n\t\t}\n\n\t\t// 如果视图不为空，渲染视图\n\t\tif (mv != null && !mv.wasCleared()) {\n\t\t\trender(mv, request, response);\n\t\t\tif (errorView) {\n\t\t\t\tWebUtils.clearErrorRequestAttributes(request);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(\"No view rendering, null ModelAndView returned.\");\n\t\t\t}\n\t\t}\n\n\t\tif (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) {\n\t\t\t// Concurrent handling started during a forward\n\t\t\treturn;\n\t\t}\n\n\t\tif (mappedHandler != null) {\n\t\t\t// Exception (if any) is already handled..\n\t\t\tmappedHandler.triggerAfterCompletion(request, response, null);\n\t\t}\n\t}\n```\n\n渲染视图：\n\n```\nrender(mv, request, response);\n```\n\n```java\n\tprotected void render(ModelAndView mv, HttpServletRequest request, HttpServletResponse response) throws Exception {\n\t\t// Determine locale for request and apply it to the response.\n\t\tLocale locale =\n\t\t\t\t(this.localeResolver != null ? this.localeResolver.resolveLocale(request) : request.getLocale());\n\t\tresponse.setLocale(locale);\n\t\t//根据视图名，拿到视图对象\n\t\tView view;\n\t\tString viewName = mv.getViewName();\n\t\tif (viewName != null) {\n\t\t\t// We need to resolve the view name.\n\t\t\tview = resolveViewName(viewName, mv.getModelInternal(), locale, request);\n            //如果无法解析就抛出异常\n\t\t\tif (view == null) {\n\t\t\t\tthrow new ServletException(\"Could not resolve view with name '\" + mv.getViewName() +\n\t\t\t\t\t\t\"' in servlet with name '\" + getServletName() + \"'\");\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// No need to lookup: the ModelAndView object contains the actual View object.\n\t\t\tview = mv.getView();\n\t\t\tif (view == null) {\n\t\t\t\tthrow new ServletException(\"ModelAndView [\" + mv + \"] neither contains a view name nor a \" +\n\t\t\t\t\t\t\"View object in servlet with name '\" + getServletName() + \"'\");\n\t\t\t}\n\t\t}\n\n\t\t// Delegate to the View object for rendering.\n\t\tif (logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"Rendering view [\" + view + \"] \");\n\t\t}\n\t\ttry {\n\t\t\tif (mv.getStatus() != null) {\n\t\t\t\tresponse.setStatus(mv.getStatus().value());\n\t\t\t}\n            //得到视图后，调用view的render方法来觉得最后的视图如何渲染\n\t\t\tview.render(mv.getModelInternal(), request, response);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Error rendering view [\" + view + \"]\", ex);\n\t\t\t}\n\t\t\tthrow ex;\n\t\t}\n\t}\n```\n\n1.根据视图名拿到视图对象View，View中会定义页面的渲染逻辑（也就是得到返回给前端的文本）\n\n```java\n\t@Nullable\n\tprotected View resolveViewName(String viewName, @Nullable Map<String, Object> model,\n\t\t\tLocale locale, HttpServletRequest request) throws Exception {\n\n\t\tif (this.viewResolvers != null) {\n\t\t\tfor (ViewResolver viewResolver : this.viewResolvers) {\n\t\t\t\tView view = viewResolver.resolveViewName(viewName, locale);\n\t\t\t\tif (view != null) {\n\t\t\t\t\treturn view;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n```\n\n遍历所有的视图解析器，尝试解析视图名，如果能成功解析就直接返回，否则返回null\n\n包含的视图解析有：\n\n![image-20220505003040015](https://s2.loli.net/2022/05/26/4JR7XPYnoZhETNU.png)\n\n第0个是内容协商视图解析器，里面内容协商管理器中包含下面所有的视图解析器，因而还是会遍历下面所有的视图解析器，尝试解析viewName得到view。所以在这个循环中不会进入到下面中，但是解析过程还是用下面的解析器完成\n\n第2个视图解析器是Thymeleaf视图解析器，会创建RedirectView对象\n\n视图渲染逻辑：\n\n```java\n\t@Override\n\tpublic void render(@Nullable Map<String, ?> model, HttpServletRequest request,\n\t\t\tHttpServletResponse response) throws Exception {\n\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"View \" + formatViewName() +\n\t\t\t\t\t\", model \" + (model != null ? model : Collections.emptyMap()) +\n\t\t\t\t\t(this.staticAttributes.isEmpty() ? \"\" : \", static attributes \" + this.staticAttributes));\n\t\t}\n\t\t//这一步，将我们model中的数据放到一个新的map里面mergedModel\n\t\tMap<String, Object> mergedModel = createMergedOutputModel(model, request, response);\n\t\tprepareResponse(request, response);\n        //将需要的参数都统合起来，觉得最后的视图渲染逻辑\n\t\trenderMergedOutputModel(mergedModel, getRequestToExpose(request), response);\n\t}\n```\n\n其中：renderMergedOutputModel(mergedModel, getRequestToExpose(request), response)方法：\n\n```java\n\t@Override\n\tprotected void renderMergedOutputModel(Map<String, Object> model, HttpServletRequest request,\n\t\t\tHttpServletResponse response) throws IOException {\n\t\t//获取模板URL，拼接URL并将model中的参数作为URL的路径参数放在后面\n\t\tString targetUrl = createTargetUrl(model, request);\n\t\ttargetUrl = updateTargetUrl(targetUrl, model, request, response);\n\n\t\t// 保存参数\n\t\tRequestContextUtils.saveOutputFlashMap(targetUrl, request, response);\n\n\t\t//使用原生的response.sendRedirect(encodedURL)方法进行重定向\n\t\tsendRedirect(request, response, targetUrl, this.http10Compatible);\n\t}\n```\n\n返回值如果是以**\"forward:\"**开始，则返回new InternalResourceView(forwardUrl)视图对象\n\n功能是**转发**：request.getRequestDispatcher(URL).forward(request,response)\n\n转发是以当前请求为代理，生产一次的新的请求，将新的请求的返回值作为当前请求的返回值返回，调用的是request的方法，转发新的请求是服务器发起的，所以浏览器只会发送一次请求（相当于处理请求的时候调用了其他请求对应的方法），并且地址栏不会发送变化\n\n返回值如果以**\"redirect:\"**开始，则返回new RedirectView()视图对象\n\n功能是**重定向**：response.sendRedirect(URL)\n\n重定向是返回下一次应当查询的URL，让浏览器向这个URL发请求，调用的是response的方法，浏览器会发送多次请求直到得到结果，地址栏的请求地址会变成最后一次重定向的地址\n\n补充：转发和重定向的区别\n\n![在这里插入图片描述](https://s2.loli.net/2022/05/26/lOW3a9JGhrH7gXq.png)\n\n返回值如果是普通字符串，则返回new ThymeleafView()视图对象，这个view会使用HTML解析器等工具填充数据，返回HTML文本\n\n我们可以实现一个View接口和一个自定义的视图解析器，这样就可以返回我们自定义的文本内容\n\n### 拦截器\n\n添加拦截器需要我们实现HandlerInterceptor接口，里面有三个方法\n\n```java\npublic interface HandlerInterceptor {\n\t//用于前置拦截，在方法执行前执行\n\tdefault boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)\n\t\t\tthrows Exception {\n\t\treturn true;\n\t}\n    //后置拦截，在方法执行完，还没有渲染页面的时候，如果我们需要添加一些数据进model里面的可以使用这个方法\n\tdefault void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,\n\t\t\t@Nullable ModelAndView modelAndView) throws Exception {\n\t}\n    //在视图渲染完成后执行，用于进行一些清理工作\n\tdefault void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler,\n\t\t\t@Nullable Exception ex) throws Exception {\n\t}\n\n}\n```\n\n定制化SpringMVC的功能都需要我们实现一个WebMvcConfigurer\n\n#### preHandle 前置拦截\n\n实现一个拦截器：\n\n如果session没有对应的值，说明没有登录，返回false表示进行拦截，返回true表示放行\n\n```java\npublic class LoginIntercepter implements HandlerInterceptor {\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        if(request.getSession().getAttribute(\"loginUser\")!=null){\n            return false;\n        }\n        return true;\n    }\n}\n```\n\n在实现的WebMvcConfigurer接口中，实现方法：\n\n```java\n            @Override\n            public void addInterceptors(InterceptorRegistry registry) {\n                registry.addInterceptor(new LoginIntercepter())\n                        .addPathPatterns(\"/**\")\n                        .excludePathPatterns(\"/login\",\"/\",\"/css/**\",\"/js/**\");\n            }\n```\n\naddInterceptor：添加一个拦截器\n\naddPathPatterns：添加拦截的路由，动态路由和静态资源都会被拦截，所以要为静态资源的路径也放行\n\nexcludePathPatterns：添加放行的路由\n\n重定向会丢失原来request中的数据（因为发了一个新的request），所以使用转发功能即可保留请求域中的数据\n\n#### 拦截器原理\n\n```java\n        if (!mappedHandler.applyPreHandle(processedRequest, response)) {\n            return;\n        }\n```\n\n在执行mv = ha.handle(processedRequest, response, mappedHandler.getHandler());方法前，会先执行上述方法，可以看到只要这个方法返回false，请求过程就结束了。\n\napplyPreHandle：\n\n```java\n\tboolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception {\n\t\tHandlerInterceptor[] interceptors = getInterceptors();\n\t\tif (!ObjectUtils.isEmpty(interceptors)) {\n            //顺序执行所有的拦截器\n\t\t\tfor (int i = 0; i < interceptors.length; i++) {\n\t\t\t\tHandlerInterceptor interceptor = interceptors[i];\n\t\t\t\tif (!interceptor.preHandle(request, response, this.handler)) {\n                    //如果被拦截了则逆序执行返回true的拦截器的AfterCompletion方法\n\t\t\t\t\ttriggerAfterCompletion(request, response, null);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tthis.interceptorIndex = i;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n```\n\n如代码所示，请求会顺序执行我们添加的拦截器列表，执行里面的preHandle方法。如果拦截器返回true则执行下一个拦截器，如果有拦截器返回false，也就是请求被拦截了，在返回doDispatch之前会执行triggerAfterCompletion方法：\n\n```java\n\tvoid triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, @Nullable Exception ex)\n\t\t\tthrows Exception {\n\n\t\tHandlerInterceptor[] interceptors = getInterceptors();\n\t\tif (!ObjectUtils.isEmpty(interceptors)) {\n\t\t\tfor (int i = this.interceptorIndex; i >= 0; i--) {\n\t\t\t\tHandlerInterceptor interceptor = interceptors[i];\n\t\t\t\ttry {\n\t\t\t\t\tinterceptor.afterCompletion(request, response, this.handler, ex);\n\t\t\t\t}\n\t\t\t\tcatch (Throwable ex2) {\n\t\t\t\t\tlogger.error(\"HandlerInterceptor.afterCompletion threw exception\", ex2);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```\n\n这个方法中会逆序执行先前已经返回true的拦截器中的afterCompletion方法（最后那个返回false的拦截器不会执行afterCompletion方法）\n\n方法执行完成后会执行applyPostHandle方法：\n\n```java\nmappedHandler.applyPostHandle(processedRequest, response, mv);\n```\n\n```java\n\tvoid applyPostHandle(HttpServletRequest request, HttpServletResponse response, @Nullable ModelAndView mv)\n\t\t\tthrows Exception {\n\n\t\tHandlerInterceptor[] interceptors = getInterceptors();\n\t\tif (!ObjectUtils.isEmpty(interceptors)) {\n\t\t\tfor (int i = interceptors.length - 1; i >= 0; i--) {\n\t\t\t\tHandlerInterceptor interceptor = interceptors[i];\n\t\t\t\tinterceptor.postHandle(request, response, this.handler, mv);\n\t\t\t}\n\t\t}\n\t}\n```\n\n在这个方法中会逆序执行所有的拦截器的postHandle方法（能执行这里说明所有拦截器的preHandle方法都返回了true）\n\n如果正常结束，会在processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);中逆序触发triggerAfterCompletion方法。\n\n如果出现异常，则直接触发triggerAfterCompletion方法\n\ntriggerAfterCompletion只会执行已经执行了preHandle并且返回true的拦截器的方法\n\n![image-20220505172331957](D:\\学习笔记\\picture\\3ec2d5bca54c51b80b6d2c5a9f1fbf32-1669804541526-57.png)\n\n### 文件上传\n\n文件上传页面\n\n```html\n<!-- role 申明这是个表单 th:action表示表单提交的路由 method表示请求方法是post enctype表示多文件上传-->\n<form role=\"form\" th:action=\"@{/upload}\" method=\"post\" enctype=\"multipart/form-data\">\n    <div class=\"form-group\">\n        <label for=\"exampleInputEmail1\">邮箱</label>\n        <input type=\"email\" name=\"email\" class=\"form-control\" id=\"exampleInputEmail1\" placeholder=\"Enter email\">\n    </div>\n    \n    <div class=\"form-group\">\n        <label for=\"exampleInputPassword1\">名字</label>\n        <input type=\"text\" name=\"username\" class=\"form-control\" id=\"exampleInputPassword1\" placeholder=\"Password\">\n    </div>\n    \n    <div class=\"form-group\">\n        <label for=\"exampleInputFile\">头像</label>\n        <input type=\"file\" name=\"headerImg\" id=\"exampleInputFile\">\n    </div>\n    \n    <div class=\"form-group\">\n        <label for=\"exampleInputFile\">生活照</label>\n        <input type=\"file\" name=\"photos\" multiple>\n    </div>\n    \n    <div class=\"checkbox\">\n        <label>\n            <input type=\"checkbox\"> Check me out\n        </label>\n    </div>\n    <button type=\"submit\" class=\"btn btn-primary\">提交</button>\n</form>\n```\n\n文件上传处理的Controller：\n\n```java\n    @PostMapping(\"/upload\")\n    public Object upload(@RequestParam(\"email\") String email,\n                         @RequestPart(\"headerImg\") MultipartFile headerImage,\n                         @RequestPart(\"photos\") MultipartFile[] photos){\n        return new Object[]{email,headerImage.getName(),photos.length};\n    }\n```\n\n单个文件使用MultipartFile headerImage\n\n多个文件上传使用数组MultipartFile[] photos\n\n使用@RequestPart(\"headerImg\") 来接收文件\n\n在配置中设置文件大小：（因为Spring有某人的文件上传大小限制）\n\n```\nspring.servlet.multipart.max-file-size=10MB\nspring.servlet.multipart.max-request-size=100MB\n```\n\n文件下载：\n\n```java\n@RestController\npublic class FileController {\n\n    final static String LOCATION =new File(\"\").getAbsolutePath()+\"/src/main/resources/static/\";\n\n    @PostMapping(\"/upload\")\n    public Object upload(@RequestParam(\"email\") String email,\n                         @RequestPart(\"headerImg\") MultipartFile headerImage,\n                         @RequestPart(\"photos\") MultipartFile[] photos){\n        if(!headerImage.isEmpty()) {\n            try {\n                System.out.println(headerImage.getName());\n                System.out.println(headerImage.getOriginalFilename());\n\n                headerImage.transferTo(new File(LOCATION+headerImage.getOriginalFilename()));\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        return new Object[]{email,headerImage.getName(),photos.length};\n    }\n}\n```\n\n使用headerImage.transferTo(new File(LOCATION+headerImage.getOriginalFilename()));保存文件\n\n使用的是底层使用的是FileCopyUtils.copy(getInputStream(), Files.newOutputStream(dest));实现文件拷贝\n\n#### 文件上传原理\n\n```java\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass({ Servlet.class, StandardServletMultipartResolver.class, MultipartConfigElement.class })\n@ConditionalOnProperty(prefix = \"spring.servlet.multipart\", name = \"enabled\", matchIfMissing = true)\n@ConditionalOnWebApplication(type = Type.SERVLET)\n@EnableConfigurationProperties(MultipartProperties.class)\npublic class MultipartAutoConfiguration {\n\n\tprivate final MultipartProperties multipartProperties;\n\n\tpublic MultipartAutoConfiguration(MultipartProperties multipartProperties) {\n\t\tthis.multipartProperties = multipartProperties;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean({ MultipartConfigElement.class, CommonsMultipartResolver.class })\n\tpublic MultipartConfigElement multipartConfigElement() {\n\t\treturn this.multipartProperties.createMultipartConfig();\n\t}\n//向容器中添加文件上传解析器\n\t@Bean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)\n\t@ConditionalOnMissingBean(MultipartResolver.class)\n\tpublic StandardServletMultipartResolver multipartResolver() {\n\t\tStandardServletMultipartResolver multipartResolver = new StandardServletMultipartResolver();\n\t\tmultipartResolver.setResolveLazily(this.multipartProperties.isResolveLazily());\n\t\treturn multipartResolver;\n\t}\n\n}\n```\n\n如果我们向自定义文件解析过程，往Spring容器中添加我们自定义的文件解析器即可\n\n在doDispatch方法中，在解析参数之前会先判断当前请求是否是文件上传请求：\n\n```\nprocessedRequest = checkMultipart(request);\n```\n\n```java\n\tprotected HttpServletRequest checkMultipart(HttpServletRequest request) throws MultipartException {\n        //使用文件上传解析器判断是不是文件上传请求\n\t\tif (this.multipartResolver != null && this.multipartResolver.isMultipart(request)) {\n\t\t\tif (WebUtils.getNativeRequest(request, MultipartHttpServletRequest.class) != null) {\n\t\t\t\tif (request.getDispatcherType().equals(DispatcherType.REQUEST)) {\n\t\t\t\t\tlogger.trace(\"Request already resolved to MultipartHttpServletRequest, e.g. by MultipartFilter\");\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (hasMultipartException(request)) {\n\t\t\t\tlogger.debug(\"Multipart resolution previously failed for current request - \" +\n\t\t\t\t\t\t\"skipping re-resolution for undisturbed error rendering\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttry {\n                    //如果是文件上传请求则对原请求进行包装\n\t\t\t\t\treturn this.multipartResolver.resolveMultipart(request);\n\t\t\t\t}\n\t\t\t\tcatch (MultipartException ex) {\n\t\t\t\t\tif (request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) != null) {\n\t\t\t\t\t\tlogger.debug(\"Multipart resolution failed for error dispatch\", ex);\n\t\t\t\t\t\t// Keep processing error dispatch with regular request handle below\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthrow ex;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// 不是文件上传请求则直接返回原请求\n\t\treturn request;\n\t}\n```\n\nthis.multipartResolver.isMultipart(request) 使用这个方法判断是不是文件上传请求\n\n如果是文件上传请求则将原请求进行包装\n\nreturn this.multipartResolver.resolveMultipart(request);\n\n然后返回doDispatch方法，判断返回的请求和原来的请求是否一样：\n\n```\nmultipartRequestParsed = (processedRequest != request);\n```\n\n如果不一样，说明对原请求进行了包装，因而是文件上传请求\n\n如果一样，说明没有包装，则不是文件上传请求\n\n解析参数的过程和前面一样，根据@RequestPart注解判断使用RequestPartMethodArgumentResolver这个文件上传解析器来解析文件参数。\n\n```java\n\t@Override\n\t@Nullable\n\tpublic Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,\n\t\t\tNativeWebRequest request, @Nullable WebDataBinderFactory binderFactory) throws Exception {\n\n\t\tHttpServletRequest servletRequest = request.getNativeRequest(HttpServletRequest.class);\n\t\tAssert.state(servletRequest != null, \"No HttpServletRequest\");\n\t\t//获取注解信息，判断这个参数是不是必须的\n\t\tRequestPart requestPart = parameter.getParameterAnnotation(RequestPart.class);\n\t\tboolean isRequired = ((requestPart == null || requestPart.required()) && !parameter.isOptional());\n\t\t//获得参数名\n\t\tString name = getPartName(parameter, requestPart);\n\t\tparameter = parameter.nestedIfOptional();\n\t\tObject arg = null;\n\t\t//解析文件上传参数\n\t\tObject mpArg = MultipartResolutionDelegate.resolveMultipartArgument(name, parameter, servletRequest);\n\t\tif (mpArg != MultipartResolutionDelegate.UNRESOLVABLE) {\n\t\t\targ = mpArg;\n\t\t}\n\t\telse {\n\t\t\ttry {\n\t\t\t\tHttpInputMessage inputMessage = new RequestPartServletServerHttpRequest(servletRequest, name);\n\t\t\t\targ = readWithMessageConverters(inputMessage, parameter, parameter.getNestedGenericParameterType());\n\t\t\t\tif (binderFactory != null) {\n\t\t\t\t\tWebDataBinder binder = binderFactory.createBinder(request, arg, name);\n\t\t\t\t\tif (arg != null) {\n\t\t\t\t\t\tvalidateIfApplicable(binder, parameter);\n\t\t\t\t\t\tif (binder.getBindingResult().hasErrors() && isBindExceptionRequired(binder, parameter)) {\n\t\t\t\t\t\t\tthrow new MethodArgumentNotValidException(parameter, binder.getBindingResult());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (mavContainer != null) {\n\t\t\t\t\t\tmavContainer.addAttribute(BindingResult.MODEL_KEY_PREFIX + name, binder.getBindingResult());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (MissingServletRequestPartException | MultipartException ex) {\n\t\t\t\tif (isRequired) {\n\t\t\t\t\tthrow ex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (arg == null && isRequired) {\n\t\t\tif (!MultipartResolutionDelegate.isMultipartRequest(servletRequest)) {\n\t\t\t\tthrow new MultipartException(\"Current request is not a multipart request\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new MissingServletRequestPartException(name);\n\t\t\t}\n\t\t}\n\t\treturn adaptArgumentIfNecessary(arg, parameter);\n\t}\n```\n\n在文件上传请求发送过来后，所有的文件的文件流都被被直接封装在一个MultiValueMap中，而文件上传解析器的作用则是从这个MultiValueMap中根据字段名拿到对应的MultiPartFile（数组）对象。\n\nMultiPartFile类有很多好用的方法：\n\n```java\npublic interface MultipartFile extends InputStreamSource {\n\t//获取上传文件的参数名\n\tString getName();\n\t//获取上传的文件原来的名字\n\t@Nullable\n\tString getOriginalFilename();\n\t//获取文件类型\n\t@Nullable\n\tString getContentType();\n\t//判断文件是否合法\n\tboolean isEmpty();\n\t//获取文件大小\n\tlong getSize();\n\t//获得字节数组形式的文件\n\tbyte[] getBytes() throws IOException;\n\t//获取文件输入流\n\t@Override\n\tInputStream getInputStream() throws IOException;\n\t//获取资源类型\n\tdefault Resource getResource() {\n\t\treturn new MultipartFileResource(this);\n\t}\n    //保存文件\n\tvoid transferTo(File dest) throws IOException, IllegalStateException;\n\t//保存文件实际就是调用FileCopyUtils进行流拷贝\n\tdefault void transferTo(Path dest) throws IOException, IllegalStateException {\n\t\tFileCopyUtils.copy(getInputStream(), Files.newOutputStream(dest));\n\t}\n\n}\n```\n\n### 错误处理\n\nSpringboot在执行过程中如果出现了异常，会默认转发到/error路由上\n\n如果是机器客户端（如PostMan）则会返回JSON格式id错误信息以及状态码\n\n如果是浏览器客户端则会返回一个错误页\n\n在template目录下创建一个error目录，这个目录下的4xx.html和5xx.html（泛指以4开头和以5开头的状态码对于的页面）,页面会被自动解析，在状态码为对应值时会自动跳转到这个错误页，可以用具体的404.html,500.html来精确定位\n\n也可以根据错误信息使用thymleaf语法设置错误页面的信息\n\n#### 错误处理原理\n\n我们来到配置类：ErrorMvcAutoConfiguration\n\n和异常处理相关的配置都设置在这里\n\n添加了一个错误处理组件：\n\n```java\n\t@Bean\n\t@ConditionalOnMissingBean(value = ErrorAttributes.class, search = SearchStrategy.CURRENT)\n\tpublic DefaultErrorAttributes errorAttributes() {\n\t\treturn new DefaultErrorAttributes();\n\t}\n```\n\n这个组件实现了接口： ErrorAttributes, HandlerExceptionResolver, Ordered\n\n##### BasicErrorController\n\n添加了一个Controller：\n\n```java\n\t@Bean\n\t@ConditionalOnMissingBean(value = ErrorController.class, search = SearchStrategy.CURRENT)\n\tpublic BasicErrorController basicErrorController(ErrorAttributes errorAttributes,\n\t\t\tObjectProvider<ErrorViewResolver> errorViewResolvers) {\n\t\treturn new BasicErrorController(errorAttributes, this.serverProperties.getError(),\n\t\t\t\terrorViewResolvers.orderedStream().collect(Collectors.toList()));\n\t}\n```\n\n这个Controller中：\n\n```java\n@Controller\n@RequestMapping(\"${server.error.path:${error.path:/error}}\")\npublic class BasicErrorController extends AbstractErrorController {\n```\n\n如果我们配置了server.error.path，就用这个路由，如果没有配置再看error.path有没有配置，如果也没有就按照/error路由来进行映射\n\n也就是如果没有配置，这个Controller默认处理/error为前缀的请求\n\n如果内容协商的结果是返回HTML页面：\n\n```java\n\t@RequestMapping(produces = MediaType.TEXT_HTML_VALUE)\n\tpublic ModelAndView errorHtml(HttpServletRequest request, HttpServletResponse response) {\n\t\tHttpStatus status = getStatus(request);\n\t\tMap<String, Object> model = Collections\n\t\t\t\t.unmodifiableMap(getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.TEXT_HTML)));\n\t\tresponse.setStatus(status.value());\n\t\tModelAndView modelAndView = resolveErrorView(request, response, status, model);\n        //如果没有找到404.html文件，也没有找到4xx.html文件，则会返回默认的异常界面\n\t\treturn (modelAndView != null) ? modelAndView : new ModelAndView(\"error\", model);\n\t}\n```\n\n会返回一个new ModelAndView(\"error\", model)\n\n如果协商结果不是HTML则返回一个Entity：\n\n相当于返回了JSON\n\n```java\n\t@RequestMapping\n\tpublic ResponseEntity<Map<String, Object>> error(HttpServletRequest request) {\n\t\tHttpStatus status = getStatus(request);\n\t\tif (status == HttpStatus.NO_CONTENT) {\n\t\t\treturn new ResponseEntity<>(status);\n\t\t}\n\t\tMap<String, Object> body = getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.ALL));\n\t\treturn new ResponseEntity<>(body, status);\n\t}\n```\n\n容器中如果没有名为error的组件，会向容器中加入一个View类型的组件error\n\n```java\n\t\t@Bean(name = \"error\")\n\t\t@ConditionalOnMissingBean(name = \"error\")\n\t\tpublic View defaultErrorView() {\n\t\t\treturn this.defaultErrorView;\n\t\t}\n```\n\n所以如果返回的是HTML页面，返回new ModelAndView(\"error\", model)时，会从Spring容器中拿到error组件作为视图返回\n\n同时会放入视图解析器：\n\n```java\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic BeanNameViewResolver beanNameViewResolver() {\n\t\t\tBeanNameViewResolver resolver = new BeanNameViewResolver();\n\t\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 10);\n\t\t\treturn resolver;\n\t\t}\n```\n\n使用视图解析器就可以根据error这个id找到对于的view对象\n\n然后就可以使用前面处理请求的逻辑来处理/error请求，也就是拿到包含由数据和视图的ModelAndView对象后，在处理返回值的流程中，调用view的render方法来渲染视图：\n\n```java\n\t\t@Override\n\t\tpublic void render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response)\n\t\t\t\tthrows Exception {\n\t\t\tif (response.isCommitted()) {\n\t\t\t\tString message = getMessage(model);\n\t\t\t\tlogger.error(message);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresponse.setContentType(TEXT_HTML_UTF8.toString());\n\t\t\tStringBuilder builder = new StringBuilder();\n\t\t\tObject timestamp = model.get(\"timestamp\");\n\t\t\tObject message = model.get(\"message\");\n\t\t\tObject trace = model.get(\"trace\");\n\t\t\tif (response.getContentType() == null) {\n\t\t\t\tresponse.setContentType(getContentType());\n\t\t\t}\n\t\t\tbuilder.append(\"<html><body><h1>Whitelabel Error Page</h1>\").append(\n\t\t\t\t\t\"<p>This application has no explicit mapping for /error, so you are seeing this as a fallback.</p>\")\n\t\t\t\t\t.append(\"<div id='created'>\").append(timestamp).append(\"</div>\")\n\t\t\t\t\t.append(\"<div>There was an unexpected error (type=\").append(htmlEscape(model.get(\"error\")))\n\t\t\t\t\t.append(\", status=\").append(htmlEscape(model.get(\"status\"))).append(\").</div>\");\n\t\t\tif (message != null) {\n\t\t\t\tbuilder.append(\"<div>\").append(htmlEscape(message)).append(\"</div>\");\n\t\t\t}\n\t\t\tif (trace != null) {\n\t\t\t\tbuilder.append(\"<div style='white-space:pre-wrap;'>\").append(htmlEscape(trace)).append(\"</div>\");\n\t\t\t}\n\t\t\tbuilder.append(\"</body></html>\");\n\t\t\tresponse.getWriter().append(builder.toString());\n\t\t}\n```\n\n所以其实就是根据数据拼接成一个HTML格式的字符串返回，也就是我们看到的错误页的来源\n\n##### DefaultErrorViewResolver 异常视图解析器\n\n这个视图用于根据异常名称解析错误页的，解析过程如下：\n\n```java\n\t@Override\n\tpublic ModelAndView resolveErrorView(HttpServletRequest request, HttpStatus status, Map<String, Object> model) {\n        //解析视图\n\t\tModelAndView modelAndView = resolve(String.valueOf(status.value()), model);\n\t\tif (modelAndView == null && SERIES_VIEWS.containsKey(status.series())) {\n\t\t\tmodelAndView = resolve(SERIES_VIEWS.get(status.series()), model);\n\t\t}\n\t\treturn modelAndView;\n\t}\n```\n\n上面会调用resove方法：\n\n```java\n\tprivate ModelAndView resolve(String viewName, Map<String, Object> model) {\n\t\tString errorViewName = \"error/\" + viewName;\n\t\tTemplateAvailabilityProvider provider = this.templateAvailabilityProviders.getProvider(errorViewName,\n\t\t\t\tthis.applicationContext);\n\t\tif (provider != null) {\n\t\t\treturn new ModelAndView(errorViewName, model);\n\t\t}\n\t\treturn resolveResource(errorViewName, model);\n\t}\n\n```\n\nString errorViewName = \"error/\" + viewName 通过这条语句可以看到解析的视图地址是在/error目录下，并且视图名称是viewName\n\n创建ModelAndView对象时，会默认从template目录寻找对于的html文件，而加上/error前缀后，默认的视图页就会从/templates/error目录下面找，而视图名称viewName 从哪里来呢，我们看调用这个方法的语句：\n\n```\nModelAndView modelAndView = resolve(String.valueOf(status.value()), model);\n```\n\n将Http状态码作为viewName穿了进去，并且在寻找视图时会默认加上.html的后缀，所以在出现404的时候会找到404.html页面，依次类推。\n\n而如果没有找到，则会来到下一条语句：\n\n```java\n\tif (modelAndView == null && SERIES_VIEWS.containsKey(status.series())) {\n\t\tmodelAndView = resolve(SERIES_VIEWS.get(status.series()), model);\n\t}\n```\n\n这条语句也是执行resolve方法，只是传入的viewName不一样，而SERIES_VIEWS.get(status.series())，追溯到最后就是\n\n```java\n\t\t@Nullable\n\t\tpublic static Series resolve(int statusCode) {\n\t\t\tint seriesCode = statusCode / 100;\n\t\t\tfor (Series series : values()) {\n\t\t\t\tif (series.value == seriesCode) {\n\t\t\t\t\treturn series;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n```\n\nSeries是个枚举类型，这个枚举类型有以下字段：\n\n```\n\t\tINFORMATIONAL(1),\n\t\tSUCCESSFUL(2),\n\t\tREDIRECTION(3),\n\t\tCLIENT_ERROR(4),\n\t\tSERVER_ERROR(5);\n```\n\n这些字段都是Series类型，对于的value值是括号里的值。\n\n所以这个方法的逻辑就是遍历这里所有的枚举类型，然后根据状态码/100判断是哪个series。也就是将状态码转换成2xx，3xx，4xx，5xx类型的格式，然后在template/error/目录下查找有无对于类型格式的html文件，例如404.html没有找到就会去找4xx.html文件\n\n##### DefaultErrorAttributes\n\n这个类中定义了返回值中需要包含的数据（需要包含在页面中，或者以JSON返回）：\n\n如果就相关信息就添加相关信息，如果没有相关信息就从返回参数中移除\n\n```java\n\t@Override\n\tpublic Map<String, Object> getErrorAttributes(WebRequest webRequest, ErrorAttributeOptions options) {\n\t\tMap<String, Object> errorAttributes = getErrorAttributes(webRequest, options.isIncluded(Include.STACK_TRACE));\n\t\tif (Boolean.TRUE.equals(this.includeException)) {\n\t\t\toptions = options.including(Include.EXCEPTION);\n\t\t}\n        //异常信息\n\t\tif (!options.isIncluded(Include.EXCEPTION)) {\n\t\t\terrorAttributes.remove(\"exception\");\n\t\t}\n        //调用路径\n\t\tif (!options.isIncluded(Include.STACK_TRACE)) {\n\t\t\terrorAttributes.remove(\"trace\");\n\t\t}\n        //相关信息\n\t\tif (!options.isIncluded(Include.MESSAGE) && errorAttributes.get(\"message\") != null) {\n\t\t\terrorAttributes.put(\"message\", \"\");\n\t\t}\n        //错误\n\t\tif (!options.isIncluded(Include.BINDING_ERRORS)) {\n\t\t\terrorAttributes.remove(\"errors\");\n\t\t}\n\t\treturn errorAttributes;\n\t}\n\t@Override\n\t@Deprecated\n\tpublic Map<String, Object> getErrorAttributes(WebRequest webRequest, boolean includeStackTrace) {\n\t\tMap<String, Object> errorAttributes = new LinkedHashMap<>();\n        //时间戳\n\t\terrorAttributes.put(\"timestamp\", new Date());\n\t\taddStatus(errorAttributes, webRequest);\n\t\taddErrorDetails(errorAttributes, webRequest, includeStackTrace);\n\t\taddPath(errorAttributes, webRequest);\n\t\treturn errorAttributes;\n\t}\n\tprivate void addStatus(Map<String, Object> errorAttributes, RequestAttributes requestAttributes) {\n\t\tInteger status = getAttribute(requestAttributes, RequestDispatcher.ERROR_STATUS_CODE);\n\t\tif (status == null) {\n\t\t\terrorAttributes.put(\"status\", 999);\n\t\t\terrorAttributes.put(\"error\", \"None\");\n\t\t\treturn;\n\t\t}\n        //状态码\n\t\terrorAttributes.put(\"status\", status);\n\t\ttry {\n\t\t\terrorAttributes.put(\"error\", HttpStatus.valueOf(status).getReasonPhrase());\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\t// Unable to obtain a reason\n\t\t\terrorAttributes.put(\"error\", \"Http Status \" + status);\n\t\t}\n\t}\n```\n\n总结\n\nBasicErrorController -》用于处理异常请求（/error），如果向定制化在发送错误时的响应则需要修改BasicErrorController 对象\n\nDefaultErrorViewResolver -》用于查找错误页，如果不想根据Spring的规则返回错误页面可以修改这个视图解析器\n\nDefaultErrorAttributes -》用于设置返回的参数，如果觉得返回的数据不够多，可以修改这个类，添加我们需要的参数（然后可以使用thymleaf定制我们想要的页面）\n\n（不过一般情况下用Spring默认的错误处理机制即可）\n\n#### 异常处理流程\n\n我们再回顾以下doDispatch方法\n\n```java\n\tprotected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {\n\t\tHttpServletRequest processedRequest = request;\n\t\tHandlerExecutionChain mappedHandler = null;\n\t\tboolean multipartRequestParsed = false;\n\n\t\tWebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\n\n\t\ttry {\n\t\t\tModelAndView mv = null;\n\t\t\tException dispatchException = null;\n\n\t\t\ttry {\n\t\t\t\tprocessedRequest = checkMultipart(request);\n\t\t\t\tmultipartRequestParsed = (processedRequest != request);\n\n\t\t\t\t// Determine handler for the current request.\n\t\t\t\tmappedHandler = getHandler(processedRequest);\n\t\t\t\tif (mappedHandler == null) {\n\t\t\t\t\tnoHandlerFound(processedRequest, response);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Determine handler adapter for the current request.\n\t\t\t\tHandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());\n\n\t\t\t\t// Process last-modified header, if supported by the handler.\n\t\t\t\tString method = request.getMethod();\n\t\t\t\tboolean isGet = \"GET\".equals(method);\n\t\t\t\tif (isGet || \"HEAD\".equals(method)) {\n\t\t\t\t\tlong lastModified = ha.getLastModified(request, mappedHandler.getHandler());\n\t\t\t\t\tif (new ServletWebRequest(request, response).checkNotModified(lastModified) && isGet) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!mappedHandler.applyPreHandle(processedRequest, response)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Actually invoke the handler.\n\t\t\t\tmv = ha.handle(processedRequest, response, mappedHandler.getHandler());\n\n\t\t\t\tif (asyncManager.isConcurrentHandlingStarted()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tapplyDefaultViewName(processedRequest, mv);\n\t\t\t\tmappedHandler.applyPostHandle(processedRequest, response, mv);\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tdispatchException = ex;\n\t\t\t}\n\t\t\tcatch (Throwable err) {\n\t\t\t\t// As of 4.3, we're processing Errors thrown from handler methods as well,\n\t\t\t\t// making them available for @ExceptionHandler methods and other scenarios.\n\t\t\t\tdispatchException = new NestedServletException(\"Handler dispatch failed\", err);\n\t\t\t}\n\t\t\tprocessDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\ttriggerAfterCompletion(processedRequest, response, mappedHandler, ex);\n\t\t}\n\t\tcatch (Throwable err) {\n\t\t\ttriggerAfterCompletion(processedRequest, response, mappedHandler,\n\t\t\t\t\tnew NestedServletException(\"Handler processing failed\", err));\n\t\t}\n\t\tfinally {\n\t\t\tif (asyncManager.isConcurrentHandlingStarted()) {\n\t\t\t\t// Instead of postHandle and afterCompletion\n\t\t\t\tif (mappedHandler != null) {\n\t\t\t\t\tmappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Clean up any resources used by a multipart request.\n\t\t\t\tif (multipartRequestParsed) {\n\t\t\t\t\tcleanupMultipart(processedRequest);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```\n\n既然是异常处理，所以我们关心try catch语句块即可，我们之前所讲的内容都是在第一层try 块中，所有的请求流程，包括解析url，拦截器，执行具体的方法等等只要出现异常就会跳转到catch语句块中。\n\n所有的Exception和Error都会被记录在dispatchException中\n\n如果是handle方法中出现了异常，会被catch，将当前请求状态设置为结束，然后向外抛出\n\n执行请求以及处理完请求中的异常后会进入视图解析流程：\n\n```\nprocessDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);\n```\n\n```java\n\tprivate void processDispatchResult(HttpServletRequest request, HttpServletResponse response,\n\t\t\t@Nullable HandlerExecutionChain mappedHandler, @Nullable ModelAndView mv,\n\t\t\t@Nullable Exception exception) throws Exception {\n\n\t\tboolean errorView = false;\n\n\t\tif (exception != null) {\n\t\t\tif (exception instanceof ModelAndViewDefiningException) {\n\t\t\t\tlogger.debug(\"ModelAndViewDefiningException encountered\", exception);\n\t\t\t\tmv = ((ModelAndViewDefiningException) exception).getModelAndView();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tObject handler = (mappedHandler != null ? mappedHandler.getHandler() : null);\n\t\t\t\tmv = processHandlerException(request, response, handler, exception);\n\t\t\t\terrorView = (mv != null);\n\t\t\t}\n\t\t}\n\n\t\t// Did the handler return a view to render?\n\t\tif (mv != null && !mv.wasCleared()) {\n\t\t\trender(mv, request, response);\n\t\t\tif (errorView) {\n\t\t\t\tWebUtils.clearErrorRequestAttributes(request);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(\"No view rendering, null ModelAndView returned.\");\n\t\t\t}\n\t\t}\n\n\t\tif (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) {\n\t\t\t// Concurrent handling started during a forward\n\t\t\treturn;\n\t\t}\n\n\t\tif (mappedHandler != null) {\n\t\t\t// Exception (if any) is already handled..\n\t\t\tmappedHandler.triggerAfterCompletion(request, response, null);\n\t\t}\n\t}\n```\n\n其中，如果在之前执行过程中出现了异常则会进入这个代码块，这个代码块中会获取错误页的ModelAndView数据\n\n```java\n\t\tif (exception != null) {\n\t\t\tif (exception instanceof ModelAndViewDefiningException) {\n\t\t\t\tlogger.debug(\"ModelAndViewDefiningException encountered\", exception);\n\t\t\t\tmv = ((ModelAndViewDefiningException) exception).getModelAndView();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tObject handler = (mappedHandler != null ? mappedHandler.getHandler() : null);\n\t\t\t\tmv = processHandlerException(request, response, handler, exception);\n\t\t\t\terrorView = (mv != null);\n\t\t\t}\n\t\t}\n```\n\n如果不是ModelAndViewException则会执行mv = processHandlerException(request, response, handler, exception)\n\n```java\n\t@Nullable\n\tprotected ModelAndView processHandlerException(HttpServletRequest request, HttpServletResponse response,\n\t\t\t@Nullable Object handler, Exception ex) throws Exception {\n\n\t\t// Success and error responses may use different content types\n\t\trequest.removeAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE);\n\n\t\t// Check registered HandlerExceptionResolvers...\n\t\tModelAndView exMv = null;\n\t\tif (this.handlerExceptionResolvers != null) {\n\t\t\tfor (HandlerExceptionResolver resolver : this.handlerExceptionResolvers) {\n\t\t\t\texMv = resolver.resolveException(request, response, handler, ex);\n\t\t\t\tif (exMv != null) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (exMv != null) {\n\t\t\tif (exMv.isEmpty()) {\n\t\t\t\trequest.setAttribute(EXCEPTION_ATTRIBUTE, ex);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t// We might still need view name translation for a plain error model...\n\t\t\tif (!exMv.hasView()) {\n\t\t\t\tString defaultViewName = getDefaultViewName(request);\n\t\t\t\tif (defaultViewName != null) {\n\t\t\t\t\texMv.setViewName(defaultViewName);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(\"Using resolved error view: \" + exMv, ex);\n\t\t\t}\n\t\t\telse if (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Using resolved error view: \" + exMv);\n\t\t\t}\n\t\t\tWebUtils.exposeErrorRequestAttributes(request, ex, getServletName());\n\t\t\treturn exMv;\n\t\t}\n\n\t\tthrow ex;\n\t}\n```\n\n用HandlerExceptionResolver来处理异常，遍历容器中所有的异常解析器，解析拿到ModelAndView后就退出循环。默认情况下没有解析器能处理这个异常，所以会被抛出。\n\n然后就会doDispatch中，触发拦截器的后续的收尾方法后就结束了doDispatch方法，因而这个异常也就没有被处理，而如果异常没有被处理，会**转发一个error请求**（servlet规范规定的逻辑），然后会被自动配置类添加的**BasicErrorController**处理，而这个controller在处理异常的时候，会遍历所有的的ErrorViewResolver，尝试解析并拿到视图View，其中默认只有一个ErrorViewResolver（错误视图解析器）：DefaultErrorViewResolver ，在这个解析器中会根据Http状态码寻找HTML文件并返回。如果都没有找到就返回默认的空白异常界面。\n\n#### 定制化错误处理\n\n##### 在error目录下定值我们想要的404.html或者5xx.html（像这种写法的html文件）\n\nhtml文件中可以使用thymleaf语法使用返回的数据，显示在界面上\n\n##### 全局异常处理\n\n全局范围内的所有异常都可以集中起来一起处理\n\n```java\n@Slf4j\n@ControllerAdvice\npublic class GlobalExceptionHandle {\n\n    @ExceptionHandler(ArithmeticException.class)\n    public String mathExceptionHandle(Exception e){\n        log.error(e.getMessage());\n        return \"error/4xx\";\n    }\n}\n```\n\n@ControllerAdvice申明这是一个处理异常的类，这个注解内部包含@Component注解，会把这个类注册进Spring容器中\n\n@ExceptionHandler(ArithmeticException.class) 申明要捕获的异常，出现了异常后都会跳转到这里来处理\n\n返回类型是String类型，就会也就返回View对象的地址，也可以直接返回ModelAndView对象，这样既返回视图也返回了数据。\n\n如果加上了@ResponseBody则会返回JSON格式或者文本类型的数据\n\n```java\n@Slf4j\n@ControllerAdvice\npublic class GlobalExceptionHandle {\n\n    @ExceptionHandler(ArithmeticException.class)\n    @ResponseBody\n    public String mathExceptionHandle(Exception e){\n        log.error(e.getMessage());\n        return \"error/4xx\";\n    }\n}\n```\n\n返回值规则和普通的Controller一样，只是这个类是专门用于处理异常的\n\n原理如下：\n\n之前我们提到过在执行mv = processHandlerException(request, response, handler, exception)方法时会遍历Spring容器中的异常解析器，Spring容器中的异常解析器有以下三种\n\n![image-20220507004852744](D:\\学习笔记\\picture\\029c7937f23ed1c8dc2a5a81e74565d8.png)\n\n**ExceptionHandlerExceptionResolver**对应@ExceptionHandler(ArithmeticException.class)注解，在Spring启动时，会将括号中的class对象类型和方法建立映射关系并缓存起来。之前因为我们没有编写全局异常处理类，所以这里就没有解析器可以处理，而此时我们添加了对应的方法，并且出现了指定的异常，就可以用这个解析器执行我们设置的处理逻辑来处理这和异常\n\n如果想抛出一个自定义异常，可以使用@ResponseStatus注解来自定义异常\n\n```java\n@NoArgsConstructor\n@ResponseStatus(value = HttpStatus.FORBIDDEN,reason = \"用户太多\")\npublic class ToManyUserException extends RuntimeException {\n    \n}\n```\n\n在这个异常中可以重新设置自己的状态码和错误提示信息，并放到请求域中\n\n使用这个注解后，在processHandlerException解析异常的时候，就可以使用**ResponseStatusExceptionResolver**这个解析器来处理这个异常，不过处理的时候并不会生产ModelAndView对象，而是调用response.sendError()方法向服务器发送一个Error，结束当前请求，然后按照Servlet的规则会转发一个/error请求，然后这个异常最后还是会根据状态码被错误页面处理，例如这里是403会返回4xx.html页面\n\n而对于框架内部产生的异常（每一种状态码都对应一种异常），则是由第三种异常解析器**DefaultHandlerExceptionResolver**来解析异常，这个解析器能解析的异常如下：\n\n```\nException\nHTTP Status Code\nHttpRequestMethodNotSupportedException\n405 (SC_METHOD_NOT_ALLOWED)\nHttpMediaTypeNotSupportedException\n415 (SC_UNSUPPORTED_MEDIA_TYPE)\nHttpMediaTypeNotAcceptableException\n406 (SC_NOT_ACCEPTABLE)\nMissingPathVariableException\n500 (SC_INTERNAL_SERVER_ERROR)\nMissingServletRequestParameterException\n400 (SC_BAD_REQUEST)\nServletRequestBindingException\n400 (SC_BAD_REQUEST)\nConversionNotSupportedException\n500 (SC_INTERNAL_SERVER_ERROR)\nTypeMismatchException\n400 (SC_BAD_REQUEST)\nHttpMessageNotReadableException\n400 (SC_BAD_REQUEST)\nHttpMessageNotWritableException\n500 (SC_INTERNAL_SERVER_ERROR)\nMethodArgumentNotValidException\n400 (SC_BAD_REQUEST)\nMissingServletRequestPartException\n400 (SC_BAD_REQUEST)\nBindException\n400 (SC_BAD_REQUEST)\nNoHandlerFoundException\n404 (SC_NOT_FOUND)\nAsyncRequestTimeoutException\n503 (SC_SERVICE_UNAVAILABLE)\n```\n\n而处理这些异常的方法相同：\n\n都是直接向tomcat发送一个Error，表示结束当前请求，然后tomcat会再发送一个/error请求，然后被处理这个请求的controller捕获进行处理。\n\n```java\n\tprotected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex,\n\t\t\tHttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {\n\n\t\tsendServerError(ex, request, response);\n\t\treturn new ModelAndView();\n\t}\n```\n\n上述三个解析器都实现了HandlerExceptionResolver接口，我们也可以实现这个接口定义我们想要的异常解析器\n\n```java\n@Component\npublic class CustomerHandlerExceptionResolver implements HandlerExceptionResolver {\n    @Override\n    public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) {\n        try {\n            response.sendError(505,\"我的错误\");\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return new ModelAndView();\n    }\n}\n```\n\n这样在解析错误的时候就会多出一种异常解析器，但是此时我们的异常解析器的优先级最低，Spring自带的解析器生效后就不会再去执行我们自定义的解析器。\n\n如果想要我们设置的异常解析器生效，可以加上@Order注解来设置组件的加载顺序\n\n比如这个注解可以设置最高优先级，其实就是一个INT数的最小值，value值越小，优先级越高，我们也可以直接填入一个数字来合理规划优先级顺序。\n\n```\n@Order(value = Ordered.HIGHEST_PRECEDENCE)\n```\n\n总结：\n\n使用respond.sendError()方法或者出现了异常而Spring容器的异常解析器均无法处理，则Tomcat会转发一个/error请求，然后被basicController捕获，因而basicController可以处理所有的异常。","source":"_posts/Springboot-上篇.md","raw":"---\ntitle: Springboot(上篇)\ndate: 2022-11-30 18:53:29\ntags:\n---\n## Springboot2基础\n\nhttps://blog.csdn.net/u011863024/article/details/113667634\n\n### 入门案例\n\nMAVEN的settings.xml中需要添加如下配置文件：\n\n```xml\n<mirrors>\n\t<mirror>\n\t\t<id>nexus-aliyun</id>\n\t\t<mirrorOf>central</mirrorOf>\n\t\t<name>Nexus aliyun</name>\n\t\t<url>http://maven.aliyun.com/nexus/content/groups/public</url>\n\t</mirror>\n</mirrors>\n\n<profiles>\n\t<profile>\n\t\t<id>jdk-1.8</id>\n\n\t\t<activation>\n\t\t\t<activeByDefault>true</activeByDefault>\n\t\t\t<jdk>1.8</jdk>\n\t\t</activation>\n\n\t\t<properties>\n\t\t\t<maven.compiler.source>1.8</maven.compiler.source>\n\t\t\t<maven.compiler.target>1.8</maven.compiler.target>\n\t\t\t<maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>\n\t\t</properties>\n\t</profile>\n</profiles>\n```\n\npom依赖\n\n```xml\n<-- Spring项目必须导入父依赖 版本是所使用的Springboot的版本-->\n<parent>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-parent</artifactId>\n\t<version>2.3.4.RELEASE</version>\n</parent>\n<-- Spring \tWeb项目导入这个依赖即可-->\n<dependencies>\n\t<dependency>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-web</artifactId>\n\t</dependency>\n</dependencies>\n```\n\n打包部署：使用maven的插件\n\n```xml\n<build>\n\t<plugins>\n\t\t<plugin>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t</plugin>\n\t</plugins>\n</build>\n```\n\n可以直接使用java -jar运行\n\n可见Springboot相对于SpringMVC的优点：\n\n简化配置，Springboot所整合的框架都可以在yml或者properties文件中同一配置，并且所有的配置Springboot都设置了默认值，并且通过maven来管理项目，通过简单的几项配置即可完成所需jar包的导入\n\n简化部署，Springboot内置了Tomcat服务器，可以直接通过main方法启动：\n\n```java\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class MainApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(MainApplication.class, args);\n    }\n}\n```\n\n业务部分兼容SpringMVC的所有功能：\n\n```java\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class HelloController {\n    @RequestMapping(\"/hello\")\n    public String handle01(){\n        return \"Hello, Spring Boot 2!\";\n    }\n}\n```\n\nSpringMVC需要打成war包，而Springboot通过MAVEN插件可以直接打成可以运行的jar包\n\n### Springboot版本管理\n\n```xml\n<parent>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-parent</artifactId>\n\t<version>2.3.4.RELEASE</version>\n</parent>\n```\n\n父项目可以用于进行版本管理，Springboot的父项目中帮我们定义了平时常用的jar包中匹配的版本号，从而避免一些版本不匹配的问题\n\n这个也成为自动版本仲裁机制，如果不想使用Springboot指定的版本，我们可以自己设定版本（例如Mysql），重写里面的版本号（最近优先原则）\n\n```xml\n<properties>\n\t<mysql.version>5.1.43</mysql.version>\n</properties>\n```\n\n`spring-boot-starter-* `: *代表某种场景，只要引入这个场景的starter就代表引入了这个场景所有常规的依赖\n\n`*-spring-boot-starter-*`：第三方提供的starter\n\n### Springboot自动配置\n\n引入并配置好了Tomcat\n字符编码拦截器，文件上传解析器，视图解析器等\n引入配置好了SpringMVC\nSpringbootApplication.run的返回值就是Spring容器，里面有工作的所有组件\n\n#### @SpringbootApplication\n\n拥有默认包扫描规则:主程序所在的包，以及它的子包中的类都能被扫描，也可以通过配置\n@SpringbootApplication(scanBasePackage=\"com.demo\")来改变包的扫描路径\n@SpringbootApplication等于以下三个注解(三合一注解):\n@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan(\"com.demo\")\n\n可以用这三个注解代替@SpringbootApplication\n\nproperties中配置的属性最后都会映射到一个配置类上，这个类会在容器中创建对象\nSpringboot的所有配置功能都在spring-boot-starter-autoconfigure配置中设置\n自动配置功能是按需加载的，引入了对应的场景后，对应的场景的自动配置才会生效\n\n### @Configuration和@Bean向添加Spring容器添加组件\n\n@Configuration会将这个类申明为Springboot的一个配置类\n\n在配置类中可以通过@Bean注解添加bean\n\n添加的bean的名称就是我们的方法名，添加的bean就是方法的返回值，也可以通过@Bean(\"cat\")在括号中设置bean的名称\n\nSpringboot.run的返回值就是Spring容器，我们可以在里面拿到容器中注册的所有bean\n\n```JAVA\n@SpringBootApplication\npublic class Demo2Application {\n    public static void main(String[] args) {\n        ConfigurableApplicationContext run = SpringApplication.run(Demo2Application.class, args);\n        for (String name : run.getBeanDefinitionNames()) {\n            System.out.println(name);\n        }\n    }\n}\n```\n\n如果出现了组件依赖的情况，可以直接调用其他注册组件的方法来设置bean\n\n```java\n@Configuration\npublic class MyConfig {\n    @Bean\n    Mypage page(){\n        Mypage mypage = new Mypage();\n        mypage.setUser(user01());\n        return mypage;\n    }\n    @Bean\n    User user01(){\n        return new User(\"name\",\"132\");\n    }\n}\n```\n\n设置的bean可以在Spring容器中拿到，并且调用生成bean的方法拿到的bean和在Spring容器中拿到的bean是一样的：\n\n```java\n@SpringBootApplication\n@MapperScan(\"com.example.demo.mapper\")//检测mapper的包\n@MapperScan(\"com.example.demo.dao\")//检测mapper的包\npublic class Demo2Application {\n    public static void main(String[] args) {\n        ConfigurableApplicationContext run = SpringApplication.run(Demo2Application.class, args);\n        for (String name : run.getBeanDefinitionNames()) {\n            System.out.println(name);\n        }\n        User user01 = run.getBean(\"user01\", User.class);\n        Mypage mypage=run.getBean(Mypage.class);\n        System.out.println(user01==mypage.getUser());//返回true\n    }\n}\n```\n\n包括带有@Configuration的类也是Spring容器中组件的一个，也可以拿到这个bean，调用里面生成bean的方法拿到的bean仍然是唯一的，并不会生成一个新的bean：\n\n```java\n@SpringBootApplication\n@MapperScan(\"com.example.demo.mapper\")//检测mapper的包\n@MapperScan(\"com.example.demo.dao\")//检测mapper的包\npublic class Demo2Application {\n    public static void main(String[] args) {\n        ConfigurableApplicationContext run = SpringApplication.run(Demo2Application.class, args);\n        User user01 = run.getBean(\"user01\", User.class);\n        Mypage mypage=run.getBean(Mypage.class);\n        MyConfig config = run.getBean(MyConfig.class);\n        System.out.println(config.user01()==user01);//true\n        System.out.println(config.user01()== mypage.getUser());//true\n        System.out.println(user01==mypage.getUser());//true\n    }\n}\n```\n\n这是因为我们拿到的MyConfig其实是通过CGLIB代理过的对象：\n\n```java\ncom.example.demo.config.MyConfig$$EnhancerBySpringCGLIB$$a35275ef@6bf54260\n```\n\n这个对象调用组件注册方法前，会先判断这个组件是否出现在Spring容器中，如果出现在了Spring容器中则返回Spring容器中的对象，否则才会new一个对象。\n\n#### @Configuration(proxyBeanMethods = false)\n\nproxyBeanMethods 默认为true，当这个属性值为true时Spring会帮我们生成上述的代理对象来保证Spring容器中对象的唯一性，用于设置组件之间的依赖关系（如果设置为false则不能在bean中注入其他属性），来容器外多次调用生成组件的方法返回的都是同一个对象。\n\n如果设置为false，则不会生成代理对象，Spring容器可以更快的启动，但此时不能设置组件的依赖关系，外部调用生成组件的方法会生成多个对象。\n\n扫描范围内的@Controller之类的注解的用法和SpringMVC相同\n\n#### @Import\n\n@Import 导入组件参数是class数组\n容器中会自动创建一个这个类型的bean，默认名称是这个类的全限定名\n\n#### @Condition 满足某些条件时做某些事情(条件装配)\n\n@ConditionalOnBean 容器中有这个bean的时候才在容器启动时执行这个方法，可以通过name和type来指定。可以标注在方法上，也可以标注在类上，表示这个类的方法都需要满足这个条件。\n@ConditionalOnMissingBean 没有这个bean的时候执行这个方法\n还有其他的条件装配，这里只列举其中几个\n@ImportResource(\"文件路径\") 这个注解可以加载xml配置文件，往Spring容器中添加组件\n\n#### 配置绑定\n\n原生java 使用Properties类的load方法加载配置文件，然后遍历\nSpring方式\n需要放在容器中才能使用Spring的功能，即必须加上@Component\n@ConfigurationProperties(prefix=\"xxx\") 将前缀为这个的配置文件和类中对应名称的属性值进行绑定，然后就可以通过这个类的对象拿到配置文件中的属性值\n@EnableConfigurationProperties(xxx.class)将这个注解加在配置类上 开启属性配置功能，用这个注解代替@Component注解(对于一些我们无法修改的第三方的包可以用这种方式来绑定组件)将我们，@ConfigurationProperties也要加在需要绑定的类上，上面这个注解只是帮我们将其注册到容器中并开启指定类的配置绑定功能\n\n#### 自动配置原理\n\n三合一注解：@SpringbootApplication\n\n@SpringbootConfiguration 声明启动类是Spring容器的主配置类，功能和@Configuration一致\n@ComponentScan 指定包扫描路径\n@EnableAutoConfiguration 开启自动配置这个注解是以下两个注解的合成:\n@ConfigurationPackage（指定默认包规则）\n自动配置包，里面有@Import注解，用于引入包扫描器，将主类所在的包下面的组件进行批量注册(main方法所在的包)\n@Import(AutoConfigurationImportSelector.class)\nSpringboot会在容器启动时，加载一些必须加载的组件，这些组件被写在各个jar包的META-INFO下的Spring.Factories中，其中有一个名为autoconfigure的jar包里面的这个目录下有这个配置文件，而这个注解就是用于加载这些配置文件(所有场景的jar包)的，这些配置会被全部加载进来，但最后会按需配置(条件装配)\n\n按需加载功能通过使用注解来生效：\n\n@ConditionalOnClass(xxx.class)：如果类路径中有这个类就生效（编译时会编译失败，但是我们引入的jar是已经编译好的class文件）\n\n@ConditionalOnMissingBean(value = xxx.class ， name=\"yyyy\")：如果容器中有这个bean才会生效\n\n![image-20220428183847161](D:\\学习笔记\\picture\\123123123.png)\n\n如果这些注解加载类上，必须上面的条件都满足，才会在Spring容器的启动的时候加载这个类里面的方法向容器中添加组件，如果加在方法上，表示满足这些条件后，组件注册方法才会生效（执行）\n\n```java\n\t@Configuration(proxyBeanMethods = false)\n\t@Conditional(DefaultDispatcherServletCondition.class)\n\t@ConditionalOnClass(ServletRegistration.class)\n\t@EnableConfigurationProperties({ HttpProperties.class, WebMvcProperties.class })\n\tprotected static class DispatcherServletConfiguration {\n```\n\n@ConditionalWebApplication(type = Type.SERVLET) 判断当前的应用类型（是基于Servlet还是基于Reator）\n\n@AutoConfigurationOrder() 设置配置的优先级，这里这个配置类的优先级设置为高\n\n@Configuration(proxyBeanMethods = false) 前面说过，声明为组件，并使用轻量级配置\n\n@AutoConfigureAfter(ServletWebServerFactoryAutoConfiguration.class) 声明这个类要在ServletWebServerFactoryAutoConfiguration这个类之后配置\n\n上述添加都满足后，我们再看类中注册bean的方法：\n\n```java\n\t\t@Bean(name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)\n\t\tpublic DispatcherServlet dispatcherServlet(HttpProperties httpProperties, WebMvcProperties webMvcProperties) {\n\t\t\tDispatcherServlet dispatcherServlet = new DispatcherServlet();\n\t\t\tdispatcherServlet.setDispatchOptionsRequest(webMvcProperties.isDispatchOptionsRequest());\n\t\t\tdispatcherServlet.setDispatchTraceRequest(webMvcProperties.isDispatchTraceRequest());\n\t\t\tdispatcherServlet.setThrowExceptionIfNoHandlerFound(webMvcProperties.isThrowExceptionIfNoHandlerFound());\n\t\t\tdispatcherServlet.setPublishEvents(webMvcProperties.isPublishRequestHandledEvents());\n\t\t\tdispatcherServlet.setEnableLoggingRequestDetails(httpProperties.isLogRequestDetails());\n\t\t\treturn dispatcherServlet;\n\t\t}\n```\n\n@Bean注解下的方法，如果传入了对象参数，Springboot会自动在Spring容器中找到这个对象并作为参数传入\n\nSpringMVC中我们需要向Spring容器中注入DispatcherServlet类型的对象才能使用SpringMVC的Web功能，而Springboot帮我们在Spring容器中添加了这个对象，因而不需要我们手动去设置。\n\n```java\n\t\t@Bean\n\t\t@ConditionalOnBean(MultipartResolver.class)\n\t\t@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)\n\t\tpublic MultipartResolver multipartResolver(MultipartResolver resolver) {\n\t\t\t// Detect if the user has created a MultipartResolver but named it incorrectly\n\t\t\treturn resolver;\n\t\t}\n```\n\n这个方法负责注入处理文件上传的文件解析器，\n\n@ConditionalOnBean(MultipartResolver.class) ：Spring容器中有MultipartResolver这个类的对象\n\n@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)：但是名字不是我们想要的名字\n\n于是我们就执行这个方法，添加一个名字也是我们的想要的bean，@Bean注解添加的bean的名称就是我们的方法名，这样就保证了组件名字的一致性\n\n再举一个例子：用来处理Http请求的编码类，防止出现中文乱码\n\n```java\n@Configuration(proxyBeanMethods = false)\n@EnableConfigurationProperties(HttpProperties.class)\n@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n@ConditionalOnClass(CharacterEncodingFilter.class)\n@ConditionalOnProperty(prefix = \"spring.http.encoding\", value = \"enabled\", matchIfMissing = true)\npublic class HttpEncodingAutoConfiguration {\n```\n\n注解含义和之前都是类似的\n\n```java\n\t@Bean\n\t@ConditionalOnMissingBean\n\tpublic CharacterEncodingFilter characterEncodingFilter() {\n\t\tCharacterEncodingFilter filter = new OrderedCharacterEncodingFilter();\n\t\tfilter.setEncoding(this.properties.getCharset().name());\n\t\tfilter.setForceRequestEncoding(this.properties.shouldForce(Type.REQUEST));\n\t\tfilter.setForceResponseEncoding(this.properties.shouldForce(Type.RESPONSE));\n\t\treturn filter;\n\t}\n```\n\n@ConditionalOnMissingBean 如果没有CharacterEncodingFilter类型的bean，就执行下面这个方法，向容器中添加这个类型的bean\n\n通过使用注解@ConditionalOnMissingBean，Spring会向容器中添加所有我们需要的组件，但如果用户自己配置了组件，则以用户配置的组件优先\n\n#### 总结：\n\n![image-20220429002822205](D:\\学习笔记\\picture\\image-20220429002822205-1669804541526-41.png)\n\nSpring容器会加载指定路径下所有的自动配置类，然后这些配置类会根据@Condition系列注解配置的条件判断是否生效，每个自动配置类在注册组件时，属性值需要从xxxProperties类中拿，xxxProperties中是属性值会有默认值，同时也和我们设置的配置文件绑定在一起。所以我们向修改组件可以通过修改配置文件来做到。容器有有了对应的组件也就有了对应的功能。注册组件前会先判断用户是否注册了对应类型的组件，如果注册了就以用户的优先，所以我们可以通过在配置类中使用@Bean注解来定制化我们自己想要的组件。\n\ndebug=true：开启自动配置报告\n\n更多配置信息可以查阅官方文档：https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties\n\nspring.banner.image.location=xxx.jpg 指定spring加载的图标，默认路径是classpath下的banner.jpg\n\nxxxxCustomize 自定义组件\n\n### 开发小技巧\n\n#### Lombok\n\n引入依赖：\n\n```xml\n\t\t<dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <version>1.18.22</version>\n        </dependency>\n```\n\n还需要下载Lombok插件\n\n@Data ：设置set get方法，设置toString，hashcode，equals方法\n\n@AllArgsConstructor 全参数构造器\n\n@NoArgsConstructor 无参数构造器\n\n@Slf4j 自动添加一个log对象，用于打印日志\n\n#### detTools\n\n引入依赖：\n\n```xml\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-devtools</artifactId>\n            <optional>true</optional>\n        </dependency>\n```\n\n调试时，代码的即使更新\n\n修改静态文件时，重新编译即可\n\n#### Spring Initailzer\n\n帮我们创建全局的包结构和自动引入各种常用依赖，甚至还帮我们创建了.gitignore之类的文件\n\n## Springboot核心功能（2.2.4）\n\n### 配置文件\n\n#### Yaml语法\n\nproperties的优先级高于yml\n\n- key: value；kv之间有空格\n- 大小写敏感\n- 使用缩进表示层级关系\n- 缩进不允许使用tab，只允许空格\n- 缩进的空格数不重要，只要相同层级的元素左对齐即可\n- '#'表示注释\n- 字符串无需加引号，如果要加，单引号’’、双引号\"\"表示字符串内容会被 转义、不转义\n\nkv表示：k: v\n\n注意要有空格\n\n数组可以用y: [xx,xxx]来表示\n\n也可以用\n\n```\ny: \n  - xx\n  - xxx\n```\n\n`-`代表集合中的一个元素\n\n可以用一个类和配置文件来绑定\n\n```java\npackage com.demo.test;\n\nimport lombok.Data;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.util.*;\n\n@Data\n@Configuration\n@ConfigurationProperties(prefix = \"person\")\npublic class Person {\n    private String userName;\n    private Boolean boss;\n    private Date birth;\n    private Integer age;\n    private Pet pet;\n    private String[] interests;\n    private List<String> animal;\n    private Map<String, Object> score;\n    private Set<Double> salarys;\n    private Map<String, List<Pet>> allPets;\n}\n\n@Data\nclass Pet {\n    private String name;\n    private Double weight;\n}\n```\n\n在yml配置对应的属性：\n\n```yml\nperson:\n  userName: zhangsan\n  boss: false\n  birth: 2019/12/12 20:12:33\n  age: 18\n  pet: \n    name: tomcat\n    weight: 23.4\n  interests: [篮球,游泳]\n  animal: \n    - jerry\n    - mario\n  score:\n    english: \n      first: 30\n      second: 40\n      third: 50\n    math: [131,140,148]\n    chinese: {first: 128,second: 136}\n  salarys: [3999,4999.98,5999.99]\n  allPets:\n    sick:\n      - {name: tom}\n      - {name: jerry,weight: 47}\n    health: [{name: mario,weight: 47}]\n```\n\n#### 编写配置文件时，添加提示\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-configuration-processor</artifactId>\n    <optional>true</optional>\n</dependency>\n\n<!-- 下面插件作用是工程打包时，不将spring-boot-configuration-processor打进包内，让其只在编码的时候有用 -->\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n            <configuration>\n                <excludes>\n                    <exclude>\n                        <groupId>org.springframework.boot</groupId>\n                        <artifactId>spring-boot-configuration-processor</artifactId>\n                    </exclude>\n                </excludes>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n```\n\n大写字母等价于小写字母前加上- 也就是：N 和-n的意义相同\n\n### Web开发\n\nSpringboot框架是框架的框架\n\n#### 静态资源\n\nSpringboot默认的静态资源目录是在resources目录下的：\n\n/static\n\n/public\n\n/resources\n\n/META-INF/resources\n\n这些目录静态资源都可以直接访问\n\n例如：http://localhost:8080/123.png\n\n如果是他们在他们的子目录下，则需要加上子目录的包名\n\n##### 请求顺序\n\n在请求进来时，先判断Controller能不能处理，如果不能处理再交给静态资源处理器来处理，否则返回404\n\n##### 配置静态资源的访问前缀\n\n访问静态资源默认是没有前缀的，但是实际上我们需要加上前缀来对资源进行一些个性化的拦截（登录拦截动态资源，而为静态资源放行）\n\n设置静态资源前缀：\n\n```yml\nspring:\n  mvc:\n    static-path-pattern: /res/**\n```\n\n表示和这个正则表达式匹配的可以由静态资源处理器来处理\n\n##### 设置静态资源的目录\n\n```yml\nspring:\n  resources:\n    static-locations: [classpath:/static/,classpath:/static/img/]\n```\n\n![image-20220429142943211](D:\\学习笔记\\picture\\image-20220429142943211-1669804541526-50.png)\n\n底层是一个String数组，所以我们采用数组（列表）的写法\n\nwebjars：用于编写web应用的jar包（例如JQuery）\n\n在pom引入后，可以在webjars/目录下访问\n\n##### 欢迎页\n\n如果静态目录下有index.html页面，访问`http://localhost:8080/`也就是项目路径时，会默认显示index.html页面\n\n但是如果配置了\n\n```\nspring:\n  mvc:\n    static-path-pattern: /res/**\n```\n\n会让欢迎页功能失效，也会让图标功能失效\n\n##### 图标功能\n\n在静态目录下添加favicon.ico作为所有页面的图标，然后用ctrl+F5强制刷新并清空缓存可以看到效果\n\n##### 静态资源访问底层原理\n\n```java\n\t\t@Override\n\t\tpublic void addResourceHandlers(ResourceHandlerRegistry registry) {\n\t\t\tif (!this.resourceProperties.isAddMappings()) {\n\t\t\t\tlogger.debug(\"Default resource handling disabled\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tDuration cachePeriod = this.resourceProperties.getCache().getPeriod();\n\t\t\tCacheControl cacheControl = this.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();\n\t\t\tif (!registry.hasMappingForPattern(\"/webjars/**\")) {\n\t\t\t\tcustomizeResourceHandlerRegistration(registry.addResourceHandler(\"/webjars/**\")\n\t\t\t\t\t\t.addResourceLocations(\"classpath:/META-INF/resources/webjars/\")\n\t\t\t\t\t\t.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));\n\t\t\t}\n\t\t\tString staticPathPattern = this.mvcProperties.getStaticPathPattern();\n\t\t\tif (!registry.hasMappingForPattern(staticPathPattern)) {\n\t\t\t\tcustomizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)\n\t\t\t\t\t\t.addResourceLocations(getResourceLocations(this.resourceProperties.getStaticLocations()))\n\t\t\t\t\t\t.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));\n\t\t\t}\n\t\t}\n```\n\n`resourceProperties.isAddMappings() `对应配置：\n\n```yml\nspring:\n  resources:\n    add-mappings: false\n```\n\n从源码可知，如果配置成了false，后面的逻辑都不会执行，也就禁用了静态资源的访问功能（默认是true）\n\n`Duration cachePeriod = this.resourceProperties.getCache().getPeriod();`\n\n这条语句用于获取配置：\n\n```yml\nspring:\n  resources:\n    cache:\n      period: 11000\n```\n\n也就是设置静态资源的缓存时间，在这段时间内不用再重新加载静态资源，可以直接从浏览器缓存中获取，单位是秒\n\n通过缓存拿到的资源状态码会显示304\n\nwebjars访问规则：\n\n```java\n\t\t\tif (!registry.hasMappingForPattern(\"/webjars/**\")) {\n\t\t\t\tcustomizeResourceHandlerRegistration(registry.addResourceHandler(\"/webjars/**\")\n\t\t\t\t\t\t.addResourceLocations(\"classpath:/META-INF/resources/webjars/\")\n\t\t\t\t\t\t.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));\n\t\t\t}\n```\n\n如果在Controller中没有设置`/webjars/**`的路由，就在访问带有webjars的前缀时，访问classpath:/META-INF/resources/webjars/这个目录下的资源，同时设置缓存时间和缓存控制\n\n##### 静态资源访问规则：\n\n```java\n\t\t\tString staticPathPattern = this.mvcProperties.getStaticPathPattern();\n\t\t\tif (!registry.hasMappingForPattern(staticPathPattern)) {\n\t\t\t\tcustomizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)\n\t\t\t\t\t\t.addResourceLocations(getResourceLocations(this.resourceProperties.getStaticLocations()))\n\t\t\t\t\t\t.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));\n\t\t\t}\n```\n\n如果在Controller中没有设置staticPathPattern的url访问规则，则在访问staticPathPattern规则下的资源时，访问this.resourceProperties.getStaticLocations()路径下对应静态资源，同时设置缓存时间。\n\nstaticPathPattern：\n\n![image-20220429154312189](D:\\学习笔记\\picture\\image-20220429154312189-1669804541526-51.png)\n\n这就解释了为什么静态资源访问的url是/ 而没有前缀\n\nstaticLocations：\n\n![image-20220429154625565](D:\\学习笔记\\picture\\image-20220429154625565-1669804541526-52.png)\n\n这就也就静态资源默认路径的由来，如果我们进行了配置，staticLocations就会被更新为配置文件中的值。\n\n关于欢迎页：\n\n```java\nWelcomePageHandlerMapping(TemplateAvailabilityProviders templateAvailabilityProviders,\n\t\t\tApplicationContext applicationContext, Optional<Resource> welcomePage, String staticPathPattern) {\n\t\tif (welcomePage.isPresent() && \"/**\".equals(staticPathPattern)) {\n\t\t\tlogger.info(\"Adding welcome page: \" + welcomePage.get());\n\t\t\tsetRootViewName(\"forward:index.html\");\n\t\t}\n\t\telse if (welcomeTemplateExists(templateAvailabilityProviders, applicationContext)) {\n\t\t\tlogger.info(\"Adding welcome page template: index\");\n\t\t\tsetRootViewName(\"index\");\n\t\t}\n\t}\n```\n\n`\"/**\".equals(staticPathPattern)`我们可以看到，只有在静态路径没有被配置时，欢迎页才会生效\n\n### Restful风格开发\n\n对于原生的HTML中的form元素没有PUT和DELETE方法，可以使用post方法模拟这两个请求（如果用一些能直接发这两种请求的工具则不需要以下流程，因为在HTTP层就已经是PUT和DELETE了，所以这一项是选择性开启）\n\nWebMvcAutoConfiguration类中有这样的一段配置：\n\n```java\n\t@Bean\n\t@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)\n\t@ConditionalOnProperty(prefix = \"spring.mvc.hiddenmethod.filter\", name = \"enabled\", matchIfMissing = false)\n\tpublic OrderedHiddenHttpMethodFilter hiddenHttpMethodFilter() {\n\t\treturn new OrderedHiddenHttpMethodFilter();\n\t}\n```\n\n注意到@ConditionalOnProperty(prefix = \"spring.mvc.hiddenmethod.filter\", name = \"enabled\", matchIfMissing = false)，需要我们在配置文件中，将spring.mvc.hiddenmethod.filter 设置为enabled 才可以：\n\n```yml\nspring:\n  mvc:\n    hiddenmethod:\n      filter:\n        enabled: true\n```\n\n前端需要添加隐藏参数_method，才能使用PUT方法和DELETE方法：\n\n```html\n<form action=\"/user\" method=\"get\">\n    <input value=\"REST-GET提交\" type=\"submit\" />\n</form>\n\n<form action=\"/user\" method=\"post\">\n    <input value=\"REST-POST提交\" type=\"submit\" />\n</form>\n\n<form action=\"/user\" method=\"post\">\n    <input name=\"_method\" type=\"hidden\" value=\"DELETE\"/>\n    <input value=\"REST-DELETE 提交\" type=\"submit\"/>\n</form>\n\n<form action=\"/user\" method=\"post\">\n    <input name=\"_method\" type=\"hidden\" value=\"PUT\" />\n    <input value=\"REST-PUT提交\"type=\"submit\" />\n<form>\n\n```\n\nRest原理（表单提交要使用REST的时候）\n\n```java\n\t@Override\n\tprotected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n\t\t\tthrows ServletException, IOException {\n\n\t\tHttpServletRequest requestToUse = request;\n\n\t\tif (\"POST\".equals(request.getMethod()) && request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) == null) {\n\t\t\tString paramValue = request.getParameter(this.methodParam);\n\t\t\tif (StringUtils.hasLength(paramValue)) {\n\t\t\t\tString method = paramValue.toUpperCase(Locale.ENGLISH);\n\t\t\t\tif (ALLOWED_METHODS.contains(method)) {\n\t\t\t\t\trequestToUse = new HttpMethodRequestWrapper(request, method);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfilterChain.doFilter(requestToUse, response);\n\t}\n```\n\n在执行拦截器前，会先获取到我们_method字段的参数，然后根据这个字段重新设置我们的请求方法，然后生成一个HttpServletRequest的包装类（这个类也实现了HttpServletRequest接口），然后将原来的request和新设置的方法传进去，从而完成方法的替换，然后再去执行接下来的逻辑。\n\n使用@GetMapping(\"/\") @PostMapping(\"/\") 等更方便\n\n### 请求映射原理\n\nDispatcherServlet实现了HttpServlet接口，所以本质上就是一个Servlet，而Servlet的功能就是接收从服务器发送来的请求，并予以返回值的框架。\n\nDispatcherServlet里面实现了doGet，doPost等方法，这些方法都会调用processRequest方法，在这个方法中调用doService方法，在doService方法再调用doDispatch方法，而处理请求的核心代码就在这个方法中。\n\n```java\n\tprotected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {\n\t\tHttpServletRequest processedRequest = request;\n\t\tHandlerExecutionChain mappedHandler = null;\n\t\tboolean multipartRequestParsed = false;\n\n\t\tWebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\n\n\t\ttry {\n\t\t\tModelAndView mv = null;\n\t\t\tException dispatchException = null;\n\n\t\t\ttry {\n                //判断是不是文件上传请求\n\t\t\t\tprocessedRequest = checkMultipart(request);\n\t\t\t\tmultipartRequestParsed = (processedRequest != request);\n\n\t\t\t\t// Determine handler for the current request.\n\t\t\t\tmappedHandler = getHandler(processedRequest);\n\t\t\t\tif (mappedHandler == null) {\n\t\t\t\t\tnoHandlerFound(processedRequest, response);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Determine handler adapter for the current request.\n\t\t\t\tHandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());\n\n\t\t\t\t// Process last-modified header, if supported by the handler.\n\t\t\t\tString method = request.getMethod();\n\t\t\t\tboolean isGet = \"GET\".equals(method);\n\t\t\t\tif (isGet || \"HEAD\".equals(method)) {\n\t\t\t\t\tlong lastModified = ha.getLastModified(request, mappedHandler.getHandler());\n\t\t\t\t\tif (new ServletWebRequest(request, response).checkNotModified(lastModified) && isGet) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!mappedHandler.applyPreHandle(processedRequest, response)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Actually invoke the handler.\n\t\t\t\tmv = ha.handle(processedRequest, response, mappedHandler.getHandler());\n\n\t\t\t\tif (asyncManager.isConcurrentHandlingStarted()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tapplyDefaultViewName(processedRequest, mv);\n\t\t\t\tmappedHandler.applyPostHandle(processedRequest, response, mv);\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tdispatchException = ex;\n\t\t\t}\n\t\t\tcatch (Throwable err) {\n\t\t\t\t// As of 4.3, we're processing Errors thrown from handler methods as well,\n\t\t\t\t// making them available for @ExceptionHandler methods and other scenarios.\n\t\t\t\tdispatchException = new NestedServletException(\"Handler dispatch failed\", err);\n\t\t\t}\n\t\t\tprocessDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\ttriggerAfterCompletion(processedRequest, response, mappedHandler, ex);\n\t\t}\n\t\tcatch (Throwable err) {\n\t\t\ttriggerAfterCompletion(processedRequest, response, mappedHandler,\n\t\t\t\t\tnew NestedServletException(\"Handler processing failed\", err));\n\t\t}\n\t\tfinally {\n\t\t\tif (asyncManager.isConcurrentHandlingStarted()) {\n\t\t\t\t// Instead of postHandle and afterCompletion\n\t\t\t\tif (mappedHandler != null) {\n\t\t\t\t\tmappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Clean up any resources used by a multipart request.\n\t\t\t\tif (multipartRequestParsed) {\n\t\t\t\t\tcleanupMultipart(processedRequest);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```\n\n**mappedHandler = getHandler(processedRequest)**\n\n根据请求获取对应url的处理器\n\n```java\n\t@Nullable\n\tprotected HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception {\n\t\tif (this.handlerMappings != null) {\n\t\t\tfor (HandlerMapping mapping : this.handlerMappings) {\n\t\t\t\tHandlerExecutionChain handler = mapping.getHandler(request);\n\t\t\t\tif (handler != null) {\n\t\t\t\t\treturn handler;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n```\n\n遍历容器中所有的HandlerMapping，找到第一个能处理这个请求的handler并返回\n\nSpring帮我们注册的handler有欢迎页的handler，我们在Controller定义的handler，以及我们自定义的handler\n\n先根据URL找到URL匹配的处理器handler，先找到方法也匹配的handler，如果有多个匹配则报错\n\n### Springboot参数注解\n\n#### @PathVariable  路径参数\n\n将路径的一部分作为参数/user/{id}\n数字或者字符串变量，加上这个注解后可以获取到路径参数中对应的名称。如果是一个Map型变量加上了这个注解则会将所有参数以kv的形式传入到这个Map中\n\n#### @RequestHeader  请求头参数\n\n可以拿到请求头中对应的参数，如果参数类型是Map,MultiValueMap,HttpHeaders则会拿到所有的请求头参数\n\n#### @RequestParam  请求参数\n\n用来获取路由参数\n例如/user?age=13\n如果等号左边有相同的值，则会以列表的形式读取进来\n如果参数列表是Map类型，则会将所有方法参数都读进来，类型是String,String或者String,Object\n\n#### @CookieValue  Cookie参数\n\n可以获取指定Cookie的值\n参数类型可以是String，也可以是Cookie类型的变量，用getName和getValue来获取KV的值\n\n#### @RequestBody  请求体\n\n获取请求体中的所有参数，如果参数类型是String会把参数url原样拿过来，如果是其他对象类型，会将参数按照属性名装配进去后返回\n\n#### @RequestAttribute 请求域参数\n\n设置获取请求域的参数，请求域的参数可以通过request的setAttribute来设置，也可以用过getAttribute来获取，在进行路由转发的时候可以使用这种方式传递参数，转发方式:\nreturn \"forward:/success\" 在forward后面设置转发的路由，这样可以让多个路由映射到同一个功能上\n\n#### @MatrixVariable  矩阵变量\n\n```\n/cars/sell;low=34;brand=byd,audi,yd\n```\n\nURL中还可以通过矩阵变量传递参数，每个参数用分号`;`分割，List类型的参数可以直接用逗号`,`分割，相同参数会被封装成一个list\n\n在参数中加上这个注解@MatrixVariable来获取值\n\n每个矩阵变量依附于它前面的路由变量，每个路径变量都可以有一个一系列矩阵变量，可以通过设置@MatrixVariable中的pathVar属性来获取指定变量参数后面的矩阵变量\n\n```java\n@RestController\npublic class ParameterTestController {\n\n    ///cars/sell;low=34;brand=byd,audi,yd\n    @GetMapping(\"/cars/{path}\")\n    public Map carsSell(@MatrixVariable(\"low\") Integer low,\n                        @MatrixVariable(\"brand\") List<String> brand,\n                        @PathVariable(\"path\") String path){\n        Map<String,Object> map = new HashMap<>();\n\n        map.put(\"low\",low);\n        map.put(\"brand\",brand);\n        map.put(\"path\",path);\n        return map;\n    }\n\n    // /boss/1;age=20/2;age=10\n\n    @GetMapping(\"/boss/{bossId}/{empId}\")\n    public Map boss(@MatrixVariable(value = \"age\",pathVar = \"bossId\") Integer bossAge,\n                    @MatrixVariable(value = \"age\",pathVar = \"empId\") Integer empAge){\n        Map<String,Object> map = new HashMap<>();\n        map.put(\"bossAge\",bossAge);\n        map.put(\"empAge\",empAge);\n        return map;\n    }\n}\n```\n\nSpringboot禁用了矩阵变量的功能，需要我们手动开启\n\n原因：\n\n```java\n\t\t@Override\n\t\t@SuppressWarnings(\"deprecation\")\n\t\tpublic void configurePathMatch(PathMatchConfigurer configurer) {\n\t\t\tconfigurer.setUseSuffixPatternMatch(this.mvcProperties.getPathmatch().isUseSuffixPattern());\n\t\t\tconfigurer.setUseRegisteredSuffixPatternMatch(\n\t\t\t\t\tthis.mvcProperties.getPathmatch().isUseRegisteredSuffixPattern());\n\t\t\tthis.dispatcherServletPath.ifAvailable((dispatcherPath) -> {\n\t\t\t\tString servletUrlMapping = dispatcherPath.getServletUrlMapping();\n\t\t\t\tif (servletUrlMapping.equals(\"/\") && singleDispatcherServlet()) {\n\t\t\t\t\tUrlPathHelper urlPathHelper = new UrlPathHelper();\n\t\t\t\t\turlPathHelper.setAlwaysUseFullPath(true);\n\t\t\t\t\tconfigurer.setUrlPathHelper(urlPathHelper);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n```\n\n路由匹配在上述方法中进行，而路由解析需要用到UrlPathHelper，而在UrlPathHelper中：\n\n```java\n/**\n\t * Set if \";\" (semicolon) content should be stripped from the request URI.\n\t * <p>Default is \"true\".\n\t */\n\tpublic void setRemoveSemicolonContent(boolean removeSemicolonContent) {\n\t\tcheckReadOnly();\n\t\tthis.removeSemicolonContent = removeSemicolonContent;\n\t}\n```\n\n上面提到如果removeSemicolonContent这个变量是true，则会移除我们分号后面的内容，因而我们获取不到矩阵参数\n\n所以我们在组件中设置一个这个变量为false的组件即可：\n\n可以单独写一个类实现接口，JDK8有接口默认方法，所以们不用实现所有的类：\n\n```java\n@Configuration(proxyBeanMethods = false)\npublic class WebConfig implements WebMvcConfigurer {\n    @Override\n    public void configurePathMatch(PathMatchConfigurer configurer) {\n\n        UrlPathHelper urlPathHelper = new UrlPathHelper();\n        // 不移除；后面的内容。矩阵变量功能就可以生效\n        urlPathHelper.setRemoveSemicolonContent(false);\n        configurer.setUrlPathHelper(urlPathHelper);\n    }\n}\n```\n\n也可以在配置类中用@Bean注入：\n\n```java\n@Configuration(proxyBeanMethods = false)\npublic class WebConfig{\n    @Bean\n    public WebMvcConfigurer webMvcConfigurer(){\n        return new WebMvcConfigurer() {\n                        @Override\n            public void configurePathMatch(PathMatchConfigurer configurer) {\n                UrlPathHelper urlPathHelper = new UrlPathHelper();\n                // 不移除；后面的内容。矩阵变量功能就可以生效\n                urlPathHelper.setRemoveSemicolonContent(false);\n                configurer.setUrlPathHelper(urlPathHelper);\n            }\n        }\n    }\n}\n```\n\n（但是重写这个方法的话，其他方法怎么办呢……可能Spring还做了一些其他的事情……，不过我们知道这个怎么配置，大致的原因是什么即可）\n\n#### Springboot参数注解原理\n\n```java\n\tprotected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {\n\t\tHttpServletRequest processedRequest = request;\n\t\tHandlerExecutionChain mappedHandler = null;\n\t\tboolean multipartRequestParsed = false;\n\n\t\tWebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\n\n\t\ttry {\n\t\t\tModelAndView mv = null;\n\t\t\tException dispatchException = null;\n\n\t\t\ttry {\n                //判断是不是文件上传请求\n\t\t\t\tprocessedRequest = checkMultipart(request);\n\t\t\t\tmultipartRequestParsed = (processedRequest != request);\n\n\t\t\t\t// Determine handler for the current request.\n\t\t\t\tmappedHandler = getHandler(processedRequest);\n\t\t\t\tif (mappedHandler == null) {\n\t\t\t\t\tnoHandlerFound(processedRequest, response);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Determine handler adapter for the current request.\n\t\t\t\tHandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());\n\n\t\t\t\t// Process last-modified header, if supported by the handler.\n\t\t\t\tString method = request.getMethod();\n\t\t\t\tboolean isGet = \"GET\".equals(method);\n\t\t\t\tif (isGet || \"HEAD\".equals(method)) {\n\t\t\t\t\tlong lastModified = ha.getLastModified(request, mappedHandler.getHandler());\n\t\t\t\t\tif (new ServletWebRequest(request, response).checkNotModified(lastModified) && isGet) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!mappedHandler.applyPreHandle(processedRequest, response)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Actually invoke the handler.\n\t\t\t\tmv = ha.handle(processedRequest, response, mappedHandler.getHandler());\n\n\t\t\t\tif (asyncManager.isConcurrentHandlingStarted()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tapplyDefaultViewName(processedRequest, mv);\n\t\t\t\tmappedHandler.applyPostHandle(processedRequest, response, mv);\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tdispatchException = ex;\n\t\t\t}\n\t\t\tcatch (Throwable err) {\n\t\t\t\t// As of 4.3, we're processing Errors thrown from handler methods as well,\n\t\t\t\t// making them available for @ExceptionHandler methods and other scenarios.\n\t\t\t\tdispatchException = new NestedServletException(\"Handler dispatch failed\", err);\n\t\t\t}\n\t\t\tprocessDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\ttriggerAfterCompletion(processedRequest, response, mappedHandler, ex);\n\t\t}\n\t\tcatch (Throwable err) {\n\t\t\ttriggerAfterCompletion(processedRequest, response, mappedHandler,\n\t\t\t\t\tnew NestedServletException(\"Handler processing failed\", err));\n\t\t}\n\t\tfinally {\n\t\t\tif (asyncManager.isConcurrentHandlingStarted()) {\n\t\t\t\t// Instead of postHandle and afterCompletion\n\t\t\t\tif (mappedHandler != null) {\n\t\t\t\t\tmappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Clean up any resources used by a multipart request.\n\t\t\t\tif (multipartRequestParsed) {\n\t\t\t\t\tcleanupMultipart(processedRequest);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```\n\n##### 获取handler\n\nmappedHandler = getHandler(processedRequest);\n\n获取能处理这个请求的handler，而所谓的handler就是在Controller中通过URL找到的对应的方法，拿到方法的各种信息。\n\n##### 获取适配器\n\nHandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());\n\n获取能处理这个handler的适配器，适配器用于解析上述各种注解的参数，相当于一个大的反射工具\n\nHandlerAdapter 里面有这些方法：\n\n```java\npublic interface HandlerAdapter {\n\t//是否能处理这个handler\n\tboolean supports(Object handler);\n    /*\n    对应的实现类，直接比较是不是我们想要的类型的对象\n    @Override\n\tpublic final boolean supports(Object handler) {\n\t\treturn (handler instanceof HandlerMethod && supportsInternal((HandlerMethod) handler));\n\t}\n    \n    */\n    \n    \n\t//如果能处理则调用这个方法处理请求\n\t@Nullable\n\tModelAndView handle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception;\n\n\tlong getLastModified(HttpServletRequest request, Object handler);\n\n}\n```\n\n获取对应的handlerAdapter的方法：\n\n```java\n\tprotected HandlerAdapter getHandlerAdapter(Object handler) throws ServletException {\n\t\tif (this.handlerAdapters != null) {\n\t\t\tfor (HandlerAdapter adapter : this.handlerAdapters) {\n\t\t\t\tif (adapter.supports(handler)) {\n\t\t\t\t\treturn adapter;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthrow new ServletException(\"No adapter for handler [\" + handler +\n\t\t\t\t\"]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler\");\n\t}\n```\n\n遍历容器中注册的所有HandlerAdapter，找到能支持这个handler的HandlerAdapter\n\n![image-20220430192846168](D:\\学习笔记\\picture\\image-20220430192846168-1669804541526-53.png)\n\nRequestMappingHandlerAdapter ：用于处理Controller的方法中带哟@RequestMapping注解的方法（也就是我们所写的普通方法）\n\nHandlerFunctionAdapter ：用于处理函数式编程的方法对应的Controller\n\n##### 浏览器缓存\n\n```java\n    String method = request.getMethod();\n    boolean isGet = \"GET\".equals(method);\n    if (isGet || \"HEAD\".equals(method)) {\n        long lastModified = ha.getLastModified(request, mappedHandler.getHandler());\n        if (new ServletWebRequest(request, response).checkNotModified(lastModified) && isGet) {\n            return;\n        }\n    }\n```\n\n判断是不是GET方法或者方法，这个String method是我们之前设置的方法名（回顾之前用内置参数模拟PUT,DELETE方法，这里的HEAD方法也是这样），如果是HEAD方法则直接返回（并不是真正的请求），如果是GET方法的则判断静态资源最后的修改时间，如果没有修改则提示客户端可以从浏览器缓存中获取静态资源\n\n##### 执行方法\n\n```\nmv = ha.handle(processedRequest, response, mappedHandler.getHandler());\n```\n\n返回值是视图解析器(->代表调用)\n\n```\nhandle -> handleInternal->invokeHandlerMethod\n```\n\ninvokeHandlerMethod方法中\n\n根据不同的类型的注解解析参数，并设置参数的值：\n\n```\nif (this.argumentResolvers != null) {\n    invocableMethod.setHandlerMethodArgumentResolvers(this.argumentResolvers);\n}\n```\n\n解析返回值：\n\n```\nif (this.returnValueHandlers != null) {\n    invocableMethod.setHandlerMethodReturnValueHandlers(this.returnValueHandlers);\n}\n```\n\n准备工作完成，真正执行方法：\n\n```\ninvocableMethod.invokeAndHandle(webRequest, mavContainer);\n```\n\n在这个方法中调用**invokeForRequest**方法：\n\n```java\n\t@Nullable\n\tpublic Object invokeForRequest(NativeWebRequest request, @Nullable ModelAndViewContainer mavContainer,\n\t\t\tObject... providedArgs) throws Exception {\n\n\t\tObject[] args = getMethodArgumentValues(request, mavContainer, providedArgs);\n\t\tif (logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"Arguments: \" + Arrays.toString(args));\n\t\t}\n\t\treturn doInvoke(args);\n\t}\n```\n\n第一条语句：\n\n```\nObject[] args = getMethodArgumentValues(request, mavContainer, providedArgs);\n```\n\n用于获取这个方法所有所需的参数\n\n```java\n\tprotected Object[] getMethodArgumentValues(NativeWebRequest request, @Nullable ModelAndViewContainer mavContainer,\n\t\t\tObject... providedArgs) throws Exception {\n\t\t//拿到所有参数的信息，但是此时参数还没有值\n\t\tMethodParameter[] parameters = getMethodParameters();\n\t\tif (ObjectUtils.isEmpty(parameters)) {\n\t\t\treturn EMPTY_ARGS;\n\t\t}\n\t\t//创建等大的数组作为参数列表，准备设置值\n\t\tObject[] args = new Object[parameters.length];\n\t\tfor (int i = 0; i < parameters.length; i++) {\n\t\t\tMethodParameter parameter = parameters[i];\n\t\t\tparameter.initParameterNameDiscovery(this.parameterNameDiscoverer);\n\t\t\targs[i] = findProvidedArgument(parameter, providedArgs);\n\t\t\tif (args[i] != null) {\n\t\t\t\tcontinue;\n\t\t\t}\n            //判断在所有的参数解析器中是否有能够处理这个参数的解析器\n\t\t\tif (!this.resolvers.supportsParameter(parameter)) {\n\t\t\t\tthrow new IllegalStateException(formatArgumentError(parameter, \"No suitable resolver\"));\n\t\t\t}\n\t\t\ttry {\n            //解析参数的值\n\t\t\t\targs[i] = this.resolvers.resolveArgument(parameter, mavContainer, request, this.dataBinderFactory);\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\t// Leave stack trace for later, exception may actually be resolved and handled...\n\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\tString exMsg = ex.getMessage();\n\t\t\t\t\tif (exMsg != null && !exMsg.contains(parameter.getExecutable().toGenericString())) {\n\t\t\t\t\t\tlogger.debug(formatArgumentError(parameter, exMsg));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthrow ex;\n\t\t\t}\n\t\t}\n\t\treturn args;\n\t}\n```\n\n**this.resolvers.supportsParameter(parameter)** //判断在所有的视图解析器中是否有能够处理这个参数的解析器\n\n判断方法是看是否能找到合适的参数解析器：\n\n```\n\t@Override\n\tpublic boolean supportsParameter(MethodParameter parameter) {\n\t\treturn getArgumentResolver(parameter) != null;\n\t}\n```\n\n查找过程getArgumentResolver：\n\n先判断缓存map里面有没有，如果有就直接拿到，如果没有则遍历所有的视图解析器，判断是否支持解析这个参数，如果支持则放入缓存中并返回这个视图解析器。\n\n判断方法：1. 是否有对应的参数注解 2.参数类型是否满足要去 3.其他\n\n```java\n@Nullable\n\tprivate HandlerMethodArgumentResolver getArgumentResolver(MethodParameter parameter) {\n\t\tHandlerMethodArgumentResolver result = this.argumentResolverCache.get(parameter);\n\t\tif (result == null) {\n\t\t\tfor (HandlerMethodArgumentResolver resolver : this.argumentResolvers) {\n\t\t\t\tif (resolver.supportsParameter(parameter)) {\n\t\t\t\t\tresult = resolver;\n\t\t\t\t\tthis.argumentResolverCache.put(parameter, result);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n```\n\n**args[i] = this.resolvers.resolveArgument(parameter, mavContainer, request, this.dataBinderFactory)** 解析参数的值\n\n进入后来到可以来到：\n\n```java\n\t@Nullable\n\tprotected Object resolveName(String name, MethodParameter parameter, NativeWebRequest request) throws Exception {\n\t\tMap<String, String> uriTemplateVars = (Map<String, String>) request.getAttribute(\n\t\t\t\tHandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST);\n\t\treturn (uriTemplateVars != null ? uriTemplateVars.get(name) : null);\n\t}\n```\n\n这个方法用于获取参数的值，不同注解的的解析器有不同的实现，上面这个是@PathVariable参数注解的解析器。\n\n之前我们看到Springboot用urlPathHelper解析了URL中的各种参数，解析后Springboot会将其放到HttpServletRequest的请求域中，然后再这里直接根据参数名从请求域中获取参数的值\n\n获取后回到原来的方法中，设置参数的值\n\n##### 进行一些善后处理\n\nmappedHandler.applyPostHandle(processedRequest, response, mv);\n\n##### 处理最后的结果\n\n也就设置最后要去哪个页面，需要处理哪些参数\n\nprocessDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);\n\n### Servlet API\n\nSpringboot给Servlet API类型的参数赋值时，解析用的方法和上面加了注解的参数一致，只是用的参数解析器不同。这里用的参数解析器只用判断参数的类型即可，如果是指定的类型比如HttpServletRequest 类型，他就会封装出一个对应的请求对象并进行引用赋值。\n\n### 复杂参数\n\nMap，Model类型的参数对应HttpServletRequest的请求域，操作这两个参数（map.put）就相当于操作request的请求域(request.setAttribute)\n\n```java\n@GetMapping(\"/params\")\npublic String testParam(Map<String,Object> map,\n                        Model model,\n                        HttpServletRequest request,\n                        HttpServletResponse response){\n    //下面三位都是可以给request域中放数据\n    map.put(\"hello\",\"world666\");\n    model.addAttribute(\"world\",\"hello666\");\n    request.setAttribute(\"message\",\"HelloWorld\");\n\n    Cookie cookie = new Cookie(\"c1\",\"v1\");\n    response.addCookie(cookie);\n    return \"forward:/success\";\n}\n\n@ResponseBody\n@GetMapping(\"/success\")\npublic Map success(@RequestAttribute(value = \"msg\",required = false) String msg,\n                   @RequestAttribute(value = \"code\",required = false)Integer code,\n                   HttpServletRequest request){\n    Object msg1 = request.getAttribute(\"msg\");\n\n    Map<String,Object> map = new HashMap<>();\n    Object hello = request.getAttribute(\"hello\");//得出testParam方法赋予的值 world666\n    Object world = request.getAttribute(\"world\");//得出testParam方法赋予的值 hello666\n    Object message = request.getAttribute(\"message\");//得出testParam方法赋予的值 HelloWorld\n\n    map.put(\"reqMethod_msg\",msg1);\n    map.put(\"annotation_msg\",msg);\n    map.put(\"hello\",hello);\n    map.put(\"world\",world);\n    map.put(\"message\",message);\n\n    return map;\n}\n```\n\nresponse可以方Cookie\n\n#### Map，Model\n\n底层都会调用ModelAndViewContainer的getModel方法获取到一个MAP型的变量，因而在经过参数解析器解析后，这两个指向的对象实际上是同一个\n\nModelAndViewContainer 故名意思就是模型和视图的容器，Model用于存放数据，View用于存放视图（页面的地址），这两个都在这个容器中\n\n这两个参数操作的是request中请求域的参数，而这两个类型的参数是怎么操作请求域的呢？\n\n解析参数的时候如果参数类型是Map或者Model，则会创建一个BindingAwareModelMap变量来装载请求域中的参数，这个类既是Map也是Model，所以可以完成赋值。\n\n![](D:\\学习笔记\\picture\\watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE4NjMwMjQ=,size_16,color_FFFFFF,t_70#pic_center.png)\n\n请求结束后，我们再来到具体的逻辑：\n\n```java\n\tpublic void invokeAndHandle(ServletWebRequest webRequest, ModelAndViewContainer mavContainer,\n\t\t\tObject... providedArgs) throws Exception {\n\t\t//执行方法，得到返回值是\"forward:/success\"\n\t\tObject returnValue = invokeForRequest(webRequest, mavContainer, providedArgs);\n        //设置请求状态\n\t\tsetResponseStatus(webRequest);\n\n\t\tif (returnValue == null) {\n\t\t\tif (isRequestNotModified(webRequest) || getResponseStatus() != null || mavContainer.isRequestHandled()) {\n\t\t\t\tdisableContentCachingIfNecessary(webRequest);\n\t\t\t\tmavContainer.setRequestHandled(true);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\telse if (StringUtils.hasText(getResponseStatusReason())) {\n\t\t\tmavContainer.setRequestHandled(true);\n\t\t\treturn;\n\t\t}\n\n\t\tmavContainer.setRequestHandled(false);\n\t\tAssert.state(this.returnValueHandlers != null, \"No return value handlers\");\n\t\ttry {\n            //处理返回值,这里有我们要的转发逻辑，里面会传入我们方法的返回值returnValue\n\t\t\tthis.returnValueHandlers.handleReturnValue(\n\t\t\t\t\treturnValue, getReturnValueType(returnValue), mavContainer, webRequest);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(formatErrorForReturnValue(returnValue), ex);\n\t\t\t}\n\t\t\tthrow ex;\n\t\t}\n\t}\n```\n\n我们深入handleReturnValue方法可以来到这个方法里面：\n\n```java\n\t@Override\n\tpublic void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType,\n\t\t\tModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {\n\t\t//判断返回值是不是字符串\n\t\tif (returnValue instanceof CharSequence) {\n\t\t\tString viewName = returnValue.toString();\n            //如果是字符串则设置容器中view的名称(转发路径)\n\t\t\tmavContainer.setViewName(viewName);\n\t\t\tif (isRedirectViewName(viewName)) {\n\t\t\t\tmavContainer.setRedirectModelScenario(true);\n\t\t\t}\n\t\t}\n\t\telse if (returnValue != null) {\n\t\t\t// should not happen\n\t\t\tthrow new UnsupportedOperationException(\"Unexpected return type: \" +\n\t\t\t\t\treturnType.getParameterType().getName() + \" in method: \" + returnType.getMethod());\n\t\t}\n\t}\n```\n\n在方法执行完成后我们会得到一个ModelAndView对象：\n\n```\nmv = ha.handle(processedRequest, response, mappedHandler.getHandler());\n```\n\nmv里面包含我们想要的数据（model）和转发的地址（view）\n\n然后传入到\n\n```\nmappedHandler.applyPostHandle(processedRequest, response, mv);\n```\n\n进行最后结果的处理\n\n深入这个方法后来到：\n\n```\nrender(mv, request, response);\n```\n\n这个方法用于渲染页面\n\n核心逻辑是：\n\n封装成视图对象：\n\n```java\nview = resolveViewName(/*视图名*/viewName,/*视图数据*/ mv.getModelInternal(), locale, request);\n```\n\n然后渲染视图：\n\n```java\nview.render(mv.getModelInternal(), request, response);\n/////////////////////////////////////////////////////////////\n//这个方法的逻辑是：\n@Override\n\tpublic void render(@Nullable Map<String, ?> model, HttpServletRequest request,\n\t\t\tHttpServletResponse response) throws Exception {\n\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"View \" + formatViewName() +\n\t\t\t\t\t\", model \" + (model != null ? model : Collections.emptyMap()) +\n\t\t\t\t\t(this.staticAttributes.isEmpty() ? \"\" : \", static attributes \" + this.staticAttributes));\n\t\t}\n\t\t//这一步，将我们model中的数据放到一个新的map里面mergedModel\n\t\tMap<String, Object> mergedModel = createMergedOutputModel(model, request, response);\n\t\tprepareResponse(request, response);\n\t\trenderMergedOutputModel(mergedModel, getRequestToExpose(request), response);\n\t}\n```\n\nrenderMergedOutputModel方法中会执行语句：exposeModelAsRequestAttributes(model, request);\n\n```java\n\tprotected void exposeModelAsRequestAttributes(Map<String, Object> model,\n\t\t\tHttpServletRequest request) throws Exception {\n\n\t\tmodel.forEach((name, value) -> {\n\t\t\tif (value != null) {\n\t\t\t\trequest.setAttribute(name, value);\n\t\t\t}\n\t\t\telse {\n\t\t\t\trequest.removeAttribute(name);\n\t\t\t}\n\t\t});\n\t}\n```\n\n显然这个方法的作用就是将model中的数据放到新的request的请求域中，这就解释了我们转发请求后，为啥新的方法中能拿到上一个请域的参数\n\n### Springboot自定义参数\n\n```java\n@RestController\npublic class ParameterTestController {\n    @PostMapping(\"/saveuser\")\n    public Person saveuser(Person person){\n        return person;\n    }\n}\n```\n\n参数列表是我们自定义的对象时，Spring会自动帮我们将参数按照参数名装配进去（如果包含了其他引用类型要用pet.name,pte.age的形式传过来才能解析）\n\n![image-20220502111900935](D:\\学习笔记\\picture\\image-20220502111900935-1669804541526-54.png)\n\n参数解析过程和前面讲的一样，只是用的参数解析器不同，这里用的参数解析器是`ServletModelAttributeMethodProcessor`\n\n能用这个的处理器的条件是加了@ModelAttribute的注解或者它不是简单数据类型（即是引用类型）\n\n```java\n\t@Override\n\tpublic boolean supportsParameter(MethodParameter parameter) {\n\t\treturn (parameter.hasParameterAnnotation(ModelAttribute.class) ||\n\t\t\t\t(this.annotationNotRequired && !BeanUtils.isSimpleProperty(parameter.getParameterType())));\n\t}\n```\n\n然后给Person参数的赋值过程如下：\n\n```java\n\t@Override\n\t@Nullable\n\tpublic final Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,\n\t\t\tNativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception {\n\n\t\tAssert.state(mavContainer != null, \"ModelAttributeMethodProcessor requires ModelAndViewContainer\");\n\t\tAssert.state(binderFactory != null, \"ModelAttributeMethodProcessor requires WebDataBinderFactory\");\n\n\t\tString name = ModelFactory.getNameForParameter(parameter);\n\t\tModelAttribute ann = parameter.getParameterAnnotation(ModelAttribute.class);\n\t\tif (ann != null) {\n\t\t\tmavContainer.setBinding(name, ann.binding());\n\t\t}\n\n\t\tObject attribute = null;\n\t\tBindingResult bindingResult = null;\n\t\t//如果请求域中已经有了就直接返回\n\t\tif (mavContainer.containsAttribute(name)) {\n\t\t\tattribute = mavContainer.getModel().get(name);\n\t\t}\n\t\telse {\n\t\t\t// Create attribute instance\n\t\t\ttry {\n                //根据对象属性创建一个空对象（也就是上文中属性值为null的对象）\n\t\t\t\tattribute = createAttribute(name, parameter, binderFactory, webRequest);\n\t\t\t}\n\t\t\tcatch (BindException ex) {\n\t\t\t\tif (isBindExceptionRequired(parameter)) {\n\t\t\t\t\t// No BindingResult parameter -> fail with BindException\n\t\t\t\t\tthrow ex;\n\t\t\t\t}\n\t\t\t\t// Otherwise, expose null/empty value and associated BindingResult\n\t\t\t\tif (parameter.getParameterType() == Optional.class) {\n\t\t\t\t\tattribute = Optional.empty();\n\t\t\t\t}\n\t\t\t\tbindingResult = ex.getBindingResult();\n\t\t\t}\n\t\t}\n\n\t\tif (bindingResult == null) {\n\t\t\t// Bean property binding and validation;\n\t\t\t// skipped in case of binding failure on construction.\n            //为我们刚才创建的空对象绑定属性\n\t\t\tWebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name);\n\t\t\tif (binder.getTarget() != null) {\n\t\t\t\tif (!mavContainer.isBindingDisabled(name)) {\n                    //实际绑定属性\n\t\t\t\t\tbindRequestParameters(binder, webRequest);\n\t\t\t\t}\n\t\t\t\tvalidateIfApplicable(binder, parameter);\n\t\t\t\tif (binder.getBindingResult().hasErrors() && isBindExceptionRequired(binder, parameter)) {\n\t\t\t\t\tthrow new BindException(binder.getBindingResult());\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Value type adaptation, also covering java.util.Optional\n\t\t\tif (!parameter.getParameterType().isInstance(attribute)) {\n\t\t\t\tattribute = binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter);\n\t\t\t}\n\t\t\tbindingResult = binder.getBindingResult();\n\t\t}\n\n\t\t// Add resolved attribute and BindingResult at the end of the model\n\t\tMap<String, Object> bindingResultModel = bindingResult.getModel();\n\t\tmavContainer.removeAttributes(bindingResultModel);\n\t\tmavContainer.addAllAttributes(bindingResultModel);\n\n\t\treturn attribute;\n\t}\n```\n\nWebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name);\n\nWebDataBinder 是属性绑定器，这个类里面有各种数据类型之间的转换器，可以利用反射和转换器根据webRequest里面拿到的数据为对象属性赋值\n\n![image-20220501131802770](https://s2.loli.net/2022/05/26/kJjRoQfiZYBhDeN.png)\n\n实际绑定的过程是在`bindRequestParameters(binder, webRequest);`这个方法里面，这个方法过后对象属性就有值了\n\n`MutablePropertyValues mpvs = new MutablePropertyValues(request.getParameterMap());`通过这个方法拿到request中的所有kv属性值，然后接下来遍历对象中的所有参数，然后根据属性名从这个mpvs里面找就能拿到对应的属性值，但是拿到后还需要将原来的类型（一般是String，也可能是文件流之类的）转换为我们需要的类型，所以在绑定的时候还会遍历所有的属性转换器（Converter），找到可以进行转换的属性转换器，然后将其放入缓存，用转换器来进行属性值的转换，然后就可以为对象中的属性值赋值。\n\n#### 自定义类型转换器\n\n上面使用的都是Springboot提供的转换器，使用Spring为我们提供的转换规则，我们也可以自定义一个转换规则。\n\n```java\n@Configuration\npublic class MyConfig {\n    //1、WebMvcConfigurer定制化SpringMVC的功能\n    @Bean\n    public WebMvcConfigurer webMvcConfigurer(){\n        return new WebMvcConfigurer() {\n\n            @Override\n            public void addFormatters(FormatterRegistry registry) {\n                registry.addConverter(new Converter<String, Pet>() {\n\n                    @Override\n                    public Pet convert(String source) {\n                        // 啊猫,3\n                        if(!StringUtils.isEmpty(source)){\n                            Pet pet = new Pet();\n                            String[] split = source.split(\",\");\n                            pet.setName(split[0]);\n                            pet.setAge(Integer.parseInt(split[1]));\n                            return pet;\n                        }\n                        return null;\n                    }\n                });\n            }\n        };\n    }\n}\n```\n\n**WebMvcConfigurer**是Spring给我们提供的扩展功能的接口，我们可以重写其中的很多方法来定制化我们想要的功能\n\n在我们添加自定义的转换器后，Springboot在处理参数的时候就可以根据转换前后的参数类型找到能够使用的Converter进行转换，这样就不会报String无法转换成Pet的异常。\n\n并且Converter类带有@FunctionalInterface注解，申明了是一个函数式接口，我们可以直接传入Lamda表达式来进行设置。\n\n### 响应数据与内容协商\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n```\n\n在这个依赖中会自动帮我们引入JSON的依赖，可以帮我们将返回值处理成JSON格式的数据\n\n在Controller中，如果方法上带有@ResponBody注解，则会将返回值以JSON格式返回给前端\n\n#### 原理解析\n\n我们再来到处理请求的流程里面：\n\n```java\n\t@Override\n\tprotected ModelAndView handleInternal(HttpServletRequest request,\n\t\t\tHttpServletResponse response, HandlerMethod handlerMethod) throws Exception {\n\n\t\tModelAndView mav;\n\t\tcheckRequest(request);\n\n\t\t// Execute invokeHandlerMethod in synchronized block if required.\n\t\tif (this.synchronizeOnSession) {\n\t\t\tHttpSession session = request.getSession(false);\n\t\t\tif (session != null) {\n\t\t\t\tObject mutex = WebUtils.getSessionMutex(session);\n\t\t\t\tsynchronized (mutex) {\n\t\t\t\t\tmav = invokeHandlerMethod(request, response, handlerMethod);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// No HttpSession available -> no mutex necessary\n\t\t\t\tmav = invokeHandlerMethod(request, response, handlerMethod);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// No synchronization on session demanded at all...\n            //因为没有session锁，所以我们会来到这个方法中\n\t\t\tmav = invokeHandlerMethod(request, response, handlerMethod);\n\t\t}\n\n\t\tif (!response.containsHeader(HEADER_CACHE_CONTROL)) {\n\t\t\tif (getSessionAttributesHandler(handlerMethod).hasSessionAttributes()) {\n\t\t\t\tapplyCacheSeconds(response, this.cacheSecondsForSessionAttributeHandlers);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprepareResponse(response);\n\t\t\t}\n\t\t}\n\n\t\treturn mav;\n\t}\n```\n\nmav = invokeHandlerMethod(request, response, handlerMethod)  这个方法的逻辑如下：（其实解析参数的时候我们也进去过）\n\n```java\n    if (this.argumentResolvers != null) {\n        //传入所有参数解析器\n        invocableMethod.setHandlerMethodArgumentResolvers(this.argumentResolvers);\n    }\n    if (this.returnValueHandlers != null) {\n        //传入所有的返回值处理器\n        invocableMethod.setHandlerMethodReturnValueHandlers(this.returnValueHandlers);\n    }\n```\n\n然后来到invokeAndHandle方法来处理请求：\n\n```java\n\tpublic void invokeAndHandle(ServletWebRequest webRequest, ModelAndViewContainer mavContainer,\n\t\t\tObject... providedArgs) throws Exception {\n\t\t//执行方法并拿到返回值（里面的逻辑就是获取参数值和执行controller的方法，在上一节分析过）\n\t\tObject returnValue = invokeForRequest(webRequest, mavContainer, providedArgs);\n        //设置请求返回值状态\n\t\tsetResponseStatus(webRequest);\n\t\t//如果返回值为空，则不用处理返回值，直接返回\n\t\tif (returnValue == null) {\n\t\t\tif (isRequestNotModified(webRequest) || getResponseStatus() != null || mavContainer.isRequestHandled()) {\n\t\t\t\tdisableContentCachingIfNecessary(webRequest);\n\t\t\t\tmavContainer.setRequestHandled(true);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}//判断请求处理是否失败，如果失败也不处理返回值直接返回\n\t\telse if (StringUtils.hasText(getResponseStatusReason())) {\n\t\t\tmavContainer.setRequestHandled(true);\n\t\t\treturn;\n\t\t}\n\n\t\tmavContainer.setRequestHandled(false);\n\t\tAssert.state(this.returnValueHandlers != null, \"No return value handlers\");\n\t\ttry {\n        //重点：处理返回值的方法，参数为返回值，返回值类型，容器，请求\n\t\t\tthis.returnValueHandlers.handleReturnValue(\n\t\t\t\t\treturnValue, getReturnValueType(returnValue), mavContainer, webRequest);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(formatErrorForReturnValue(returnValue), ex);\n\t\t\t}\n\t\t\tthrow ex;\n\t\t}\n\t}\n```\n\n处理返回值的方法：\n\n```\nthis.returnValueHandlers.handleReturnValue(returnValue, getReturnValueType(returnValue), mavContainer, webRequest);\n```\n\n方法体：\n\n```java\n\t@Override\n\tpublic void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType,\n\t\t\tModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {\n\t\t//根据返回值和返回值类型获得返回值处理器\n\t\tHandlerMethodReturnValueHandler handler = selectHandler(returnValue, returnType);\n\t\tif (handler == null) {\n\t\t\tthrow new IllegalArgumentException(\"Unknown return value type: \" + returnType.getParameterType().getName());\n\t\t}\n        //用返回值处理器处理返回值\n\t\thandler.handleReturnValue(returnValue, returnType, mavContainer, webRequest);\n\t}\n```\n\nselectHandler(returnValue, returnType) ：\n\n```java\n\t@Nullable\n\tprivate HandlerMethodReturnValueHandler selectHandler(@Nullable Object value, MethodParameter returnType) {\n\t\tboolean isAsyncValue = isAsyncReturnValue(value, returnType);\n\t\tfor (HandlerMethodReturnValueHandler handler : this.returnValueHandlers) {\n\t\t\tif (isAsyncValue && !(handler instanceof AsyncHandlerMethodReturnValueHandler)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (handler.supportsReturnType(returnType)) {\n\t\t\t\treturn handler;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n```\n\n遍历所有的返回值处理器，判断哪个能够用来处理返回值，判断依据大多都是判断返回值类型是不是这个处理器想要的类型，或者有没有对应的注解\n\nSpringMVC能支持的返回值类型有：\n\n![image-20220502131627510](D:\\学习笔记\\picture\\image-20220502131627510-1669804541526-56.png)\n\n我们在方法上加了@ResponseBody注解，所以使用最后一种处理器\n\n找到返回值处理器后，用处理器处理返回值：\n\n```java\nhandler.handleReturnValue(returnValue, returnType, mavContainer, webRequest);\n```\n\n方法体：\n\n```java\n\t@Override\n\tpublic void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType,\n\t\t\tModelAndViewContainer mavContainer, NativeWebRequest webRequest)\n\t\t\tthrows IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {\n\n\t\tmavContainer.setRequestHandled(true);\n        //请求\n\t\tServletServerHttpRequest inputMessage = createInputMessage(webRequest);\n        //响应\n\t\tServletServerHttpResponse outputMessage = createOutputMessage(webRequest);\n\n\t\t// Try even with null return value. ResponseBodyAdvice could get involved.\n\t\twriteWithMessageConverters(returnValue, returnType, inputMessage, outputMessage);\n\t}\n```\n\n其中核心的是：\n\n```\nwriteWithMessageConverters(returnValue, returnType, inputMessage, outputMessage);\n```\n\n方法体：\n\n```java\nprotected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType,\n\t\t\tServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)\n\t\t\tthrows IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {\n\n\t\tObject body;\n\t\tClass<?> valueType;\n\t\tType targetType;\n\n\t\tif (value instanceof CharSequence) {\n\t\t\tbody = value.toString();\n\t\t\tvalueType = String.class;\n\t\t\ttargetType = String.class;\n\t\t}\n\t\telse {\n            //获取返回值\n\t\t\tbody = value;\n            //原类型\n\t\t\tvalueType = getReturnValueType(body, returnType);\n\t\t\ttargetType = GenericTypeResolver.resolveType(getGenericType(returnType), returnType.getContainingClass());\n\t\t}\n\t\t//判断返回值是否是资源文件\n\t\tif (isResourceType(value, returnType)) {\n\t\t\toutputMessage.getHeaders().set(HttpHeaders.ACCEPT_RANGES, \"bytes\");\n\t\t\tif (value != null && inputMessage.getHeaders().getFirst(HttpHeaders.RANGE) != null &&\n\t\t\t\t\toutputMessage.getServletResponse().getStatus() == 200) {\n\t\t\t\tResource resource = (Resource) value;\n\t\t\t\ttry {\n\t\t\t\t\tList<HttpRange> httpRanges = inputMessage.getHeaders().getRange();\n\t\t\t\t\toutputMessage.getServletResponse().setStatus(HttpStatus.PARTIAL_CONTENT.value());\n\t\t\t\t\tbody = HttpRange.toResourceRegions(httpRanges, resource);\n\t\t\t\t\tvalueType = body.getClass();\n\t\t\t\t\ttargetType = RESOURCE_REGION_LIST_TYPE;\n\t\t\t\t}\n\t\t\t\tcatch (IllegalArgumentException ex) {\n\t\t\t\t\toutputMessage.getHeaders().set(HttpHeaders.CONTENT_RANGE, \"bytes */\" + resource.contentLength());\n\t\t\t\t\toutputMessage.getServletResponse().setStatus(HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE.value());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tMediaType selectedMediaType = null;\n    \t//判断响应中是否已经有了返回类型，如果有就赋值，因为之前可能已经处理了一部分而确定了返回值\n\t\tMediaType contentType = outputMessage.getHeaders().getContentType();\n\t\tboolean isContentTypePreset = contentType != null && contentType.isConcrete();\n    \t//如果找到了返回值类型\n\t\tif (isContentTypePreset) {\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Found 'Content-Type:\" + contentType + \"' in response\");\n\t\t\t}\n\t\t\tselectedMediaType = contentType;\n\t\t}\n\t\telse {\n            //如果没找到返回类型\n            //获得被包装的请求\n\t\t\tHttpServletRequest request = inputMessage.getServletRequest();\n            //获得浏览器能接收什么样的媒体类型(text/html之类的)\n\t\t\tList<MediaType> acceptableTypes = getAcceptableMediaTypes(request);\n            //获得服务器能生产什么样的媒体类型(json之类的)\n\t\t\tList<MediaType> producibleTypes = getProducibleMediaTypes(request, valueType, targetType);\n\n\t\t\tif (body != null && producibleTypes.isEmpty()) {\n\t\t\t\tthrow new HttpMessageNotWritableException(\n\t\t\t\t\t\t\"No converter found for return value of type: \" + valueType);\n\t\t\t}\n\t\t\tList<MediaType> mediaTypesToUse = new ArrayList<>();\n            //暴力的两层for循环，找出浏览器能接受并且服务器能生产的数据\n\t\t\tfor (MediaType requestedType : acceptableTypes) {\n\t\t\t\tfor (MediaType producibleType : producibleTypes) {\n\t\t\t\t\tif (requestedType.isCompatibleWith(producibleType)) {\n\t\t\t\t\t\tmediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (mediaTypesToUse.isEmpty()) {\n\t\t\t\tif (body != null) {\n\t\t\t\t\tthrow new HttpMediaTypeNotAcceptableException(producibleTypes);\n\t\t\t\t}\n\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug(\"No match for \" + acceptableTypes + \", supported: \" + producibleTypes);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n            //按照优先级排序(q的值)\n\t\t\tMediaType.sortBySpecificityAndQuality(mediaTypesToUse);\n\t\t\t//确定返回的媒体类型（优先级最高的）\n\t\t\tfor (MediaType mediaType : mediaTypesToUse) {\n\t\t\t\tif (mediaType.isConcrete()) {\n\t\t\t\t\tselectedMediaType = mediaType;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if (mediaType.isPresentIn(ALL_APPLICATION_MEDIA_TYPES)) {\n\t\t\t\t\tselectedMediaType = MediaType.APPLICATION_OCTET_STREAM;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Using '\" + selectedMediaType + \"', given \" +\n\t\t\t\t\t\tacceptableTypes + \" and supported \" + producibleTypes);\n\t\t\t}\n\t\t}\n\n\t\tif (selectedMediaType != null) {\n\t\t\tselectedMediaType = selectedMediaType.removeQualityValue();\n            //遍历所有的类型转换器，找到能实现的转换器\n\t\t\tfor (HttpMessageConverter<?> converter : this.messageConverters) {\n\t\t\t\tGenericHttpMessageConverter genericConverter = (converter instanceof GenericHttpMessageConverter ?\n\t\t\t\t\t\t(GenericHttpMessageConverter<?>) converter : null);\n                //判断是否支持我们协商的返回值\n\t\t\t\tif (genericConverter != null ?\n\t\t\t\t\t\t((GenericHttpMessageConverter) converter).canWrite(targetType, valueType, selectedMediaType) :\n\t\t\t\t\t\tconverter.canWrite(valueType, selectedMediaType)) {\n\t\t\t\t\tbody = getAdvice().beforeBodyWrite(body, returnType, selectedMediaType,\n\t\t\t\t\t\t\t(Class<? extends HttpMessageConverter<?>>) converter.getClass(),\n\t\t\t\t\t\t\tinputMessage, outputMessage);\n\t\t\t\t\tif (body != null) {\n\t\t\t\t\t\tObject theBody = body;\n\t\t\t\t\t\tLogFormatUtils.traceDebug(logger, traceOn ->\n\t\t\t\t\t\t\t\t\"Writing [\" + LogFormatUtils.formatValue(theBody, !traceOn) + \"]\");\n\t\t\t\t\t\taddContentDispositionHeader(inputMessage, outputMessage);\n\t\t\t\t\t\tif (genericConverter != null) {\n                            //往outMessage中写入转换后的JSON数据\n\t\t\t\t\t\t\tgenericConverter.write(body, targetType, selectedMediaType, outputMessage);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t((HttpMessageConverter) converter).write(body, selectedMediaType, outputMessage);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\t\t\tlogger.debug(\"Nothing to write: null body\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (body != null) {\n\t\t\tSet<MediaType> producibleMediaTypes =\n\t\t\t\t\t(Set<MediaType>) inputMessage.getServletRequest()\n\t\t\t\t\t\t\t.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE);\n\n\t\t\tif (isContentTypePreset || !CollectionUtils.isEmpty(producibleMediaTypes)) {\n\t\t\t\tthrow new HttpMessageNotWritableException(\n\t\t\t\t\t\t\"No converter for [\" + valueType + \"] with preset Content-Type '\" + contentType + \"'\");\n\t\t\t}\n\t\t\tthrow new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes);\n\t\t}\n\t}\n```\n\n用MessageConverters将返回值转化为JSON格式\n\n1.内容协商：浏览器会告诉服务器它能接收什么样的数据\n\n![image-20220502145831045](D:\\学习笔记\\picture\\image-20220502145831045-1669804541526-55.png)\n\nq代表权值，也就是优先级，表示优先接收text/html之类的数据，如果没有再接收image/webp，如果还没有就接收所有类型的数据\n\n```java\n            //获得被包装的请求\n\t\t\tHttpServletRequest request = inputMessage.getServletRequest();\n            //获得浏览器能接收什么样的数据(text/html之类的，这个方法会获取request中ACCEPT字段的值，并封装成List)\n\t\t\tList<MediaType> acceptableTypes = getAcceptableMediaTypes(request);\n            //获得服务器能生产什么样的数据(json之类的)\n\t\t\tList<MediaType> producibleTypes = getProducibleMediaTypes(request, valueType, targetType);\n\n\t\t\tif (body != null && producibleTypes.isEmpty()) {\n\t\t\t\tthrow new HttpMessageNotWritableException(\n\t\t\t\t\t\t\"No converter found for return value of type: \" + valueType);\n\t\t\t}\n\t\t\tList<MediaType> mediaTypesToUse = new ArrayList<>();\n            //暴力的两层for循环，找出浏览器能接受并且服务器能生产的数据\n\t\t\tfor (MediaType requestedType : acceptableTypes) {\n\t\t\t\tfor (MediaType producibleType : producibleTypes) {\n\t\t\t\t\tif (requestedType.isCompatibleWith(producibleType)) {\n\t\t\t\t\t\tmediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (mediaTypesToUse.isEmpty()) {\n\t\t\t\tif (body != null) {\n\t\t\t\t\tthrow new HttpMediaTypeNotAcceptableException(producibleTypes);\n\t\t\t\t}\n\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug(\"No match for \" + acceptableTypes + \", supported: \" + producibleTypes);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n            //按照优先级排序(q的值)\n\t\t\tMediaType.sortBySpecificityAndQuality(mediaTypesToUse);\n\t\t\t//确定返回值类型（优先级最高的）\n\t\t\tfor (MediaType mediaType : mediaTypesToUse) {\n\t\t\t\tif (mediaType.isConcrete()) {\n\t\t\t\t\tselectedMediaType = mediaType;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if (mediaType.isPresentIn(ALL_APPLICATION_MEDIA_TYPES)) {\n\t\t\t\t\tselectedMediaType = MediaType.APPLICATION_OCTET_STREAM;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Using '\" + selectedMediaType + \"', given \" +\n\t\t\t\t\t\tacceptableTypes + \" and supported \" + producibleTypes);\n\t\t\t}\n```\n\n2.浏览器会根据自己能生产的类型的数据进行内容协商，确定最后返回值的类型\n\n3.消息转换\n\nHttpMessageConverter消息转换器是一个接口，里面定义了消息转换的相关方法，用这些方法来进行返回值类型的转换\n\n```java\npublic interface HttpMessageConverter<T> {\n    //是否能将mediaType媒体类型的数据转换为clazz类型的数据\n\tboolean canRead(Class<?> clazz, @Nullable MediaType mediaType);\n    //是否能将clazz类型的数据转换为mediaType媒体类型的数据\n\tboolean canWrite(Class<?> clazz, @Nullable MediaType mediaType);\nrn the list of supported media types, potentially an immutable copy\n\t */\n    //能支持转换的媒体类型\n\tList<MediaType> getSupportedMediaTypes();\n\t//从转换器中读取T类型数据\n\tT read(Class<? extends T> clazz, HttpInputMessage inputMessage)\n\t\t\tthrows IOException, HttpMessageNotReadableException;\n    //向outputMessage中写入T类型的数据\n\tvoid write(T t, @Nullable MediaType contentType, HttpOutputMessage outputMessage)\n\t\t\tthrows IOException, HttpMessageNotWritableException;\n\n}\n```\n\nSpringMVC中内置的所有类型转换器\n\n![image-20220502154807257](https://s2.loli.net/2022/05/26/oGiReDN7mcwLOJU.png)\n\n遍历所有的类型转化器，判断哪个类型转换器能处理这个请求（将对象类型转换为JSON数据）\n\n其中MappingJackson2HttpMessageConverter类向的能处理我们的对象类型（实际上它能处理所有类型的返回值）\n\n然后用MappingJackson2HttpMessageConverter的write方法向outputMessage中写入转换后的JSON数据\n\n#### 原理总结\n\n![image-20220502160312589](D:\\学习笔记\\picture\\image-20220502160312589-1669804541526-58.png)\n\n根据@ResponBody注解判断使用RequestResponseBodyMethodProccessor这个返回值处理器，这个返回值处理器又会根据返回值选择不同的Converter来转换数据的格式，例如返回资源文件：\n\n```java\n   /*\n   import org.springframework.core.io.FileSystemResource;\n   import org.springframework.core.io.Resource;\n   */\n   @GetMapping(\"/file\")\n    @ResponseBody\n    public Resource testParam(){\n        return new FileSystemResource(\"src/main/resources/application.yml\");\n    }\n```\n\n最后得到的就不是JSON格式的数据了：\n\n![image-20220502161738933](https://s2.loli.net/2022/05/26/r1xqvUn4L8oemGl.png)\n\n#### 内容协商\n\n如果在pom文件中引入这个依赖（这个jar包可以把对象转换为XML格式的数据）\n\n```xml\n <dependency>\n     <groupId>com.fasterxml.jackson.dataformat</groupId>\n     <artifactId>jackson-dataformat-xml</artifactId>\n</dependency>\n```\n\n那么返回给浏览器的数据就是XML的数据，这是因为在浏览器的响应头中设置的优先级\n\n![image-20220502145831045](https://s2.loli.net/2022/05/26/mPwSYCWdg5kVABR.png)\n\nxhtml+xml的优先级高(q=0.9)，比q=0.8的`*/*`要高，所以Spring会优先将其转换为XML格式的数据，而如果我们在PostMan中将Accept字段的值设置为`*/*`，就会得到JSON格式的数据。我们需要不同格式的数据只需要改变Header中Accept的字段的值即可。这些得益于Spring的内容协商功能。\n\n原理：\n\n```java\nList<MediaType> acceptableTypes = getAcceptableMediaTypes(request);\n```\n\n获取浏览器支持的类型，这个方法中会获取request中的ACCEPT字段并解析成List<MediaType>类型\n\n```java\nList<MediaType> producibleTypes = getProducibleMediaTypes(request, valueType, targetType);\n```\n\n获得服务器可以返回的媒体类型\n\n方法体：\n\n```java\n\tprotected List<MediaType> getProducibleMediaTypes(\n\t\t\tHttpServletRequest request, Class<?> valueClass, @Nullable Type targetType) {\n\t\t//从请求域中获取媒体类型\n\t\tSet<MediaType> mediaTypes =\n\t\t\t\t(Set<MediaType>) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE);\n        //如果非空则直接返回\n\t\tif (!CollectionUtils.isEmpty(mediaTypes)) {\n\t\t\treturn new ArrayList<>(mediaTypes);\n\t\t}\n\t\telse if (!this.allSupportedMediaTypes.isEmpty()) {\n\t\t\tList<MediaType> result = new ArrayList<>();\n            //遍历所有的类型转换器Converter\n\t\t\tfor (HttpMessageConverter<?> converter : this.messageConverters) {\n                //如果这个类型转换器是一个合法的转换器\n\t\t\t\tif (converter instanceof GenericHttpMessageConverter && targetType != null) {\n                    //转换器是否支持valueClass类型的数据（GenericHttpMessageConverter这个类有三个参数，媒体类型为空）\n                    //targetType,valueClass都是从返回参数中得到的，targetType只为GenericHttpMessageConverter类服务\n\t\t\t\t\tif (((GenericHttpMessageConverter<?>) converter).canWrite(targetType, valueClass, null)) \t\t\t\t\t {\n                        //将转换器能转换出的媒体类型添加到集合中\n\t\t\t\t\t\tresult.addAll(converter.getSupportedMediaTypes());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (converter.canWrite(valueClass, null)) {\n\t\t\t\t\tresult.addAll(converter.getSupportedMediaTypes());\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t\telse {\n\t\t\treturn Collections.singletonList(MediaType.ALL);\n\t\t}\n\t}\n```\n\n内容协商原理（writeWithMessageConverters方法执行流程，源码在上一章有）：\n\n1. 判断请求域中是否已经有返回值类型（可能在拦截的时候做了处理）\n\n2. 获得浏览器支持的媒体类型（基于内容协商管理器contentNegotiationManager，使用请求头策略HeaderContentNegotiationStrategy获取）\n\n3. 获得服务器能产生的媒体类型：\n\n   1.遍历所有的转换器，找到所有支持返回类型的转换器(A -> 转换器 -> B，已知A，找到所有的转换器)\n\n   2.将这些转换器能转换出的媒体类型统计出来\n\n4. 遍历浏览器支持的媒体类型和服务器能产生的媒体类型，找到所有能匹配的媒体类型\n\n5. 对找到的媒体类型按照优先级排序（设置的q的值），取最大的作为返回的媒体类型\n\n6. 再次遍历所有的转化器，找到能转换的转换器（A（返回值类型） -> 转换器 -> B（媒体类型），已知A,B找到转换器）\n\n7. 用转换器实现A（返回值类型） -> 转换器 -> B（媒体类型）的转换\n\n#### 自定义内容协商策略\n\n浏览器的ACCEPT字段我们提交form表单后没办法随意修改，所以我们可以将协商内容放在参数部分\n\n```yml\nspring:\n  mvc:\n    contentnegotiation:\n      favor-parameter: true  #开启请求参数内容协商模式\n```\n\n开启参数内容协商后，我们就可以用format参数决定返回值的类型（json，xml）\n\n（如果内容协商失败，会返回406）\n\n获取浏览器的请求类型：\n\n```java\n\t@Override\n\tpublic List<MediaType> resolveMediaTypes(NativeWebRequest request) throws HttpMediaTypeNotAcceptableException {\n\t\tfor (ContentNegotiationStrategy strategy : this.strategies) {\n\t\t\tList<MediaType> mediaTypes = strategy.resolveMediaTypes(request);\n\t\t\tif (mediaTypes.equals(MEDIA_TYPE_ALL_LIST)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\treturn mediaTypes;\n\t\t}\n\t\treturn MEDIA_TYPE_ALL_LIST;\n\t}\n```\n\n在将favor-parameter设置为true后，这里再寻找浏览器能接受的媒体类型时会多一种策略：根据参数确定媒体类型，而这个策略排在根据请求头确定媒体类型的策略之前，所以会按照参数策略确定媒体类型。\n\n![image-20220502222239380](https://s2.loli.net/2022/05/26/y2jnEmiaZMSI8PJ.png)\n\n确定过程是先拿到请求参数对应的format字段的值（比如json），然后根据这个值得到对应的媒体类型，可以忽略大小写\n\n```java\n\t@Nullable\n\tprotected MediaType lookupMediaType(String extension) {\n\t\treturn this.mediaTypes.get(extension.toLowerCase(Locale.ENGLISH));\n\t}\n```\n\n```java\n\tpublic List<MediaType> resolveMediaTypeKey(NativeWebRequest webRequest, @Nullable String key)\n\t\t\tthrows HttpMediaTypeNotAcceptableException {\n\n\t\tif (StringUtils.hasText(key)) {\n\t\t\tMediaType mediaType = lookupMediaType(key);\n\t\t\tif (mediaType != null) {\n\t\t\t\thandleMatch(key, mediaType);\n\t\t\t\treturn Collections.singletonList(mediaType);\n\t\t\t}\n\t\t\tmediaType = handleNoMatch(webRequest, key);\n\t\t\tif (mediaType != null) {\n\t\t\t\taddMapping(key, mediaType);\n\t\t\t\treturn Collections.singletonList(mediaType);\n\t\t\t}\n\t\t}\n\t\treturn MEDIA_TYPE_ALL_LIST;\n\t}\n```\n\n如果拿到的媒体类型是`\"*/*\"`，则使用下一个策略，如果所有策略都返回`*/*`，则返回`*/*`\n\n#### 内容协商适用场景\n\n假如我们有这个场景：\n\n1.浏览器发请求，返回xml格式的数据\n\n2.AJAX发请求返回JSON格式的数据\n\n3.App发请求返回一个名为\"x-atguigu\"格式的数据\n\n在容器启动的时候，Spring会帮我们注册默认的Converter进入Spring容器：\n\n```java\n\tprotected final void addDefaultHttpMessageConverters(List<HttpMessageConverter<?>> messageConverters) {\n\t\tmessageConverters.add(new ByteArrayHttpMessageConverter());\n\t\tmessageConverters.add(new StringHttpMessageConverter());\n\t\tmessageConverters.add(new ResourceHttpMessageConverter());\n\t\tmessageConverters.add(new ResourceRegionHttpMessageConverter());\n\t\ttry {\n\t\t\tmessageConverters.add(new SourceHttpMessageConverter<>());\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\t// Ignore when no TransformerFactory implementation is available...\n\t\t}\n\t\tmessageConverters.add(new AllEncompassingFormHttpMessageConverter());\n\n\t\tif (romePresent) {\n\t\t\tmessageConverters.add(new AtomFeedHttpMessageConverter());\n\t\t\tmessageConverters.add(new RssChannelHttpMessageConverter());\n\t\t}\n\n\t\tif (jackson2XmlPresent) {\n\t\t\tJackson2ObjectMapperBuilder builder = Jackson2ObjectMapperBuilder.xml();\n\t\t\tif (this.applicationContext != null) {\n\t\t\t\tbuilder.applicationContext(this.applicationContext);\n\t\t\t}\n\t\t\tmessageConverters.add(new MappingJackson2XmlHttpMessageConverter(builder.build()));\n\t\t}\n\t\telse if (jaxb2Present) {\n\t\t\tmessageConverters.add(new Jaxb2RootElementHttpMessageConverter());\n\t\t}\n\n\t\tif (jackson2Present) {\n\t\t\tJackson2ObjectMapperBuilder builder = Jackson2ObjectMapperBuilder.json();\n\t\t\tif (this.applicationContext != null) {\n\t\t\t\tbuilder.applicationContext(this.applicationContext);\n\t\t\t}\n\t\t\tmessageConverters.add(new MappingJackson2HttpMessageConverter(builder.build()));\n\t\t}\n\t\telse if (gsonPresent) {\n\t\t\tmessageConverters.add(new GsonHttpMessageConverter());\n\t\t}\n\t\telse if (jsonbPresent) {\n\t\t\tmessageConverters.add(new JsonbHttpMessageConverter());\n\t\t}\n\n\t\tif (jackson2SmilePresent) {\n\t\t\tJackson2ObjectMapperBuilder builder = Jackson2ObjectMapperBuilder.smile();\n\t\t\tif (this.applicationContext != null) {\n\t\t\t\tbuilder.applicationContext(this.applicationContext);\n\t\t\t}\n\t\t\tmessageConverters.add(new MappingJackson2SmileHttpMessageConverter(builder.build()));\n\t\t}\n\t\tif (jackson2CborPresent) {\n\t\t\tJackson2ObjectMapperBuilder builder = Jackson2ObjectMapperBuilder.cbor();\n\t\t\tif (this.applicationContext != null) {\n\t\t\t\tbuilder.applicationContext(this.applicationContext);\n\t\t\t}\n\t\t\tmessageConverters.add(new MappingJackson2CborHttpMessageConverter(builder.build()));\n\t\t}\n\t}\n```\n\n其中我们注意到有诸如jackson2XmlPresent是否为true的判断，而这个值的true还是false取决于：\n\n```java\n\tstatic {\n\t\tClassLoader classLoader = WebMvcConfigurationSupport.class.getClassLoader();\n\t\tromePresent = ClassUtils.isPresent(\"com.rometools.rome.feed.WireFeed\", classLoader);\n\t\tjaxb2Present = ClassUtils.isPresent(\"javax.xml.bind.Binder\", classLoader);\n\t\tjackson2Present = ClassUtils.isPresent(\"com.fasterxml.jackson.databind.ObjectMapper\", classLoader) &&\n\t\t\t\tClassUtils.isPresent(\"com.fasterxml.jackson.core.JsonGenerator\", classLoader);\n\t\tjackson2XmlPresent = ClassUtils.isPresent(\"com.fasterxml.jackson.dataformat.xml.XmlMapper\", classLoader);\n\t\tjackson2SmilePresent = ClassUtils.isPresent(\"com.fasterxml.jackson.dataformat.smile.SmileFactory\", classLoader);\n\t\tjackson2CborPresent = ClassUtils.isPresent(\"com.fasterxml.jackson.dataformat.cbor.CBORFactory\", classLoader);\n\t\tgsonPresent = ClassUtils.isPresent(\"com.google.gson.Gson\", classLoader);\n\t\tjsonbPresent = ClassUtils.isPresent(\"javax.json.bind.Jsonb\", classLoader);\n\t}\n```\n\n所以引入这个依赖后，才可以实现对象和XML格式之间的转换。\n\n适用类工具ClassUtils判断某个类是否存在\n\n我们想自定义消息转换器，方法和前面一样，向Spring容器中注册WebMvcConfigurer组件，在里面通过实现里面的方法来定制化我们想要的功能。\n\n这里面有两个方法可以让我们定制化消息转换器：\n\n```java\n\t@Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n\n    }\n\n    @Override\n    public void extendMessageConverters(List<HttpMessageConverter<?>> converters) {\n        WebMvcConfigurer.super.extendMessageConverters(converters);\n    }\n```\n\n上面那个会覆盖默认的类型转换器，下面那个会在默认类型转换器的基础上添加新的消息转换器\n\n```\nClass<T> 类的 isAssignableFrom方法 用于判断某个类是不是一个类或者它的子类\n```\n\n```java\n    @Override\n    public List<MediaType> getSupportedMediaTypes() {\n        return MediaType.parseMediaTypes(\"application/atguigu\");\n    }\n```\n\n通过字符串得到一个application/atguigu类型的消息转换器（集合类型）\n\n实现一个自定义的消息转换器：\n\n```java\npublic class AtGuiguConverter implements HttpMessageConverter<Pet> {\n    \n    @Override\n    public boolean canRead(Class<?> clazz, MediaType mediaType) {\n        return false;\n    }\n    //支持转换什么类型的数据（Pet）\n    @Override\n    public boolean canWrite(Class<?> clazz, MediaType mediaType) {\n        return clazz.isAssignableFrom(Pet.class);\n    }\n    //支持转换成什么类型的数据（application/atguigu类型）\n    @Override\n    public List<MediaType> getSupportedMediaTypes() {\n        return MediaType.parseMediaTypes(\"application/atguigu\");\n    }\n    @Override\n    public Pet read(Class<? extends Pet> clazz, HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException {\n        return null;\n    }\n    //如何转换，定制化转换规则\n    @Override\n    public void write(Pet pet, MediaType contentType, HttpOutputMessage outputMessage) throws IOException, HttpMessageNotWritableException {\n        //转换后得到数据\n        String data=pet.getName()+\":\"+pet.getAge();\n        //拿到封装在outputMessage的输出流\n        OutputStream body = outputMessage.getBody();\n        //往输出流中写入数据\n        body.write(data.getBytes(StandardCharsets.UTF_8));\n    }\n}\n```\n\n![image-20220503004520534](https://s2.loli.net/2022/05/26/RcgDOuXW3svw4Et.png)\n\n在WebMvcConfigurer中添加转换器：\n\n```java\n@Configuration\npublic class MyConfig {\n    //1、WebMvcConfigurer定制化SpringMVC的功能\n    @Bean\n    public WebMvcConfigurer webMvcConfigurer(){\n        return new WebMvcConfigurer() {\n            @Override\n            public void extendMessageConverters(List<HttpMessageConverter<?>> converters) {\n                converters.add(new AtGuiguConverter());\n            }\n}\n\n```\n\n实现功能：\n\n![image-20220503004520534](https://s2.loli.net/2022/05/26/RcgDOuXW3svw4Et.png)\n\n我们新添加的转换器和默认转换器的适用流程都是一样的\n\n![image-20220503142857435](https://s2.loli.net/2022/05/26/yIM4q2z6xwtFp9U.png)\n\n#### 添加参数和媒体映射关系\n\n如果我们想在url中设置format字段，当format=gg（可以是url参数，也可以是请求体中的参数）时，内容协商后的媒体类型是atguigu，那么就需要我们在内容协商管理器中添加我们自定义的映射规则。（和前面一样要在WebMvcConfigurer里面实现里面的方法configureContentNegotiation）\n\n```java\n@Configuration\npublic class MyConfig {\n    //1、WebMvcConfigurer定制化SpringMVC的功能\n    @Bean\n    public WebMvcConfigurer webMvcConfigurer(){\n        return new WebMvcConfigurer() {\n\n            @Override\n            public void extendMessageConverters(List<HttpMessageConverter<?>> converters) {\n                converters.add(new AtGuiguConverter());\n            }\n\n            @Override\n            public void configureContentNegotiation(ContentNegotiationConfigurer configurer) {\n                Map<String, MediaType> map=new HashMap<>();\n                map.put(\"json\",MediaType.APPLICATION_JSON);\n                map.put(\"xml\",MediaType.APPLICATION_XML);\n                map.put(\"gg\",MediaType.parseMediaType(\"application/atguigu\"));\n                ParameterContentNegotiationStrategy paramStrage = new ParameterContentNegotiationStrategy(map);\n                configurer.strategies(Arrays.asList(paramStrage));\n            }\n        };\n    }\n}\n```\n\n我们回顾一下之前所讲的内容：\n\n在进行内容协商的时候要获取浏览器能接受的媒体类型，服务器要根据浏览器能接受的媒体类型返回对应格式的数据，而获取媒体类型时Spring会使用内容协商管理器遍历所有注册到Spring容器中的内容协商策略（获取浏览器支持的媒体类型的途径），在默认情况下，内容协商策略只有根据请求头获取媒体类型（HeaderContentNegotiationStrategy），而在spring.mvc.contentnegotiation.favor-parameter设置为true后，Spring容器中会多出一种策略：按照请求参数获取媒体类型（ParameterContentNegotiationStrategy），创建这个策略对象需要传入一个`Map<String, MediaType>`类型的参数，代表format值和媒体类型的对应关系，默认情况下只有json和xml，所以我们需要把这两个加上的同时将gg和application/atguigu媒体类型建立关系，然后创建新的策略对象添加进策略协商管理器中。可以看到结果生效：\n\n![image-20220503152216636](https://s2.loli.net/2022/05/26/DYvVo7rbaQ9LEnF.png)\n\n但是我们也发现根据请求设置媒体类型的策略失效了：\n\n![image-20220503152319677](https://s2.loli.net/2022/05/26/ax6Z2SLFEBJvcAH.png)\n\n这是因为我们在配置类中用configurer.strategies(Arrays.asList(paramStrage));重新设置了内容协商管理器的所有策略（覆盖了默认情况，而不是添加），我们没有添加HeaderContentNegotiationStrategy策略，所以请求头会失效。同时在没有获取到浏览器的媒体类型时，会默认将媒体类型视为`*/*`，即接受所有的类型：\n\n```java\n\t@Override\n\tpublic List<MediaType> resolveMediaTypes(NativeWebRequest request) throws HttpMediaTypeNotAcceptableException {\n\t\tfor (ContentNegotiationStrategy strategy : this.strategies) {\n\t\t\tList<MediaType> mediaTypes = strategy.resolveMediaTypes(request);\n\t\t\tif (mediaTypes.equals(MEDIA_TYPE_ALL_LIST)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\treturn mediaTypes;\n\t\t}\n\t\treturn MEDIA_TYPE_ALL_LIST;\n\t}\n```\n\n而服务器能产生json,xml,atguigu等类型的数据，都能与`*/*`匹配，其中json优先级最高，排序后是第一个，所以会默认使用json格式的数据返回。\n\n```java\n                ParameterContentNegotiationStrategy paramStrage = new ParameterContentNegotiationStrategy(map);\n                HeaderContentNegotiationStrategy headerStrage=new HeaderContentNegotiationStrategy();\n                configurer.strategies(Arrays.asList(paramStrage,headerStrage));\n```\n\n添加请求头策略后又重新生效\n\n在请求头策略和参数策略同时存在时，优先使用参数策略。\n\n如果不想获取format字段的数据作为协商依据，可以通过paramStrage.setParameterName(\"ff\")方法更换为其他字段。\n\n```java\n@Override\npublic void configureContentNegotiation(ContentNegotiationConfigurer configurer) {\n    Map<String, MediaType> map=new HashMap<>();\n    map.put(\"json\",MediaType.APPLICATION_JSON);\n    map.put(\"xml\",MediaType.APPLICATION_XML);\n    map.put(\"gg\",MediaType.parseMediaType(\"application/atguigu\"));\n    ParameterContentNegotiationStrategy paramStrage = new ParameterContentNegotiationStrategy(map);\n    paramStrage.setParameterName(\"ff\");\n    HeaderContentNegotiationStrategy headerStrage=new HeaderContentNegotiationStrategy();\n    configurer.strategies(Arrays.asList(paramStrage,headerStrage));\n}\n```\n\n### 视图解析\n\nhttps://blog.csdn.net/u011863024/article/details/113667946\n\n#### Thymeleaf模板引擎\n\nThymeleaf模板引擎适用于开发后台管理界面（给管理人员使用而非具体的用户），没有与后端分离，性能也较差，但是开发起来会容易很多。\n\n使用Thymeleaf模板的html页面，放在前面也能运行，使用的是没有数据的普通页面，放在Spring的资源目录下就会经过视图的渲染而获得数据\n\n引入依赖：\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-thymeleaf</artifactId>\n</dependency>\n```\n\n自动配好的策略\n\n1. 所有thymeleaf的配置值都在 ThymeleafProperties\n2. 配置好了 **SpringTemplateEngine**\n3. 配好了 **ThymeleafViewResolver**\n4. 我们只需要直接开发页面\n\n在寻找html页面时会在classpath:/templates/目录下面找，并且会自动帮我们加上.html的后缀名，这两个和我们的字符串拼接再一起共同构成html的请求路径\n\n```\npublic static final String DEFAULT_PREFIX = \"classpath:/templates/\";//模板放置处\npublic static final String DEFAULT_SUFFIX = \".html\";//文件的后缀名\n```\n\nJSP语法：\n\n##### 基本语法\n\n| 表达式名字 | 语法 | 用途                               |\n| ---------- | ---- | ---------------------------------- |\n| 变量取值   | ${…} | 获取请求域、session域、对象等值    |\n| 选择变量   | *{…} | 获取上下文对象值                   |\n| 消息       | #{…} | 获取国际化等值                     |\n| 链接       | @{…} | 生成链接                           |\n| 片段表达式 | ~{…} | jsp:include 作用，引入公共页面片段 |\n\n##### 简单使用\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<h1 th:text=\"${msg}\">nice</h1>\n<h2>\n    <a href=\"www.baidu.com\" th:href=\"${link}\">去百度</a>  <br/>\n    <a href=\"www.google.com\" th:href=\"@{/link}\">去百度</a>\n</h2>\n</body>\n</html>\n```\n\n直接打开这个html页面显示的\"去百度\"这个原始内容，经过Spring加载后会显示变量\n\n```\nxmlns:th=\"http://www.thymeleaf.org\"\n```\n\n这个用于引入命名空间\n\n修改标签的值：`th:text=\"${msg}\"`\n\n设置页面跳转的值：\n\n`th:href=\"${link}\"` 将链接内容替换为model中link变量的值（替换的是变量的值）\n\n`th:href=\"@{/link}\"`  将链接内容替换为/link（替换的字面量的值）\n\n用${}获取我们放在model中的数据\n\n```java\n@Controller\npublic class ViewTestController {\n    @GetMapping(\"/hello\")\n    public String hello(Model model){\n        //model中的数据会被放在请求域中 request.setAttribute(\"a\",aa)\n        model.addAttribute(\"msg\",\"一定要大力发展工业文化\");\n        model.addAttribute(\"link\",\"http://www.baidu.com\");\n        return \"success\";\n    }\n}\n```\n\n设置标签内部属性的值：\n\n```hmtl\n<img src=\"../../images/gtvglogo.png\"  \n     th:attr=\"src=@{/images/gtvglogo.png},title=#{logo},alt=#{logo}\" />\n```\n\n可以在双引号中使用单引号进行字符串拼接操作\n\nTip：@GetMapping(value={}) 这些注解的value字段可以是数组，表示这些注解对应到同一个controller\n\nthymleaf原则:model有值就用model里的值，model里没有值就用html中的值。\n\n官网:thymeleaf.org/doc\n\nth:action=\"@{/login}\" 加在form表单上，表示设置form表单请求的url\n\ncontroller返回 \"redirect:/main.html\"表示进行请求重定向\n\nth:text=${msg} 修改内容，用这个可以动态修改文本自己标签页\n\n除了能获得model中的数据，也默认能有session中的数据（参数名需要叫session）\n\nthymeleaf行内写法:[[${session.user.name}]]\n\n跳转到template目录下的basic目录下，返回\"basic/index\"即可\n\nhtml中需要用src属性，thymeleaf用th:src=\"@{/}\"\n\nhtml需要用href属性的，thymeleaf用th:href=\"@{/}\"\n\n##### 模板引入\n\nhtml页面可能会有很多功能的部分，例如导航条，侧边栏等。如果要修改这些部分的话需要修改所以的html页面，十分繁琐，所以我们可以使用thymeleaf的模板语法来将html可能会用到的功能组件保存起来，再需要使用的时候从组件库中引入组件（组件可以是任何公共的部分，例如公共的css，js，html元素），这样在修改组件的时候直接修改组件库的内容即可。\n\n引入组件的方式可以使用thymleaf提供的fragment字段来设置一个唯一的标识，也可以使用html'的属性选择器（比如设置了id，引入的时候使用#id来引入）\n\n使用fragment字段：\n\n```html\n<head th:fragment=\"commonheader\">\n    <!--common-->\n    <link href=\"css/style.css\" th:href=\"@{/css/style.css}\" rel=\"stylesheet\">\n</head>\n```\n\n引入的时候：\n\n```html\n<div th:include=\"common :: commonheader\"> </div>\n```\n\ncommon是存放组件的**html文件**的名称，commonheader是我们设置的th:fragmen字段的值\n\n使用id：\n\n```html\n<div id=\"commonscript\">\n    <!-- Placed js at the end of the document so the pages load faster -->\n    <script th:src=\"@{/js/jquery-1.10.2.min.js}\"></script>\n    <script th:src=\"@{/js/jquery-ui-1.9.2.custom.min.js}\"></script>\n    <script th:src=\"@{/js/jquery-migrate-1.2.1.min.js}\"></script>\n    <script th:src=\"@{/js/bootstrap.min.js}\"></script>\n    <script th:src=\"@{/js/modernizr.min.js}\"></script>\n    <script th:src=\"@{/js/jquery.nicescroll.js}\"></script>\n    <!--common scripts for all pages-->\n    <script th:src=\"@{/js/scripts.js}\"></script>\n</div>\n```\n\n引入的时候：\n\n```html\n<div th:replace=\"common :: #commonscript\"></div>\n```\n\n其实就是多加了一个#\n\n组件库里的链接(href)和内容(src) ，都要替换成th的格式\n\n编写组件库common.html：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\"><!--注意要添加xmlns:th才能添加thymeleaf的标签-->\n<head th:fragment=\"commonheader\">\n    <!--common-->\n    <link href=\"css/style.css\" th:href=\"@{/css/style.css}\" rel=\"stylesheet\">\n    <link href=\"css/style-responsive.css\" th:href=\"@{/css/style-responsive.css}\" rel=\"stylesheet\">\n    ...\n</head>\n<body>\n<!-- left side start-->\n<div id=\"leftmenu\" class=\"left-side sticky-left-side\">\n\t...\n\n    <div class=\"left-side-inner\">\n\t\t...\n\n        <!--sidebar nav start-->\n        <ul class=\"nav nav-pills nav-stacked custom-nav\">\n            <li><a th:href=\"@{/main.html}\"><i class=\"fa fa-home\"></i> <span>Dashboard</span></a></li>\n            ...\n            <li class=\"menu-list nav-active\"><a href=\"#\"><i class=\"fa fa-th-list\"></i> <span>Data Tables</span></a>\n                <ul class=\"sub-menu-list\">\n                    <li><a th:href=\"@{/basic_table}\"> Basic Table</a></li>\n                    <li><a th:href=\"@{/dynamic_table}\"> Advanced Table</a></li>\n                    <li><a th:href=\"@{/responsive_table}\"> Responsive Table</a></li>\n                    <li><a th:href=\"@{/editable_table}\"> Edit Table</a></li>\n                </ul>\n            </li>\n            ...\n        </ul>\n        <!--sidebar nav end-->\n    </div>\n</div>\n<!-- left side end-->\n\n\n<!-- header section start-->\n<div th:fragment=\"headermenu\" class=\"header-section\">\n\n    <!--toggle button start-->\n    <a class=\"toggle-btn\"><i class=\"fa fa-bars\"></i></a>\n    <!--toggle button end-->\n\t...\n\n</div>\n<!-- header section end-->\n\n<div id=\"commonscript\">\n    <!-- Placed js at the end of the document so the pages load faster -->\n    <script th:src=\"@{/js/jquery-1.10.2.min.js}\"></script>\n    <script th:src=\"@{/js/jquery-ui-1.9.2.custom.min.js}\"></script>\n    <script th:src=\"@{/js/jquery-migrate-1.2.1.min.js}\"></script>\n    <script th:src=\"@{/js/bootstrap.min.js}\"></script>\n    <script th:src=\"@{/js/modernizr.min.js}\"></script>\n    <script th:src=\"@{/js/jquery.nicescroll.js}\"></script>\n    <!--common scripts for all pages-->\n    <script th:src=\"@{/js/scripts.js}\"></script>\n</div>\n</body>\n</html>\n```\n\n引入组件：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0\">\n  <meta name=\"description\" content=\"\">\n  <meta name=\"author\" content=\"ThemeBucket\">\n  <link rel=\"shortcut icon\" href=\"#\" type=\"image/png\">\n\n  <title>Basic Table</title>\n    <div th:include=\"common :: commonheader\"> </div><!--将common.html的代码段 插进来-->\n</head>\n\n<body class=\"sticky-header\">\n\n<section>\n<div th:replace=\"common :: #leftmenu\"></div>\n    \n    <!-- main content start-->\n    <div class=\"main-content\" >\n\n        <div th:replace=\"common :: headermenu\"></div>\n        ...\n    </div>\n    <!-- main content end-->\n</section>\n\n<!-- Placed js at the end of the document so the pages load faster -->\n<div th:replace=\"common :: #commonscript\"></div>\n</body>\n</html>\n```\n\n##### 引入语法\n\nhttps://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#difference-between-thinsert-and-threplace-and-thinclude\n\n（其实都用div即可）\n\n假如在footer.html中有\n\n```html\n<footer th:fragment=\"copy\">\n\thello,lth\n</footer>\n```\n\n1.insert 引入用的标签在外，被引入的标签在内\n\n```html\n<div th:insert=\"footer :: copy\"></div>\n```\n\n替换后的效果是：\n\n```html\n<div>\n    <footer>\n        hello,lth\n    </footer>\n</div>\n```\n\n2.replace 只保留被引入的标签\n\n```html\n<div th:replace=\"footer :: copy\"></div>\n```\n\n替换后：\n\n```html\n  <footer>\n    hello,lth\n  </footer>\n```\n\n3.include 只保留引入用的标签\n\n```html\n<div th:include=\"footer :: copy\"></div>\n```\n\n替换后：\n\n```html\n  <div>\n    hello,lth\n  </div>\n```\n\n##### 集合遍历\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n    <tr th:each=\"pet,status:${pets}\">\n        <td>[[${status.index}]]</td>\n        <td>[[${pet.name}]]</td>\n        <td>[[${pet.age}]]</td>\n        <br>\n    </tr>\n</body>\n</html>\n```\n\n除了我们集合中对应的对象，每个集合还默认会有一个status对象（默认在第二个参数里），里面有相关的索引信息\n\n#### 视图解析原理\n\n视图解析流程与前面所说一致，拿到返回值后，会根据返回值的类型以及注解判断使用哪种视图解析器，而对于返回值是String类型，且没有加上@ResponBody注解，则会使用ViewNameMethodReturnValueHandler这个返回值解析器来解析返回值。\n\n处理过程：\n\n```java\n\t@Override\n\tpublic void handleReturnValue(@Nullable Object returnValue, MethodParameter returnType,\n\t\t\tModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception {\n\t\t//如果返回值是字符串\n\t\tif (returnValue instanceof CharSequence) {\n\t\t\tString viewName = returnValue.toString();\n            //将视图的地址放入到视图容器中\n\t\t\tmavContainer.setViewName(viewName);\n            //判断是否能重定向\n\t\t\tif (isRedirectViewName(viewName)) {\n                //将重定向标志设置为true\n\t\t\t\tmavContainer.setRedirectModelScenario(true);\n\t\t\t}\n\t\t}\n\t\telse if (returnValue != null) {\n\t\t\t// should not happen\n\t\t\tthrow new UnsupportedOperationException(\"Unexpected return type: \" +\n\t\t\t\t\treturnType.getParameterType().getName() + \" in method: \" + returnType.getMethod());\n\t\t}\n\t}\n```\n\n在方法执行过程中，方法中数据（model）和视图地址（view）都会放在一个ModelAndViewContainer视图容器中\n\nisRedirectViewName(viewName)方法：\n\n```java\n\tprotected boolean isRedirectViewName(String viewName) {\n\t\treturn (PatternMatchUtils.simpleMatch(this.redirectPatterns, viewName) || viewName.startsWith(\"redirect:\"));\n\t}\n```\n\n如果返回的字符符串和redirectPatterns设置的正则表达式匹配，或者以\"redirect:\"开头，则将这个字符串视为重定向。所以我们在加上redirect:作为前缀后可以进行请求重定向。\n\n如果我们方法去请求参数中有我们的自定义对象，那么这个自定义对象也会被放到mavContainer中\n\n在invokeHandlerMethod方法执行完后，会执行下面的getModelAndView方法\n\n```java\n\t@Nullable\n\tprivate ModelAndView getModelAndView(ModelAndViewContainer mavContainer,\n\t\t\tModelFactory modelFactory, NativeWebRequest webRequest) throws Exception {\n\t\t//拿到mavContainer容器\n\t\tmodelFactory.updateModel(webRequest, mavContainer);\n\t\tif (mavContainer.isRequestHandled()) {\n\t\t\treturn null;\n\t\t}\n        //获取容器中的model，这里的model和我们在方法参数中通过设置Map型参数或者Model型参数拿到的对象是同一个，类型都是ModelMap类型，对应request的请求域\n\t\tModelMap model = mavContainer.getModel();\n        //使用model(数据),视图名(view)创建一个ModelAndView对象\n\t\tModelAndView mav = new ModelAndView(mavContainer.getViewName(), model, mavContainer.getStatus());\n\t\tif (!mavContainer.isViewReference()) {\n\t\t\tmav.setView((View) mavContainer.getView());\n\t\t}\n        //如果model带有@RedirectAttribute注解，则会将这个model放入到下一次请求的参数中\n\t\tif (model instanceof RedirectAttributes) {\n\t\t\tMap<String, ?> flashAttributes = ((RedirectAttributes) model).getFlashAttributes();\n\t\t\tHttpServletRequest request = webRequest.getNativeRequest(HttpServletRequest.class);\n\t\t\tif (request != null) {\n\t\t\t\tRequestContextUtils.getOutputFlashMap(request).putAll(flashAttributes);\n\t\t\t}\n\t\t}\n\t\treturn mav;\n\t}\n```\n\n1.所有请求的执行结果都是一个ModelAndView对象：\n\n```java\nmv = ha.handle(processedRequest, response, mappedHandler.getHandler());\n```\n\n2.如果视图名称为null，则会根据uri给它一个默认的视图名\n\n```\napplyDefaultViewName(processedRequest, mv);\n```\n\n例如：\n\n```java\n    @GetMapping(\"/success\")\n    public String hello(Model model, HttpSession httpSession){\n        return null;\n    }\n```\n\n会返回template目录下的success.html页面\n\n3.处理派发结果\n\n```\nprocessDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);\n```\n\n```java\n\tprivate void processDispatchResult(HttpServletRequest request, HttpServletResponse response,\n\t\t\t@Nullable HandlerExecutionChain mappedHandler, @Nullable ModelAndView mv,\n\t\t\t@Nullable Exception exception) throws Exception {\n\n\t\tboolean errorView = false;\n\t\t//如果有异常，处理异常\n\t\tif (exception != null) {\n\t\t\tif (exception instanceof ModelAndViewDefiningException) {\n\t\t\t\tlogger.debug(\"ModelAndViewDefiningException encountered\", exception);\n\t\t\t\tmv = ((ModelAndViewDefiningException) exception).getModelAndView();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tObject handler = (mappedHandler != null ? mappedHandler.getHandler() : null);\n\t\t\t\tmv = processHandlerException(request, response, handler, exception);\n\t\t\t\terrorView = (mv != null);\n\t\t\t}\n\t\t}\n\n\t\t// 如果视图不为空，渲染视图\n\t\tif (mv != null && !mv.wasCleared()) {\n\t\t\trender(mv, request, response);\n\t\t\tif (errorView) {\n\t\t\t\tWebUtils.clearErrorRequestAttributes(request);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(\"No view rendering, null ModelAndView returned.\");\n\t\t\t}\n\t\t}\n\n\t\tif (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) {\n\t\t\t// Concurrent handling started during a forward\n\t\t\treturn;\n\t\t}\n\n\t\tif (mappedHandler != null) {\n\t\t\t// Exception (if any) is already handled..\n\t\t\tmappedHandler.triggerAfterCompletion(request, response, null);\n\t\t}\n\t}\n```\n\n渲染视图：\n\n```\nrender(mv, request, response);\n```\n\n```java\n\tprotected void render(ModelAndView mv, HttpServletRequest request, HttpServletResponse response) throws Exception {\n\t\t// Determine locale for request and apply it to the response.\n\t\tLocale locale =\n\t\t\t\t(this.localeResolver != null ? this.localeResolver.resolveLocale(request) : request.getLocale());\n\t\tresponse.setLocale(locale);\n\t\t//根据视图名，拿到视图对象\n\t\tView view;\n\t\tString viewName = mv.getViewName();\n\t\tif (viewName != null) {\n\t\t\t// We need to resolve the view name.\n\t\t\tview = resolveViewName(viewName, mv.getModelInternal(), locale, request);\n            //如果无法解析就抛出异常\n\t\t\tif (view == null) {\n\t\t\t\tthrow new ServletException(\"Could not resolve view with name '\" + mv.getViewName() +\n\t\t\t\t\t\t\"' in servlet with name '\" + getServletName() + \"'\");\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// No need to lookup: the ModelAndView object contains the actual View object.\n\t\t\tview = mv.getView();\n\t\t\tif (view == null) {\n\t\t\t\tthrow new ServletException(\"ModelAndView [\" + mv + \"] neither contains a view name nor a \" +\n\t\t\t\t\t\t\"View object in servlet with name '\" + getServletName() + \"'\");\n\t\t\t}\n\t\t}\n\n\t\t// Delegate to the View object for rendering.\n\t\tif (logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"Rendering view [\" + view + \"] \");\n\t\t}\n\t\ttry {\n\t\t\tif (mv.getStatus() != null) {\n\t\t\t\tresponse.setStatus(mv.getStatus().value());\n\t\t\t}\n            //得到视图后，调用view的render方法来觉得最后的视图如何渲染\n\t\t\tview.render(mv.getModelInternal(), request, response);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Error rendering view [\" + view + \"]\", ex);\n\t\t\t}\n\t\t\tthrow ex;\n\t\t}\n\t}\n```\n\n1.根据视图名拿到视图对象View，View中会定义页面的渲染逻辑（也就是得到返回给前端的文本）\n\n```java\n\t@Nullable\n\tprotected View resolveViewName(String viewName, @Nullable Map<String, Object> model,\n\t\t\tLocale locale, HttpServletRequest request) throws Exception {\n\n\t\tif (this.viewResolvers != null) {\n\t\t\tfor (ViewResolver viewResolver : this.viewResolvers) {\n\t\t\t\tView view = viewResolver.resolveViewName(viewName, locale);\n\t\t\t\tif (view != null) {\n\t\t\t\t\treturn view;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n```\n\n遍历所有的视图解析器，尝试解析视图名，如果能成功解析就直接返回，否则返回null\n\n包含的视图解析有：\n\n![image-20220505003040015](https://s2.loli.net/2022/05/26/4JR7XPYnoZhETNU.png)\n\n第0个是内容协商视图解析器，里面内容协商管理器中包含下面所有的视图解析器，因而还是会遍历下面所有的视图解析器，尝试解析viewName得到view。所以在这个循环中不会进入到下面中，但是解析过程还是用下面的解析器完成\n\n第2个视图解析器是Thymeleaf视图解析器，会创建RedirectView对象\n\n视图渲染逻辑：\n\n```java\n\t@Override\n\tpublic void render(@Nullable Map<String, ?> model, HttpServletRequest request,\n\t\t\tHttpServletResponse response) throws Exception {\n\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"View \" + formatViewName() +\n\t\t\t\t\t\", model \" + (model != null ? model : Collections.emptyMap()) +\n\t\t\t\t\t(this.staticAttributes.isEmpty() ? \"\" : \", static attributes \" + this.staticAttributes));\n\t\t}\n\t\t//这一步，将我们model中的数据放到一个新的map里面mergedModel\n\t\tMap<String, Object> mergedModel = createMergedOutputModel(model, request, response);\n\t\tprepareResponse(request, response);\n        //将需要的参数都统合起来，觉得最后的视图渲染逻辑\n\t\trenderMergedOutputModel(mergedModel, getRequestToExpose(request), response);\n\t}\n```\n\n其中：renderMergedOutputModel(mergedModel, getRequestToExpose(request), response)方法：\n\n```java\n\t@Override\n\tprotected void renderMergedOutputModel(Map<String, Object> model, HttpServletRequest request,\n\t\t\tHttpServletResponse response) throws IOException {\n\t\t//获取模板URL，拼接URL并将model中的参数作为URL的路径参数放在后面\n\t\tString targetUrl = createTargetUrl(model, request);\n\t\ttargetUrl = updateTargetUrl(targetUrl, model, request, response);\n\n\t\t// 保存参数\n\t\tRequestContextUtils.saveOutputFlashMap(targetUrl, request, response);\n\n\t\t//使用原生的response.sendRedirect(encodedURL)方法进行重定向\n\t\tsendRedirect(request, response, targetUrl, this.http10Compatible);\n\t}\n```\n\n返回值如果是以**\"forward:\"**开始，则返回new InternalResourceView(forwardUrl)视图对象\n\n功能是**转发**：request.getRequestDispatcher(URL).forward(request,response)\n\n转发是以当前请求为代理，生产一次的新的请求，将新的请求的返回值作为当前请求的返回值返回，调用的是request的方法，转发新的请求是服务器发起的，所以浏览器只会发送一次请求（相当于处理请求的时候调用了其他请求对应的方法），并且地址栏不会发送变化\n\n返回值如果以**\"redirect:\"**开始，则返回new RedirectView()视图对象\n\n功能是**重定向**：response.sendRedirect(URL)\n\n重定向是返回下一次应当查询的URL，让浏览器向这个URL发请求，调用的是response的方法，浏览器会发送多次请求直到得到结果，地址栏的请求地址会变成最后一次重定向的地址\n\n补充：转发和重定向的区别\n\n![在这里插入图片描述](https://s2.loli.net/2022/05/26/lOW3a9JGhrH7gXq.png)\n\n返回值如果是普通字符串，则返回new ThymeleafView()视图对象，这个view会使用HTML解析器等工具填充数据，返回HTML文本\n\n我们可以实现一个View接口和一个自定义的视图解析器，这样就可以返回我们自定义的文本内容\n\n### 拦截器\n\n添加拦截器需要我们实现HandlerInterceptor接口，里面有三个方法\n\n```java\npublic interface HandlerInterceptor {\n\t//用于前置拦截，在方法执行前执行\n\tdefault boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)\n\t\t\tthrows Exception {\n\t\treturn true;\n\t}\n    //后置拦截，在方法执行完，还没有渲染页面的时候，如果我们需要添加一些数据进model里面的可以使用这个方法\n\tdefault void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,\n\t\t\t@Nullable ModelAndView modelAndView) throws Exception {\n\t}\n    //在视图渲染完成后执行，用于进行一些清理工作\n\tdefault void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler,\n\t\t\t@Nullable Exception ex) throws Exception {\n\t}\n\n}\n```\n\n定制化SpringMVC的功能都需要我们实现一个WebMvcConfigurer\n\n#### preHandle 前置拦截\n\n实现一个拦截器：\n\n如果session没有对应的值，说明没有登录，返回false表示进行拦截，返回true表示放行\n\n```java\npublic class LoginIntercepter implements HandlerInterceptor {\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        if(request.getSession().getAttribute(\"loginUser\")!=null){\n            return false;\n        }\n        return true;\n    }\n}\n```\n\n在实现的WebMvcConfigurer接口中，实现方法：\n\n```java\n            @Override\n            public void addInterceptors(InterceptorRegistry registry) {\n                registry.addInterceptor(new LoginIntercepter())\n                        .addPathPatterns(\"/**\")\n                        .excludePathPatterns(\"/login\",\"/\",\"/css/**\",\"/js/**\");\n            }\n```\n\naddInterceptor：添加一个拦截器\n\naddPathPatterns：添加拦截的路由，动态路由和静态资源都会被拦截，所以要为静态资源的路径也放行\n\nexcludePathPatterns：添加放行的路由\n\n重定向会丢失原来request中的数据（因为发了一个新的request），所以使用转发功能即可保留请求域中的数据\n\n#### 拦截器原理\n\n```java\n        if (!mappedHandler.applyPreHandle(processedRequest, response)) {\n            return;\n        }\n```\n\n在执行mv = ha.handle(processedRequest, response, mappedHandler.getHandler());方法前，会先执行上述方法，可以看到只要这个方法返回false，请求过程就结束了。\n\napplyPreHandle：\n\n```java\n\tboolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception {\n\t\tHandlerInterceptor[] interceptors = getInterceptors();\n\t\tif (!ObjectUtils.isEmpty(interceptors)) {\n            //顺序执行所有的拦截器\n\t\t\tfor (int i = 0; i < interceptors.length; i++) {\n\t\t\t\tHandlerInterceptor interceptor = interceptors[i];\n\t\t\t\tif (!interceptor.preHandle(request, response, this.handler)) {\n                    //如果被拦截了则逆序执行返回true的拦截器的AfterCompletion方法\n\t\t\t\t\ttriggerAfterCompletion(request, response, null);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tthis.interceptorIndex = i;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n```\n\n如代码所示，请求会顺序执行我们添加的拦截器列表，执行里面的preHandle方法。如果拦截器返回true则执行下一个拦截器，如果有拦截器返回false，也就是请求被拦截了，在返回doDispatch之前会执行triggerAfterCompletion方法：\n\n```java\n\tvoid triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, @Nullable Exception ex)\n\t\t\tthrows Exception {\n\n\t\tHandlerInterceptor[] interceptors = getInterceptors();\n\t\tif (!ObjectUtils.isEmpty(interceptors)) {\n\t\t\tfor (int i = this.interceptorIndex; i >= 0; i--) {\n\t\t\t\tHandlerInterceptor interceptor = interceptors[i];\n\t\t\t\ttry {\n\t\t\t\t\tinterceptor.afterCompletion(request, response, this.handler, ex);\n\t\t\t\t}\n\t\t\t\tcatch (Throwable ex2) {\n\t\t\t\t\tlogger.error(\"HandlerInterceptor.afterCompletion threw exception\", ex2);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```\n\n这个方法中会逆序执行先前已经返回true的拦截器中的afterCompletion方法（最后那个返回false的拦截器不会执行afterCompletion方法）\n\n方法执行完成后会执行applyPostHandle方法：\n\n```java\nmappedHandler.applyPostHandle(processedRequest, response, mv);\n```\n\n```java\n\tvoid applyPostHandle(HttpServletRequest request, HttpServletResponse response, @Nullable ModelAndView mv)\n\t\t\tthrows Exception {\n\n\t\tHandlerInterceptor[] interceptors = getInterceptors();\n\t\tif (!ObjectUtils.isEmpty(interceptors)) {\n\t\t\tfor (int i = interceptors.length - 1; i >= 0; i--) {\n\t\t\t\tHandlerInterceptor interceptor = interceptors[i];\n\t\t\t\tinterceptor.postHandle(request, response, this.handler, mv);\n\t\t\t}\n\t\t}\n\t}\n```\n\n在这个方法中会逆序执行所有的拦截器的postHandle方法（能执行这里说明所有拦截器的preHandle方法都返回了true）\n\n如果正常结束，会在processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);中逆序触发triggerAfterCompletion方法。\n\n如果出现异常，则直接触发triggerAfterCompletion方法\n\ntriggerAfterCompletion只会执行已经执行了preHandle并且返回true的拦截器的方法\n\n![image-20220505172331957](D:\\学习笔记\\picture\\3ec2d5bca54c51b80b6d2c5a9f1fbf32-1669804541526-57.png)\n\n### 文件上传\n\n文件上传页面\n\n```html\n<!-- role 申明这是个表单 th:action表示表单提交的路由 method表示请求方法是post enctype表示多文件上传-->\n<form role=\"form\" th:action=\"@{/upload}\" method=\"post\" enctype=\"multipart/form-data\">\n    <div class=\"form-group\">\n        <label for=\"exampleInputEmail1\">邮箱</label>\n        <input type=\"email\" name=\"email\" class=\"form-control\" id=\"exampleInputEmail1\" placeholder=\"Enter email\">\n    </div>\n    \n    <div class=\"form-group\">\n        <label for=\"exampleInputPassword1\">名字</label>\n        <input type=\"text\" name=\"username\" class=\"form-control\" id=\"exampleInputPassword1\" placeholder=\"Password\">\n    </div>\n    \n    <div class=\"form-group\">\n        <label for=\"exampleInputFile\">头像</label>\n        <input type=\"file\" name=\"headerImg\" id=\"exampleInputFile\">\n    </div>\n    \n    <div class=\"form-group\">\n        <label for=\"exampleInputFile\">生活照</label>\n        <input type=\"file\" name=\"photos\" multiple>\n    </div>\n    \n    <div class=\"checkbox\">\n        <label>\n            <input type=\"checkbox\"> Check me out\n        </label>\n    </div>\n    <button type=\"submit\" class=\"btn btn-primary\">提交</button>\n</form>\n```\n\n文件上传处理的Controller：\n\n```java\n    @PostMapping(\"/upload\")\n    public Object upload(@RequestParam(\"email\") String email,\n                         @RequestPart(\"headerImg\") MultipartFile headerImage,\n                         @RequestPart(\"photos\") MultipartFile[] photos){\n        return new Object[]{email,headerImage.getName(),photos.length};\n    }\n```\n\n单个文件使用MultipartFile headerImage\n\n多个文件上传使用数组MultipartFile[] photos\n\n使用@RequestPart(\"headerImg\") 来接收文件\n\n在配置中设置文件大小：（因为Spring有某人的文件上传大小限制）\n\n```\nspring.servlet.multipart.max-file-size=10MB\nspring.servlet.multipart.max-request-size=100MB\n```\n\n文件下载：\n\n```java\n@RestController\npublic class FileController {\n\n    final static String LOCATION =new File(\"\").getAbsolutePath()+\"/src/main/resources/static/\";\n\n    @PostMapping(\"/upload\")\n    public Object upload(@RequestParam(\"email\") String email,\n                         @RequestPart(\"headerImg\") MultipartFile headerImage,\n                         @RequestPart(\"photos\") MultipartFile[] photos){\n        if(!headerImage.isEmpty()) {\n            try {\n                System.out.println(headerImage.getName());\n                System.out.println(headerImage.getOriginalFilename());\n\n                headerImage.transferTo(new File(LOCATION+headerImage.getOriginalFilename()));\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        return new Object[]{email,headerImage.getName(),photos.length};\n    }\n}\n```\n\n使用headerImage.transferTo(new File(LOCATION+headerImage.getOriginalFilename()));保存文件\n\n使用的是底层使用的是FileCopyUtils.copy(getInputStream(), Files.newOutputStream(dest));实现文件拷贝\n\n#### 文件上传原理\n\n```java\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass({ Servlet.class, StandardServletMultipartResolver.class, MultipartConfigElement.class })\n@ConditionalOnProperty(prefix = \"spring.servlet.multipart\", name = \"enabled\", matchIfMissing = true)\n@ConditionalOnWebApplication(type = Type.SERVLET)\n@EnableConfigurationProperties(MultipartProperties.class)\npublic class MultipartAutoConfiguration {\n\n\tprivate final MultipartProperties multipartProperties;\n\n\tpublic MultipartAutoConfiguration(MultipartProperties multipartProperties) {\n\t\tthis.multipartProperties = multipartProperties;\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean({ MultipartConfigElement.class, CommonsMultipartResolver.class })\n\tpublic MultipartConfigElement multipartConfigElement() {\n\t\treturn this.multipartProperties.createMultipartConfig();\n\t}\n//向容器中添加文件上传解析器\n\t@Bean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)\n\t@ConditionalOnMissingBean(MultipartResolver.class)\n\tpublic StandardServletMultipartResolver multipartResolver() {\n\t\tStandardServletMultipartResolver multipartResolver = new StandardServletMultipartResolver();\n\t\tmultipartResolver.setResolveLazily(this.multipartProperties.isResolveLazily());\n\t\treturn multipartResolver;\n\t}\n\n}\n```\n\n如果我们向自定义文件解析过程，往Spring容器中添加我们自定义的文件解析器即可\n\n在doDispatch方法中，在解析参数之前会先判断当前请求是否是文件上传请求：\n\n```\nprocessedRequest = checkMultipart(request);\n```\n\n```java\n\tprotected HttpServletRequest checkMultipart(HttpServletRequest request) throws MultipartException {\n        //使用文件上传解析器判断是不是文件上传请求\n\t\tif (this.multipartResolver != null && this.multipartResolver.isMultipart(request)) {\n\t\t\tif (WebUtils.getNativeRequest(request, MultipartHttpServletRequest.class) != null) {\n\t\t\t\tif (request.getDispatcherType().equals(DispatcherType.REQUEST)) {\n\t\t\t\t\tlogger.trace(\"Request already resolved to MultipartHttpServletRequest, e.g. by MultipartFilter\");\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (hasMultipartException(request)) {\n\t\t\t\tlogger.debug(\"Multipart resolution previously failed for current request - \" +\n\t\t\t\t\t\t\"skipping re-resolution for undisturbed error rendering\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttry {\n                    //如果是文件上传请求则对原请求进行包装\n\t\t\t\t\treturn this.multipartResolver.resolveMultipart(request);\n\t\t\t\t}\n\t\t\t\tcatch (MultipartException ex) {\n\t\t\t\t\tif (request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) != null) {\n\t\t\t\t\t\tlogger.debug(\"Multipart resolution failed for error dispatch\", ex);\n\t\t\t\t\t\t// Keep processing error dispatch with regular request handle below\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthrow ex;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// 不是文件上传请求则直接返回原请求\n\t\treturn request;\n\t}\n```\n\nthis.multipartResolver.isMultipart(request) 使用这个方法判断是不是文件上传请求\n\n如果是文件上传请求则将原请求进行包装\n\nreturn this.multipartResolver.resolveMultipart(request);\n\n然后返回doDispatch方法，判断返回的请求和原来的请求是否一样：\n\n```\nmultipartRequestParsed = (processedRequest != request);\n```\n\n如果不一样，说明对原请求进行了包装，因而是文件上传请求\n\n如果一样，说明没有包装，则不是文件上传请求\n\n解析参数的过程和前面一样，根据@RequestPart注解判断使用RequestPartMethodArgumentResolver这个文件上传解析器来解析文件参数。\n\n```java\n\t@Override\n\t@Nullable\n\tpublic Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,\n\t\t\tNativeWebRequest request, @Nullable WebDataBinderFactory binderFactory) throws Exception {\n\n\t\tHttpServletRequest servletRequest = request.getNativeRequest(HttpServletRequest.class);\n\t\tAssert.state(servletRequest != null, \"No HttpServletRequest\");\n\t\t//获取注解信息，判断这个参数是不是必须的\n\t\tRequestPart requestPart = parameter.getParameterAnnotation(RequestPart.class);\n\t\tboolean isRequired = ((requestPart == null || requestPart.required()) && !parameter.isOptional());\n\t\t//获得参数名\n\t\tString name = getPartName(parameter, requestPart);\n\t\tparameter = parameter.nestedIfOptional();\n\t\tObject arg = null;\n\t\t//解析文件上传参数\n\t\tObject mpArg = MultipartResolutionDelegate.resolveMultipartArgument(name, parameter, servletRequest);\n\t\tif (mpArg != MultipartResolutionDelegate.UNRESOLVABLE) {\n\t\t\targ = mpArg;\n\t\t}\n\t\telse {\n\t\t\ttry {\n\t\t\t\tHttpInputMessage inputMessage = new RequestPartServletServerHttpRequest(servletRequest, name);\n\t\t\t\targ = readWithMessageConverters(inputMessage, parameter, parameter.getNestedGenericParameterType());\n\t\t\t\tif (binderFactory != null) {\n\t\t\t\t\tWebDataBinder binder = binderFactory.createBinder(request, arg, name);\n\t\t\t\t\tif (arg != null) {\n\t\t\t\t\t\tvalidateIfApplicable(binder, parameter);\n\t\t\t\t\t\tif (binder.getBindingResult().hasErrors() && isBindExceptionRequired(binder, parameter)) {\n\t\t\t\t\t\t\tthrow new MethodArgumentNotValidException(parameter, binder.getBindingResult());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (mavContainer != null) {\n\t\t\t\t\t\tmavContainer.addAttribute(BindingResult.MODEL_KEY_PREFIX + name, binder.getBindingResult());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (MissingServletRequestPartException | MultipartException ex) {\n\t\t\t\tif (isRequired) {\n\t\t\t\t\tthrow ex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (arg == null && isRequired) {\n\t\t\tif (!MultipartResolutionDelegate.isMultipartRequest(servletRequest)) {\n\t\t\t\tthrow new MultipartException(\"Current request is not a multipart request\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new MissingServletRequestPartException(name);\n\t\t\t}\n\t\t}\n\t\treturn adaptArgumentIfNecessary(arg, parameter);\n\t}\n```\n\n在文件上传请求发送过来后，所有的文件的文件流都被被直接封装在一个MultiValueMap中，而文件上传解析器的作用则是从这个MultiValueMap中根据字段名拿到对应的MultiPartFile（数组）对象。\n\nMultiPartFile类有很多好用的方法：\n\n```java\npublic interface MultipartFile extends InputStreamSource {\n\t//获取上传文件的参数名\n\tString getName();\n\t//获取上传的文件原来的名字\n\t@Nullable\n\tString getOriginalFilename();\n\t//获取文件类型\n\t@Nullable\n\tString getContentType();\n\t//判断文件是否合法\n\tboolean isEmpty();\n\t//获取文件大小\n\tlong getSize();\n\t//获得字节数组形式的文件\n\tbyte[] getBytes() throws IOException;\n\t//获取文件输入流\n\t@Override\n\tInputStream getInputStream() throws IOException;\n\t//获取资源类型\n\tdefault Resource getResource() {\n\t\treturn new MultipartFileResource(this);\n\t}\n    //保存文件\n\tvoid transferTo(File dest) throws IOException, IllegalStateException;\n\t//保存文件实际就是调用FileCopyUtils进行流拷贝\n\tdefault void transferTo(Path dest) throws IOException, IllegalStateException {\n\t\tFileCopyUtils.copy(getInputStream(), Files.newOutputStream(dest));\n\t}\n\n}\n```\n\n### 错误处理\n\nSpringboot在执行过程中如果出现了异常，会默认转发到/error路由上\n\n如果是机器客户端（如PostMan）则会返回JSON格式id错误信息以及状态码\n\n如果是浏览器客户端则会返回一个错误页\n\n在template目录下创建一个error目录，这个目录下的4xx.html和5xx.html（泛指以4开头和以5开头的状态码对于的页面）,页面会被自动解析，在状态码为对应值时会自动跳转到这个错误页，可以用具体的404.html,500.html来精确定位\n\n也可以根据错误信息使用thymleaf语法设置错误页面的信息\n\n#### 错误处理原理\n\n我们来到配置类：ErrorMvcAutoConfiguration\n\n和异常处理相关的配置都设置在这里\n\n添加了一个错误处理组件：\n\n```java\n\t@Bean\n\t@ConditionalOnMissingBean(value = ErrorAttributes.class, search = SearchStrategy.CURRENT)\n\tpublic DefaultErrorAttributes errorAttributes() {\n\t\treturn new DefaultErrorAttributes();\n\t}\n```\n\n这个组件实现了接口： ErrorAttributes, HandlerExceptionResolver, Ordered\n\n##### BasicErrorController\n\n添加了一个Controller：\n\n```java\n\t@Bean\n\t@ConditionalOnMissingBean(value = ErrorController.class, search = SearchStrategy.CURRENT)\n\tpublic BasicErrorController basicErrorController(ErrorAttributes errorAttributes,\n\t\t\tObjectProvider<ErrorViewResolver> errorViewResolvers) {\n\t\treturn new BasicErrorController(errorAttributes, this.serverProperties.getError(),\n\t\t\t\terrorViewResolvers.orderedStream().collect(Collectors.toList()));\n\t}\n```\n\n这个Controller中：\n\n```java\n@Controller\n@RequestMapping(\"${server.error.path:${error.path:/error}}\")\npublic class BasicErrorController extends AbstractErrorController {\n```\n\n如果我们配置了server.error.path，就用这个路由，如果没有配置再看error.path有没有配置，如果也没有就按照/error路由来进行映射\n\n也就是如果没有配置，这个Controller默认处理/error为前缀的请求\n\n如果内容协商的结果是返回HTML页面：\n\n```java\n\t@RequestMapping(produces = MediaType.TEXT_HTML_VALUE)\n\tpublic ModelAndView errorHtml(HttpServletRequest request, HttpServletResponse response) {\n\t\tHttpStatus status = getStatus(request);\n\t\tMap<String, Object> model = Collections\n\t\t\t\t.unmodifiableMap(getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.TEXT_HTML)));\n\t\tresponse.setStatus(status.value());\n\t\tModelAndView modelAndView = resolveErrorView(request, response, status, model);\n        //如果没有找到404.html文件，也没有找到4xx.html文件，则会返回默认的异常界面\n\t\treturn (modelAndView != null) ? modelAndView : new ModelAndView(\"error\", model);\n\t}\n```\n\n会返回一个new ModelAndView(\"error\", model)\n\n如果协商结果不是HTML则返回一个Entity：\n\n相当于返回了JSON\n\n```java\n\t@RequestMapping\n\tpublic ResponseEntity<Map<String, Object>> error(HttpServletRequest request) {\n\t\tHttpStatus status = getStatus(request);\n\t\tif (status == HttpStatus.NO_CONTENT) {\n\t\t\treturn new ResponseEntity<>(status);\n\t\t}\n\t\tMap<String, Object> body = getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.ALL));\n\t\treturn new ResponseEntity<>(body, status);\n\t}\n```\n\n容器中如果没有名为error的组件，会向容器中加入一个View类型的组件error\n\n```java\n\t\t@Bean(name = \"error\")\n\t\t@ConditionalOnMissingBean(name = \"error\")\n\t\tpublic View defaultErrorView() {\n\t\t\treturn this.defaultErrorView;\n\t\t}\n```\n\n所以如果返回的是HTML页面，返回new ModelAndView(\"error\", model)时，会从Spring容器中拿到error组件作为视图返回\n\n同时会放入视图解析器：\n\n```java\n\t\t@Bean\n\t\t@ConditionalOnMissingBean\n\t\tpublic BeanNameViewResolver beanNameViewResolver() {\n\t\t\tBeanNameViewResolver resolver = new BeanNameViewResolver();\n\t\t\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - 10);\n\t\t\treturn resolver;\n\t\t}\n```\n\n使用视图解析器就可以根据error这个id找到对于的view对象\n\n然后就可以使用前面处理请求的逻辑来处理/error请求，也就是拿到包含由数据和视图的ModelAndView对象后，在处理返回值的流程中，调用view的render方法来渲染视图：\n\n```java\n\t\t@Override\n\t\tpublic void render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response)\n\t\t\t\tthrows Exception {\n\t\t\tif (response.isCommitted()) {\n\t\t\t\tString message = getMessage(model);\n\t\t\t\tlogger.error(message);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresponse.setContentType(TEXT_HTML_UTF8.toString());\n\t\t\tStringBuilder builder = new StringBuilder();\n\t\t\tObject timestamp = model.get(\"timestamp\");\n\t\t\tObject message = model.get(\"message\");\n\t\t\tObject trace = model.get(\"trace\");\n\t\t\tif (response.getContentType() == null) {\n\t\t\t\tresponse.setContentType(getContentType());\n\t\t\t}\n\t\t\tbuilder.append(\"<html><body><h1>Whitelabel Error Page</h1>\").append(\n\t\t\t\t\t\"<p>This application has no explicit mapping for /error, so you are seeing this as a fallback.</p>\")\n\t\t\t\t\t.append(\"<div id='created'>\").append(timestamp).append(\"</div>\")\n\t\t\t\t\t.append(\"<div>There was an unexpected error (type=\").append(htmlEscape(model.get(\"error\")))\n\t\t\t\t\t.append(\", status=\").append(htmlEscape(model.get(\"status\"))).append(\").</div>\");\n\t\t\tif (message != null) {\n\t\t\t\tbuilder.append(\"<div>\").append(htmlEscape(message)).append(\"</div>\");\n\t\t\t}\n\t\t\tif (trace != null) {\n\t\t\t\tbuilder.append(\"<div style='white-space:pre-wrap;'>\").append(htmlEscape(trace)).append(\"</div>\");\n\t\t\t}\n\t\t\tbuilder.append(\"</body></html>\");\n\t\t\tresponse.getWriter().append(builder.toString());\n\t\t}\n```\n\n所以其实就是根据数据拼接成一个HTML格式的字符串返回，也就是我们看到的错误页的来源\n\n##### DefaultErrorViewResolver 异常视图解析器\n\n这个视图用于根据异常名称解析错误页的，解析过程如下：\n\n```java\n\t@Override\n\tpublic ModelAndView resolveErrorView(HttpServletRequest request, HttpStatus status, Map<String, Object> model) {\n        //解析视图\n\t\tModelAndView modelAndView = resolve(String.valueOf(status.value()), model);\n\t\tif (modelAndView == null && SERIES_VIEWS.containsKey(status.series())) {\n\t\t\tmodelAndView = resolve(SERIES_VIEWS.get(status.series()), model);\n\t\t}\n\t\treturn modelAndView;\n\t}\n```\n\n上面会调用resove方法：\n\n```java\n\tprivate ModelAndView resolve(String viewName, Map<String, Object> model) {\n\t\tString errorViewName = \"error/\" + viewName;\n\t\tTemplateAvailabilityProvider provider = this.templateAvailabilityProviders.getProvider(errorViewName,\n\t\t\t\tthis.applicationContext);\n\t\tif (provider != null) {\n\t\t\treturn new ModelAndView(errorViewName, model);\n\t\t}\n\t\treturn resolveResource(errorViewName, model);\n\t}\n\n```\n\nString errorViewName = \"error/\" + viewName 通过这条语句可以看到解析的视图地址是在/error目录下，并且视图名称是viewName\n\n创建ModelAndView对象时，会默认从template目录寻找对于的html文件，而加上/error前缀后，默认的视图页就会从/templates/error目录下面找，而视图名称viewName 从哪里来呢，我们看调用这个方法的语句：\n\n```\nModelAndView modelAndView = resolve(String.valueOf(status.value()), model);\n```\n\n将Http状态码作为viewName穿了进去，并且在寻找视图时会默认加上.html的后缀，所以在出现404的时候会找到404.html页面，依次类推。\n\n而如果没有找到，则会来到下一条语句：\n\n```java\n\tif (modelAndView == null && SERIES_VIEWS.containsKey(status.series())) {\n\t\tmodelAndView = resolve(SERIES_VIEWS.get(status.series()), model);\n\t}\n```\n\n这条语句也是执行resolve方法，只是传入的viewName不一样，而SERIES_VIEWS.get(status.series())，追溯到最后就是\n\n```java\n\t\t@Nullable\n\t\tpublic static Series resolve(int statusCode) {\n\t\t\tint seriesCode = statusCode / 100;\n\t\t\tfor (Series series : values()) {\n\t\t\t\tif (series.value == seriesCode) {\n\t\t\t\t\treturn series;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n```\n\nSeries是个枚举类型，这个枚举类型有以下字段：\n\n```\n\t\tINFORMATIONAL(1),\n\t\tSUCCESSFUL(2),\n\t\tREDIRECTION(3),\n\t\tCLIENT_ERROR(4),\n\t\tSERVER_ERROR(5);\n```\n\n这些字段都是Series类型，对于的value值是括号里的值。\n\n所以这个方法的逻辑就是遍历这里所有的枚举类型，然后根据状态码/100判断是哪个series。也就是将状态码转换成2xx，3xx，4xx，5xx类型的格式，然后在template/error/目录下查找有无对于类型格式的html文件，例如404.html没有找到就会去找4xx.html文件\n\n##### DefaultErrorAttributes\n\n这个类中定义了返回值中需要包含的数据（需要包含在页面中，或者以JSON返回）：\n\n如果就相关信息就添加相关信息，如果没有相关信息就从返回参数中移除\n\n```java\n\t@Override\n\tpublic Map<String, Object> getErrorAttributes(WebRequest webRequest, ErrorAttributeOptions options) {\n\t\tMap<String, Object> errorAttributes = getErrorAttributes(webRequest, options.isIncluded(Include.STACK_TRACE));\n\t\tif (Boolean.TRUE.equals(this.includeException)) {\n\t\t\toptions = options.including(Include.EXCEPTION);\n\t\t}\n        //异常信息\n\t\tif (!options.isIncluded(Include.EXCEPTION)) {\n\t\t\terrorAttributes.remove(\"exception\");\n\t\t}\n        //调用路径\n\t\tif (!options.isIncluded(Include.STACK_TRACE)) {\n\t\t\terrorAttributes.remove(\"trace\");\n\t\t}\n        //相关信息\n\t\tif (!options.isIncluded(Include.MESSAGE) && errorAttributes.get(\"message\") != null) {\n\t\t\terrorAttributes.put(\"message\", \"\");\n\t\t}\n        //错误\n\t\tif (!options.isIncluded(Include.BINDING_ERRORS)) {\n\t\t\terrorAttributes.remove(\"errors\");\n\t\t}\n\t\treturn errorAttributes;\n\t}\n\t@Override\n\t@Deprecated\n\tpublic Map<String, Object> getErrorAttributes(WebRequest webRequest, boolean includeStackTrace) {\n\t\tMap<String, Object> errorAttributes = new LinkedHashMap<>();\n        //时间戳\n\t\terrorAttributes.put(\"timestamp\", new Date());\n\t\taddStatus(errorAttributes, webRequest);\n\t\taddErrorDetails(errorAttributes, webRequest, includeStackTrace);\n\t\taddPath(errorAttributes, webRequest);\n\t\treturn errorAttributes;\n\t}\n\tprivate void addStatus(Map<String, Object> errorAttributes, RequestAttributes requestAttributes) {\n\t\tInteger status = getAttribute(requestAttributes, RequestDispatcher.ERROR_STATUS_CODE);\n\t\tif (status == null) {\n\t\t\terrorAttributes.put(\"status\", 999);\n\t\t\terrorAttributes.put(\"error\", \"None\");\n\t\t\treturn;\n\t\t}\n        //状态码\n\t\terrorAttributes.put(\"status\", status);\n\t\ttry {\n\t\t\terrorAttributes.put(\"error\", HttpStatus.valueOf(status).getReasonPhrase());\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\t// Unable to obtain a reason\n\t\t\terrorAttributes.put(\"error\", \"Http Status \" + status);\n\t\t}\n\t}\n```\n\n总结\n\nBasicErrorController -》用于处理异常请求（/error），如果向定制化在发送错误时的响应则需要修改BasicErrorController 对象\n\nDefaultErrorViewResolver -》用于查找错误页，如果不想根据Spring的规则返回错误页面可以修改这个视图解析器\n\nDefaultErrorAttributes -》用于设置返回的参数，如果觉得返回的数据不够多，可以修改这个类，添加我们需要的参数（然后可以使用thymleaf定制我们想要的页面）\n\n（不过一般情况下用Spring默认的错误处理机制即可）\n\n#### 异常处理流程\n\n我们再回顾以下doDispatch方法\n\n```java\n\tprotected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {\n\t\tHttpServletRequest processedRequest = request;\n\t\tHandlerExecutionChain mappedHandler = null;\n\t\tboolean multipartRequestParsed = false;\n\n\t\tWebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\n\n\t\ttry {\n\t\t\tModelAndView mv = null;\n\t\t\tException dispatchException = null;\n\n\t\t\ttry {\n\t\t\t\tprocessedRequest = checkMultipart(request);\n\t\t\t\tmultipartRequestParsed = (processedRequest != request);\n\n\t\t\t\t// Determine handler for the current request.\n\t\t\t\tmappedHandler = getHandler(processedRequest);\n\t\t\t\tif (mappedHandler == null) {\n\t\t\t\t\tnoHandlerFound(processedRequest, response);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Determine handler adapter for the current request.\n\t\t\t\tHandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());\n\n\t\t\t\t// Process last-modified header, if supported by the handler.\n\t\t\t\tString method = request.getMethod();\n\t\t\t\tboolean isGet = \"GET\".equals(method);\n\t\t\t\tif (isGet || \"HEAD\".equals(method)) {\n\t\t\t\t\tlong lastModified = ha.getLastModified(request, mappedHandler.getHandler());\n\t\t\t\t\tif (new ServletWebRequest(request, response).checkNotModified(lastModified) && isGet) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!mappedHandler.applyPreHandle(processedRequest, response)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Actually invoke the handler.\n\t\t\t\tmv = ha.handle(processedRequest, response, mappedHandler.getHandler());\n\n\t\t\t\tif (asyncManager.isConcurrentHandlingStarted()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tapplyDefaultViewName(processedRequest, mv);\n\t\t\t\tmappedHandler.applyPostHandle(processedRequest, response, mv);\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tdispatchException = ex;\n\t\t\t}\n\t\t\tcatch (Throwable err) {\n\t\t\t\t// As of 4.3, we're processing Errors thrown from handler methods as well,\n\t\t\t\t// making them available for @ExceptionHandler methods and other scenarios.\n\t\t\t\tdispatchException = new NestedServletException(\"Handler dispatch failed\", err);\n\t\t\t}\n\t\t\tprocessDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\ttriggerAfterCompletion(processedRequest, response, mappedHandler, ex);\n\t\t}\n\t\tcatch (Throwable err) {\n\t\t\ttriggerAfterCompletion(processedRequest, response, mappedHandler,\n\t\t\t\t\tnew NestedServletException(\"Handler processing failed\", err));\n\t\t}\n\t\tfinally {\n\t\t\tif (asyncManager.isConcurrentHandlingStarted()) {\n\t\t\t\t// Instead of postHandle and afterCompletion\n\t\t\t\tif (mappedHandler != null) {\n\t\t\t\t\tmappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Clean up any resources used by a multipart request.\n\t\t\t\tif (multipartRequestParsed) {\n\t\t\t\t\tcleanupMultipart(processedRequest);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```\n\n既然是异常处理，所以我们关心try catch语句块即可，我们之前所讲的内容都是在第一层try 块中，所有的请求流程，包括解析url，拦截器，执行具体的方法等等只要出现异常就会跳转到catch语句块中。\n\n所有的Exception和Error都会被记录在dispatchException中\n\n如果是handle方法中出现了异常，会被catch，将当前请求状态设置为结束，然后向外抛出\n\n执行请求以及处理完请求中的异常后会进入视图解析流程：\n\n```\nprocessDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);\n```\n\n```java\n\tprivate void processDispatchResult(HttpServletRequest request, HttpServletResponse response,\n\t\t\t@Nullable HandlerExecutionChain mappedHandler, @Nullable ModelAndView mv,\n\t\t\t@Nullable Exception exception) throws Exception {\n\n\t\tboolean errorView = false;\n\n\t\tif (exception != null) {\n\t\t\tif (exception instanceof ModelAndViewDefiningException) {\n\t\t\t\tlogger.debug(\"ModelAndViewDefiningException encountered\", exception);\n\t\t\t\tmv = ((ModelAndViewDefiningException) exception).getModelAndView();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tObject handler = (mappedHandler != null ? mappedHandler.getHandler() : null);\n\t\t\t\tmv = processHandlerException(request, response, handler, exception);\n\t\t\t\terrorView = (mv != null);\n\t\t\t}\n\t\t}\n\n\t\t// Did the handler return a view to render?\n\t\tif (mv != null && !mv.wasCleared()) {\n\t\t\trender(mv, request, response);\n\t\t\tif (errorView) {\n\t\t\t\tWebUtils.clearErrorRequestAttributes(request);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(\"No view rendering, null ModelAndView returned.\");\n\t\t\t}\n\t\t}\n\n\t\tif (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) {\n\t\t\t// Concurrent handling started during a forward\n\t\t\treturn;\n\t\t}\n\n\t\tif (mappedHandler != null) {\n\t\t\t// Exception (if any) is already handled..\n\t\t\tmappedHandler.triggerAfterCompletion(request, response, null);\n\t\t}\n\t}\n```\n\n其中，如果在之前执行过程中出现了异常则会进入这个代码块，这个代码块中会获取错误页的ModelAndView数据\n\n```java\n\t\tif (exception != null) {\n\t\t\tif (exception instanceof ModelAndViewDefiningException) {\n\t\t\t\tlogger.debug(\"ModelAndViewDefiningException encountered\", exception);\n\t\t\t\tmv = ((ModelAndViewDefiningException) exception).getModelAndView();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tObject handler = (mappedHandler != null ? mappedHandler.getHandler() : null);\n\t\t\t\tmv = processHandlerException(request, response, handler, exception);\n\t\t\t\terrorView = (mv != null);\n\t\t\t}\n\t\t}\n```\n\n如果不是ModelAndViewException则会执行mv = processHandlerException(request, response, handler, exception)\n\n```java\n\t@Nullable\n\tprotected ModelAndView processHandlerException(HttpServletRequest request, HttpServletResponse response,\n\t\t\t@Nullable Object handler, Exception ex) throws Exception {\n\n\t\t// Success and error responses may use different content types\n\t\trequest.removeAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE);\n\n\t\t// Check registered HandlerExceptionResolvers...\n\t\tModelAndView exMv = null;\n\t\tif (this.handlerExceptionResolvers != null) {\n\t\t\tfor (HandlerExceptionResolver resolver : this.handlerExceptionResolvers) {\n\t\t\t\texMv = resolver.resolveException(request, response, handler, ex);\n\t\t\t\tif (exMv != null) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (exMv != null) {\n\t\t\tif (exMv.isEmpty()) {\n\t\t\t\trequest.setAttribute(EXCEPTION_ATTRIBUTE, ex);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t// We might still need view name translation for a plain error model...\n\t\t\tif (!exMv.hasView()) {\n\t\t\t\tString defaultViewName = getDefaultViewName(request);\n\t\t\t\tif (defaultViewName != null) {\n\t\t\t\t\texMv.setViewName(defaultViewName);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(\"Using resolved error view: \" + exMv, ex);\n\t\t\t}\n\t\t\telse if (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Using resolved error view: \" + exMv);\n\t\t\t}\n\t\t\tWebUtils.exposeErrorRequestAttributes(request, ex, getServletName());\n\t\t\treturn exMv;\n\t\t}\n\n\t\tthrow ex;\n\t}\n```\n\n用HandlerExceptionResolver来处理异常，遍历容器中所有的异常解析器，解析拿到ModelAndView后就退出循环。默认情况下没有解析器能处理这个异常，所以会被抛出。\n\n然后就会doDispatch中，触发拦截器的后续的收尾方法后就结束了doDispatch方法，因而这个异常也就没有被处理，而如果异常没有被处理，会**转发一个error请求**（servlet规范规定的逻辑），然后会被自动配置类添加的**BasicErrorController**处理，而这个controller在处理异常的时候，会遍历所有的的ErrorViewResolver，尝试解析并拿到视图View，其中默认只有一个ErrorViewResolver（错误视图解析器）：DefaultErrorViewResolver ，在这个解析器中会根据Http状态码寻找HTML文件并返回。如果都没有找到就返回默认的空白异常界面。\n\n#### 定制化错误处理\n\n##### 在error目录下定值我们想要的404.html或者5xx.html（像这种写法的html文件）\n\nhtml文件中可以使用thymleaf语法使用返回的数据，显示在界面上\n\n##### 全局异常处理\n\n全局范围内的所有异常都可以集中起来一起处理\n\n```java\n@Slf4j\n@ControllerAdvice\npublic class GlobalExceptionHandle {\n\n    @ExceptionHandler(ArithmeticException.class)\n    public String mathExceptionHandle(Exception e){\n        log.error(e.getMessage());\n        return \"error/4xx\";\n    }\n}\n```\n\n@ControllerAdvice申明这是一个处理异常的类，这个注解内部包含@Component注解，会把这个类注册进Spring容器中\n\n@ExceptionHandler(ArithmeticException.class) 申明要捕获的异常，出现了异常后都会跳转到这里来处理\n\n返回类型是String类型，就会也就返回View对象的地址，也可以直接返回ModelAndView对象，这样既返回视图也返回了数据。\n\n如果加上了@ResponseBody则会返回JSON格式或者文本类型的数据\n\n```java\n@Slf4j\n@ControllerAdvice\npublic class GlobalExceptionHandle {\n\n    @ExceptionHandler(ArithmeticException.class)\n    @ResponseBody\n    public String mathExceptionHandle(Exception e){\n        log.error(e.getMessage());\n        return \"error/4xx\";\n    }\n}\n```\n\n返回值规则和普通的Controller一样，只是这个类是专门用于处理异常的\n\n原理如下：\n\n之前我们提到过在执行mv = processHandlerException(request, response, handler, exception)方法时会遍历Spring容器中的异常解析器，Spring容器中的异常解析器有以下三种\n\n![image-20220507004852744](D:\\学习笔记\\picture\\029c7937f23ed1c8dc2a5a81e74565d8.png)\n\n**ExceptionHandlerExceptionResolver**对应@ExceptionHandler(ArithmeticException.class)注解，在Spring启动时，会将括号中的class对象类型和方法建立映射关系并缓存起来。之前因为我们没有编写全局异常处理类，所以这里就没有解析器可以处理，而此时我们添加了对应的方法，并且出现了指定的异常，就可以用这个解析器执行我们设置的处理逻辑来处理这和异常\n\n如果想抛出一个自定义异常，可以使用@ResponseStatus注解来自定义异常\n\n```java\n@NoArgsConstructor\n@ResponseStatus(value = HttpStatus.FORBIDDEN,reason = \"用户太多\")\npublic class ToManyUserException extends RuntimeException {\n    \n}\n```\n\n在这个异常中可以重新设置自己的状态码和错误提示信息，并放到请求域中\n\n使用这个注解后，在processHandlerException解析异常的时候，就可以使用**ResponseStatusExceptionResolver**这个解析器来处理这个异常，不过处理的时候并不会生产ModelAndView对象，而是调用response.sendError()方法向服务器发送一个Error，结束当前请求，然后按照Servlet的规则会转发一个/error请求，然后这个异常最后还是会根据状态码被错误页面处理，例如这里是403会返回4xx.html页面\n\n而对于框架内部产生的异常（每一种状态码都对应一种异常），则是由第三种异常解析器**DefaultHandlerExceptionResolver**来解析异常，这个解析器能解析的异常如下：\n\n```\nException\nHTTP Status Code\nHttpRequestMethodNotSupportedException\n405 (SC_METHOD_NOT_ALLOWED)\nHttpMediaTypeNotSupportedException\n415 (SC_UNSUPPORTED_MEDIA_TYPE)\nHttpMediaTypeNotAcceptableException\n406 (SC_NOT_ACCEPTABLE)\nMissingPathVariableException\n500 (SC_INTERNAL_SERVER_ERROR)\nMissingServletRequestParameterException\n400 (SC_BAD_REQUEST)\nServletRequestBindingException\n400 (SC_BAD_REQUEST)\nConversionNotSupportedException\n500 (SC_INTERNAL_SERVER_ERROR)\nTypeMismatchException\n400 (SC_BAD_REQUEST)\nHttpMessageNotReadableException\n400 (SC_BAD_REQUEST)\nHttpMessageNotWritableException\n500 (SC_INTERNAL_SERVER_ERROR)\nMethodArgumentNotValidException\n400 (SC_BAD_REQUEST)\nMissingServletRequestPartException\n400 (SC_BAD_REQUEST)\nBindException\n400 (SC_BAD_REQUEST)\nNoHandlerFoundException\n404 (SC_NOT_FOUND)\nAsyncRequestTimeoutException\n503 (SC_SERVICE_UNAVAILABLE)\n```\n\n而处理这些异常的方法相同：\n\n都是直接向tomcat发送一个Error，表示结束当前请求，然后tomcat会再发送一个/error请求，然后被处理这个请求的controller捕获进行处理。\n\n```java\n\tprotected ModelAndView handleHttpMessageNotWritable(HttpMessageNotWritableException ex,\n\t\t\tHttpServletRequest request, HttpServletResponse response, @Nullable Object handler) throws IOException {\n\n\t\tsendServerError(ex, request, response);\n\t\treturn new ModelAndView();\n\t}\n```\n\n上述三个解析器都实现了HandlerExceptionResolver接口，我们也可以实现这个接口定义我们想要的异常解析器\n\n```java\n@Component\npublic class CustomerHandlerExceptionResolver implements HandlerExceptionResolver {\n    @Override\n    public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) {\n        try {\n            response.sendError(505,\"我的错误\");\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return new ModelAndView();\n    }\n}\n```\n\n这样在解析错误的时候就会多出一种异常解析器，但是此时我们的异常解析器的优先级最低，Spring自带的解析器生效后就不会再去执行我们自定义的解析器。\n\n如果想要我们设置的异常解析器生效，可以加上@Order注解来设置组件的加载顺序\n\n比如这个注解可以设置最高优先级，其实就是一个INT数的最小值，value值越小，优先级越高，我们也可以直接填入一个数字来合理规划优先级顺序。\n\n```\n@Order(value = Ordered.HIGHEST_PRECEDENCE)\n```\n\n总结：\n\n使用respond.sendError()方法或者出现了异常而Spring容器的异常解析器均无法处理，则Tomcat会转发一个/error请求，然后被basicController捕获，因而basicController可以处理所有的异常。","slug":"Springboot-上篇","published":1,"updated":"2022-11-30T10:53:47.274Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clb3jheng00027swwcr1v5dsf","content":"<h2 id=\"Springboot2基础\"><a href=\"#Springboot2基础\" class=\"headerlink\" title=\"Springboot2基础\"></a>Springboot2基础</h2><p><a href=\"https://blog.csdn.net/u011863024/article/details/113667634\">https://blog.csdn.net/u011863024/article/details/113667634</a></p>\n<h3 id=\"入门案例\"><a href=\"#入门案例\" class=\"headerlink\" title=\"入门案例\"></a>入门案例</h3><p>MAVEN的settings.xml中需要添加如下配置文件：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mirrors</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>nexus-aliyun<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Nexus aliyun<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mirrors</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>jdk-1.8<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">activeByDefault</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">activeByDefault</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">jdk</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">jdk</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">maven.compiler.source</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.source</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">maven.compiler.target</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.target</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>pom依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;-- Spring项目必须导入父依赖 版本是所使用的Springboot的版本--&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.4.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">&lt;-- Spring \tWeb项目导入这个依赖即可--&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>打包部署：使用maven的插件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以直接使用java -jar运行</p>\n<p>可见Springboot相对于SpringMVC的优点：</p>\n<p>简化配置，Springboot所整合的框架都可以在yml或者properties文件中同一配置，并且所有的配置Springboot都设置了默认值，并且通过maven来管理项目，通过简单的几项配置即可完成所需jar包的导入</p>\n<p>简化部署，Springboot内置了Tomcat服务器，可以直接通过main方法启动：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(MainApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>业务部分兼容SpringMVC的所有功能：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">handle01</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello, Spring Boot 2!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>SpringMVC需要打成war包，而Springboot通过MAVEN插件可以直接打成可以运行的jar包</p>\n<h3 id=\"Springboot版本管理\"><a href=\"#Springboot版本管理\" class=\"headerlink\" title=\"Springboot版本管理\"></a>Springboot版本管理</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.4.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>父项目可以用于进行版本管理，Springboot的父项目中帮我们定义了平时常用的jar包中匹配的版本号，从而避免一些版本不匹配的问题</p>\n<p>这个也成为自动版本仲裁机制，如果不想使用Springboot指定的版本，我们可以自己设定版本（例如Mysql），重写里面的版本号（最近优先原则）</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">mysql.version</span>&gt;</span>5.1.43<span class=\"tag\">&lt;/<span class=\"name\">mysql.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>spring-boot-starter-* </code>: *代表某种场景，只要引入这个场景的starter就代表引入了这个场景所有常规的依赖</p>\n<p><code>*-spring-boot-starter-*</code>：第三方提供的starter</p>\n<h3 id=\"Springboot自动配置\"><a href=\"#Springboot自动配置\" class=\"headerlink\" title=\"Springboot自动配置\"></a>Springboot自动配置</h3><p>引入并配置好了Tomcat<br>字符编码拦截器，文件上传解析器，视图解析器等<br>引入配置好了SpringMVC<br>SpringbootApplication.run的返回值就是Spring容器，里面有工作的所有组件</p>\n<h4 id=\"SpringbootApplication\"><a href=\"#SpringbootApplication\" class=\"headerlink\" title=\"@SpringbootApplication\"></a>@SpringbootApplication</h4><p>拥有默认包扫描规则:主程序所在的包，以及它的子包中的类都能被扫描，也可以通过配置<br>@SpringbootApplication(scanBasePackage=”com.demo”)来改变包的扫描路径<br>@SpringbootApplication等于以下三个注解(三合一注解):<br>@SpringBootConfiguration<br>@EnableAutoConfiguration<br>@ComponentScan(“com.demo”)</p>\n<p>可以用这三个注解代替@SpringbootApplication</p>\n<p>properties中配置的属性最后都会映射到一个配置类上，这个类会在容器中创建对象<br>Springboot的所有配置功能都在spring-boot-starter-autoconfigure配置中设置<br>自动配置功能是按需加载的，引入了对应的场景后，对应的场景的自动配置才会生效</p>\n<h3 id=\"Configuration和-Bean向添加Spring容器添加组件\"><a href=\"#Configuration和-Bean向添加Spring容器添加组件\" class=\"headerlink\" title=\"@Configuration和@Bean向添加Spring容器添加组件\"></a>@Configuration和@Bean向添加Spring容器添加组件</h3><p>@Configuration会将这个类申明为Springboot的一个配置类</p>\n<p>在配置类中可以通过@Bean注解添加bean</p>\n<p>添加的bean的名称就是我们的方法名，添加的bean就是方法的返回值，也可以通过@Bean(“cat”)在括号中设置bean的名称</p>\n<p>Springboot.run的返回值就是Spring容器，我们可以在里面拿到容器中注册的所有bean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo2Application</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ConfigurableApplicationContext</span> <span class=\"variable\">run</span> <span class=\"operator\">=</span> SpringApplication.run(Demo2Application.class, args);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String name : run.getBeanDefinitionNames()) &#123;</span><br><span class=\"line\">            System.out.println(name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果出现了组件依赖的情况，可以直接调用其他注册组件的方法来设置bean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    Mypage <span class=\"title function_\">page</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Mypage</span> <span class=\"variable\">mypage</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Mypage</span>();</span><br><span class=\"line\">        mypage.setUser(user01());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mypage;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    User <span class=\"title function_\">user01</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;132&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>设置的bean可以在Spring容器中拿到，并且调用生成bean的方法拿到的bean和在Spring容器中拿到的bean是一样的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan(&quot;com.example.demo.mapper&quot;)</span><span class=\"comment\">//检测mapper的包</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan(&quot;com.example.demo.dao&quot;)</span><span class=\"comment\">//检测mapper的包</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo2Application</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ConfigurableApplicationContext</span> <span class=\"variable\">run</span> <span class=\"operator\">=</span> SpringApplication.run(Demo2Application.class, args);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String name : run.getBeanDefinitionNames()) &#123;</span><br><span class=\"line\">            System.out.println(name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user01</span> <span class=\"operator\">=</span> run.getBean(<span class=\"string\">&quot;user01&quot;</span>, User.class);</span><br><span class=\"line\">        Mypage mypage=run.getBean(Mypage.class);</span><br><span class=\"line\">        System.out.println(user01==mypage.getUser());<span class=\"comment\">//返回true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>包括带有@Configuration的类也是Spring容器中组件的一个，也可以拿到这个bean，调用里面生成bean的方法拿到的bean仍然是唯一的，并不会生成一个新的bean：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan(&quot;com.example.demo.mapper&quot;)</span><span class=\"comment\">//检测mapper的包</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan(&quot;com.example.demo.dao&quot;)</span><span class=\"comment\">//检测mapper的包</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo2Application</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ConfigurableApplicationContext</span> <span class=\"variable\">run</span> <span class=\"operator\">=</span> SpringApplication.run(Demo2Application.class, args);</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user01</span> <span class=\"operator\">=</span> run.getBean(<span class=\"string\">&quot;user01&quot;</span>, User.class);</span><br><span class=\"line\">        Mypage mypage=run.getBean(Mypage.class);</span><br><span class=\"line\">        <span class=\"type\">MyConfig</span> <span class=\"variable\">config</span> <span class=\"operator\">=</span> run.getBean(MyConfig.class);</span><br><span class=\"line\">        System.out.println(config.user01()==user01);<span class=\"comment\">//true</span></span><br><span class=\"line\">        System.out.println(config.user01()== mypage.getUser());<span class=\"comment\">//true</span></span><br><span class=\"line\">        System.out.println(user01==mypage.getUser());<span class=\"comment\">//true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是因为我们拿到的MyConfig其实是通过CGLIB代理过的对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.example.demo.config.MyConfig$$EnhancerBySpringCGLIB$$a35275ef@6bf54260</span><br></pre></td></tr></table></figure>\n\n<p>这个对象调用组件注册方法前，会先判断这个组件是否出现在Spring容器中，如果出现在了Spring容器中则返回Spring容器中的对象，否则才会new一个对象。</p>\n<h4 id=\"Configuration-proxyBeanMethods-false\"><a href=\"#Configuration-proxyBeanMethods-false\" class=\"headerlink\" title=\"@Configuration(proxyBeanMethods = false)\"></a>@Configuration(proxyBeanMethods = false)</h4><p>proxyBeanMethods 默认为true，当这个属性值为true时Spring会帮我们生成上述的代理对象来保证Spring容器中对象的唯一性，用于设置组件之间的依赖关系（如果设置为false则不能在bean中注入其他属性），来容器外多次调用生成组件的方法返回的都是同一个对象。</p>\n<p>如果设置为false，则不会生成代理对象，Spring容器可以更快的启动，但此时不能设置组件的依赖关系，外部调用生成组件的方法会生成多个对象。</p>\n<p>扫描范围内的@Controller之类的注解的用法和SpringMVC相同</p>\n<h4 id=\"Import\"><a href=\"#Import\" class=\"headerlink\" title=\"@Import\"></a>@Import</h4><p>@Import 导入组件参数是class数组<br>容器中会自动创建一个这个类型的bean，默认名称是这个类的全限定名</p>\n<h4 id=\"Condition-满足某些条件时做某些事情-条件装配\"><a href=\"#Condition-满足某些条件时做某些事情-条件装配\" class=\"headerlink\" title=\"@Condition 满足某些条件时做某些事情(条件装配)\"></a>@Condition 满足某些条件时做某些事情(条件装配)</h4><p>@ConditionalOnBean 容器中有这个bean的时候才在容器启动时执行这个方法，可以通过name和type来指定。可以标注在方法上，也可以标注在类上，表示这个类的方法都需要满足这个条件。<br>@ConditionalOnMissingBean 没有这个bean的时候执行这个方法<br>还有其他的条件装配，这里只列举其中几个<br>@ImportResource(“文件路径”) 这个注解可以加载xml配置文件，往Spring容器中添加组件</p>\n<h4 id=\"配置绑定\"><a href=\"#配置绑定\" class=\"headerlink\" title=\"配置绑定\"></a>配置绑定</h4><p>原生java 使用Properties类的load方法加载配置文件，然后遍历<br>Spring方式<br>需要放在容器中才能使用Spring的功能，即必须加上@Component<br>@ConfigurationProperties(prefix=”xxx”) 将前缀为这个的配置文件和类中对应名称的属性值进行绑定，然后就可以通过这个类的对象拿到配置文件中的属性值<br>@EnableConfigurationProperties(xxx.class)将这个注解加在配置类上 开启属性配置功能，用这个注解代替@Component注解(对于一些我们无法修改的第三方的包可以用这种方式来绑定组件)将我们，@ConfigurationProperties也要加在需要绑定的类上，上面这个注解只是帮我们将其注册到容器中并开启指定类的配置绑定功能</p>\n<h4 id=\"自动配置原理\"><a href=\"#自动配置原理\" class=\"headerlink\" title=\"自动配置原理\"></a>自动配置原理</h4><p>三合一注解：@SpringbootApplication</p>\n<p>@SpringbootConfiguration 声明启动类是Spring容器的主配置类，功能和@Configuration一致<br>@ComponentScan 指定包扫描路径<br>@EnableAutoConfiguration 开启自动配置这个注解是以下两个注解的合成:<br>@ConfigurationPackage（指定默认包规则）<br>自动配置包，里面有@Import注解，用于引入包扫描器，将主类所在的包下面的组件进行批量注册(main方法所在的包)<br>@Import(AutoConfigurationImportSelector.class)<br>Springboot会在容器启动时，加载一些必须加载的组件，这些组件被写在各个jar包的META-INFO下的Spring.Factories中，其中有一个名为autoconfigure的jar包里面的这个目录下有这个配置文件，而这个注解就是用于加载这些配置文件(所有场景的jar包)的，这些配置会被全部加载进来，但最后会按需配置(条件装配)</p>\n<p>按需加载功能通过使用注解来生效：</p>\n<p>@ConditionalOnClass(xxx.class)：如果类路径中有这个类就生效（编译时会编译失败，但是我们引入的jar是已经编译好的class文件）</p>\n<p>@ConditionalOnMissingBean(value = xxx.class ， name=”yyyy”)：如果容器中有这个bean才会生效</p>\n<p><img src=\"D:\\学习笔记\\picture\\123123123.png\" alt=\"image-20220428183847161\"></p>\n<p>如果这些注解加载类上，必须上面的条件都满足，才会在Spring容器的启动的时候加载这个类里面的方法向容器中添加组件，如果加在方法上，表示满足这些条件后，组件注册方法才会生效（执行）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\"><span class=\"meta\">@Conditional(DefaultDispatcherServletCondition.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(ServletRegistration.class)</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(&#123; HttpProperties.class, WebMvcProperties.class &#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DispatcherServletConfiguration</span> &#123;</span><br></pre></td></tr></table></figure>\n\n<p>@ConditionalWebApplication(type = Type.SERVLET) 判断当前的应用类型（是基于Servlet还是基于Reator）</p>\n<p>@AutoConfigurationOrder() 设置配置的优先级，这里这个配置类的优先级设置为高</p>\n<p>@Configuration(proxyBeanMethods = false) 前面说过，声明为组件，并使用轻量级配置</p>\n<p>@AutoConfigureAfter(ServletWebServerFactoryAutoConfiguration.class) 声明这个类要在ServletWebServerFactoryAutoConfiguration这个类之后配置</p>\n<p>上述添加都满足后，我们再看类中注册bean的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean(name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> DispatcherServlet <span class=\"title function_\">dispatcherServlet</span><span class=\"params\">(HttpProperties httpProperties, WebMvcProperties webMvcProperties)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">DispatcherServlet</span> <span class=\"variable\">dispatcherServlet</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DispatcherServlet</span>();</span><br><span class=\"line\">\tdispatcherServlet.setDispatchOptionsRequest(webMvcProperties.isDispatchOptionsRequest());</span><br><span class=\"line\">\tdispatcherServlet.setDispatchTraceRequest(webMvcProperties.isDispatchTraceRequest());</span><br><span class=\"line\">\tdispatcherServlet.setThrowExceptionIfNoHandlerFound(webMvcProperties.isThrowExceptionIfNoHandlerFound());</span><br><span class=\"line\">\tdispatcherServlet.setPublishEvents(webMvcProperties.isPublishRequestHandledEvents());</span><br><span class=\"line\">\tdispatcherServlet.setEnableLoggingRequestDetails(httpProperties.isLogRequestDetails());</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dispatcherServlet;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>@Bean注解下的方法，如果传入了对象参数，Springboot会自动在Spring容器中找到这个对象并作为参数传入</p>\n<p>SpringMVC中我们需要向Spring容器中注入DispatcherServlet类型的对象才能使用SpringMVC的Web功能，而Springboot帮我们在Spring容器中添加了这个对象，因而不需要我们手动去设置。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnBean(MultipartResolver.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> MultipartResolver <span class=\"title function_\">multipartResolver</span><span class=\"params\">(MultipartResolver resolver)</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Detect if the user has created a MultipartResolver but named it incorrectly</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> resolver;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法负责注入处理文件上传的文件解析器，</p>\n<p>@ConditionalOnBean(MultipartResolver.class) ：Spring容器中有MultipartResolver这个类的对象</p>\n<p>@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)：但是名字不是我们想要的名字</p>\n<p>于是我们就执行这个方法，添加一个名字也是我们的想要的bean，@Bean注解添加的bean的名称就是我们的方法名，这样就保证了组件名字的一致性</p>\n<p>再举一个例子：用来处理Http请求的编码类，防止出现中文乱码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(HttpProperties.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(CharacterEncodingFilter.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(prefix = &quot;spring.http.encoding&quot;, value = &quot;enabled&quot;, matchIfMissing = true)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HttpEncodingAutoConfiguration</span> &#123;</span><br></pre></td></tr></table></figure>\n\n<p>注解含义和之前都是类似的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CharacterEncodingFilter <span class=\"title function_\">characterEncodingFilter</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">CharacterEncodingFilter</span> <span class=\"variable\">filter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OrderedCharacterEncodingFilter</span>();</span><br><span class=\"line\">\tfilter.setEncoding(<span class=\"built_in\">this</span>.properties.getCharset().name());</span><br><span class=\"line\">\tfilter.setForceRequestEncoding(<span class=\"built_in\">this</span>.properties.shouldForce(Type.REQUEST));</span><br><span class=\"line\">\tfilter.setForceResponseEncoding(<span class=\"built_in\">this</span>.properties.shouldForce(Type.RESPONSE));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> filter;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>@ConditionalOnMissingBean 如果没有CharacterEncodingFilter类型的bean，就执行下面这个方法，向容器中添加这个类型的bean</p>\n<p>通过使用注解@ConditionalOnMissingBean，Spring会向容器中添加所有我们需要的组件，但如果用户自己配置了组件，则以用户配置的组件优先</p>\n<h4 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h4><p><img src=\"D:\\学习笔记\\picture\\image-20220429002822205-1669804541526-41.png\" alt=\"image-20220429002822205\"></p>\n<p>Spring容器会加载指定路径下所有的自动配置类，然后这些配置类会根据@Condition系列注解配置的条件判断是否生效，每个自动配置类在注册组件时，属性值需要从xxxProperties类中拿，xxxProperties中是属性值会有默认值，同时也和我们设置的配置文件绑定在一起。所以我们向修改组件可以通过修改配置文件来做到。容器有有了对应的组件也就有了对应的功能。注册组件前会先判断用户是否注册了对应类型的组件，如果注册了就以用户的优先，所以我们可以通过在配置类中使用@Bean注解来定制化我们自己想要的组件。</p>\n<p>debug=true：开启自动配置报告</p>\n<p>更多配置信息可以查阅官方文档：<a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties\">https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties</a></p>\n<p>spring.banner.image.location=xxx.jpg 指定spring加载的图标，默认路径是classpath下的banner.jpg</p>\n<p>xxxxCustomize 自定义组件</p>\n<h3 id=\"开发小技巧\"><a href=\"#开发小技巧\" class=\"headerlink\" title=\"开发小技巧\"></a>开发小技巧</h3><h4 id=\"Lombok\"><a href=\"#Lombok\" class=\"headerlink\" title=\"Lombok\"></a>Lombok</h4><p>引入依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.18.22<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>还需要下载Lombok插件</p>\n<p>@Data ：设置set get方法，设置toString，hashcode，equals方法</p>\n<p>@AllArgsConstructor 全参数构造器</p>\n<p>@NoArgsConstructor 无参数构造器</p>\n<p>@Slf4j 自动添加一个log对象，用于打印日志</p>\n<h4 id=\"detTools\"><a href=\"#detTools\" class=\"headerlink\" title=\"detTools\"></a>detTools</h4><p>引入依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-devtools<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>调试时，代码的即使更新</p>\n<p>修改静态文件时，重新编译即可</p>\n<h4 id=\"Spring-Initailzer\"><a href=\"#Spring-Initailzer\" class=\"headerlink\" title=\"Spring Initailzer\"></a>Spring Initailzer</h4><p>帮我们创建全局的包结构和自动引入各种常用依赖，甚至还帮我们创建了.gitignore之类的文件</p>\n<h2 id=\"Springboot核心功能（2-2-4）\"><a href=\"#Springboot核心功能（2-2-4）\" class=\"headerlink\" title=\"Springboot核心功能（2.2.4）\"></a>Springboot核心功能（2.2.4）</h2><h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><h4 id=\"Yaml语法\"><a href=\"#Yaml语法\" class=\"headerlink\" title=\"Yaml语法\"></a>Yaml语法</h4><p>properties的优先级高于yml</p>\n<ul>\n<li>key: value；kv之间有空格</li>\n<li>大小写敏感</li>\n<li>使用缩进表示层级关系</li>\n<li>缩进不允许使用tab，只允许空格</li>\n<li>缩进的空格数不重要，只要相同层级的元素左对齐即可</li>\n<li>‘#’表示注释</li>\n<li>字符串无需加引号，如果要加，单引号’’、双引号””表示字符串内容会被 转义、不转义</li>\n</ul>\n<p>kv表示：k: v</p>\n<p>注意要有空格</p>\n<p>数组可以用y: [xx,xxx]来表示</p>\n<p>也可以用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">y: </span><br><span class=\"line\">  - xx</span><br><span class=\"line\">  - xxx</span><br></pre></td></tr></table></figure>\n\n<p><code>-</code>代表集合中的一个元素</p>\n<p>可以用一个类和配置文件来绑定</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.demo.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String userName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean boss;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date birth;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Pet pet;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String[] interests;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; animal;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, Object&gt; score;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Set&lt;Double&gt; salarys;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, List&lt;Pet&gt;&gt; allPets;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Pet</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Double weight;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在yml配置对应的属性：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">person:</span></span><br><span class=\"line\">  <span class=\"attr\">userName:</span> <span class=\"string\">zhangsan</span></span><br><span class=\"line\">  <span class=\"attr\">boss:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">birth:</span> <span class=\"number\">2019</span><span class=\"string\">/12/12</span> <span class=\"number\">20</span><span class=\"string\">:12:33</span></span><br><span class=\"line\">  <span class=\"attr\">age:</span> <span class=\"number\">18</span></span><br><span class=\"line\">  <span class=\"attr\">pet:</span> </span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">tomcat</span></span><br><span class=\"line\">    <span class=\"attr\">weight:</span> <span class=\"number\">23.4</span></span><br><span class=\"line\">  <span class=\"attr\">interests:</span> [<span class=\"string\">篮球</span>,<span class=\"string\">游泳</span>]</span><br><span class=\"line\">  <span class=\"attr\">animal:</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">jerry</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">mario</span></span><br><span class=\"line\">  <span class=\"attr\">score:</span></span><br><span class=\"line\">    <span class=\"attr\">english:</span> </span><br><span class=\"line\">      <span class=\"attr\">first:</span> <span class=\"number\">30</span></span><br><span class=\"line\">      <span class=\"attr\">second:</span> <span class=\"number\">40</span></span><br><span class=\"line\">      <span class=\"attr\">third:</span> <span class=\"number\">50</span></span><br><span class=\"line\">    <span class=\"attr\">math:</span> [<span class=\"number\">131</span>,<span class=\"number\">140</span>,<span class=\"number\">148</span>]</span><br><span class=\"line\">    <span class=\"attr\">chinese:</span> &#123;<span class=\"attr\">first:</span> <span class=\"number\">128</span>,<span class=\"attr\">second:</span> <span class=\"number\">136</span>&#125;</span><br><span class=\"line\">  <span class=\"attr\">salarys:</span> [<span class=\"number\">3999</span>,<span class=\"number\">4999.98</span>,<span class=\"number\">5999.99</span>]</span><br><span class=\"line\">  <span class=\"attr\">allPets:</span></span><br><span class=\"line\">    <span class=\"attr\">sick:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> &#123;<span class=\"attr\">name:</span> <span class=\"string\">tom</span>&#125;</span><br><span class=\"line\">      <span class=\"bullet\">-</span> &#123;<span class=\"attr\">name:</span> <span class=\"string\">jerry</span>,<span class=\"attr\">weight:</span> <span class=\"number\">47</span>&#125;</span><br><span class=\"line\">    <span class=\"attr\">health:</span> [&#123;<span class=\"attr\">name:</span> <span class=\"string\">mario</span>,<span class=\"attr\">weight:</span> <span class=\"number\">47</span>&#125;]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写配置文件时，添加提示\"><a href=\"#编写配置文件时，添加提示\" class=\"headerlink\" title=\"编写配置文件时，添加提示\"></a>编写配置文件时，添加提示</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 下面插件作用是工程打包时，不将spring-boot-configuration-processor打进包内，让其只在编码的时候有用 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>大写字母等价于小写字母前加上- 也就是：N 和-n的意义相同</p>\n<h3 id=\"Web开发\"><a href=\"#Web开发\" class=\"headerlink\" title=\"Web开发\"></a>Web开发</h3><p>Springboot框架是框架的框架</p>\n<h4 id=\"静态资源\"><a href=\"#静态资源\" class=\"headerlink\" title=\"静态资源\"></a>静态资源</h4><p>Springboot默认的静态资源目录是在resources目录下的：</p>\n<p>/static</p>\n<p>/public</p>\n<p>/resources</p>\n<p>/META-INF/resources</p>\n<p>这些目录静态资源都可以直接访问</p>\n<p>例如：<a href=\"http://localhost:8080/123.png\">http://localhost:8080/123.png</a></p>\n<p>如果是他们在他们的子目录下，则需要加上子目录的包名</p>\n<h5 id=\"请求顺序\"><a href=\"#请求顺序\" class=\"headerlink\" title=\"请求顺序\"></a>请求顺序</h5><p>在请求进来时，先判断Controller能不能处理，如果不能处理再交给静态资源处理器来处理，否则返回404</p>\n<h5 id=\"配置静态资源的访问前缀\"><a href=\"#配置静态资源的访问前缀\" class=\"headerlink\" title=\"配置静态资源的访问前缀\"></a>配置静态资源的访问前缀</h5><p>访问静态资源默认是没有前缀的，但是实际上我们需要加上前缀来对资源进行一些个性化的拦截（登录拦截动态资源，而为静态资源放行）</p>\n<p>设置静态资源前缀：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">mvc:</span></span><br><span class=\"line\">    <span class=\"attr\">static-path-pattern:</span> <span class=\"string\">/res/**</span></span><br></pre></td></tr></table></figure>\n\n<p>表示和这个正则表达式匹配的可以由静态资源处理器来处理</p>\n<h5 id=\"设置静态资源的目录\"><a href=\"#设置静态资源的目录\" class=\"headerlink\" title=\"设置静态资源的目录\"></a>设置静态资源的目录</h5><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">static-locations:</span> [<span class=\"string\">classpath:/static/</span>,<span class=\"string\">classpath:/static/img/</span>]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"D:\\学习笔记\\picture\\image-20220429142943211-1669804541526-50.png\" alt=\"image-20220429142943211\"></p>\n<p>底层是一个String数组，所以我们采用数组（列表）的写法</p>\n<p>webjars：用于编写web应用的jar包（例如JQuery）</p>\n<p>在pom引入后，可以在webjars/目录下访问</p>\n<h5 id=\"欢迎页\"><a href=\"#欢迎页\" class=\"headerlink\" title=\"欢迎页\"></a>欢迎页</h5><p>如果静态目录下有index.html页面，访问<code>http://localhost:8080/</code>也就是项目路径时，会默认显示index.html页面</p>\n<p>但是如果配置了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  mvc:</span><br><span class=\"line\">    static-path-pattern: /res/**</span><br></pre></td></tr></table></figure>\n\n<p>会让欢迎页功能失效，也会让图标功能失效</p>\n<h5 id=\"图标功能\"><a href=\"#图标功能\" class=\"headerlink\" title=\"图标功能\"></a>图标功能</h5><p>在静态目录下添加favicon.ico作为所有页面的图标，然后用ctrl+F5强制刷新并清空缓存可以看到效果</p>\n<h5 id=\"静态资源访问底层原理\"><a href=\"#静态资源访问底层原理\" class=\"headerlink\" title=\"静态资源访问底层原理\"></a>静态资源访问底层原理</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addResourceHandlers</span><span class=\"params\">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!<span class=\"built_in\">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class=\"line\">\t\tlogger.debug(<span class=\"string\">&quot;Default resource handling disabled&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">Duration</span> <span class=\"variable\">cachePeriod</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class=\"line\">\t<span class=\"type\">CacheControl</span> <span class=\"variable\">cacheControl</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!registry.hasMappingForPattern(<span class=\"string\">&quot;/webjars/**&quot;</span>)) &#123;</span><br><span class=\"line\">\t\tcustomizeResourceHandlerRegistration(registry.addResourceHandler(<span class=\"string\">&quot;/webjars/**&quot;</span>)</span><br><span class=\"line\">\t\t\t\t.addResourceLocations(<span class=\"string\">&quot;classpath:/META-INF/resources/webjars/&quot;</span>)</span><br><span class=\"line\">\t\t\t\t.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">staticPathPattern</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class=\"line\">\t\tcustomizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)</span><br><span class=\"line\">\t\t\t\t.addResourceLocations(getResourceLocations(<span class=\"built_in\">this</span>.resourceProperties.getStaticLocations()))</span><br><span class=\"line\">\t\t\t\t.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>resourceProperties.isAddMappings() </code>对应配置：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">add-mappings:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<p>从源码可知，如果配置成了false，后面的逻辑都不会执行，也就禁用了静态资源的访问功能（默认是true）</p>\n<p><code>Duration cachePeriod = this.resourceProperties.getCache().getPeriod();</code></p>\n<p>这条语句用于获取配置：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">cache:</span></span><br><span class=\"line\">      <span class=\"attr\">period:</span> <span class=\"number\">11000</span></span><br></pre></td></tr></table></figure>\n\n<p>也就是设置静态资源的缓存时间，在这段时间内不用再重新加载静态资源，可以直接从浏览器缓存中获取，单位是秒</p>\n<p>通过缓存拿到的资源状态码会显示304</p>\n<p>webjars访问规则：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!registry.hasMappingForPattern(<span class=\"string\">&quot;/webjars/**&quot;</span>)) &#123;</span><br><span class=\"line\">\tcustomizeResourceHandlerRegistration(registry.addResourceHandler(<span class=\"string\">&quot;/webjars/**&quot;</span>)</span><br><span class=\"line\">\t\t\t.addResourceLocations(<span class=\"string\">&quot;classpath:/META-INF/resources/webjars/&quot;</span>)</span><br><span class=\"line\">\t\t\t.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果在Controller中没有设置<code>/webjars/**</code>的路由，就在访问带有webjars的前缀时，访问classpath:/META-INF/resources/webjars/这个目录下的资源，同时设置缓存时间和缓存控制</p>\n<h5 id=\"静态资源访问规则：\"><a href=\"#静态资源访问规则：\" class=\"headerlink\" title=\"静态资源访问规则：\"></a>静态资源访问规则：</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">staticPathPattern</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class=\"line\">\tcustomizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)</span><br><span class=\"line\">\t\t\t.addResourceLocations(getResourceLocations(<span class=\"built_in\">this</span>.resourceProperties.getStaticLocations()))</span><br><span class=\"line\">\t\t\t.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果在Controller中没有设置staticPathPattern的url访问规则，则在访问staticPathPattern规则下的资源时，访问this.resourceProperties.getStaticLocations()路径下对应静态资源，同时设置缓存时间。</p>\n<p>staticPathPattern：</p>\n<p><img src=\"D:\\学习笔记\\picture\\image-20220429154312189-1669804541526-51.png\" alt=\"image-20220429154312189\"></p>\n<p>这就解释了为什么静态资源访问的url是/ 而没有前缀</p>\n<p>staticLocations：</p>\n<p><img src=\"D:\\学习笔记\\picture\\image-20220429154625565-1669804541526-52.png\" alt=\"image-20220429154625565\"></p>\n<p>这就也就静态资源默认路径的由来，如果我们进行了配置，staticLocations就会被更新为配置文件中的值。</p>\n<p>关于欢迎页：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WelcomePageHandlerMapping(TemplateAvailabilityProviders templateAvailabilityProviders,</span><br><span class=\"line\">\t\t\tApplicationContext applicationContext, Optional&lt;Resource&gt; welcomePage, String staticPathPattern) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (welcomePage.isPresent() &amp;&amp; <span class=\"string\">&quot;/**&quot;</span>.equals(staticPathPattern)) &#123;</span><br><span class=\"line\">\t\t\tlogger.info(<span class=\"string\">&quot;Adding welcome page: &quot;</span> + welcomePage.get());</span><br><span class=\"line\">\t\t\tsetRootViewName(<span class=\"string\">&quot;forward:index.html&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (welcomeTemplateExists(templateAvailabilityProviders, applicationContext)) &#123;</span><br><span class=\"line\">\t\t\tlogger.info(<span class=\"string\">&quot;Adding welcome page template: index&quot;</span>);</span><br><span class=\"line\">\t\t\tsetRootViewName(<span class=\"string\">&quot;index&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>&quot;/**&quot;.equals(staticPathPattern)</code>我们可以看到，只有在静态路径没有被配置时，欢迎页才会生效</p>\n<h3 id=\"Restful风格开发\"><a href=\"#Restful风格开发\" class=\"headerlink\" title=\"Restful风格开发\"></a>Restful风格开发</h3><p>对于原生的HTML中的form元素没有PUT和DELETE方法，可以使用post方法模拟这两个请求（如果用一些能直接发这两种请求的工具则不需要以下流程，因为在HTTP层就已经是PUT和DELETE了，所以这一项是选择性开启）</p>\n<p>WebMvcAutoConfiguration类中有这样的一段配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(prefix = &quot;spring.mvc.hiddenmethod.filter&quot;, name = &quot;enabled&quot;, matchIfMissing = false)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> OrderedHiddenHttpMethodFilter <span class=\"title function_\">hiddenHttpMethodFilter</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OrderedHiddenHttpMethodFilter</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意到@ConditionalOnProperty(prefix = “spring.mvc.hiddenmethod.filter”, name = “enabled”, matchIfMissing = false)，需要我们在配置文件中，将spring.mvc.hiddenmethod.filter 设置为enabled 才可以：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">mvc:</span></span><br><span class=\"line\">    <span class=\"attr\">hiddenmethod:</span></span><br><span class=\"line\">      <span class=\"attr\">filter:</span></span><br><span class=\"line\">        <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>前端需要添加隐藏参数_method，才能使用PUT方法和DELETE方法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/user&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;get&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;REST-GET提交&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/user&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;REST-POST提交&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/user&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;_method&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;DELETE&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;REST-DELETE 提交&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/user&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;_method&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;PUT&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;REST-PUT提交&quot;</span><span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Rest原理（表单提交要使用REST的时候）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doFilterInternal</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">HttpServletRequest</span> <span class=\"variable\">requestToUse</span> <span class=\"operator\">=</span> request;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"string\">&quot;POST&quot;</span>.equals(request.getMethod()) &amp;&amp; request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">paramValue</span> <span class=\"operator\">=</span> request.getParameter(<span class=\"built_in\">this</span>.methodParam);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (StringUtils.hasLength(paramValue)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">String</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> paramValue.toUpperCase(Locale.ENGLISH);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (ALLOWED_METHODS.contains(method)) &#123;</span><br><span class=\"line\">\t\t\t\trequestToUse = <span class=\"keyword\">new</span> <span class=\"title class_\">HttpMethodRequestWrapper</span>(request, method);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfilterChain.doFilter(requestToUse, response);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在执行拦截器前，会先获取到我们_method字段的参数，然后根据这个字段重新设置我们的请求方法，然后生成一个HttpServletRequest的包装类（这个类也实现了HttpServletRequest接口），然后将原来的request和新设置的方法传进去，从而完成方法的替换，然后再去执行接下来的逻辑。</p>\n<p>使用@GetMapping(“/“) @PostMapping(“/“) 等更方便</p>\n<h3 id=\"请求映射原理\"><a href=\"#请求映射原理\" class=\"headerlink\" title=\"请求映射原理\"></a>请求映射原理</h3><p>DispatcherServlet实现了HttpServlet接口，所以本质上就是一个Servlet，而Servlet的功能就是接收从服务器发送来的请求，并予以返回值的框架。</p>\n<p>DispatcherServlet里面实现了doGet，doPost等方法，这些方法都会调用processRequest方法，在这个方法中调用doService方法，在doService方法再调用doDispatch方法，而处理请求的核心代码就在这个方法中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doDispatch</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t<span class=\"type\">HttpServletRequest</span> <span class=\"variable\">processedRequest</span> <span class=\"operator\">=</span> request;</span><br><span class=\"line\">\t<span class=\"type\">HandlerExecutionChain</span> <span class=\"variable\">mappedHandler</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"variable\">multipartRequestParsed</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">WebAsyncManager</span> <span class=\"variable\">asyncManager</span> <span class=\"operator\">=</span> WebAsyncUtils.getAsyncManager(request);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">ModelAndView</span> <span class=\"variable\">mv</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">Exception</span> <span class=\"variable\">dispatchException</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">               <span class=\"comment\">//判断是不是文件上传请求</span></span><br><span class=\"line\">\t\t\tprocessedRequest = checkMultipart(request);</span><br><span class=\"line\">\t\t\tmultipartRequestParsed = (processedRequest != request);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Determine handler for the current request.</span></span><br><span class=\"line\">\t\t\tmappedHandler = getHandler(processedRequest);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (mappedHandler == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tnoHandlerFound(processedRequest, response);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Determine handler adapter for the current request.</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">HandlerAdapter</span> <span class=\"variable\">ha</span> <span class=\"operator\">=</span> getHandlerAdapter(mappedHandler.getHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Process last-modified header, if supported by the handler.</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">String</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> request.getMethod();</span><br><span class=\"line\">\t\t\t<span class=\"type\">boolean</span> <span class=\"variable\">isGet</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;GET&quot;</span>.equals(method);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isGet || <span class=\"string\">&quot;HEAD&quot;</span>.equals(method)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">long</span> <span class=\"variable\">lastModified</span> <span class=\"operator\">=</span> ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">new</span> <span class=\"title class_\">ServletWebRequest</span>(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Actually invoke the handler.</span></span><br><span class=\"line\">\t\t\tmv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tapplyDefaultViewName(processedRequest, mv);</span><br><span class=\"line\">\t\t\tmappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">\t\t\tdispatchException = ex;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (Throwable err) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// making them available for @ExceptionHandler methods and other scenarios.</span></span><br><span class=\"line\">\t\t\tdispatchException = <span class=\"keyword\">new</span> <span class=\"title class_\">NestedServletException</span>(<span class=\"string\">&quot;Handler dispatch failed&quot;</span>, err);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tprocessDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">\t\ttriggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Throwable err) &#123;</span><br><span class=\"line\">\t\ttriggerAfterCompletion(processedRequest, response, mappedHandler,</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">NestedServletException</span>(<span class=\"string\">&quot;Handler processing failed&quot;</span>, err));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Instead of postHandle and afterCompletion</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (mappedHandler != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tmappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Clean up any resources used by a multipart request.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (multipartRequestParsed) &#123;</span><br><span class=\"line\">\t\t\t\tcleanupMultipart(processedRequest);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>mappedHandler = getHandler(processedRequest)</strong></p>\n<p>根据请求获取对应url的处理器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> HandlerExecutionChain <span class=\"title function_\">getHandler</span><span class=\"params\">(HttpServletRequest request)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.handlerMappings != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (HandlerMapping mapping : <span class=\"built_in\">this</span>.handlerMappings) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">HandlerExecutionChain</span> <span class=\"variable\">handler</span> <span class=\"operator\">=</span> mapping.getHandler(request);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (handler != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> handler;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>遍历容器中所有的HandlerMapping，找到第一个能处理这个请求的handler并返回</p>\n<p>Spring帮我们注册的handler有欢迎页的handler，我们在Controller定义的handler，以及我们自定义的handler</p>\n<p>先根据URL找到URL匹配的处理器handler，先找到方法也匹配的handler，如果有多个匹配则报错</p>\n<h3 id=\"Springboot参数注解\"><a href=\"#Springboot参数注解\" class=\"headerlink\" title=\"Springboot参数注解\"></a>Springboot参数注解</h3><h4 id=\"PathVariable-路径参数\"><a href=\"#PathVariable-路径参数\" class=\"headerlink\" title=\"@PathVariable  路径参数\"></a>@PathVariable  路径参数</h4><p>将路径的一部分作为参数/user/{id}<br>数字或者字符串变量，加上这个注解后可以获取到路径参数中对应的名称。如果是一个Map型变量加上了这个注解则会将所有参数以kv的形式传入到这个Map中</p>\n<h4 id=\"RequestHeader-请求头参数\"><a href=\"#RequestHeader-请求头参数\" class=\"headerlink\" title=\"@RequestHeader  请求头参数\"></a>@RequestHeader  请求头参数</h4><p>可以拿到请求头中对应的参数，如果参数类型是Map,MultiValueMap,HttpHeaders则会拿到所有的请求头参数</p>\n<h4 id=\"RequestParam-请求参数\"><a href=\"#RequestParam-请求参数\" class=\"headerlink\" title=\"@RequestParam  请求参数\"></a>@RequestParam  请求参数</h4><p>用来获取路由参数<br>例如/user?age=13<br>如果等号左边有相同的值，则会以列表的形式读取进来<br>如果参数列表是Map类型，则会将所有方法参数都读进来，类型是String,String或者String,Object</p>\n<h4 id=\"CookieValue-Cookie参数\"><a href=\"#CookieValue-Cookie参数\" class=\"headerlink\" title=\"@CookieValue  Cookie参数\"></a>@CookieValue  Cookie参数</h4><p>可以获取指定Cookie的值<br>参数类型可以是String，也可以是Cookie类型的变量，用getName和getValue来获取KV的值</p>\n<h4 id=\"RequestBody-请求体\"><a href=\"#RequestBody-请求体\" class=\"headerlink\" title=\"@RequestBody  请求体\"></a>@RequestBody  请求体</h4><p>获取请求体中的所有参数，如果参数类型是String会把参数url原样拿过来，如果是其他对象类型，会将参数按照属性名装配进去后返回</p>\n<h4 id=\"RequestAttribute-请求域参数\"><a href=\"#RequestAttribute-请求域参数\" class=\"headerlink\" title=\"@RequestAttribute 请求域参数\"></a>@RequestAttribute 请求域参数</h4><p>设置获取请求域的参数，请求域的参数可以通过request的setAttribute来设置，也可以用过getAttribute来获取，在进行路由转发的时候可以使用这种方式传递参数，转发方式:<br>return “forward:/success” 在forward后面设置转发的路由，这样可以让多个路由映射到同一个功能上</p>\n<h4 id=\"MatrixVariable-矩阵变量\"><a href=\"#MatrixVariable-矩阵变量\" class=\"headerlink\" title=\"@MatrixVariable  矩阵变量\"></a>@MatrixVariable  矩阵变量</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/cars/sell;low=34;brand=byd,audi,yd</span><br></pre></td></tr></table></figure>\n\n<p>URL中还可以通过矩阵变量传递参数，每个参数用分号<code>;</code>分割，List类型的参数可以直接用逗号<code>,</code>分割，相同参数会被封装成一个list</p>\n<p>在参数中加上这个注解@MatrixVariable来获取值</p>\n<p>每个矩阵变量依附于它前面的路由变量，每个路径变量都可以有一个一系列矩阵变量，可以通过设置@MatrixVariable中的pathVar属性来获取指定变量参数后面的矩阵变量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ParameterTestController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">///cars/sell;low=34;brand=byd,audi,yd</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/cars/&#123;path&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map <span class=\"title function_\">carsSell</span><span class=\"params\">(<span class=\"meta\">@MatrixVariable(&quot;low&quot;)</span> Integer low,</span></span><br><span class=\"line\"><span class=\"params\">                        <span class=\"meta\">@MatrixVariable(&quot;brand&quot;)</span> List&lt;String&gt; brand,</span></span><br><span class=\"line\"><span class=\"params\">                        <span class=\"meta\">@PathVariable(&quot;path&quot;)</span> String path)</span>&#123;</span><br><span class=\"line\">        Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;low&quot;</span>,low);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;brand&quot;</span>,brand);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;path&quot;</span>,path);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// /boss/1;age=20/2;age=10</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/boss/&#123;bossId&#125;/&#123;empId&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map <span class=\"title function_\">boss</span><span class=\"params\">(<span class=\"meta\">@MatrixVariable(value = &quot;age&quot;,pathVar = &quot;bossId&quot;)</span> Integer bossAge,</span></span><br><span class=\"line\"><span class=\"params\">                    <span class=\"meta\">@MatrixVariable(value = &quot;age&quot;,pathVar = &quot;empId&quot;)</span> Integer empAge)</span>&#123;</span><br><span class=\"line\">        Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;bossAge&quot;</span>,bossAge);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;empAge&quot;</span>,empAge);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Springboot禁用了矩阵变量的功能，需要我们手动开启</p>\n<p>原因：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&quot;deprecation&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configurePathMatch</span><span class=\"params\">(PathMatchConfigurer configurer)</span> &#123;</span><br><span class=\"line\">\tconfigurer.setUseSuffixPatternMatch(<span class=\"built_in\">this</span>.mvcProperties.getPathmatch().isUseSuffixPattern());</span><br><span class=\"line\">\tconfigurer.setUseRegisteredSuffixPatternMatch(</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.mvcProperties.getPathmatch().isUseRegisteredSuffixPattern());</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.dispatcherServletPath.ifAvailable((dispatcherPath) -&gt; &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">servletUrlMapping</span> <span class=\"operator\">=</span> dispatcherPath.getServletUrlMapping();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (servletUrlMapping.equals(<span class=\"string\">&quot;/&quot;</span>) &amp;&amp; singleDispatcherServlet()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">UrlPathHelper</span> <span class=\"variable\">urlPathHelper</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UrlPathHelper</span>();</span><br><span class=\"line\">\t\t\turlPathHelper.setAlwaysUseFullPath(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t\t\tconfigurer.setUrlPathHelper(urlPathHelper);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>路由匹配在上述方法中进行，而路由解析需要用到UrlPathHelper，而在UrlPathHelper中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Set if &quot;;&quot; (semicolon) content should be stripped from the request URI.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;Default is &quot;true&quot;.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setRemoveSemicolonContent</span><span class=\"params\">(<span class=\"type\">boolean</span> removeSemicolonContent)</span> &#123;</span><br><span class=\"line\">\t\tcheckReadOnly();</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.removeSemicolonContent = removeSemicolonContent;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面提到如果removeSemicolonContent这个变量是true，则会移除我们分号后面的内容，因而我们获取不到矩阵参数</p>\n<p>所以我们在组件中设置一个这个变量为false的组件即可：</p>\n<p>可以单独写一个类实现接口，JDK8有接口默认方法，所以们不用实现所有的类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebConfig</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">WebMvcConfigurer</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configurePathMatch</span><span class=\"params\">(PathMatchConfigurer configurer)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">UrlPathHelper</span> <span class=\"variable\">urlPathHelper</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UrlPathHelper</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 不移除；后面的内容。矩阵变量功能就可以生效</span></span><br><span class=\"line\">        urlPathHelper.setRemoveSemicolonContent(<span class=\"literal\">false</span>);</span><br><span class=\"line\">        configurer.setUrlPathHelper(urlPathHelper);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也可以在配置类中用@Bean注入：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebConfig</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> WebMvcConfigurer <span class=\"title function_\">webMvcConfigurer</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WebMvcConfigurer</span>() &#123;</span><br><span class=\"line\">                        <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configurePathMatch</span><span class=\"params\">(PathMatchConfigurer configurer)</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">UrlPathHelper</span> <span class=\"variable\">urlPathHelper</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UrlPathHelper</span>();</span><br><span class=\"line\">                <span class=\"comment\">// 不移除；后面的内容。矩阵变量功能就可以生效</span></span><br><span class=\"line\">                urlPathHelper.setRemoveSemicolonContent(<span class=\"literal\">false</span>);</span><br><span class=\"line\">                configurer.setUrlPathHelper(urlPathHelper);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>（但是重写这个方法的话，其他方法怎么办呢……可能Spring还做了一些其他的事情……，不过我们知道这个怎么配置，大致的原因是什么即可）</p>\n<h4 id=\"Springboot参数注解原理\"><a href=\"#Springboot参数注解原理\" class=\"headerlink\" title=\"Springboot参数注解原理\"></a>Springboot参数注解原理</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doDispatch</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t<span class=\"type\">HttpServletRequest</span> <span class=\"variable\">processedRequest</span> <span class=\"operator\">=</span> request;</span><br><span class=\"line\">\t<span class=\"type\">HandlerExecutionChain</span> <span class=\"variable\">mappedHandler</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"variable\">multipartRequestParsed</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">WebAsyncManager</span> <span class=\"variable\">asyncManager</span> <span class=\"operator\">=</span> WebAsyncUtils.getAsyncManager(request);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">ModelAndView</span> <span class=\"variable\">mv</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">Exception</span> <span class=\"variable\">dispatchException</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">               <span class=\"comment\">//判断是不是文件上传请求</span></span><br><span class=\"line\">\t\t\tprocessedRequest = checkMultipart(request);</span><br><span class=\"line\">\t\t\tmultipartRequestParsed = (processedRequest != request);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Determine handler for the current request.</span></span><br><span class=\"line\">\t\t\tmappedHandler = getHandler(processedRequest);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (mappedHandler == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tnoHandlerFound(processedRequest, response);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Determine handler adapter for the current request.</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">HandlerAdapter</span> <span class=\"variable\">ha</span> <span class=\"operator\">=</span> getHandlerAdapter(mappedHandler.getHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Process last-modified header, if supported by the handler.</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">String</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> request.getMethod();</span><br><span class=\"line\">\t\t\t<span class=\"type\">boolean</span> <span class=\"variable\">isGet</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;GET&quot;</span>.equals(method);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isGet || <span class=\"string\">&quot;HEAD&quot;</span>.equals(method)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">long</span> <span class=\"variable\">lastModified</span> <span class=\"operator\">=</span> ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">new</span> <span class=\"title class_\">ServletWebRequest</span>(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Actually invoke the handler.</span></span><br><span class=\"line\">\t\t\tmv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tapplyDefaultViewName(processedRequest, mv);</span><br><span class=\"line\">\t\t\tmappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">\t\t\tdispatchException = ex;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (Throwable err) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// making them available for @ExceptionHandler methods and other scenarios.</span></span><br><span class=\"line\">\t\t\tdispatchException = <span class=\"keyword\">new</span> <span class=\"title class_\">NestedServletException</span>(<span class=\"string\">&quot;Handler dispatch failed&quot;</span>, err);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tprocessDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">\t\ttriggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Throwable err) &#123;</span><br><span class=\"line\">\t\ttriggerAfterCompletion(processedRequest, response, mappedHandler,</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">NestedServletException</span>(<span class=\"string\">&quot;Handler processing failed&quot;</span>, err));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Instead of postHandle and afterCompletion</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (mappedHandler != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tmappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Clean up any resources used by a multipart request.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (multipartRequestParsed) &#123;</span><br><span class=\"line\">\t\t\t\tcleanupMultipart(processedRequest);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"获取handler\"><a href=\"#获取handler\" class=\"headerlink\" title=\"获取handler\"></a>获取handler</h5><p>mappedHandler = getHandler(processedRequest);</p>\n<p>获取能处理这个请求的handler，而所谓的handler就是在Controller中通过URL找到的对应的方法，拿到方法的各种信息。</p>\n<h5 id=\"获取适配器\"><a href=\"#获取适配器\" class=\"headerlink\" title=\"获取适配器\"></a>获取适配器</h5><p>HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</p>\n<p>获取能处理这个handler的适配器，适配器用于解析上述各种注解的参数，相当于一个大的反射工具</p>\n<p>HandlerAdapter 里面有这些方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">HandlerAdapter</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//是否能处理这个handler</span></span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"title function_\">supports</span><span class=\"params\">(Object handler)</span>;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    对应的实现类，直接比较是不是我们想要的类型的对象</span></span><br><span class=\"line\"><span class=\"comment\">    @Override</span></span><br><span class=\"line\"><span class=\"comment\">\tpublic final boolean supports(Object handler) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\treturn (handler instanceof HandlerMethod &amp;&amp; supportsInternal((HandlerMethod) handler));</span></span><br><span class=\"line\"><span class=\"comment\">\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">    </span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">//如果能处理则调用这个方法处理请求</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\tModelAndView <span class=\"title function_\">handle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"title function_\">getLastModified</span><span class=\"params\">(HttpServletRequest request, Object handler)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>获取对应的handlerAdapter的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> HandlerAdapter <span class=\"title function_\">getHandlerAdapter</span><span class=\"params\">(Object handler)</span> <span class=\"keyword\">throws</span> ServletException &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.handlerAdapters != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (HandlerAdapter adapter : <span class=\"built_in\">this</span>.handlerAdapters) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (adapter.supports(handler)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> adapter;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServletException</span>(<span class=\"string\">&quot;No adapter for handler [&quot;</span> + handler +</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>遍历容器中注册的所有HandlerAdapter，找到能支持这个handler的HandlerAdapter</p>\n<p><img src=\"D:\\学习笔记\\picture\\image-20220430192846168-1669804541526-53.png\" alt=\"image-20220430192846168\"></p>\n<p>RequestMappingHandlerAdapter ：用于处理Controller的方法中带哟@RequestMapping注解的方法（也就是我们所写的普通方法）</p>\n<p>HandlerFunctionAdapter ：用于处理函数式编程的方法对应的Controller</p>\n<h5 id=\"浏览器缓存\"><a href=\"#浏览器缓存\" class=\"headerlink\" title=\"浏览器缓存\"></a>浏览器缓存</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> request.getMethod();</span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">isGet</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;GET&quot;</span>.equals(method);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (isGet || <span class=\"string\">&quot;HEAD&quot;</span>.equals(method)) &#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">lastModified</span> <span class=\"operator\">=</span> ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">new</span> <span class=\"title class_\">ServletWebRequest</span>(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>判断是不是GET方法或者方法，这个String method是我们之前设置的方法名（回顾之前用内置参数模拟PUT,DELETE方法，这里的HEAD方法也是这样），如果是HEAD方法则直接返回（并不是真正的请求），如果是GET方法的则判断静态资源最后的修改时间，如果没有修改则提示客户端可以从浏览器缓存中获取静态资源</p>\n<h5 id=\"执行方法\"><a href=\"#执行方法\" class=\"headerlink\" title=\"执行方法\"></a>执行方法</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br></pre></td></tr></table></figure>\n\n<p>返回值是视图解析器(-&gt;代表调用)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handle -&gt; handleInternal-&gt;invokeHandlerMethod</span><br></pre></td></tr></table></figure>\n\n<p>invokeHandlerMethod方法中</p>\n<p>根据不同的类型的注解解析参数，并设置参数的值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (this.argumentResolvers != null) &#123;</span><br><span class=\"line\">    invocableMethod.setHandlerMethodArgumentResolvers(this.argumentResolvers);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解析返回值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (this.returnValueHandlers != null) &#123;</span><br><span class=\"line\">    invocableMethod.setHandlerMethodReturnValueHandlers(this.returnValueHandlers);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>准备工作完成，真正执行方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">invocableMethod.invokeAndHandle(webRequest, mavContainer);</span><br></pre></td></tr></table></figure>\n\n<p>在这个方法中调用<strong>invokeForRequest</strong>方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Object <span class=\"title function_\">invokeForRequest</span><span class=\"params\">(NativeWebRequest request, <span class=\"meta\">@Nullable</span> ModelAndViewContainer mavContainer,</span></span><br><span class=\"line\"><span class=\"params\">\t\tObject... providedArgs)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tObject[] args = getMethodArgumentValues(request, mavContainer, providedArgs);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\tlogger.trace(<span class=\"string\">&quot;Arguments: &quot;</span> + Arrays.toString(args));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> doInvoke(args);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第一条语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);</span><br></pre></td></tr></table></figure>\n\n<p>用于获取这个方法所有所需的参数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> Object[] getMethodArgumentValues(NativeWebRequest request, <span class=\"meta\">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class=\"line\">\t\tObject... providedArgs) <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//拿到所有参数的信息，但是此时参数还没有值</span></span><br><span class=\"line\">\tMethodParameter[] parameters = getMethodParameters();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ObjectUtils.isEmpty(parameters)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> EMPTY_ARGS;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//创建等大的数组作为参数列表，准备设置值</span></span><br><span class=\"line\">\tObject[] args = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[parameters.length];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; parameters.length; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">MethodParameter</span> <span class=\"variable\">parameter</span> <span class=\"operator\">=</span> parameters[i];</span><br><span class=\"line\">\t\tparameter.initParameterNameDiscovery(<span class=\"built_in\">this</span>.parameterNameDiscoverer);</span><br><span class=\"line\">\t\targs[i] = findProvidedArgument(parameter, providedArgs);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (args[i] != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">           <span class=\"comment\">//判断在所有的参数解析器中是否有能够处理这个参数的解析器</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!<span class=\"built_in\">this</span>.resolvers.supportsParameter(parameter)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalStateException</span>(formatArgumentError(parameter, <span class=\"string\">&quot;No suitable resolver&quot;</span>));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           <span class=\"comment\">//解析参数的值</span></span><br><span class=\"line\">\t\t\targs[i] = <span class=\"built_in\">this</span>.resolvers.resolveArgument(parameter, mavContainer, request, <span class=\"built_in\">this</span>.dataBinderFactory);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Leave stack trace for later, exception may actually be resolved and handled...</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">String</span> <span class=\"variable\">exMsg</span> <span class=\"operator\">=</span> ex.getMessage();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (exMsg != <span class=\"literal\">null</span> &amp;&amp; !exMsg.contains(parameter.getExecutable().toGenericString())) &#123;</span><br><span class=\"line\">\t\t\t\t\tlogger.debug(formatArgumentError(parameter, exMsg));</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> args;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>this.resolvers.supportsParameter(parameter)</strong> //判断在所有的视图解析器中是否有能够处理这个参数的解析器</p>\n<p>判断方法是看是否能找到合适的参数解析器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">public boolean supportsParameter(MethodParameter parameter) &#123;</span><br><span class=\"line\">\treturn getArgumentResolver(parameter) != null;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>查找过程getArgumentResolver：</p>\n<p>先判断缓存map里面有没有，如果有就直接拿到，如果没有则遍历所有的视图解析器，判断是否支持解析这个参数，如果支持则放入缓存中并返回这个视图解析器。</p>\n<p>判断方法：1. 是否有对应的参数注解 2.参数类型是否满足要去 3.其他</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> HandlerMethodArgumentResolver <span class=\"title function_\">getArgumentResolver</span><span class=\"params\">(MethodParameter parameter)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">HandlerMethodArgumentResolver</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.argumentResolverCache.get(parameter);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (result == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (HandlerMethodArgumentResolver resolver : <span class=\"built_in\">this</span>.argumentResolvers) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (resolver.supportsParameter(parameter)) &#123;</span><br><span class=\"line\">\t\t\t\t\tresult = resolver;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">this</span>.argumentResolverCache.put(parameter, result);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>args[i] = this.resolvers.resolveArgument(parameter, mavContainer, request, this.dataBinderFactory)</strong> 解析参数的值</p>\n<p>进入后来到可以来到：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> Object <span class=\"title function_\">resolveName</span><span class=\"params\">(String name, MethodParameter parameter, NativeWebRequest request)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\tMap&lt;String, String&gt; uriTemplateVars = (Map&lt;String, String&gt;) request.getAttribute(</span><br><span class=\"line\">\t\t\tHandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (uriTemplateVars != <span class=\"literal\">null</span> ? uriTemplateVars.get(name) : <span class=\"literal\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法用于获取参数的值，不同注解的的解析器有不同的实现，上面这个是@PathVariable参数注解的解析器。</p>\n<p>之前我们看到Springboot用urlPathHelper解析了URL中的各种参数，解析后Springboot会将其放到HttpServletRequest的请求域中，然后再这里直接根据参数名从请求域中获取参数的值</p>\n<p>获取后回到原来的方法中，设置参数的值</p>\n<h5 id=\"进行一些善后处理\"><a href=\"#进行一些善后处理\" class=\"headerlink\" title=\"进行一些善后处理\"></a>进行一些善后处理</h5><p>mappedHandler.applyPostHandle(processedRequest, response, mv);</p>\n<h5 id=\"处理最后的结果\"><a href=\"#处理最后的结果\" class=\"headerlink\" title=\"处理最后的结果\"></a>处理最后的结果</h5><p>也就设置最后要去哪个页面，需要处理哪些参数</p>\n<p>processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</p>\n<h3 id=\"Servlet-API\"><a href=\"#Servlet-API\" class=\"headerlink\" title=\"Servlet API\"></a>Servlet API</h3><p>Springboot给Servlet API类型的参数赋值时，解析用的方法和上面加了注解的参数一致，只是用的参数解析器不同。这里用的参数解析器只用判断参数的类型即可，如果是指定的类型比如HttpServletRequest 类型，他就会封装出一个对应的请求对象并进行引用赋值。</p>\n<h3 id=\"复杂参数\"><a href=\"#复杂参数\" class=\"headerlink\" title=\"复杂参数\"></a>复杂参数</h3><p>Map，Model类型的参数对应HttpServletRequest的请求域，操作这两个参数（map.put）就相当于操作request的请求域(request.setAttribute)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/params&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">testParam</span><span class=\"params\">(Map&lt;String,Object&gt; map,</span></span><br><span class=\"line\"><span class=\"params\">                        Model model,</span></span><br><span class=\"line\"><span class=\"params\">                        HttpServletRequest request,</span></span><br><span class=\"line\"><span class=\"params\">                        HttpServletResponse response)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//下面三位都是可以给request域中放数据</span></span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;hello&quot;</span>,<span class=\"string\">&quot;world666&quot;</span>);</span><br><span class=\"line\">    model.addAttribute(<span class=\"string\">&quot;world&quot;</span>,<span class=\"string\">&quot;hello666&quot;</span>);</span><br><span class=\"line\">    request.setAttribute(<span class=\"string\">&quot;message&quot;</span>,<span class=\"string\">&quot;HelloWorld&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Cookie</span> <span class=\"variable\">cookie</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Cookie</span>(<span class=\"string\">&quot;c1&quot;</span>,<span class=\"string\">&quot;v1&quot;</span>);</span><br><span class=\"line\">    response.addCookie(cookie);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;forward:/success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/success&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Map <span class=\"title function_\">success</span><span class=\"params\">(<span class=\"meta\">@RequestAttribute(value = &quot;msg&quot;,required = false)</span> String msg,</span></span><br><span class=\"line\"><span class=\"params\">                   <span class=\"meta\">@RequestAttribute(value = &quot;code&quot;,required = false)</span>Integer code,</span></span><br><span class=\"line\"><span class=\"params\">                   HttpServletRequest request)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">msg1</span> <span class=\"operator\">=</span> request.getAttribute(<span class=\"string\">&quot;msg&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">hello</span> <span class=\"operator\">=</span> request.getAttribute(<span class=\"string\">&quot;hello&quot;</span>);<span class=\"comment\">//得出testParam方法赋予的值 world666</span></span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">world</span> <span class=\"operator\">=</span> request.getAttribute(<span class=\"string\">&quot;world&quot;</span>);<span class=\"comment\">//得出testParam方法赋予的值 hello666</span></span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> request.getAttribute(<span class=\"string\">&quot;message&quot;</span>);<span class=\"comment\">//得出testParam方法赋予的值 HelloWorld</span></span><br><span class=\"line\"></span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;reqMethod_msg&quot;</span>,msg1);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;annotation_msg&quot;</span>,msg);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;hello&quot;</span>,hello);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;world&quot;</span>,world);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;message&quot;</span>,message);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>response可以方Cookie</p>\n<h4 id=\"Map，Model\"><a href=\"#Map，Model\" class=\"headerlink\" title=\"Map，Model\"></a>Map，Model</h4><p>底层都会调用ModelAndViewContainer的getModel方法获取到一个MAP型的变量，因而在经过参数解析器解析后，这两个指向的对象实际上是同一个</p>\n<p>ModelAndViewContainer 故名意思就是模型和视图的容器，Model用于存放数据，View用于存放视图（页面的地址），这两个都在这个容器中</p>\n<p>这两个参数操作的是request中请求域的参数，而这两个类型的参数是怎么操作请求域的呢？</p>\n<p>解析参数的时候如果参数类型是Map或者Model，则会创建一个BindingAwareModelMap变量来装载请求域中的参数，这个类既是Map也是Model，所以可以完成赋值。</p>\n<p><img src=\"D:\\学习笔记\\picture\\watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE4NjMwMjQ=,size_16,color_FFFFFF,t_70#pic_center.png\"></p>\n<p>请求结束后，我们再来到具体的逻辑：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">invokeAndHandle</span><span class=\"params\">(ServletWebRequest webRequest, ModelAndViewContainer mavContainer,</span></span><br><span class=\"line\"><span class=\"params\">\t\tObject... providedArgs)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//执行方法，得到返回值是&quot;forward:/success&quot;</span></span><br><span class=\"line\">\t<span class=\"type\">Object</span> <span class=\"variable\">returnValue</span> <span class=\"operator\">=</span> invokeForRequest(webRequest, mavContainer, providedArgs);</span><br><span class=\"line\">       <span class=\"comment\">//设置请求状态</span></span><br><span class=\"line\">\tsetResponseStatus(webRequest);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (returnValue == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isRequestNotModified(webRequest) || getResponseStatus() != <span class=\"literal\">null</span> || mavContainer.isRequestHandled()) &#123;</span><br><span class=\"line\">\t\t\tdisableContentCachingIfNecessary(webRequest);</span><br><span class=\"line\">\t\t\tmavContainer.setRequestHandled(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (StringUtils.hasText(getResponseStatusReason())) &#123;</span><br><span class=\"line\">\t\tmavContainer.setRequestHandled(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmavContainer.setRequestHandled(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\tAssert.state(<span class=\"built_in\">this</span>.returnValueHandlers != <span class=\"literal\">null</span>, <span class=\"string\">&quot;No return value handlers&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           <span class=\"comment\">//处理返回值,这里有我们要的转发逻辑，里面会传入我们方法的返回值returnValue</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.returnValueHandlers.handleReturnValue(</span><br><span class=\"line\">\t\t\t\treturnValue, getReturnValueType(returnValue), mavContainer, webRequest);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.trace(formatErrorForReturnValue(returnValue), ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们深入handleReturnValue方法可以来到这个方法里面：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleReturnValue</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Object returnValue, MethodParameter returnType,</span></span><br><span class=\"line\"><span class=\"params\">\t\tModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//判断返回值是不是字符串</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (returnValue <span class=\"keyword\">instanceof</span> CharSequence) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">viewName</span> <span class=\"operator\">=</span> returnValue.toString();</span><br><span class=\"line\">           <span class=\"comment\">//如果是字符串则设置容器中view的名称(转发路径)</span></span><br><span class=\"line\">\t\tmavContainer.setViewName(viewName);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isRedirectViewName(viewName)) &#123;</span><br><span class=\"line\">\t\t\tmavContainer.setRedirectModelScenario(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (returnValue != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// should not happen</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UnsupportedOperationException</span>(<span class=\"string\">&quot;Unexpected return type: &quot;</span> +</span><br><span class=\"line\">\t\t\t\treturnType.getParameterType().getName() + <span class=\"string\">&quot; in method: &quot;</span> + returnType.getMethod());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在方法执行完成后我们会得到一个ModelAndView对象：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br></pre></td></tr></table></figure>\n\n<p>mv里面包含我们想要的数据（model）和转发的地址（view）</p>\n<p>然后传入到</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br></pre></td></tr></table></figure>\n\n<p>进行最后结果的处理</p>\n<p>深入这个方法后来到：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render(mv, request, response);</span><br></pre></td></tr></table></figure>\n\n<p>这个方法用于渲染页面</p>\n<p>核心逻辑是：</p>\n<p>封装成视图对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">view = resolveViewName(<span class=\"comment\">/*视图名*/</span>viewName,<span class=\"comment\">/*视图数据*/</span> mv.getModelInternal(), locale, request);</span><br></pre></td></tr></table></figure>\n\n<p>然后渲染视图：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">view.render(mv.getModelInternal(), request, response);</span><br><span class=\"line\"><span class=\"comment\">/////////////////////////////////////////////////////////////</span></span><br><span class=\"line\"><span class=\"comment\">//这个方法的逻辑是：</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">render</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Map&lt;String, ?&gt; model, HttpServletRequest request,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\tHttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.debug(<span class=\"string\">&quot;View &quot;</span> + formatViewName() +</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">&quot;, model &quot;</span> + (model != <span class=\"literal\">null</span> ? model : Collections.emptyMap()) +</span><br><span class=\"line\">\t\t\t\t\t(<span class=\"built_in\">this</span>.staticAttributes.isEmpty() ? <span class=\"string\">&quot;&quot;</span> : <span class=\"string\">&quot;, static attributes &quot;</span> + <span class=\"built_in\">this</span>.staticAttributes));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//这一步，将我们model中的数据放到一个新的map里面mergedModel</span></span><br><span class=\"line\">\t\tMap&lt;String, Object&gt; mergedModel = createMergedOutputModel(model, request, response);</span><br><span class=\"line\">\t\tprepareResponse(request, response);</span><br><span class=\"line\">\t\trenderMergedOutputModel(mergedModel, getRequestToExpose(request), response);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>renderMergedOutputModel方法中会执行语句：exposeModelAsRequestAttributes(model, request);</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">exposeModelAsRequestAttributes</span><span class=\"params\">(Map&lt;String, Object&gt; model,</span></span><br><span class=\"line\"><span class=\"params\">\t\tHttpServletRequest request)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmodel.forEach((name, value) -&gt; &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (value != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\trequest.setAttribute(name, value);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\trequest.removeAttribute(name);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>显然这个方法的作用就是将model中的数据放到新的request的请求域中，这就解释了我们转发请求后，为啥新的方法中能拿到上一个请域的参数</p>\n<h3 id=\"Springboot自定义参数\"><a href=\"#Springboot自定义参数\" class=\"headerlink\" title=\"Springboot自定义参数\"></a>Springboot自定义参数</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ParameterTestController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/saveuser&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Person <span class=\"title function_\">saveuser</span><span class=\"params\">(Person person)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> person;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>参数列表是我们自定义的对象时，Spring会自动帮我们将参数按照参数名装配进去（如果包含了其他引用类型要用pet.name,pte.age的形式传过来才能解析）</p>\n<p><img src=\"D:\\学习笔记\\picture\\image-20220502111900935-1669804541526-54.png\" alt=\"image-20220502111900935\"></p>\n<p>参数解析过程和前面讲的一样，只是用的参数解析器不同，这里用的参数解析器是<code>ServletModelAttributeMethodProcessor</code></p>\n<p>能用这个的处理器的条件是加了@ModelAttribute的注解或者它不是简单数据类型（即是引用类型）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">supportsParameter</span><span class=\"params\">(MethodParameter parameter)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (parameter.hasParameterAnnotation(ModelAttribute.class) ||</span><br><span class=\"line\">\t\t\t(<span class=\"built_in\">this</span>.annotationNotRequired &amp;&amp; !BeanUtils.isSimpleProperty(parameter.getParameterType())));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后给Person参数的赋值过程如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Object <span class=\"title function_\">resolveArgument</span><span class=\"params\">(MethodParameter parameter, <span class=\"meta\">@Nullable</span> ModelAndViewContainer mavContainer,</span></span><br><span class=\"line\"><span class=\"params\">\t\tNativeWebRequest webRequest, <span class=\"meta\">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tAssert.state(mavContainer != <span class=\"literal\">null</span>, <span class=\"string\">&quot;ModelAttributeMethodProcessor requires ModelAndViewContainer&quot;</span>);</span><br><span class=\"line\">\tAssert.state(binderFactory != <span class=\"literal\">null</span>, <span class=\"string\">&quot;ModelAttributeMethodProcessor requires WebDataBinderFactory&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> ModelFactory.getNameForParameter(parameter);</span><br><span class=\"line\">\t<span class=\"type\">ModelAttribute</span> <span class=\"variable\">ann</span> <span class=\"operator\">=</span> parameter.getParameterAnnotation(ModelAttribute.class);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ann != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\tmavContainer.setBinding(name, ann.binding());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">Object</span> <span class=\"variable\">attribute</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t<span class=\"type\">BindingResult</span> <span class=\"variable\">bindingResult</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//如果请求域中已经有了就直接返回</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (mavContainer.containsAttribute(name)) &#123;</span><br><span class=\"line\">\t\tattribute = mavContainer.getModel().get(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Create attribute instance</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">               <span class=\"comment\">//根据对象属性创建一个空对象（也就是上文中属性值为null的对象）</span></span><br><span class=\"line\">\t\t\tattribute = createAttribute(name, parameter, binderFactory, webRequest);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (BindException ex) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isBindExceptionRequired(parameter)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// No BindingResult parameter -&gt; fail with BindException</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Otherwise, expose null/empty value and associated BindingResult</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (parameter.getParameterType() == Optional.class) &#123;</span><br><span class=\"line\">\t\t\t\tattribute = Optional.empty();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tbindingResult = ex.getBindingResult();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (bindingResult == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Bean property binding and validation;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// skipped in case of binding failure on construction.</span></span><br><span class=\"line\">           <span class=\"comment\">//为我们刚才创建的空对象绑定属性</span></span><br><span class=\"line\">\t\t<span class=\"type\">WebDataBinder</span> <span class=\"variable\">binder</span> <span class=\"operator\">=</span> binderFactory.createBinder(webRequest, attribute, name);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (binder.getTarget() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!mavContainer.isBindingDisabled(name)) &#123;</span><br><span class=\"line\">                   <span class=\"comment\">//实际绑定属性</span></span><br><span class=\"line\">\t\t\t\tbindRequestParameters(binder, webRequest);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tvalidateIfApplicable(binder, parameter);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (binder.getBindingResult().hasErrors() &amp;&amp; isBindExceptionRequired(binder, parameter)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BindException</span>(binder.getBindingResult());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Value type adaptation, also covering java.util.Optional</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!parameter.getParameterType().isInstance(attribute)) &#123;</span><br><span class=\"line\">\t\t\tattribute = binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tbindingResult = binder.getBindingResult();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Add resolved attribute and BindingResult at the end of the model</span></span><br><span class=\"line\">\tMap&lt;String, Object&gt; bindingResultModel = bindingResult.getModel();</span><br><span class=\"line\">\tmavContainer.removeAttributes(bindingResultModel);</span><br><span class=\"line\">\tmavContainer.addAllAttributes(bindingResultModel);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> attribute;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name);</p>\n<p>WebDataBinder 是属性绑定器，这个类里面有各种数据类型之间的转换器，可以利用反射和转换器根据webRequest里面拿到的数据为对象属性赋值</p>\n<p><img src=\"https://s2.loli.net/2022/05/26/kJjRoQfiZYBhDeN.png\" alt=\"image-20220501131802770\"></p>\n<p>实际绑定的过程是在<code>bindRequestParameters(binder, webRequest);</code>这个方法里面，这个方法过后对象属性就有值了</p>\n<p><code>MutablePropertyValues mpvs = new MutablePropertyValues(request.getParameterMap());</code>通过这个方法拿到request中的所有kv属性值，然后接下来遍历对象中的所有参数，然后根据属性名从这个mpvs里面找就能拿到对应的属性值，但是拿到后还需要将原来的类型（一般是String，也可能是文件流之类的）转换为我们需要的类型，所以在绑定的时候还会遍历所有的属性转换器（Converter），找到可以进行转换的属性转换器，然后将其放入缓存，用转换器来进行属性值的转换，然后就可以为对象中的属性值赋值。</p>\n<h4 id=\"自定义类型转换器\"><a href=\"#自定义类型转换器\" class=\"headerlink\" title=\"自定义类型转换器\"></a>自定义类型转换器</h4><p>上面使用的都是Springboot提供的转换器，使用Spring为我们提供的转换规则，我们也可以自定义一个转换规则。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//1、WebMvcConfigurer定制化SpringMVC的功能</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> WebMvcConfigurer <span class=\"title function_\">webMvcConfigurer</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WebMvcConfigurer</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addFormatters</span><span class=\"params\">(FormatterRegistry registry)</span> &#123;</span><br><span class=\"line\">                registry.addConverter(<span class=\"keyword\">new</span> <span class=\"title class_\">Converter</span>&lt;String, Pet&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"keyword\">public</span> Pet <span class=\"title function_\">convert</span><span class=\"params\">(String source)</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 啊猫,3</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(!StringUtils.isEmpty(source))&#123;</span><br><span class=\"line\">                            <span class=\"type\">Pet</span> <span class=\"variable\">pet</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Pet</span>();</span><br><span class=\"line\">                            String[] split = source.split(<span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">                            pet.setName(split[<span class=\"number\">0</span>]);</span><br><span class=\"line\">                            pet.setAge(Integer.parseInt(split[<span class=\"number\">1</span>]));</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> pet;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>WebMvcConfigurer</strong>是Spring给我们提供的扩展功能的接口，我们可以重写其中的很多方法来定制化我们想要的功能</p>\n<p>在我们添加自定义的转换器后，Springboot在处理参数的时候就可以根据转换前后的参数类型找到能够使用的Converter进行转换，这样就不会报String无法转换成Pet的异常。</p>\n<p>并且Converter类带有@FunctionalInterface注解，申明了是一个函数式接口，我们可以直接传入Lamda表达式来进行设置。</p>\n<h3 id=\"响应数据与内容协商\"><a href=\"#响应数据与内容协商\" class=\"headerlink\" title=\"响应数据与内容协商\"></a>响应数据与内容协商</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在这个依赖中会自动帮我们引入JSON的依赖，可以帮我们将返回值处理成JSON格式的数据</p>\n<p>在Controller中，如果方法上带有@ResponBody注解，则会将返回值以JSON格式返回给前端</p>\n<h4 id=\"原理解析\"><a href=\"#原理解析\" class=\"headerlink\" title=\"原理解析\"></a>原理解析</h4><p>我们再来到处理请求的流程里面：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> ModelAndView <span class=\"title function_\">handleInternal</span><span class=\"params\">(HttpServletRequest request,</span></span><br><span class=\"line\"><span class=\"params\">\t\tHttpServletResponse response, HandlerMethod handlerMethod)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tModelAndView mav;</span><br><span class=\"line\">\tcheckRequest(request);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Execute invokeHandlerMethod in synchronized block if required.</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.synchronizeOnSession) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">HttpSession</span> <span class=\"variable\">session</span> <span class=\"operator\">=</span> request.getSession(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (session != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">Object</span> <span class=\"variable\">mutex</span> <span class=\"operator\">=</span> WebUtils.getSessionMutex(session);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (mutex) &#123;</span><br><span class=\"line\">\t\t\t\tmav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// No HttpSession available -&gt; no mutex necessary</span></span><br><span class=\"line\">\t\t\tmav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// No synchronization on session demanded at all...</span></span><br><span class=\"line\">           <span class=\"comment\">//因为没有session锁，所以我们会来到这个方法中</span></span><br><span class=\"line\">\t\tmav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!response.containsHeader(HEADER_CACHE_CONTROL)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (getSessionAttributesHandler(handlerMethod).hasSessionAttributes()) &#123;</span><br><span class=\"line\">\t\t\tapplyCacheSeconds(response, <span class=\"built_in\">this</span>.cacheSecondsForSessionAttributeHandlers);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tprepareResponse(response);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> mav;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>mav = invokeHandlerMethod(request, response, handlerMethod)  这个方法的逻辑如下：（其实解析参数的时候我们也进去过）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.argumentResolvers != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//传入所有参数解析器</span></span><br><span class=\"line\">    invocableMethod.setHandlerMethodArgumentResolvers(<span class=\"built_in\">this</span>.argumentResolvers);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.returnValueHandlers != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//传入所有的返回值处理器</span></span><br><span class=\"line\">    invocableMethod.setHandlerMethodReturnValueHandlers(<span class=\"built_in\">this</span>.returnValueHandlers);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后来到invokeAndHandle方法来处理请求：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">invokeAndHandle</span><span class=\"params\">(ServletWebRequest webRequest, ModelAndViewContainer mavContainer,</span></span><br><span class=\"line\"><span class=\"params\">\t\tObject... providedArgs)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//执行方法并拿到返回值（里面的逻辑就是获取参数值和执行controller的方法，在上一节分析过）</span></span><br><span class=\"line\">\t<span class=\"type\">Object</span> <span class=\"variable\">returnValue</span> <span class=\"operator\">=</span> invokeForRequest(webRequest, mavContainer, providedArgs);</span><br><span class=\"line\">       <span class=\"comment\">//设置请求返回值状态</span></span><br><span class=\"line\">\tsetResponseStatus(webRequest);</span><br><span class=\"line\">\t<span class=\"comment\">//如果返回值为空，则不用处理返回值，直接返回</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (returnValue == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isRequestNotModified(webRequest) || getResponseStatus() != <span class=\"literal\">null</span> || mavContainer.isRequestHandled()) &#123;</span><br><span class=\"line\">\t\t\tdisableContentCachingIfNecessary(webRequest);</span><br><span class=\"line\">\t\t\tmavContainer.setRequestHandled(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;<span class=\"comment\">//判断请求处理是否失败，如果失败也不处理返回值直接返回</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (StringUtils.hasText(getResponseStatusReason())) &#123;</span><br><span class=\"line\">\t\tmavContainer.setRequestHandled(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmavContainer.setRequestHandled(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\tAssert.state(<span class=\"built_in\">this</span>.returnValueHandlers != <span class=\"literal\">null</span>, <span class=\"string\">&quot;No return value handlers&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">//重点：处理返回值的方法，参数为返回值，返回值类型，容器，请求</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.returnValueHandlers.handleReturnValue(</span><br><span class=\"line\">\t\t\t\treturnValue, getReturnValueType(returnValue), mavContainer, webRequest);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.trace(formatErrorForReturnValue(returnValue), ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>处理返回值的方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.returnValueHandlers.handleReturnValue(returnValue, getReturnValueType(returnValue), mavContainer, webRequest);</span><br></pre></td></tr></table></figure>\n\n<p>方法体：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleReturnValue</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Object returnValue, MethodParameter returnType,</span></span><br><span class=\"line\"><span class=\"params\">\t\tModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//根据返回值和返回值类型获得返回值处理器</span></span><br><span class=\"line\">\t<span class=\"type\">HandlerMethodReturnValueHandler</span> <span class=\"variable\">handler</span> <span class=\"operator\">=</span> selectHandler(returnValue, returnType);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (handler == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;Unknown return value type: &quot;</span> + returnType.getParameterType().getName());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">       <span class=\"comment\">//用返回值处理器处理返回值</span></span><br><span class=\"line\">\thandler.handleReturnValue(returnValue, returnType, mavContainer, webRequest);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>selectHandler(returnValue, returnType) ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> HandlerMethodReturnValueHandler <span class=\"title function_\">selectHandler</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Object value, MethodParameter returnType)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"variable\">isAsyncValue</span> <span class=\"operator\">=</span> isAsyncReturnValue(value, returnType);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (HandlerMethodReturnValueHandler handler : <span class=\"built_in\">this</span>.returnValueHandlers) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isAsyncValue &amp;&amp; !(handler <span class=\"keyword\">instanceof</span> AsyncHandlerMethodReturnValueHandler)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (handler.supportsReturnType(returnType)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> handler;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>遍历所有的返回值处理器，判断哪个能够用来处理返回值，判断依据大多都是判断返回值类型是不是这个处理器想要的类型，或者有没有对应的注解</p>\n<p>SpringMVC能支持的返回值类型有：</p>\n<p><img src=\"D:\\学习笔记\\picture\\image-20220502131627510-1669804541526-56.png\" alt=\"image-20220502131627510\"></p>\n<p>我们在方法上加了@ResponseBody注解，所以使用最后一种处理器</p>\n<p>找到返回值处理器后，用处理器处理返回值：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handler.handleReturnValue(returnValue, returnType, mavContainer, webRequest);</span><br></pre></td></tr></table></figure>\n\n<p>方法体：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleReturnValue</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Object returnValue, MethodParameter returnType,</span></span><br><span class=\"line\"><span class=\"params\">\t\tModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throws</span> IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmavContainer.setRequestHandled(<span class=\"literal\">true</span>);</span><br><span class=\"line\">       <span class=\"comment\">//请求</span></span><br><span class=\"line\">\t<span class=\"type\">ServletServerHttpRequest</span> <span class=\"variable\">inputMessage</span> <span class=\"operator\">=</span> createInputMessage(webRequest);</span><br><span class=\"line\">       <span class=\"comment\">//响应</span></span><br><span class=\"line\">\t<span class=\"type\">ServletServerHttpResponse</span> <span class=\"variable\">outputMessage</span> <span class=\"operator\">=</span> createOutputMessage(webRequest);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Try even with null return value. ResponseBodyAdvice could get involved.</span></span><br><span class=\"line\">\twriteWithMessageConverters(returnValue, returnType, inputMessage, outputMessage);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中核心的是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage);</span><br></pre></td></tr></table></figure>\n\n<p>方法体：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> &lt;T&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">writeWithMessageConverters</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> T value, MethodParameter returnType,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\tServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throws</span> IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tObject body;</span><br><span class=\"line\">\t\tClass&lt;?&gt; valueType;</span><br><span class=\"line\">\t\tType targetType;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> CharSequence) &#123;</span><br><span class=\"line\">\t\t\tbody = value.toString();</span><br><span class=\"line\">\t\t\tvalueType = String.class;</span><br><span class=\"line\">\t\t\ttargetType = String.class;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取返回值</span></span><br><span class=\"line\">\t\t\tbody = value;</span><br><span class=\"line\">            <span class=\"comment\">//原类型</span></span><br><span class=\"line\">\t\t\tvalueType = getReturnValueType(body, returnType);</span><br><span class=\"line\">\t\t\ttargetType = GenericTypeResolver.resolveType(getGenericType(returnType), returnType.getContainingClass());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//判断返回值是否是资源文件</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isResourceType(value, returnType)) &#123;</span><br><span class=\"line\">\t\t\toutputMessage.getHeaders().set(HttpHeaders.ACCEPT_RANGES, <span class=\"string\">&quot;bytes&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (value != <span class=\"literal\">null</span> &amp;&amp; inputMessage.getHeaders().getFirst(HttpHeaders.RANGE) != <span class=\"literal\">null</span> &amp;&amp;</span><br><span class=\"line\">\t\t\t\t\toutputMessage.getServletResponse().getStatus() == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">Resource</span> <span class=\"variable\">resource</span> <span class=\"operator\">=</span> (Resource) value;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tList&lt;HttpRange&gt; httpRanges = inputMessage.getHeaders().getRange();</span><br><span class=\"line\">\t\t\t\t\toutputMessage.getServletResponse().setStatus(HttpStatus.PARTIAL_CONTENT.value());</span><br><span class=\"line\">\t\t\t\t\tbody = HttpRange.toResourceRegions(httpRanges, resource);</span><br><span class=\"line\">\t\t\t\t\tvalueType = body.getClass();</span><br><span class=\"line\">\t\t\t\t\ttargetType = RESOURCE_REGION_LIST_TYPE;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">catch</span> (IllegalArgumentException ex) &#123;</span><br><span class=\"line\">\t\t\t\t\toutputMessage.getHeaders().set(HttpHeaders.CONTENT_RANGE, <span class=\"string\">&quot;bytes */&quot;</span> + resource.contentLength());</span><br><span class=\"line\">\t\t\t\t\toutputMessage.getServletResponse().setStatus(HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE.value());</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">MediaType</span> <span class=\"variable\">selectedMediaType</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    \t<span class=\"comment\">//判断响应中是否已经有了返回类型，如果有就赋值，因为之前可能已经处理了一部分而确定了返回值</span></span><br><span class=\"line\">\t\t<span class=\"type\">MediaType</span> <span class=\"variable\">contentType</span> <span class=\"operator\">=</span> outputMessage.getHeaders().getContentType();</span><br><span class=\"line\">\t\t<span class=\"type\">boolean</span> <span class=\"variable\">isContentTypePreset</span> <span class=\"operator\">=</span> contentType != <span class=\"literal\">null</span> &amp;&amp; contentType.isConcrete();</span><br><span class=\"line\">    \t<span class=\"comment\">//如果找到了返回值类型</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isContentTypePreset) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.debug(<span class=\"string\">&quot;Found &#x27;Content-Type:&quot;</span> + contentType + <span class=\"string\">&quot;&#x27; in response&quot;</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tselectedMediaType = contentType;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果没找到返回类型</span></span><br><span class=\"line\">            <span class=\"comment\">//获得被包装的请求</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">HttpServletRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> inputMessage.getServletRequest();</span><br><span class=\"line\">            <span class=\"comment\">//获得浏览器能接收什么样的媒体类型(text/html之类的)</span></span><br><span class=\"line\">\t\t\tList&lt;MediaType&gt; acceptableTypes = getAcceptableMediaTypes(request);</span><br><span class=\"line\">            <span class=\"comment\">//获得服务器能生产什么样的媒体类型(json之类的)</span></span><br><span class=\"line\">\t\t\tList&lt;MediaType&gt; producibleTypes = getProducibleMediaTypes(request, valueType, targetType);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (body != <span class=\"literal\">null</span> &amp;&amp; producibleTypes.isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HttpMessageNotWritableException</span>(</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"string\">&quot;No converter found for return value of type: &quot;</span> + valueType);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tList&lt;MediaType&gt; mediaTypesToUse = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">            <span class=\"comment\">//暴力的两层for循环，找出浏览器能接受并且服务器能生产的数据</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (MediaType requestedType : acceptableTypes) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (MediaType producibleType : producibleTypes) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (requestedType.isCompatibleWith(producibleType)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tmediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType));</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (mediaTypesToUse.isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (body != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HttpMediaTypeNotAcceptableException</span>(producibleTypes);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\t\tlogger.debug(<span class=\"string\">&quot;No match for &quot;</span> + acceptableTypes + <span class=\"string\">&quot;, supported: &quot;</span> + producibleTypes);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">            <span class=\"comment\">//按照优先级排序(q的值)</span></span><br><span class=\"line\">\t\t\tMediaType.sortBySpecificityAndQuality(mediaTypesToUse);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//确定返回的媒体类型（优先级最高的）</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (MediaType mediaType : mediaTypesToUse) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (mediaType.isConcrete()) &#123;</span><br><span class=\"line\">\t\t\t\t\tselectedMediaType = mediaType;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mediaType.isPresentIn(ALL_APPLICATION_MEDIA_TYPES)) &#123;</span><br><span class=\"line\">\t\t\t\t\tselectedMediaType = MediaType.APPLICATION_OCTET_STREAM;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.debug(<span class=\"string\">&quot;Using &#x27;&quot;</span> + selectedMediaType + <span class=\"string\">&quot;&#x27;, given &quot;</span> +</span><br><span class=\"line\">\t\t\t\t\t\tacceptableTypes + <span class=\"string\">&quot; and supported &quot;</span> + producibleTypes);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (selectedMediaType != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tselectedMediaType = selectedMediaType.removeQualityValue();</span><br><span class=\"line\">            <span class=\"comment\">//遍历所有的类型转换器，找到能实现的转换器</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (HttpMessageConverter&lt;?&gt; converter : <span class=\"built_in\">this</span>.messageConverters) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">GenericHttpMessageConverter</span> <span class=\"variable\">genericConverter</span> <span class=\"operator\">=</span> (converter <span class=\"keyword\">instanceof</span> GenericHttpMessageConverter ?</span><br><span class=\"line\">\t\t\t\t\t\t(GenericHttpMessageConverter&lt;?&gt;) converter : <span class=\"literal\">null</span>);</span><br><span class=\"line\">                <span class=\"comment\">//判断是否支持我们协商的返回值</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (genericConverter != <span class=\"literal\">null</span> ?</span><br><span class=\"line\">\t\t\t\t\t\t((GenericHttpMessageConverter) converter).canWrite(targetType, valueType, selectedMediaType) :</span><br><span class=\"line\">\t\t\t\t\t\tconverter.canWrite(valueType, selectedMediaType)) &#123;</span><br><span class=\"line\">\t\t\t\t\tbody = getAdvice().beforeBodyWrite(body, returnType, selectedMediaType,</span><br><span class=\"line\">\t\t\t\t\t\t\t(Class&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">HttpMessageConverter</span>&lt;?&gt;&gt;) converter.getClass(),</span><br><span class=\"line\">\t\t\t\t\t\t\tinputMessage, outputMessage);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (body != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"type\">Object</span> <span class=\"variable\">theBody</span> <span class=\"operator\">=</span> body;</span><br><span class=\"line\">\t\t\t\t\t\tLogFormatUtils.traceDebug(logger, traceOn -&gt;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"string\">&quot;Writing [&quot;</span> + LogFormatUtils.formatValue(theBody, !traceOn) + <span class=\"string\">&quot;]&quot;</span>);</span><br><span class=\"line\">\t\t\t\t\t\taddContentDispositionHeader(inputMessage, outputMessage);</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (genericConverter != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//往outMessage中写入转换后的JSON数据</span></span><br><span class=\"line\">\t\t\t\t\t\t\tgenericConverter.write(body, targetType, selectedMediaType, outputMessage);</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t((HttpMessageConverter) converter).write(body, selectedMediaType, outputMessage);</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tlogger.debug(<span class=\"string\">&quot;Nothing to write: null body&quot;</span>);</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (body != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tSet&lt;MediaType&gt; producibleMediaTypes =</span><br><span class=\"line\">\t\t\t\t\t(Set&lt;MediaType&gt;) inputMessage.getServletRequest()</span><br><span class=\"line\">\t\t\t\t\t\t\t.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isContentTypePreset || !CollectionUtils.isEmpty(producibleMediaTypes)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HttpMessageNotWritableException</span>(</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"string\">&quot;No converter for [&quot;</span> + valueType + <span class=\"string\">&quot;] with preset Content-Type &#x27;&quot;</span> + contentType + <span class=\"string\">&quot;&#x27;&quot;</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HttpMediaTypeNotAcceptableException</span>(<span class=\"built_in\">this</span>.allSupportedMediaTypes);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用MessageConverters将返回值转化为JSON格式</p>\n<p>1.内容协商：浏览器会告诉服务器它能接收什么样的数据</p>\n<p><img src=\"D:\\学习笔记\\picture\\image-20220502145831045-1669804541526-55.png\" alt=\"image-20220502145831045\"></p>\n<p>q代表权值，也就是优先级，表示优先接收text/html之类的数据，如果没有再接收image/webp，如果还没有就接收所有类型的数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">         <span class=\"comment\">//获得被包装的请求</span></span><br><span class=\"line\"><span class=\"type\">HttpServletRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> inputMessage.getServletRequest();</span><br><span class=\"line\">         <span class=\"comment\">//获得浏览器能接收什么样的数据(text/html之类的，这个方法会获取request中ACCEPT字段的值，并封装成List)</span></span><br><span class=\"line\">List&lt;MediaType&gt; acceptableTypes = getAcceptableMediaTypes(request);</span><br><span class=\"line\">         <span class=\"comment\">//获得服务器能生产什么样的数据(json之类的)</span></span><br><span class=\"line\">List&lt;MediaType&gt; producibleTypes = getProducibleMediaTypes(request, valueType, targetType);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (body != <span class=\"literal\">null</span> &amp;&amp; producibleTypes.isEmpty()) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HttpMessageNotWritableException</span>(</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;No converter found for return value of type: &quot;</span> + valueType);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">List&lt;MediaType&gt; mediaTypesToUse = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">         <span class=\"comment\">//暴力的两层for循环，找出浏览器能接受并且服务器能生产的数据</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (MediaType requestedType : acceptableTypes) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (MediaType producibleType : producibleTypes) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (requestedType.isCompatibleWith(producibleType)) &#123;</span><br><span class=\"line\">\t\t\tmediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (mediaTypesToUse.isEmpty()) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (body != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HttpMediaTypeNotAcceptableException</span>(producibleTypes);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\tlogger.debug(<span class=\"string\">&quot;No match for &quot;</span> + acceptableTypes + <span class=\"string\">&quot;, supported: &quot;</span> + producibleTypes);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">         <span class=\"comment\">//按照优先级排序(q的值)</span></span><br><span class=\"line\">MediaType.sortBySpecificityAndQuality(mediaTypesToUse);</span><br><span class=\"line\"><span class=\"comment\">//确定返回值类型（优先级最高的）</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (MediaType mediaType : mediaTypesToUse) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (mediaType.isConcrete()) &#123;</span><br><span class=\"line\">\t\tselectedMediaType = mediaType;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mediaType.isPresentIn(ALL_APPLICATION_MEDIA_TYPES)) &#123;</span><br><span class=\"line\">\t\tselectedMediaType = MediaType.APPLICATION_OCTET_STREAM;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\tlogger.debug(<span class=\"string\">&quot;Using &#x27;&quot;</span> + selectedMediaType + <span class=\"string\">&quot;&#x27;, given &quot;</span> +</span><br><span class=\"line\">\t\t\tacceptableTypes + <span class=\"string\">&quot; and supported &quot;</span> + producibleTypes);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2.浏览器会根据自己能生产的类型的数据进行内容协商，确定最后返回值的类型</p>\n<p>3.消息转换</p>\n<p>HttpMessageConverter消息转换器是一个接口，里面定义了消息转换的相关方法，用这些方法来进行返回值类型的转换</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">HttpMessageConverter</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">//是否能将mediaType媒体类型的数据转换为clazz类型的数据</span></span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"title function_\">canRead</span><span class=\"params\">(Class&lt;?&gt; clazz, <span class=\"meta\">@Nullable</span> MediaType mediaType)</span>;</span><br><span class=\"line\">    <span class=\"comment\">//是否能将clazz类型的数据转换为mediaType媒体类型的数据</span></span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"title function_\">canWrite</span><span class=\"params\">(Class&lt;?&gt; clazz, <span class=\"meta\">@Nullable</span> MediaType mediaType)</span>;</span><br><span class=\"line\">rn the list of supported media types, potentially an immutable copy</span><br><span class=\"line\">\t */</span><br><span class=\"line\">    <span class=\"comment\">//能支持转换的媒体类型</span></span><br><span class=\"line\">\tList&lt;MediaType&gt; <span class=\"title function_\">getSupportedMediaTypes</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//从转换器中读取T类型数据</span></span><br><span class=\"line\">\tT <span class=\"title function_\">read</span><span class=\"params\">(Class&lt;? extends T&gt; clazz, HttpInputMessage inputMessage)</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throws</span> IOException, HttpMessageNotReadableException;</span><br><span class=\"line\">    <span class=\"comment\">//向outputMessage中写入T类型的数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">write</span><span class=\"params\">(T t, <span class=\"meta\">@Nullable</span> MediaType contentType, HttpOutputMessage outputMessage)</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throws</span> IOException, HttpMessageNotWritableException;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>SpringMVC中内置的所有类型转换器</p>\n<p><img src=\"https://s2.loli.net/2022/05/26/oGiReDN7mcwLOJU.png\" alt=\"image-20220502154807257\"></p>\n<p>遍历所有的类型转化器，判断哪个类型转换器能处理这个请求（将对象类型转换为JSON数据）</p>\n<p>其中MappingJackson2HttpMessageConverter类向的能处理我们的对象类型（实际上它能处理所有类型的返回值）</p>\n<p>然后用MappingJackson2HttpMessageConverter的write方法向outputMessage中写入转换后的JSON数据</p>\n<h4 id=\"原理总结\"><a href=\"#原理总结\" class=\"headerlink\" title=\"原理总结\"></a>原理总结</h4><p><img src=\"D:\\学习笔记\\picture\\image-20220502160312589-1669804541526-58.png\" alt=\"image-20220502160312589\"></p>\n<p>根据@ResponBody注解判断使用RequestResponseBodyMethodProccessor这个返回值处理器，这个返回值处理器又会根据返回值选择不同的Converter来转换数据的格式，例如返回资源文件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">import org.springframework.core.io.FileSystemResource;</span></span><br><span class=\"line\"><span class=\"comment\">import org.springframework.core.io.Resource;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/file&quot;)</span></span><br><span class=\"line\"> <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> Resource <span class=\"title function_\">testParam</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileSystemResource</span>(<span class=\"string\">&quot;src/main/resources/application.yml&quot;</span>);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后得到的就不是JSON格式的数据了：</p>\n<p><img src=\"https://s2.loli.net/2022/05/26/r1xqvUn4L8oemGl.png\" alt=\"image-20220502161738933\"></p>\n<h4 id=\"内容协商\"><a href=\"#内容协商\" class=\"headerlink\" title=\"内容协商\"></a>内容协商</h4><p>如果在pom文件中引入这个依赖（这个jar包可以把对象转换为XML格式的数据）</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-dataformat-xml<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>那么返回给浏览器的数据就是XML的数据，这是因为在浏览器的响应头中设置的优先级</p>\n<p><img src=\"https://s2.loli.net/2022/05/26/mPwSYCWdg5kVABR.png\" alt=\"image-20220502145831045\"></p>\n<p>xhtml+xml的优先级高(q=0.9)，比q=0.8的<code>*/*</code>要高，所以Spring会优先将其转换为XML格式的数据，而如果我们在PostMan中将Accept字段的值设置为<code>*/*</code>，就会得到JSON格式的数据。我们需要不同格式的数据只需要改变Header中Accept的字段的值即可。这些得益于Spring的内容协商功能。</p>\n<p>原理：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;MediaType&gt; acceptableTypes = getAcceptableMediaTypes(request);</span><br></pre></td></tr></table></figure>\n\n<p>获取浏览器支持的类型，这个方法中会获取request中的ACCEPT字段并解析成List<MediaType>类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;MediaType&gt; producibleTypes = getProducibleMediaTypes(request, valueType, targetType);</span><br></pre></td></tr></table></figure>\n\n<p>获得服务器可以返回的媒体类型</p>\n<p>方法体：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> List&lt;MediaType&gt; <span class=\"title function_\">getProducibleMediaTypes</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">\t\tHttpServletRequest request, Class&lt;?&gt; valueClass, <span class=\"meta\">@Nullable</span> Type targetType)</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//从请求域中获取媒体类型</span></span><br><span class=\"line\">\tSet&lt;MediaType&gt; mediaTypes =</span><br><span class=\"line\">\t\t\t(Set&lt;MediaType&gt;) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE);</span><br><span class=\"line\">       <span class=\"comment\">//如果非空则直接返回</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!CollectionUtils.isEmpty(mediaTypes)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(mediaTypes);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!<span class=\"built_in\">this</span>.allSupportedMediaTypes.isEmpty()) &#123;</span><br><span class=\"line\">\t\tList&lt;MediaType&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">           <span class=\"comment\">//遍历所有的类型转换器Converter</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (HttpMessageConverter&lt;?&gt; converter : <span class=\"built_in\">this</span>.messageConverters) &#123;</span><br><span class=\"line\">               <span class=\"comment\">//如果这个类型转换器是一个合法的转换器</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (converter <span class=\"keyword\">instanceof</span> GenericHttpMessageConverter &amp;&amp; targetType != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                   <span class=\"comment\">//转换器是否支持valueClass类型的数据（GenericHttpMessageConverter这个类有三个参数，媒体类型为空）</span></span><br><span class=\"line\">                   <span class=\"comment\">//targetType,valueClass都是从返回参数中得到的，targetType只为GenericHttpMessageConverter类服务</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (((GenericHttpMessageConverter&lt;?&gt;) converter).canWrite(targetType, valueClass, <span class=\"literal\">null</span>)) \t\t\t\t\t &#123;</span><br><span class=\"line\">                       <span class=\"comment\">//将转换器能转换出的媒体类型添加到集合中</span></span><br><span class=\"line\">\t\t\t\t\tresult.addAll(converter.getSupportedMediaTypes());</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (converter.canWrite(valueClass, <span class=\"literal\">null</span>)) &#123;</span><br><span class=\"line\">\t\t\t\tresult.addAll(converter.getSupportedMediaTypes());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Collections.singletonList(MediaType.ALL);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>内容协商原理（writeWithMessageConverters方法执行流程，源码在上一章有）：</p>\n<ol>\n<li><p>判断请求域中是否已经有返回值类型（可能在拦截的时候做了处理）</p>\n</li>\n<li><p>获得浏览器支持的媒体类型（基于内容协商管理器contentNegotiationManager，使用请求头策略HeaderContentNegotiationStrategy获取）</p>\n</li>\n<li><p>获得服务器能产生的媒体类型：</p>\n<p>1.遍历所有的转换器，找到所有支持返回类型的转换器(A -&gt; 转换器 -&gt; B，已知A，找到所有的转换器)</p>\n<p>2.将这些转换器能转换出的媒体类型统计出来</p>\n</li>\n<li><p>遍历浏览器支持的媒体类型和服务器能产生的媒体类型，找到所有能匹配的媒体类型</p>\n</li>\n<li><p>对找到的媒体类型按照优先级排序（设置的q的值），取最大的作为返回的媒体类型</p>\n</li>\n<li><p>再次遍历所有的转化器，找到能转换的转换器（A（返回值类型） -&gt; 转换器 -&gt; B（媒体类型），已知A,B找到转换器）</p>\n</li>\n<li><p>用转换器实现A（返回值类型） -&gt; 转换器 -&gt; B（媒体类型）的转换</p>\n</li>\n</ol>\n<h4 id=\"自定义内容协商策略\"><a href=\"#自定义内容协商策略\" class=\"headerlink\" title=\"自定义内容协商策略\"></a>自定义内容协商策略</h4><p>浏览器的ACCEPT字段我们提交form表单后没办法随意修改，所以我们可以将协商内容放在参数部分</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">mvc:</span></span><br><span class=\"line\">    <span class=\"attr\">contentnegotiation:</span></span><br><span class=\"line\">      <span class=\"attr\">favor-parameter:</span> <span class=\"literal\">true</span>  <span class=\"comment\">#开启请求参数内容协商模式</span></span><br></pre></td></tr></table></figure>\n\n<p>开启参数内容协商后，我们就可以用format参数决定返回值的类型（json，xml）</p>\n<p>（如果内容协商失败，会返回406）</p>\n<p>获取浏览器的请求类型：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;MediaType&gt; <span class=\"title function_\">resolveMediaTypes</span><span class=\"params\">(NativeWebRequest request)</span> <span class=\"keyword\">throws</span> HttpMediaTypeNotAcceptableException &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (ContentNegotiationStrategy strategy : <span class=\"built_in\">this</span>.strategies) &#123;</span><br><span class=\"line\">\t\tList&lt;MediaType&gt; mediaTypes = strategy.resolveMediaTypes(request);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (mediaTypes.equals(MEDIA_TYPE_ALL_LIST)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> mediaTypes;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> MEDIA_TYPE_ALL_LIST;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在将favor-parameter设置为true后，这里再寻找浏览器能接受的媒体类型时会多一种策略：根据参数确定媒体类型，而这个策略排在根据请求头确定媒体类型的策略之前，所以会按照参数策略确定媒体类型。</p>\n<p><img src=\"https://s2.loli.net/2022/05/26/y2jnEmiaZMSI8PJ.png\" alt=\"image-20220502222239380\"></p>\n<p>确定过程是先拿到请求参数对应的format字段的值（比如json），然后根据这个值得到对应的媒体类型，可以忽略大小写</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> MediaType <span class=\"title function_\">lookupMediaType</span><span class=\"params\">(String extension)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.mediaTypes.get(extension.toLowerCase(Locale.ENGLISH));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;MediaType&gt; <span class=\"title function_\">resolveMediaTypeKey</span><span class=\"params\">(NativeWebRequest webRequest, <span class=\"meta\">@Nullable</span> String key)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throws</span> HttpMediaTypeNotAcceptableException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (StringUtils.hasText(key)) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">MediaType</span> <span class=\"variable\">mediaType</span> <span class=\"operator\">=</span> lookupMediaType(key);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (mediaType != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\thandleMatch(key, mediaType);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> Collections.singletonList(mediaType);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmediaType = handleNoMatch(webRequest, key);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (mediaType != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\taddMapping(key, mediaType);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> Collections.singletonList(mediaType);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> MEDIA_TYPE_ALL_LIST;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果拿到的媒体类型是<code>&quot;*/*&quot;</code>，则使用下一个策略，如果所有策略都返回<code>*/*</code>，则返回<code>*/*</code></p>\n<h4 id=\"内容协商适用场景\"><a href=\"#内容协商适用场景\" class=\"headerlink\" title=\"内容协商适用场景\"></a>内容协商适用场景</h4><p>假如我们有这个场景：</p>\n<p>1.浏览器发请求，返回xml格式的数据</p>\n<p>2.AJAX发请求返回JSON格式的数据</p>\n<p>3.App发请求返回一个名为”x-atguigu”格式的数据</p>\n<p>在容器启动的时候，Spring会帮我们注册默认的Converter进入Spring容器：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addDefaultHttpMessageConverters</span><span class=\"params\">(List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters)</span> &#123;</span><br><span class=\"line\">\tmessageConverters.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayHttpMessageConverter</span>());</span><br><span class=\"line\">\tmessageConverters.add(<span class=\"keyword\">new</span> <span class=\"title class_\">StringHttpMessageConverter</span>());</span><br><span class=\"line\">\tmessageConverters.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ResourceHttpMessageConverter</span>());</span><br><span class=\"line\">\tmessageConverters.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ResourceRegionHttpMessageConverter</span>());</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tmessageConverters.add(<span class=\"keyword\">new</span> <span class=\"title class_\">SourceHttpMessageConverter</span>&lt;&gt;());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Ignore when no TransformerFactory implementation is available...</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmessageConverters.add(<span class=\"keyword\">new</span> <span class=\"title class_\">AllEncompassingFormHttpMessageConverter</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (romePresent) &#123;</span><br><span class=\"line\">\t\tmessageConverters.add(<span class=\"keyword\">new</span> <span class=\"title class_\">AtomFeedHttpMessageConverter</span>());</span><br><span class=\"line\">\t\tmessageConverters.add(<span class=\"keyword\">new</span> <span class=\"title class_\">RssChannelHttpMessageConverter</span>());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (jackson2XmlPresent) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Jackson2ObjectMapperBuilder</span> <span class=\"variable\">builder</span> <span class=\"operator\">=</span> Jackson2ObjectMapperBuilder.xml();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.applicationContext != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tbuilder.applicationContext(<span class=\"built_in\">this</span>.applicationContext);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmessageConverters.add(<span class=\"keyword\">new</span> <span class=\"title class_\">MappingJackson2XmlHttpMessageConverter</span>(builder.build()));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (jaxb2Present) &#123;</span><br><span class=\"line\">\t\tmessageConverters.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Jaxb2RootElementHttpMessageConverter</span>());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (jackson2Present) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Jackson2ObjectMapperBuilder</span> <span class=\"variable\">builder</span> <span class=\"operator\">=</span> Jackson2ObjectMapperBuilder.json();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.applicationContext != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tbuilder.applicationContext(<span class=\"built_in\">this</span>.applicationContext);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmessageConverters.add(<span class=\"keyword\">new</span> <span class=\"title class_\">MappingJackson2HttpMessageConverter</span>(builder.build()));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (gsonPresent) &#123;</span><br><span class=\"line\">\t\tmessageConverters.add(<span class=\"keyword\">new</span> <span class=\"title class_\">GsonHttpMessageConverter</span>());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (jsonbPresent) &#123;</span><br><span class=\"line\">\t\tmessageConverters.add(<span class=\"keyword\">new</span> <span class=\"title class_\">JsonbHttpMessageConverter</span>());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (jackson2SmilePresent) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Jackson2ObjectMapperBuilder</span> <span class=\"variable\">builder</span> <span class=\"operator\">=</span> Jackson2ObjectMapperBuilder.smile();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.applicationContext != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tbuilder.applicationContext(<span class=\"built_in\">this</span>.applicationContext);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmessageConverters.add(<span class=\"keyword\">new</span> <span class=\"title class_\">MappingJackson2SmileHttpMessageConverter</span>(builder.build()));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (jackson2CborPresent) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Jackson2ObjectMapperBuilder</span> <span class=\"variable\">builder</span> <span class=\"operator\">=</span> Jackson2ObjectMapperBuilder.cbor();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.applicationContext != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tbuilder.applicationContext(<span class=\"built_in\">this</span>.applicationContext);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmessageConverters.add(<span class=\"keyword\">new</span> <span class=\"title class_\">MappingJackson2CborHttpMessageConverter</span>(builder.build()));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中我们注意到有诸如jackson2XmlPresent是否为true的判断，而这个值的true还是false取决于：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">ClassLoader</span> <span class=\"variable\">classLoader</span> <span class=\"operator\">=</span> WebMvcConfigurationSupport.class.getClassLoader();</span><br><span class=\"line\">\tromePresent = ClassUtils.isPresent(<span class=\"string\">&quot;com.rometools.rome.feed.WireFeed&quot;</span>, classLoader);</span><br><span class=\"line\">\tjaxb2Present = ClassUtils.isPresent(<span class=\"string\">&quot;javax.xml.bind.Binder&quot;</span>, classLoader);</span><br><span class=\"line\">\tjackson2Present = ClassUtils.isPresent(<span class=\"string\">&quot;com.fasterxml.jackson.databind.ObjectMapper&quot;</span>, classLoader) &amp;&amp;</span><br><span class=\"line\">\t\t\tClassUtils.isPresent(<span class=\"string\">&quot;com.fasterxml.jackson.core.JsonGenerator&quot;</span>, classLoader);</span><br><span class=\"line\">\tjackson2XmlPresent = ClassUtils.isPresent(<span class=\"string\">&quot;com.fasterxml.jackson.dataformat.xml.XmlMapper&quot;</span>, classLoader);</span><br><span class=\"line\">\tjackson2SmilePresent = ClassUtils.isPresent(<span class=\"string\">&quot;com.fasterxml.jackson.dataformat.smile.SmileFactory&quot;</span>, classLoader);</span><br><span class=\"line\">\tjackson2CborPresent = ClassUtils.isPresent(<span class=\"string\">&quot;com.fasterxml.jackson.dataformat.cbor.CBORFactory&quot;</span>, classLoader);</span><br><span class=\"line\">\tgsonPresent = ClassUtils.isPresent(<span class=\"string\">&quot;com.google.gson.Gson&quot;</span>, classLoader);</span><br><span class=\"line\">\tjsonbPresent = ClassUtils.isPresent(<span class=\"string\">&quot;javax.json.bind.Jsonb&quot;</span>, classLoader);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以引入这个依赖后，才可以实现对象和XML格式之间的转换。</p>\n<p>适用类工具ClassUtils判断某个类是否存在</p>\n<p>我们想自定义消息转换器，方法和前面一样，向Spring容器中注册WebMvcConfigurer组件，在里面通过实现里面的方法来定制化我们想要的功能。</p>\n<p>这里面有两个方法可以让我们定制化消息转换器：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configureMessageConverters</span><span class=\"params\">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">extendMessageConverters</span><span class=\"params\">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class=\"line\">       WebMvcConfigurer.<span class=\"built_in\">super</span>.extendMessageConverters(converters);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面那个会覆盖默认的类型转换器，下面那个会在默认类型转换器的基础上添加新的消息转换器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class&lt;T&gt; 类的 isAssignableFrom方法 用于判断某个类是不是一个类或者它的子类</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;MediaType&gt; <span class=\"title function_\">getSupportedMediaTypes</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> MediaType.parseMediaTypes(<span class=\"string\">&quot;application/atguigu&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过字符串得到一个application/atguigu类型的消息转换器（集合类型）</p>\n<p>实现一个自定义的消息转换器：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AtGuiguConverter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HttpMessageConverter</span>&lt;Pet&gt; &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">canRead</span><span class=\"params\">(Class&lt;?&gt; clazz, MediaType mediaType)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//支持转换什么类型的数据（Pet）</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">canWrite</span><span class=\"params\">(Class&lt;?&gt; clazz, MediaType mediaType)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> clazz.isAssignableFrom(Pet.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//支持转换成什么类型的数据（application/atguigu类型）</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;MediaType&gt; <span class=\"title function_\">getSupportedMediaTypes</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MediaType.parseMediaTypes(<span class=\"string\">&quot;application/atguigu&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Pet <span class=\"title function_\">read</span><span class=\"params\">(Class&lt;? extends Pet&gt; clazz, HttpInputMessage inputMessage)</span> <span class=\"keyword\">throws</span> IOException, HttpMessageNotReadableException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//如何转换，定制化转换规则</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">write</span><span class=\"params\">(Pet pet, MediaType contentType, HttpOutputMessage outputMessage)</span> <span class=\"keyword\">throws</span> IOException, HttpMessageNotWritableException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//转换后得到数据</span></span><br><span class=\"line\">        String data=pet.getName()+<span class=\"string\">&quot;:&quot;</span>+pet.getAge();</span><br><span class=\"line\">        <span class=\"comment\">//拿到封装在outputMessage的输出流</span></span><br><span class=\"line\">        <span class=\"type\">OutputStream</span> <span class=\"variable\">body</span> <span class=\"operator\">=</span> outputMessage.getBody();</span><br><span class=\"line\">        <span class=\"comment\">//往输出流中写入数据</span></span><br><span class=\"line\">        body.write(data.getBytes(StandardCharsets.UTF_8));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2022/05/26/RcgDOuXW3svw4Et.png\" alt=\"image-20220503004520534\"></p>\n<p>在WebMvcConfigurer中添加转换器：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//1、WebMvcConfigurer定制化SpringMVC的功能</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> WebMvcConfigurer <span class=\"title function_\">webMvcConfigurer</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WebMvcConfigurer</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">extendMessageConverters</span><span class=\"params\">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class=\"line\">                converters.add(<span class=\"keyword\">new</span> <span class=\"title class_\">AtGuiguConverter</span>());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>实现功能：</p>\n<p><img src=\"https://s2.loli.net/2022/05/26/RcgDOuXW3svw4Et.png\" alt=\"image-20220503004520534\"></p>\n<p>我们新添加的转换器和默认转换器的适用流程都是一样的</p>\n<p><img src=\"https://s2.loli.net/2022/05/26/yIM4q2z6xwtFp9U.png\" alt=\"image-20220503142857435\"></p>\n<h4 id=\"添加参数和媒体映射关系\"><a href=\"#添加参数和媒体映射关系\" class=\"headerlink\" title=\"添加参数和媒体映射关系\"></a>添加参数和媒体映射关系</h4><p>如果我们想在url中设置format字段，当format=gg（可以是url参数，也可以是请求体中的参数）时，内容协商后的媒体类型是atguigu，那么就需要我们在内容协商管理器中添加我们自定义的映射规则。（和前面一样要在WebMvcConfigurer里面实现里面的方法configureContentNegotiation）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//1、WebMvcConfigurer定制化SpringMVC的功能</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> WebMvcConfigurer <span class=\"title function_\">webMvcConfigurer</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WebMvcConfigurer</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">extendMessageConverters</span><span class=\"params\">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class=\"line\">                converters.add(<span class=\"keyword\">new</span> <span class=\"title class_\">AtGuiguConverter</span>());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configureContentNegotiation</span><span class=\"params\">(ContentNegotiationConfigurer configurer)</span> &#123;</span><br><span class=\"line\">                Map&lt;String, MediaType&gt; map=<span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">                map.put(<span class=\"string\">&quot;json&quot;</span>,MediaType.APPLICATION_JSON);</span><br><span class=\"line\">                map.put(<span class=\"string\">&quot;xml&quot;</span>,MediaType.APPLICATION_XML);</span><br><span class=\"line\">                map.put(<span class=\"string\">&quot;gg&quot;</span>,MediaType.parseMediaType(<span class=\"string\">&quot;application/atguigu&quot;</span>));</span><br><span class=\"line\">                <span class=\"type\">ParameterContentNegotiationStrategy</span> <span class=\"variable\">paramStrage</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ParameterContentNegotiationStrategy</span>(map);</span><br><span class=\"line\">                configurer.strategies(Arrays.asList(paramStrage));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们回顾一下之前所讲的内容：</p>\n<p>在进行内容协商的时候要获取浏览器能接受的媒体类型，服务器要根据浏览器能接受的媒体类型返回对应格式的数据，而获取媒体类型时Spring会使用内容协商管理器遍历所有注册到Spring容器中的内容协商策略（获取浏览器支持的媒体类型的途径），在默认情况下，内容协商策略只有根据请求头获取媒体类型（HeaderContentNegotiationStrategy），而在spring.mvc.contentnegotiation.favor-parameter设置为true后，Spring容器中会多出一种策略：按照请求参数获取媒体类型（ParameterContentNegotiationStrategy），创建这个策略对象需要传入一个<code>Map&lt;String, MediaType&gt;</code>类型的参数，代表format值和媒体类型的对应关系，默认情况下只有json和xml，所以我们需要把这两个加上的同时将gg和application/atguigu媒体类型建立关系，然后创建新的策略对象添加进策略协商管理器中。可以看到结果生效：</p>\n<p><img src=\"https://s2.loli.net/2022/05/26/DYvVo7rbaQ9LEnF.png\" alt=\"image-20220503152216636\"></p>\n<p>但是我们也发现根据请求设置媒体类型的策略失效了：</p>\n<p><img src=\"https://s2.loli.net/2022/05/26/ax6Z2SLFEBJvcAH.png\" alt=\"image-20220503152319677\"></p>\n<p>这是因为我们在配置类中用configurer.strategies(Arrays.asList(paramStrage));重新设置了内容协商管理器的所有策略（覆盖了默认情况，而不是添加），我们没有添加HeaderContentNegotiationStrategy策略，所以请求头会失效。同时在没有获取到浏览器的媒体类型时，会默认将媒体类型视为<code>*/*</code>，即接受所有的类型：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;MediaType&gt; <span class=\"title function_\">resolveMediaTypes</span><span class=\"params\">(NativeWebRequest request)</span> <span class=\"keyword\">throws</span> HttpMediaTypeNotAcceptableException &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (ContentNegotiationStrategy strategy : <span class=\"built_in\">this</span>.strategies) &#123;</span><br><span class=\"line\">\t\tList&lt;MediaType&gt; mediaTypes = strategy.resolveMediaTypes(request);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (mediaTypes.equals(MEDIA_TYPE_ALL_LIST)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> mediaTypes;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> MEDIA_TYPE_ALL_LIST;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而服务器能产生json,xml,atguigu等类型的数据，都能与<code>*/*</code>匹配，其中json优先级最高，排序后是第一个，所以会默认使用json格式的数据返回。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ParameterContentNegotiationStrategy</span> <span class=\"variable\">paramStrage</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ParameterContentNegotiationStrategy</span>(map);</span><br><span class=\"line\">HeaderContentNegotiationStrategy headerStrage=<span class=\"keyword\">new</span> <span class=\"title class_\">HeaderContentNegotiationStrategy</span>();</span><br><span class=\"line\">configurer.strategies(Arrays.asList(paramStrage,headerStrage));</span><br></pre></td></tr></table></figure>\n\n<p>添加请求头策略后又重新生效</p>\n<p>在请求头策略和参数策略同时存在时，优先使用参数策略。</p>\n<p>如果不想获取format字段的数据作为协商依据，可以通过paramStrage.setParameterName(“ff”)方法更换为其他字段。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configureContentNegotiation</span><span class=\"params\">(ContentNegotiationConfigurer configurer)</span> &#123;</span><br><span class=\"line\">    Map&lt;String, MediaType&gt; map=<span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;json&quot;</span>,MediaType.APPLICATION_JSON);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;xml&quot;</span>,MediaType.APPLICATION_XML);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;gg&quot;</span>,MediaType.parseMediaType(<span class=\"string\">&quot;application/atguigu&quot;</span>));</span><br><span class=\"line\">    <span class=\"type\">ParameterContentNegotiationStrategy</span> <span class=\"variable\">paramStrage</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ParameterContentNegotiationStrategy</span>(map);</span><br><span class=\"line\">    paramStrage.setParameterName(<span class=\"string\">&quot;ff&quot;</span>);</span><br><span class=\"line\">    HeaderContentNegotiationStrategy headerStrage=<span class=\"keyword\">new</span> <span class=\"title class_\">HeaderContentNegotiationStrategy</span>();</span><br><span class=\"line\">    configurer.strategies(Arrays.asList(paramStrage,headerStrage));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"视图解析\"><a href=\"#视图解析\" class=\"headerlink\" title=\"视图解析\"></a>视图解析</h3><p><a href=\"https://blog.csdn.net/u011863024/article/details/113667946\">https://blog.csdn.net/u011863024/article/details/113667946</a></p>\n<h4 id=\"Thymeleaf模板引擎\"><a href=\"#Thymeleaf模板引擎\" class=\"headerlink\" title=\"Thymeleaf模板引擎\"></a>Thymeleaf模板引擎</h4><p>Thymeleaf模板引擎适用于开发后台管理界面（给管理人员使用而非具体的用户），没有与后端分离，性能也较差，但是开发起来会容易很多。</p>\n<p>使用Thymeleaf模板的html页面，放在前面也能运行，使用的是没有数据的普通页面，放在Spring的资源目录下就会经过视图的渲染而获得数据</p>\n<p>引入依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>自动配好的策略</p>\n<ol>\n<li>所有thymeleaf的配置值都在 ThymeleafProperties</li>\n<li>配置好了 <strong>SpringTemplateEngine</strong></li>\n<li>配好了 <strong>ThymeleafViewResolver</strong></li>\n<li>我们只需要直接开发页面</li>\n</ol>\n<p>在寻找html页面时会在classpath:/templates/目录下面找，并且会自动帮我们加上.html的后缀名，这两个和我们的字符串拼接再一起共同构成html的请求路径</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static final String DEFAULT_PREFIX = &quot;classpath:/templates/&quot;;//模板放置处</span><br><span class=\"line\">public static final String DEFAULT_SUFFIX = &quot;.html&quot;;//文件的后缀名</span><br></pre></td></tr></table></figure>\n\n<p>JSP语法：</p>\n<h5 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h5><table>\n<thead>\n<tr>\n<th>表达式名字</th>\n<th>语法</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>变量取值</td>\n<td>${…}</td>\n<td>获取请求域、session域、对象等值</td>\n</tr>\n<tr>\n<td>选择变量</td>\n<td>*{…}</td>\n<td>获取上下文对象值</td>\n</tr>\n<tr>\n<td>消息</td>\n<td>#{…}</td>\n<td>获取国际化等值</td>\n</tr>\n<tr>\n<td>链接</td>\n<td>@{…}</td>\n<td>生成链接</td>\n</tr>\n<tr>\n<td>片段表达式</td>\n<td>~{…}</td>\n<td>jsp:include 作用，引入公共页面片段</td>\n</tr>\n</tbody></table>\n<h5 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;msg&#125;&quot;</span>&gt;</span>nice<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;www.baidu.com&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;$&#123;link&#125;&quot;</span>&gt;</span>去百度<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>  <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;www.google.com&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/link&#125;&quot;</span>&gt;</span>去百度<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>直接打开这个html页面显示的”去百度”这个原始内容，经过Spring加载后会显示变量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xmlns:th=&quot;http://www.thymeleaf.org&quot;</span><br></pre></td></tr></table></figure>\n\n<p>这个用于引入命名空间</p>\n<p>修改标签的值：<code>th:text=&quot;$&#123;msg&#125;&quot;</code></p>\n<p>设置页面跳转的值：</p>\n<p><code>th:href=&quot;$&#123;link&#125;&quot;</code> 将链接内容替换为model中link变量的值（替换的是变量的值）</p>\n<p><code>th:href=&quot;@&#123;/link&#125;&quot;</code>  将链接内容替换为/link（替换的字面量的值）</p>\n<p>用${}获取我们放在model中的数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ViewTestController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">(Model model)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//model中的数据会被放在请求域中 request.setAttribute(&quot;a&quot;,aa)</span></span><br><span class=\"line\">        model.addAttribute(<span class=\"string\">&quot;msg&quot;</span>,<span class=\"string\">&quot;一定要大力发展工业文化&quot;</span>);</span><br><span class=\"line\">        model.addAttribute(<span class=\"string\">&quot;link&quot;</span>,<span class=\"string\">&quot;http://www.baidu.com&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>设置标签内部属性的值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src=&quot;../../images/gtvglogo.png&quot;  </span><br><span class=\"line\">     th:attr=&quot;src=@&#123;/images/gtvglogo.png&#125;,title=#&#123;logo&#125;,alt=#&#123;logo&#125;&quot; /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>可以在双引号中使用单引号进行字符串拼接操作</p>\n<p>Tip：@GetMapping(value={}) 这些注解的value字段可以是数组，表示这些注解对应到同一个controller</p>\n<p>thymleaf原则:model有值就用model里的值，model里没有值就用html中的值。</p>\n<p>官网:thymeleaf.org/doc</p>\n<p>th:action=”@{/login}” 加在form表单上，表示设置form表单请求的url</p>\n<p>controller返回 “redirect:/main.html”表示进行请求重定向</p>\n<p>th:text=${msg} 修改内容，用这个可以动态修改文本自己标签页</p>\n<p>除了能获得model中的数据，也默认能有session中的数据（参数名需要叫session）</p>\n<p>thymeleaf行内写法:[[${session.user.name}]]</p>\n<p>跳转到template目录下的basic目录下，返回”basic/index”即可</p>\n<p>html中需要用src属性，thymeleaf用th:src=”@{/}”</p>\n<p>html需要用href属性的，thymeleaf用th:href=”@{/}”</p>\n<h5 id=\"模板引入\"><a href=\"#模板引入\" class=\"headerlink\" title=\"模板引入\"></a>模板引入</h5><p>html页面可能会有很多功能的部分，例如导航条，侧边栏等。如果要修改这些部分的话需要修改所以的html页面，十分繁琐，所以我们可以使用thymeleaf的模板语法来将html可能会用到的功能组件保存起来，再需要使用的时候从组件库中引入组件（组件可以是任何公共的部分，例如公共的css，js，html元素），这样在修改组件的时候直接修改组件库的内容即可。</p>\n<p>引入组件的方式可以使用thymleaf提供的fragment字段来设置一个唯一的标识，也可以使用html’的属性选择器（比如设置了id，引入的时候使用#id来引入）</p>\n<p>使用fragment字段：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span> <span class=\"attr\">th:fragment</span>=<span class=\"string\">&quot;commonheader&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--common--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;css/style.css&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/css/style.css&#125;&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>引入的时候：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:include</span>=<span class=\"string\">&quot;common :: commonheader&quot;</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>common是存放组件的<strong>html文件</strong>的名称，commonheader是我们设置的th:fragmen字段的值</p>\n<p>使用id：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;commonscript&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Placed js at the end of the document so the pages load faster --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">&quot;@&#123;/js/jquery-1.10.2.min.js&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">&quot;@&#123;/js/jquery-ui-1.9.2.custom.min.js&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">&quot;@&#123;/js/jquery-migrate-1.2.1.min.js&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">&quot;@&#123;/js/bootstrap.min.js&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">&quot;@&#123;/js/modernizr.min.js&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">&quot;@&#123;/js/jquery.nicescroll.js&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--common scripts for all pages--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">&quot;@&#123;/js/scripts.js&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>引入的时候：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">&quot;common :: #commonscript&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>其实就是多加了一个#</p>\n<p>组件库里的链接(href)和内容(src) ，都要替换成th的格式</p>\n<p>编写组件库common.html：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><span class=\"comment\">&lt;!--注意要添加xmlns:th才能添加thymeleaf的标签--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span> <span class=\"attr\">th:fragment</span>=<span class=\"string\">&quot;commonheader&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--common--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;css/style.css&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/css/style.css&#125;&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;css/style-responsive.css&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/css/style-responsive.css&#125;&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- left side start--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;leftmenu&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;left-side sticky-left-side&quot;</span>&gt;</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;left-side-inner&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t...</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--sidebar nav start--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav nav-pills nav-stacked custom-nav&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/main.html&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-home&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Dashboard<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            ...</span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;menu-list nav-active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-th-list&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Data Tables<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;sub-menu-list&quot;</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/basic_table&#125;&quot;</span>&gt;</span> Basic Table<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/dynamic_table&#125;&quot;</span>&gt;</span> Advanced Table<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/responsive_table&#125;&quot;</span>&gt;</span> Responsive Table<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/editable_table&#125;&quot;</span>&gt;</span> Edit Table<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            ...</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--sidebar nav end--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- left side end--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- header section start--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:fragment</span>=<span class=\"string\">&quot;headermenu&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;header-section&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--toggle button start--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;toggle-btn&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-bars&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--toggle button end--&gt;</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- header section end--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;commonscript&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Placed js at the end of the document so the pages load faster --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">&quot;@&#123;/js/jquery-1.10.2.min.js&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">&quot;@&#123;/js/jquery-ui-1.9.2.custom.min.js&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">&quot;@&#123;/js/jquery-migrate-1.2.1.min.js&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">&quot;@&#123;/js/bootstrap.min.js&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">&quot;@&#123;/js/modernizr.min.js&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">&quot;@&#123;/js/jquery.nicescroll.js&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--common scripts for all pages--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">&quot;@&#123;/js/scripts.js&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>引入组件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;description&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;author&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;ThemeBucket&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;shortcut icon&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;image/png&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Basic Table<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:include</span>=<span class=\"string\">&quot;common :: commonheader&quot;</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"comment\">&lt;!--将common.html的代码段 插进来--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;sticky-header&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">&quot;common :: #leftmenu&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- main content start--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;main-content&quot;</span> &gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">&quot;common :: headermenu&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- main content end--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Placed js at the end of the document so the pages load faster --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">&quot;common :: #commonscript&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"引入语法\"><a href=\"#引入语法\" class=\"headerlink\" title=\"引入语法\"></a>引入语法</h5><p><a href=\"https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#difference-between-thinsert-and-threplace-and-thinclude\">https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#difference-between-thinsert-and-threplace-and-thinclude</a></p>\n<p>（其实都用div即可）</p>\n<p>假如在footer.html中有</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">footer</span> <span class=\"attr\">th:fragment</span>=<span class=\"string\">&quot;copy&quot;</span>&gt;</span></span><br><span class=\"line\">\thello,lth</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>1.insert 引入用的标签在外，被引入的标签在内</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:insert</span>=<span class=\"string\">&quot;footer :: copy&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>替换后的效果是：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">        hello,lth</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2.replace 只保留被引入的标签</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">&quot;footer :: copy&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>替换后：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">  hello,lth</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3.include 只保留引入用的标签</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:include</span>=<span class=\"string\">&quot;footer :: copy&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>替换后：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  hello,lth</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"集合遍历\"><a href=\"#集合遍历\" class=\"headerlink\" title=\"集合遍历\"></a>集合遍历</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">th:each</span>=<span class=\"string\">&quot;pet,status:$&#123;pets&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>[[$&#123;status.index&#125;]]<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>[[$&#123;pet.name&#125;]]<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>[[$&#123;pet.age&#125;]]<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>除了我们集合中对应的对象，每个集合还默认会有一个status对象（默认在第二个参数里），里面有相关的索引信息</p>\n<h4 id=\"视图解析原理\"><a href=\"#视图解析原理\" class=\"headerlink\" title=\"视图解析原理\"></a>视图解析原理</h4><p>视图解析流程与前面所说一致，拿到返回值后，会根据返回值的类型以及注解判断使用哪种视图解析器，而对于返回值是String类型，且没有加上@ResponBody注解，则会使用ViewNameMethodReturnValueHandler这个返回值解析器来解析返回值。</p>\n<p>处理过程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleReturnValue</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Object returnValue, MethodParameter returnType,</span></span><br><span class=\"line\"><span class=\"params\">\t\tModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//如果返回值是字符串</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (returnValue <span class=\"keyword\">instanceof</span> CharSequence) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">viewName</span> <span class=\"operator\">=</span> returnValue.toString();</span><br><span class=\"line\">           <span class=\"comment\">//将视图的地址放入到视图容器中</span></span><br><span class=\"line\">\t\tmavContainer.setViewName(viewName);</span><br><span class=\"line\">           <span class=\"comment\">//判断是否能重定向</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isRedirectViewName(viewName)) &#123;</span><br><span class=\"line\">               <span class=\"comment\">//将重定向标志设置为true</span></span><br><span class=\"line\">\t\t\tmavContainer.setRedirectModelScenario(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (returnValue != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// should not happen</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UnsupportedOperationException</span>(<span class=\"string\">&quot;Unexpected return type: &quot;</span> +</span><br><span class=\"line\">\t\t\t\treturnType.getParameterType().getName() + <span class=\"string\">&quot; in method: &quot;</span> + returnType.getMethod());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在方法执行过程中，方法中数据（model）和视图地址（view）都会放在一个ModelAndViewContainer视图容器中</p>\n<p>isRedirectViewName(viewName)方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isRedirectViewName</span><span class=\"params\">(String viewName)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (PatternMatchUtils.simpleMatch(<span class=\"built_in\">this</span>.redirectPatterns, viewName) || viewName.startsWith(<span class=\"string\">&quot;redirect:&quot;</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果返回的字符符串和redirectPatterns设置的正则表达式匹配，或者以”redirect:”开头，则将这个字符串视为重定向。所以我们在加上redirect:作为前缀后可以进行请求重定向。</p>\n<p>如果我们方法去请求参数中有我们的自定义对象，那么这个自定义对象也会被放到mavContainer中</p>\n<p>在invokeHandlerMethod方法执行完后，会执行下面的getModelAndView方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> ModelAndView <span class=\"title function_\">getModelAndView</span><span class=\"params\">(ModelAndViewContainer mavContainer,</span></span><br><span class=\"line\"><span class=\"params\">\t\tModelFactory modelFactory, NativeWebRequest webRequest)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//拿到mavContainer容器</span></span><br><span class=\"line\">\tmodelFactory.updateModel(webRequest, mavContainer);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (mavContainer.isRequestHandled()) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">       <span class=\"comment\">//获取容器中的model，这里的model和我们在方法参数中通过设置Map型参数或者Model型参数拿到的对象是同一个，类型都是ModelMap类型，对应request的请求域</span></span><br><span class=\"line\">\t<span class=\"type\">ModelMap</span> <span class=\"variable\">model</span> <span class=\"operator\">=</span> mavContainer.getModel();</span><br><span class=\"line\">       <span class=\"comment\">//使用model(数据),视图名(view)创建一个ModelAndView对象</span></span><br><span class=\"line\">\t<span class=\"type\">ModelAndView</span> <span class=\"variable\">mav</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ModelAndView</span>(mavContainer.getViewName(), model, mavContainer.getStatus());</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!mavContainer.isViewReference()) &#123;</span><br><span class=\"line\">\t\tmav.setView((View) mavContainer.getView());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">       <span class=\"comment\">//如果model带有@RedirectAttribute注解，则会将这个model放入到下一次请求的参数中</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (model <span class=\"keyword\">instanceof</span> RedirectAttributes) &#123;</span><br><span class=\"line\">\t\tMap&lt;String, ?&gt; flashAttributes = ((RedirectAttributes) model).getFlashAttributes();</span><br><span class=\"line\">\t\t<span class=\"type\">HttpServletRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> webRequest.getNativeRequest(HttpServletRequest.class);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (request != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tRequestContextUtils.getOutputFlashMap(request).putAll(flashAttributes);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> mav;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>1.所有请求的执行结果都是一个ModelAndView对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br></pre></td></tr></table></figure>\n\n<p>2.如果视图名称为null，则会根据uri给它一个默认的视图名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">applyDefaultViewName(processedRequest, mv);</span><br></pre></td></tr></table></figure>\n\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/success&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">(Model model, HttpSession httpSession)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>会返回template目录下的success.html页面</p>\n<p>3.处理派发结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">processDispatchResult</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"meta\">@Nullable</span> HandlerExecutionChain mappedHandler, <span class=\"meta\">@Nullable</span> ModelAndView mv,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"meta\">@Nullable</span> Exception exception)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"variable\">errorView</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//如果有异常，处理异常</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (exception != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (exception <span class=\"keyword\">instanceof</span> ModelAndViewDefiningException) &#123;</span><br><span class=\"line\">\t\t\tlogger.debug(<span class=\"string\">&quot;ModelAndViewDefiningException encountered&quot;</span>, exception);</span><br><span class=\"line\">\t\t\tmv = ((ModelAndViewDefiningException) exception).getModelAndView();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">Object</span> <span class=\"variable\">handler</span> <span class=\"operator\">=</span> (mappedHandler != <span class=\"literal\">null</span> ? mappedHandler.getHandler() : <span class=\"literal\">null</span>);</span><br><span class=\"line\">\t\t\tmv = processHandlerException(request, response, handler, exception);</span><br><span class=\"line\">\t\t\terrorView = (mv != <span class=\"literal\">null</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 如果视图不为空，渲染视图</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (mv != <span class=\"literal\">null</span> &amp;&amp; !mv.wasCleared()) &#123;</span><br><span class=\"line\">\t\trender(mv, request, response);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (errorView) &#123;</span><br><span class=\"line\">\t\t\tWebUtils.clearErrorRequestAttributes(request);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.trace(<span class=\"string\">&quot;No view rendering, null ModelAndView returned.&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Concurrent handling started during a forward</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (mappedHandler != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Exception (if any) is already handled..</span></span><br><span class=\"line\">\t\tmappedHandler.triggerAfterCompletion(request, response, <span class=\"literal\">null</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>渲染视图：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render(mv, request, response);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">render</span><span class=\"params\">(ModelAndView mv, HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Determine locale for request and apply it to the response.</span></span><br><span class=\"line\">\t<span class=\"type\">Locale</span> <span class=\"variable\">locale</span> <span class=\"operator\">=</span></span><br><span class=\"line\">\t\t\t(<span class=\"built_in\">this</span>.localeResolver != <span class=\"literal\">null</span> ? <span class=\"built_in\">this</span>.localeResolver.resolveLocale(request) : request.getLocale());</span><br><span class=\"line\">\tresponse.setLocale(locale);</span><br><span class=\"line\">\t<span class=\"comment\">//根据视图名，拿到视图对象</span></span><br><span class=\"line\">\tView view;</span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">viewName</span> <span class=\"operator\">=</span> mv.getViewName();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (viewName != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// We need to resolve the view name.</span></span><br><span class=\"line\">\t\tview = resolveViewName(viewName, mv.getModelInternal(), locale, request);</span><br><span class=\"line\">           <span class=\"comment\">//如果无法解析就抛出异常</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (view == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServletException</span>(<span class=\"string\">&quot;Could not resolve view with name &#x27;&quot;</span> + mv.getViewName() +</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">&quot;&#x27; in servlet with name &#x27;&quot;</span> + getServletName() + <span class=\"string\">&quot;&#x27;&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// No need to lookup: the ModelAndView object contains the actual View object.</span></span><br><span class=\"line\">\t\tview = mv.getView();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (view == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServletException</span>(<span class=\"string\">&quot;ModelAndView [&quot;</span> + mv + <span class=\"string\">&quot;] neither contains a view name nor a &quot;</span> +</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">&quot;View object in servlet with name &#x27;&quot;</span> + getServletName() + <span class=\"string\">&quot;&#x27;&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Delegate to the View object for rendering.</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\tlogger.trace(<span class=\"string\">&quot;Rendering view [&quot;</span> + view + <span class=\"string\">&quot;] &quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (mv.getStatus() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tresponse.setStatus(mv.getStatus().value());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">           <span class=\"comment\">//得到视图后，调用view的render方法来觉得最后的视图如何渲染</span></span><br><span class=\"line\">\t\tview.render(mv.getModelInternal(), request, response);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.debug(<span class=\"string\">&quot;Error rendering view [&quot;</span> + view + <span class=\"string\">&quot;]&quot;</span>, ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>1.根据视图名拿到视图对象View，View中会定义页面的渲染逻辑（也就是得到返回给前端的文本）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> View <span class=\"title function_\">resolveViewName</span><span class=\"params\">(String viewName, <span class=\"meta\">@Nullable</span> Map&lt;String, Object&gt; model,</span></span><br><span class=\"line\"><span class=\"params\">\t\tLocale locale, HttpServletRequest request)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.viewResolvers != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (ViewResolver viewResolver : <span class=\"built_in\">this</span>.viewResolvers) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">View</span> <span class=\"variable\">view</span> <span class=\"operator\">=</span> viewResolver.resolveViewName(viewName, locale);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (view != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> view;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>遍历所有的视图解析器，尝试解析视图名，如果能成功解析就直接返回，否则返回null</p>\n<p>包含的视图解析有：</p>\n<p><img src=\"https://s2.loli.net/2022/05/26/4JR7XPYnoZhETNU.png\" alt=\"image-20220505003040015\"></p>\n<p>第0个是内容协商视图解析器，里面内容协商管理器中包含下面所有的视图解析器，因而还是会遍历下面所有的视图解析器，尝试解析viewName得到view。所以在这个循环中不会进入到下面中，但是解析过程还是用下面的解析器完成</p>\n<p>第2个视图解析器是Thymeleaf视图解析器，会创建RedirectView对象</p>\n<p>视图渲染逻辑：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">render</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Map&lt;String, ?&gt; model, HttpServletRequest request,</span></span><br><span class=\"line\"><span class=\"params\">\t\tHttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\tlogger.debug(<span class=\"string\">&quot;View &quot;</span> + formatViewName() +</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;, model &quot;</span> + (model != <span class=\"literal\">null</span> ? model : Collections.emptyMap()) +</span><br><span class=\"line\">\t\t\t\t(<span class=\"built_in\">this</span>.staticAttributes.isEmpty() ? <span class=\"string\">&quot;&quot;</span> : <span class=\"string\">&quot;, static attributes &quot;</span> + <span class=\"built_in\">this</span>.staticAttributes));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//这一步，将我们model中的数据放到一个新的map里面mergedModel</span></span><br><span class=\"line\">\tMap&lt;String, Object&gt; mergedModel = createMergedOutputModel(model, request, response);</span><br><span class=\"line\">\tprepareResponse(request, response);</span><br><span class=\"line\">       <span class=\"comment\">//将需要的参数都统合起来，觉得最后的视图渲染逻辑</span></span><br><span class=\"line\">\trenderMergedOutputModel(mergedModel, getRequestToExpose(request), response);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中：renderMergedOutputModel(mergedModel, getRequestToExpose(request), response)方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">renderMergedOutputModel</span><span class=\"params\">(Map&lt;String, Object&gt; model, HttpServletRequest request,</span></span><br><span class=\"line\"><span class=\"params\">\t\tHttpServletResponse response)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//获取模板URL，拼接URL并将model中的参数作为URL的路径参数放在后面</span></span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">targetUrl</span> <span class=\"operator\">=</span> createTargetUrl(model, request);</span><br><span class=\"line\">\ttargetUrl = updateTargetUrl(targetUrl, model, request, response);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 保存参数</span></span><br><span class=\"line\">\tRequestContextUtils.saveOutputFlashMap(targetUrl, request, response);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//使用原生的response.sendRedirect(encodedURL)方法进行重定向</span></span><br><span class=\"line\">\tsendRedirect(request, response, targetUrl, <span class=\"built_in\">this</span>.http10Compatible);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>返回值如果是以**”forward:”**开始，则返回new InternalResourceView(forwardUrl)视图对象</p>\n<p>功能是<strong>转发</strong>：request.getRequestDispatcher(URL).forward(request,response)</p>\n<p>转发是以当前请求为代理，生产一次的新的请求，将新的请求的返回值作为当前请求的返回值返回，调用的是request的方法，转发新的请求是服务器发起的，所以浏览器只会发送一次请求（相当于处理请求的时候调用了其他请求对应的方法），并且地址栏不会发送变化</p>\n<p>返回值如果以**”redirect:”**开始，则返回new RedirectView()视图对象</p>\n<p>功能是<strong>重定向</strong>：response.sendRedirect(URL)</p>\n<p>重定向是返回下一次应当查询的URL，让浏览器向这个URL发请求，调用的是response的方法，浏览器会发送多次请求直到得到结果，地址栏的请求地址会变成最后一次重定向的地址</p>\n<p>补充：转发和重定向的区别</p>\n<p><img src=\"https://s2.loli.net/2022/05/26/lOW3a9JGhrH7gXq.png\" alt=\"在这里插入图片描述\"></p>\n<p>返回值如果是普通字符串，则返回new ThymeleafView()视图对象，这个view会使用HTML解析器等工具填充数据，返回HTML文本</p>\n<p>我们可以实现一个View接口和一个自定义的视图解析器，这样就可以返回我们自定义的文本内容</p>\n<h3 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h3><p>添加拦截器需要我们实现HandlerInterceptor接口，里面有三个方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">HandlerInterceptor</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//用于前置拦截，在方法执行前执行</span></span><br><span class=\"line\">\t<span class=\"keyword\">default</span> <span class=\"type\">boolean</span> <span class=\"title function_\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">//后置拦截，在方法执行完，还没有渲染页面的时候，如果我们需要添加一些数据进model里面的可以使用这个方法</span></span><br><span class=\"line\">\t<span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title function_\">postHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t<span class=\"meta\">@Nullable</span> ModelAndView modelAndView)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">//在视图渲染完成后执行，用于进行一些清理工作</span></span><br><span class=\"line\">\t<span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterCompletion</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t<span class=\"meta\">@Nullable</span> Exception ex)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定制化SpringMVC的功能都需要我们实现一个WebMvcConfigurer</p>\n<h4 id=\"preHandle-前置拦截\"><a href=\"#preHandle-前置拦截\" class=\"headerlink\" title=\"preHandle 前置拦截\"></a>preHandle 前置拦截</h4><p>实现一个拦截器：</p>\n<p>如果session没有对应的值，说明没有登录，返回false表示进行拦截，返回true表示放行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoginIntercepter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HandlerInterceptor</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(request.getSession().getAttribute(<span class=\"string\">&quot;loginUser&quot;</span>)!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在实现的WebMvcConfigurer接口中，实现方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> &#123;</span><br><span class=\"line\">    registry.addInterceptor(<span class=\"keyword\">new</span> <span class=\"title class_\">LoginIntercepter</span>())</span><br><span class=\"line\">            .addPathPatterns(<span class=\"string\">&quot;/**&quot;</span>)</span><br><span class=\"line\">            .excludePathPatterns(<span class=\"string\">&quot;/login&quot;</span>,<span class=\"string\">&quot;/&quot;</span>,<span class=\"string\">&quot;/css/**&quot;</span>,<span class=\"string\">&quot;/js/**&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>addInterceptor：添加一个拦截器</p>\n<p>addPathPatterns：添加拦截的路由，动态路由和静态资源都会被拦截，所以要为静态资源的路径也放行</p>\n<p>excludePathPatterns：添加放行的路由</p>\n<p>重定向会丢失原来request中的数据（因为发了一个新的request），所以使用转发功能即可保留请求域中的数据</p>\n<h4 id=\"拦截器原理\"><a href=\"#拦截器原理\" class=\"headerlink\" title=\"拦截器原理\"></a>拦截器原理</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在执行mv = ha.handle(processedRequest, response, mappedHandler.getHandler());方法前，会先执行上述方法，可以看到只要这个方法返回false，请求过程就结束了。</p>\n<p>applyPreHandle：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">applyPreHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\tHandlerInterceptor[] interceptors = getInterceptors();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!ObjectUtils.isEmpty(interceptors)) &#123;</span><br><span class=\"line\">           <span class=\"comment\">//顺序执行所有的拦截器</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; interceptors.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">HandlerInterceptor</span> <span class=\"variable\">interceptor</span> <span class=\"operator\">=</span> interceptors[i];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!interceptor.preHandle(request, response, <span class=\"built_in\">this</span>.handler)) &#123;</span><br><span class=\"line\">                   <span class=\"comment\">//如果被拦截了则逆序执行返回true的拦截器的AfterCompletion方法</span></span><br><span class=\"line\">\t\t\t\ttriggerAfterCompletion(request, response, <span class=\"literal\">null</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.interceptorIndex = i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如代码所示，请求会顺序执行我们添加的拦截器列表，执行里面的preHandle方法。如果拦截器返回true则执行下一个拦截器，如果有拦截器返回false，也就是请求被拦截了，在返回doDispatch之前会执行triggerAfterCompletion方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">triggerAfterCompletion</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, <span class=\"meta\">@Nullable</span> Exception ex)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tHandlerInterceptor[] interceptors = getInterceptors();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!ObjectUtils.isEmpty(interceptors)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.interceptorIndex; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">HandlerInterceptor</span> <span class=\"variable\">interceptor</span> <span class=\"operator\">=</span> interceptors[i];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tinterceptor.afterCompletion(request, response, <span class=\"built_in\">this</span>.handler, ex);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">catch</span> (Throwable ex2) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.error(<span class=\"string\">&quot;HandlerInterceptor.afterCompletion threw exception&quot;</span>, ex2);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法中会逆序执行先前已经返回true的拦截器中的afterCompletion方法（最后那个返回false的拦截器不会执行afterCompletion方法）</p>\n<p>方法执行完成后会执行applyPostHandle方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">applyPostHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, <span class=\"meta\">@Nullable</span> ModelAndView mv)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tHandlerInterceptor[] interceptors = getInterceptors();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!ObjectUtils.isEmpty(interceptors)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> interceptors.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">HandlerInterceptor</span> <span class=\"variable\">interceptor</span> <span class=\"operator\">=</span> interceptors[i];</span><br><span class=\"line\">\t\t\tinterceptor.postHandle(request, response, <span class=\"built_in\">this</span>.handler, mv);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个方法中会逆序执行所有的拦截器的postHandle方法（能执行这里说明所有拦截器的preHandle方法都返回了true）</p>\n<p>如果正常结束，会在processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);中逆序触发triggerAfterCompletion方法。</p>\n<p>如果出现异常，则直接触发triggerAfterCompletion方法</p>\n<p>triggerAfterCompletion只会执行已经执行了preHandle并且返回true的拦截器的方法</p>\n<p><img src=\"D:\\学习笔记\\picture\\3ec2d5bca54c51b80b6d2c5a9f1fbf32-1669804541526-57.png\" alt=\"image-20220505172331957\"></p>\n<h3 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h3><p>文件上传页面</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- role 申明这是个表单 th:action表示表单提交的路由 method表示请求方法是post enctype表示多文件上传--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">role</span>=<span class=\"string\">&quot;form&quot;</span> <span class=\"attr\">th:action</span>=<span class=\"string\">&quot;@&#123;/upload&#125;&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span> <span class=\"attr\">enctype</span>=<span class=\"string\">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;exampleInputEmail1&quot;</span>&gt;</span>邮箱<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;email&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;email&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;exampleInputEmail1&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Enter email&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;exampleInputPassword1&quot;</span>&gt;</span>名字<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;exampleInputPassword1&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Password&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;exampleInputFile&quot;</span>&gt;</span>头像<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;headerImg&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;exampleInputFile&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;exampleInputFile&quot;</span>&gt;</span>生活照<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;photos&quot;</span> <span class=\"attr\">multiple</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;checkbox&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span>&gt;</span> Check me out</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-primary&quot;</span>&gt;</span>提交<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>文件上传处理的Controller：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/upload&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Object <span class=\"title function_\">upload</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;email&quot;)</span> String email,</span></span><br><span class=\"line\"><span class=\"params\">                     <span class=\"meta\">@RequestPart(&quot;headerImg&quot;)</span> MultipartFile headerImage,</span></span><br><span class=\"line\"><span class=\"params\">                     <span class=\"meta\">@RequestPart(&quot;photos&quot;)</span> MultipartFile[] photos)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;email,headerImage.getName(),photos.length&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>单个文件使用MultipartFile headerImage</p>\n<p>多个文件上传使用数组MultipartFile[] photos</p>\n<p>使用@RequestPart(“headerImg”) 来接收文件</p>\n<p>在配置中设置文件大小：（因为Spring有某人的文件上传大小限制）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.servlet.multipart.max-file-size=10MB</span><br><span class=\"line\">spring.servlet.multipart.max-request-size=100MB</span><br></pre></td></tr></table></figure>\n\n<p>文件下载：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FileController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">LOCATION</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;&quot;</span>).getAbsolutePath()+<span class=\"string\">&quot;/src/main/resources/static/&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/upload&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">upload</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;email&quot;)</span> String email,</span></span><br><span class=\"line\"><span class=\"params\">                         <span class=\"meta\">@RequestPart(&quot;headerImg&quot;)</span> MultipartFile headerImage,</span></span><br><span class=\"line\"><span class=\"params\">                         <span class=\"meta\">@RequestPart(&quot;photos&quot;)</span> MultipartFile[] photos)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!headerImage.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                System.out.println(headerImage.getName());</span><br><span class=\"line\">                System.out.println(headerImage.getOriginalFilename());</span><br><span class=\"line\"></span><br><span class=\"line\">                headerImage.transferTo(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(LOCATION+headerImage.getOriginalFilename()));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;email,headerImage.getName(),photos.length&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用headerImage.transferTo(new File(LOCATION+headerImage.getOriginalFilename()));保存文件</p>\n<p>使用的是底层使用的是FileCopyUtils.copy(getInputStream(), Files.newOutputStream(dest));实现文件拷贝</p>\n<h4 id=\"文件上传原理\"><a href=\"#文件上传原理\" class=\"headerlink\" title=\"文件上传原理\"></a>文件上传原理</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(&#123; Servlet.class, StandardServletMultipartResolver.class, MultipartConfigElement.class &#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(prefix = &quot;spring.servlet.multipart&quot;, name = &quot;enabled&quot;, matchIfMissing = true)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(MultipartProperties.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MultipartAutoConfiguration</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> MultipartProperties multipartProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">MultipartAutoConfiguration</span><span class=\"params\">(MultipartProperties multipartProperties)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.multipartProperties = multipartProperties;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnMissingBean(&#123; MultipartConfigElement.class, CommonsMultipartResolver.class &#125;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> MultipartConfigElement <span class=\"title function_\">multipartConfigElement</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.multipartProperties.createMultipartConfig();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"comment\">//向容器中添加文件上传解析器</span></span><br><span class=\"line\">\t<span class=\"meta\">@Bean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnMissingBean(MultipartResolver.class)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> StandardServletMultipartResolver <span class=\"title function_\">multipartResolver</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">StandardServletMultipartResolver</span> <span class=\"variable\">multipartResolver</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StandardServletMultipartResolver</span>();</span><br><span class=\"line\">\t\tmultipartResolver.setResolveLazily(<span class=\"built_in\">this</span>.multipartProperties.isResolveLazily());</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> multipartResolver;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果我们向自定义文件解析过程，往Spring容器中添加我们自定义的文件解析器即可</p>\n<p>在doDispatch方法中，在解析参数之前会先判断当前请求是否是文件上传请求：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">processedRequest = checkMultipart(request);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> HttpServletRequest <span class=\"title function_\">checkMultipart</span><span class=\"params\">(HttpServletRequest request)</span> <span class=\"keyword\">throws</span> MultipartException &#123;</span><br><span class=\"line\">       <span class=\"comment\">//使用文件上传解析器判断是不是文件上传请求</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.multipartResolver != <span class=\"literal\">null</span> &amp;&amp; <span class=\"built_in\">this</span>.multipartResolver.isMultipart(request)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (WebUtils.getNativeRequest(request, MultipartHttpServletRequest.class) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (request.getDispatcherType().equals(DispatcherType.REQUEST)) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.trace(<span class=\"string\">&quot;Request already resolved to MultipartHttpServletRequest, e.g. by MultipartFilter&quot;</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (hasMultipartException(request)) &#123;</span><br><span class=\"line\">\t\t\tlogger.debug(<span class=\"string\">&quot;Multipart resolution previously failed for current request - &quot;</span> +</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">&quot;skipping re-resolution for undisturbed error rendering&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                   <span class=\"comment\">//如果是文件上传请求则对原请求进行包装</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.multipartResolver.resolveMultipart(request);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">catch</span> (MultipartException ex) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tlogger.debug(<span class=\"string\">&quot;Multipart resolution failed for error dispatch&quot;</span>, ex);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// Keep processing error dispatch with regular request handle below</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 不是文件上传请求则直接返回原请求</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> request;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>this.multipartResolver.isMultipart(request) 使用这个方法判断是不是文件上传请求</p>\n<p>如果是文件上传请求则将原请求进行包装</p>\n<p>return this.multipartResolver.resolveMultipart(request);</p>\n<p>然后返回doDispatch方法，判断返回的请求和原来的请求是否一样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">multipartRequestParsed = (processedRequest != request);</span><br></pre></td></tr></table></figure>\n\n<p>如果不一样，说明对原请求进行了包装，因而是文件上传请求</p>\n<p>如果一样，说明没有包装，则不是文件上传请求</p>\n<p>解析参数的过程和前面一样，根据@RequestPart注解判断使用RequestPartMethodArgumentResolver这个文件上传解析器来解析文件参数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Object <span class=\"title function_\">resolveArgument</span><span class=\"params\">(MethodParameter parameter, <span class=\"meta\">@Nullable</span> ModelAndViewContainer mavContainer,</span></span><br><span class=\"line\"><span class=\"params\">\t\tNativeWebRequest request, <span class=\"meta\">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">HttpServletRequest</span> <span class=\"variable\">servletRequest</span> <span class=\"operator\">=</span> request.getNativeRequest(HttpServletRequest.class);</span><br><span class=\"line\">\tAssert.state(servletRequest != <span class=\"literal\">null</span>, <span class=\"string\">&quot;No HttpServletRequest&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//获取注解信息，判断这个参数是不是必须的</span></span><br><span class=\"line\">\t<span class=\"type\">RequestPart</span> <span class=\"variable\">requestPart</span> <span class=\"operator\">=</span> parameter.getParameterAnnotation(RequestPart.class);</span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"variable\">isRequired</span> <span class=\"operator\">=</span> ((requestPart == <span class=\"literal\">null</span> || requestPart.required()) &amp;&amp; !parameter.isOptional());</span><br><span class=\"line\">\t<span class=\"comment\">//获得参数名</span></span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> getPartName(parameter, requestPart);</span><br><span class=\"line\">\tparameter = parameter.nestedIfOptional();</span><br><span class=\"line\">\t<span class=\"type\">Object</span> <span class=\"variable\">arg</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//解析文件上传参数</span></span><br><span class=\"line\">\t<span class=\"type\">Object</span> <span class=\"variable\">mpArg</span> <span class=\"operator\">=</span> MultipartResolutionDelegate.resolveMultipartArgument(name, parameter, servletRequest);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (mpArg != MultipartResolutionDelegate.UNRESOLVABLE) &#123;</span><br><span class=\"line\">\t\targ = mpArg;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">HttpInputMessage</span> <span class=\"variable\">inputMessage</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RequestPartServletServerHttpRequest</span>(servletRequest, name);</span><br><span class=\"line\">\t\t\targ = readWithMessageConverters(inputMessage, parameter, parameter.getNestedGenericParameterType());</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (binderFactory != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">WebDataBinder</span> <span class=\"variable\">binder</span> <span class=\"operator\">=</span> binderFactory.createBinder(request, arg, name);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (arg != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tvalidateIfApplicable(binder, parameter);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (binder.getBindingResult().hasErrors() &amp;&amp; isBindExceptionRequired(binder, parameter)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MethodArgumentNotValidException</span>(parameter, binder.getBindingResult());</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (mavContainer != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tmavContainer.addAttribute(BindingResult.MODEL_KEY_PREFIX + name, binder.getBindingResult());</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (MissingServletRequestPartException | MultipartException ex) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isRequired) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (arg == <span class=\"literal\">null</span> &amp;&amp; isRequired) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!MultipartResolutionDelegate.isMultipartRequest(servletRequest)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MultipartException</span>(<span class=\"string\">&quot;Current request is not a multipart request&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MissingServletRequestPartException</span>(name);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> adaptArgumentIfNecessary(arg, parameter);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在文件上传请求发送过来后，所有的文件的文件流都被被直接封装在一个MultiValueMap中，而文件上传解析器的作用则是从这个MultiValueMap中根据字段名拿到对应的MultiPartFile（数组）对象。</p>\n<p>MultiPartFile类有很多好用的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MultipartFile</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">InputStreamSource</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//获取上传文件的参数名</span></span><br><span class=\"line\">\tString <span class=\"title function_\">getName</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//获取上传的文件原来的名字</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\tString <span class=\"title function_\">getOriginalFilename</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//获取文件类型</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\tString <span class=\"title function_\">getContentType</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//判断文件是否合法</span></span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"title function_\">isEmpty</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//获取文件大小</span></span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"title function_\">getSize</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//获得字节数组形式的文件</span></span><br><span class=\"line\">\t<span class=\"type\">byte</span>[] getBytes() <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\">\t<span class=\"comment\">//获取文件输入流</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\tInputStream <span class=\"title function_\">getInputStream</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\">\t<span class=\"comment\">//获取资源类型</span></span><br><span class=\"line\">\t<span class=\"keyword\">default</span> Resource <span class=\"title function_\">getResource</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MultipartFileResource</span>(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">//保存文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">transferTo</span><span class=\"params\">(File dest)</span> <span class=\"keyword\">throws</span> IOException, IllegalStateException;</span><br><span class=\"line\">\t<span class=\"comment\">//保存文件实际就是调用FileCopyUtils进行流拷贝</span></span><br><span class=\"line\">\t<span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title function_\">transferTo</span><span class=\"params\">(Path dest)</span> <span class=\"keyword\">throws</span> IOException, IllegalStateException &#123;</span><br><span class=\"line\">\t\tFileCopyUtils.copy(getInputStream(), Files.newOutputStream(dest));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h3><p>Springboot在执行过程中如果出现了异常，会默认转发到/error路由上</p>\n<p>如果是机器客户端（如PostMan）则会返回JSON格式id错误信息以及状态码</p>\n<p>如果是浏览器客户端则会返回一个错误页</p>\n<p>在template目录下创建一个error目录，这个目录下的4xx.html和5xx.html（泛指以4开头和以5开头的状态码对于的页面）,页面会被自动解析，在状态码为对应值时会自动跳转到这个错误页，可以用具体的404.html,500.html来精确定位</p>\n<p>也可以根据错误信息使用thymleaf语法设置错误页面的信息</p>\n<h4 id=\"错误处理原理\"><a href=\"#错误处理原理\" class=\"headerlink\" title=\"错误处理原理\"></a>错误处理原理</h4><p>我们来到配置类：ErrorMvcAutoConfiguration</p>\n<p>和异常处理相关的配置都设置在这里</p>\n<p>添加了一个错误处理组件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(value = ErrorAttributes.class, search = SearchStrategy.CURRENT)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> DefaultErrorAttributes <span class=\"title function_\">errorAttributes</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultErrorAttributes</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个组件实现了接口： ErrorAttributes, HandlerExceptionResolver, Ordered</p>\n<h5 id=\"BasicErrorController\"><a href=\"#BasicErrorController\" class=\"headerlink\" title=\"BasicErrorController\"></a>BasicErrorController</h5><p>添加了一个Controller：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(value = ErrorController.class, search = SearchStrategy.CURRENT)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> BasicErrorController <span class=\"title function_\">basicErrorController</span><span class=\"params\">(ErrorAttributes errorAttributes,</span></span><br><span class=\"line\"><span class=\"params\">\t\tObjectProvider&lt;ErrorViewResolver&gt; errorViewResolvers)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BasicErrorController</span>(errorAttributes, <span class=\"built_in\">this</span>.serverProperties.getError(),</span><br><span class=\"line\">\t\t\terrorViewResolvers.orderedStream().collect(Collectors.toList()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个Controller中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BasicErrorController</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractErrorController</span> &#123;</span><br></pre></td></tr></table></figure>\n\n<p>如果我们配置了server.error.path，就用这个路由，如果没有配置再看error.path有没有配置，如果也没有就按照/error路由来进行映射</p>\n<p>也就是如果没有配置，这个Controller默认处理/error为前缀的请求</p>\n<p>如果内容协商的结果是返回HTML页面：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(produces = MediaType.TEXT_HTML_VALUE)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title function_\">errorHtml</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">HttpStatus</span> <span class=\"variable\">status</span> <span class=\"operator\">=</span> getStatus(request);</span><br><span class=\"line\">\tMap&lt;String, Object&gt; model = Collections</span><br><span class=\"line\">\t\t\t.unmodifiableMap(getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.TEXT_HTML)));</span><br><span class=\"line\">\tresponse.setStatus(status.value());</span><br><span class=\"line\">\t<span class=\"type\">ModelAndView</span> <span class=\"variable\">modelAndView</span> <span class=\"operator\">=</span> resolveErrorView(request, response, status, model);</span><br><span class=\"line\">       <span class=\"comment\">//如果没有找到404.html文件，也没有找到4xx.html文件，则会返回默认的异常界面</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (modelAndView != <span class=\"literal\">null</span>) ? modelAndView : <span class=\"keyword\">new</span> <span class=\"title class_\">ModelAndView</span>(<span class=\"string\">&quot;error&quot;</span>, model);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>会返回一个new ModelAndView(“error”, model)</p>\n<p>如果协商结果不是HTML则返回一个Entity：</p>\n<p>相当于返回了JSON</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; <span class=\"title function_\">error</span><span class=\"params\">(HttpServletRequest request)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">HttpStatus</span> <span class=\"variable\">status</span> <span class=\"operator\">=</span> getStatus(request);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (status == HttpStatus.NO_CONTENT) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ResponseEntity</span>&lt;&gt;(status);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tMap&lt;String, Object&gt; body = getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.ALL));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ResponseEntity</span>&lt;&gt;(body, status);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>容器中如果没有名为error的组件，会向容器中加入一个View类型的组件error</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean(name = &quot;error&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(name = &quot;error&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> View <span class=\"title function_\">defaultErrorView</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.defaultErrorView;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以如果返回的是HTML页面，返回new ModelAndView(“error”, model)时，会从Spring容器中拿到error组件作为视图返回</p>\n<p>同时会放入视图解析器：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> BeanNameViewResolver <span class=\"title function_\">beanNameViewResolver</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">BeanNameViewResolver</span> <span class=\"variable\">resolver</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BeanNameViewResolver</span>();</span><br><span class=\"line\">\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - <span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> resolver;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用视图解析器就可以根据error这个id找到对于的view对象</p>\n<p>然后就可以使用前面处理请求的逻辑来处理/error请求，也就是拿到包含由数据和视图的ModelAndView对象后，在处理返回值的流程中，调用view的render方法来渲染视图：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">render</span><span class=\"params\">(Map&lt;String, ?&gt; model, HttpServletRequest request, HttpServletResponse response)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (response.isCommitted()) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> getMessage(model);</span><br><span class=\"line\">\t\tlogger.error(message);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tresponse.setContentType(TEXT_HTML_UTF8.toString());</span><br><span class=\"line\">\t<span class=\"type\">StringBuilder</span> <span class=\"variable\">builder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">\t<span class=\"type\">Object</span> <span class=\"variable\">timestamp</span> <span class=\"operator\">=</span> model.get(<span class=\"string\">&quot;timestamp&quot;</span>);</span><br><span class=\"line\">\t<span class=\"type\">Object</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> model.get(<span class=\"string\">&quot;message&quot;</span>);</span><br><span class=\"line\">\t<span class=\"type\">Object</span> <span class=\"variable\">trace</span> <span class=\"operator\">=</span> model.get(<span class=\"string\">&quot;trace&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (response.getContentType() == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\tresponse.setContentType(getContentType());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tbuilder.append(<span class=\"string\">&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Whitelabel Error Page&lt;/h1&gt;&quot;</span>).append(</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;&lt;p&gt;This application has no explicit mapping for /error, so you are seeing this as a fallback.&lt;/p&gt;&quot;</span>)</span><br><span class=\"line\">\t\t\t.append(<span class=\"string\">&quot;&lt;div id=&#x27;created&#x27;&gt;&quot;</span>).append(timestamp).append(<span class=\"string\">&quot;&lt;/div&gt;&quot;</span>)</span><br><span class=\"line\">\t\t\t.append(<span class=\"string\">&quot;&lt;div&gt;There was an unexpected error (type=&quot;</span>).append(htmlEscape(model.get(<span class=\"string\">&quot;error&quot;</span>)))</span><br><span class=\"line\">\t\t\t.append(<span class=\"string\">&quot;, status=&quot;</span>).append(htmlEscape(model.get(<span class=\"string\">&quot;status&quot;</span>))).append(<span class=\"string\">&quot;).&lt;/div&gt;&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (message != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\tbuilder.append(<span class=\"string\">&quot;&lt;div&gt;&quot;</span>).append(htmlEscape(message)).append(<span class=\"string\">&quot;&lt;/div&gt;&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (trace != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\tbuilder.append(<span class=\"string\">&quot;&lt;div style=&#x27;white-space:pre-wrap;&#x27;&gt;&quot;</span>).append(htmlEscape(trace)).append(<span class=\"string\">&quot;&lt;/div&gt;&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tbuilder.append(<span class=\"string\">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class=\"line\">\tresponse.getWriter().append(builder.toString());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以其实就是根据数据拼接成一个HTML格式的字符串返回，也就是我们看到的错误页的来源</p>\n<h5 id=\"DefaultErrorViewResolver-异常视图解析器\"><a href=\"#DefaultErrorViewResolver-异常视图解析器\" class=\"headerlink\" title=\"DefaultErrorViewResolver 异常视图解析器\"></a>DefaultErrorViewResolver 异常视图解析器</h5><p>这个视图用于根据异常名称解析错误页的，解析过程如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title function_\">resolveErrorView</span><span class=\"params\">(HttpServletRequest request, HttpStatus status, Map&lt;String, Object&gt; model)</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">//解析视图</span></span><br><span class=\"line\">\t<span class=\"type\">ModelAndView</span> <span class=\"variable\">modelAndView</span> <span class=\"operator\">=</span> resolve(String.valueOf(status.value()), model);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (modelAndView == <span class=\"literal\">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;</span><br><span class=\"line\">\t\tmodelAndView = resolve(SERIES_VIEWS.get(status.series()), model);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面会调用resove方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> ModelAndView <span class=\"title function_\">resolve</span><span class=\"params\">(String viewName, Map&lt;String, Object&gt; model)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">errorViewName</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;error/&quot;</span> + viewName;</span><br><span class=\"line\">\t<span class=\"type\">TemplateAvailabilityProvider</span> <span class=\"variable\">provider</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.templateAvailabilityProviders.getProvider(errorViewName,</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.applicationContext);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (provider != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ModelAndView</span>(errorViewName, model);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> resolveResource(errorViewName, model);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>String errorViewName = “error/“ + viewName 通过这条语句可以看到解析的视图地址是在/error目录下，并且视图名称是viewName</p>\n<p>创建ModelAndView对象时，会默认从template目录寻找对于的html文件，而加上/error前缀后，默认的视图页就会从/templates/error目录下面找，而视图名称viewName 从哪里来呢，我们看调用这个方法的语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ModelAndView modelAndView = resolve(String.valueOf(status.value()), model);</span><br></pre></td></tr></table></figure>\n\n<p>将Http状态码作为viewName穿了进去，并且在寻找视图时会默认加上.html的后缀，所以在出现404的时候会找到404.html页面，依次类推。</p>\n<p>而如果没有找到，则会来到下一条语句：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (modelAndView == <span class=\"literal\">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;</span><br><span class=\"line\">\tmodelAndView = resolve(SERIES_VIEWS.get(status.series()), model);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这条语句也是执行resolve方法，只是传入的viewName不一样，而SERIES_VIEWS.get(status.series())，追溯到最后就是</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Series <span class=\"title function_\">resolve</span><span class=\"params\">(<span class=\"type\">int</span> statusCode)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"variable\">seriesCode</span> <span class=\"operator\">=</span> statusCode / <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (Series series : values()) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (series.value == seriesCode) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> series;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Series是个枚举类型，这个枚举类型有以下字段：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFORMATIONAL(1),</span><br><span class=\"line\">SUCCESSFUL(2),</span><br><span class=\"line\">REDIRECTION(3),</span><br><span class=\"line\">CLIENT_ERROR(4),</span><br><span class=\"line\">SERVER_ERROR(5);</span><br></pre></td></tr></table></figure>\n\n<p>这些字段都是Series类型，对于的value值是括号里的值。</p>\n<p>所以这个方法的逻辑就是遍历这里所有的枚举类型，然后根据状态码/100判断是哪个series。也就是将状态码转换成2xx，3xx，4xx，5xx类型的格式，然后在template/error/目录下查找有无对于类型格式的html文件，例如404.html没有找到就会去找4xx.html文件</p>\n<h5 id=\"DefaultErrorAttributes\"><a href=\"#DefaultErrorAttributes\" class=\"headerlink\" title=\"DefaultErrorAttributes\"></a>DefaultErrorAttributes</h5><p>这个类中定义了返回值中需要包含的数据（需要包含在页面中，或者以JSON返回）：</p>\n<p>如果就相关信息就添加相关信息，如果没有相关信息就从返回参数中移除</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title function_\">getErrorAttributes</span><span class=\"params\">(WebRequest webRequest, ErrorAttributeOptions options)</span> &#123;</span><br><span class=\"line\">\tMap&lt;String, Object&gt; errorAttributes = getErrorAttributes(webRequest, options.isIncluded(Include.STACK_TRACE));</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (Boolean.TRUE.equals(<span class=\"built_in\">this</span>.includeException)) &#123;</span><br><span class=\"line\">\t\toptions = options.including(Include.EXCEPTION);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">       <span class=\"comment\">//异常信息</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!options.isIncluded(Include.EXCEPTION)) &#123;</span><br><span class=\"line\">\t\terrorAttributes.remove(<span class=\"string\">&quot;exception&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">       <span class=\"comment\">//调用路径</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!options.isIncluded(Include.STACK_TRACE)) &#123;</span><br><span class=\"line\">\t\terrorAttributes.remove(<span class=\"string\">&quot;trace&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">       <span class=\"comment\">//相关信息</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!options.isIncluded(Include.MESSAGE) &amp;&amp; errorAttributes.get(<span class=\"string\">&quot;message&quot;</span>) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\terrorAttributes.put(<span class=\"string\">&quot;message&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">       <span class=\"comment\">//错误</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!options.isIncluded(Include.BINDING_ERRORS)) &#123;</span><br><span class=\"line\">\t\terrorAttributes.remove(<span class=\"string\">&quot;errors&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> errorAttributes;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"meta\">@Deprecated</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title function_\">getErrorAttributes</span><span class=\"params\">(WebRequest webRequest, <span class=\"type\">boolean</span> includeStackTrace)</span> &#123;</span><br><span class=\"line\">\tMap&lt;String, Object&gt; errorAttributes = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedHashMap</span>&lt;&gt;();</span><br><span class=\"line\">       <span class=\"comment\">//时间戳</span></span><br><span class=\"line\">\terrorAttributes.put(<span class=\"string\">&quot;timestamp&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">\taddStatus(errorAttributes, webRequest);</span><br><span class=\"line\">\taddErrorDetails(errorAttributes, webRequest, includeStackTrace);</span><br><span class=\"line\">\taddPath(errorAttributes, webRequest);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> errorAttributes;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addStatus</span><span class=\"params\">(Map&lt;String, Object&gt; errorAttributes, RequestAttributes requestAttributes)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">Integer</span> <span class=\"variable\">status</span> <span class=\"operator\">=</span> getAttribute(requestAttributes, RequestDispatcher.ERROR_STATUS_CODE);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (status == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\terrorAttributes.put(<span class=\"string\">&quot;status&quot;</span>, <span class=\"number\">999</span>);</span><br><span class=\"line\">\t\terrorAttributes.put(<span class=\"string\">&quot;error&quot;</span>, <span class=\"string\">&quot;None&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">       <span class=\"comment\">//状态码</span></span><br><span class=\"line\">\terrorAttributes.put(<span class=\"string\">&quot;status&quot;</span>, status);</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\terrorAttributes.put(<span class=\"string\">&quot;error&quot;</span>, HttpStatus.valueOf(status).getReasonPhrase());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Unable to obtain a reason</span></span><br><span class=\"line\">\t\terrorAttributes.put(<span class=\"string\">&quot;error&quot;</span>, <span class=\"string\">&quot;Http Status &quot;</span> + status);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结</p>\n<p>BasicErrorController -》用于处理异常请求（/error），如果向定制化在发送错误时的响应则需要修改BasicErrorController 对象</p>\n<p>DefaultErrorViewResolver -》用于查找错误页，如果不想根据Spring的规则返回错误页面可以修改这个视图解析器</p>\n<p>DefaultErrorAttributes -》用于设置返回的参数，如果觉得返回的数据不够多，可以修改这个类，添加我们需要的参数（然后可以使用thymleaf定制我们想要的页面）</p>\n<p>（不过一般情况下用Spring默认的错误处理机制即可）</p>\n<h4 id=\"异常处理流程\"><a href=\"#异常处理流程\" class=\"headerlink\" title=\"异常处理流程\"></a>异常处理流程</h4><p>我们再回顾以下doDispatch方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doDispatch</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t<span class=\"type\">HttpServletRequest</span> <span class=\"variable\">processedRequest</span> <span class=\"operator\">=</span> request;</span><br><span class=\"line\">\t<span class=\"type\">HandlerExecutionChain</span> <span class=\"variable\">mappedHandler</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"variable\">multipartRequestParsed</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">WebAsyncManager</span> <span class=\"variable\">asyncManager</span> <span class=\"operator\">=</span> WebAsyncUtils.getAsyncManager(request);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">ModelAndView</span> <span class=\"variable\">mv</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">Exception</span> <span class=\"variable\">dispatchException</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tprocessedRequest = checkMultipart(request);</span><br><span class=\"line\">\t\t\tmultipartRequestParsed = (processedRequest != request);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Determine handler for the current request.</span></span><br><span class=\"line\">\t\t\tmappedHandler = getHandler(processedRequest);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (mappedHandler == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tnoHandlerFound(processedRequest, response);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Determine handler adapter for the current request.</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">HandlerAdapter</span> <span class=\"variable\">ha</span> <span class=\"operator\">=</span> getHandlerAdapter(mappedHandler.getHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Process last-modified header, if supported by the handler.</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">String</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> request.getMethod();</span><br><span class=\"line\">\t\t\t<span class=\"type\">boolean</span> <span class=\"variable\">isGet</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;GET&quot;</span>.equals(method);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isGet || <span class=\"string\">&quot;HEAD&quot;</span>.equals(method)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">long</span> <span class=\"variable\">lastModified</span> <span class=\"operator\">=</span> ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">new</span> <span class=\"title class_\">ServletWebRequest</span>(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Actually invoke the handler.</span></span><br><span class=\"line\">\t\t\tmv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tapplyDefaultViewName(processedRequest, mv);</span><br><span class=\"line\">\t\t\tmappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">\t\t\tdispatchException = ex;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (Throwable err) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// making them available for @ExceptionHandler methods and other scenarios.</span></span><br><span class=\"line\">\t\t\tdispatchException = <span class=\"keyword\">new</span> <span class=\"title class_\">NestedServletException</span>(<span class=\"string\">&quot;Handler dispatch failed&quot;</span>, err);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tprocessDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">\t\ttriggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Throwable err) &#123;</span><br><span class=\"line\">\t\ttriggerAfterCompletion(processedRequest, response, mappedHandler,</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">NestedServletException</span>(<span class=\"string\">&quot;Handler processing failed&quot;</span>, err));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Instead of postHandle and afterCompletion</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (mappedHandler != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tmappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Clean up any resources used by a multipart request.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (multipartRequestParsed) &#123;</span><br><span class=\"line\">\t\t\t\tcleanupMultipart(processedRequest);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>既然是异常处理，所以我们关心try catch语句块即可，我们之前所讲的内容都是在第一层try 块中，所有的请求流程，包括解析url，拦截器，执行具体的方法等等只要出现异常就会跳转到catch语句块中。</p>\n<p>所有的Exception和Error都会被记录在dispatchException中</p>\n<p>如果是handle方法中出现了异常，会被catch，将当前请求状态设置为结束，然后向外抛出</p>\n<p>执行请求以及处理完请求中的异常后会进入视图解析流程：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">processDispatchResult</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"meta\">@Nullable</span> HandlerExecutionChain mappedHandler, <span class=\"meta\">@Nullable</span> ModelAndView mv,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"meta\">@Nullable</span> Exception exception)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"variable\">errorView</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (exception != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (exception <span class=\"keyword\">instanceof</span> ModelAndViewDefiningException) &#123;</span><br><span class=\"line\">\t\t\tlogger.debug(<span class=\"string\">&quot;ModelAndViewDefiningException encountered&quot;</span>, exception);</span><br><span class=\"line\">\t\t\tmv = ((ModelAndViewDefiningException) exception).getModelAndView();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">Object</span> <span class=\"variable\">handler</span> <span class=\"operator\">=</span> (mappedHandler != <span class=\"literal\">null</span> ? mappedHandler.getHandler() : <span class=\"literal\">null</span>);</span><br><span class=\"line\">\t\t\tmv = processHandlerException(request, response, handler, exception);</span><br><span class=\"line\">\t\t\terrorView = (mv != <span class=\"literal\">null</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Did the handler return a view to render?</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (mv != <span class=\"literal\">null</span> &amp;&amp; !mv.wasCleared()) &#123;</span><br><span class=\"line\">\t\trender(mv, request, response);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (errorView) &#123;</span><br><span class=\"line\">\t\t\tWebUtils.clearErrorRequestAttributes(request);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.trace(<span class=\"string\">&quot;No view rendering, null ModelAndView returned.&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Concurrent handling started during a forward</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (mappedHandler != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Exception (if any) is already handled..</span></span><br><span class=\"line\">\t\tmappedHandler.triggerAfterCompletion(request, response, <span class=\"literal\">null</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中，如果在之前执行过程中出现了异常则会进入这个代码块，这个代码块中会获取错误页的ModelAndView数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (exception != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (exception <span class=\"keyword\">instanceof</span> ModelAndViewDefiningException) &#123;</span><br><span class=\"line\">\t\tlogger.debug(<span class=\"string\">&quot;ModelAndViewDefiningException encountered&quot;</span>, exception);</span><br><span class=\"line\">\t\tmv = ((ModelAndViewDefiningException) exception).getModelAndView();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Object</span> <span class=\"variable\">handler</span> <span class=\"operator\">=</span> (mappedHandler != <span class=\"literal\">null</span> ? mappedHandler.getHandler() : <span class=\"literal\">null</span>);</span><br><span class=\"line\">\t\tmv = processHandlerException(request, response, handler, exception);</span><br><span class=\"line\">\t\terrorView = (mv != <span class=\"literal\">null</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果不是ModelAndViewException则会执行mv = processHandlerException(request, response, handler, exception)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> ModelAndView <span class=\"title function_\">processHandlerException</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"meta\">@Nullable</span> Object handler, Exception ex)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Success and error responses may use different content types</span></span><br><span class=\"line\">\trequest.removeAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Check registered HandlerExceptionResolvers...</span></span><br><span class=\"line\">\t<span class=\"type\">ModelAndView</span> <span class=\"variable\">exMv</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.handlerExceptionResolvers != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (HandlerExceptionResolver resolver : <span class=\"built_in\">this</span>.handlerExceptionResolvers) &#123;</span><br><span class=\"line\">\t\t\texMv = resolver.resolveException(request, response, handler, ex);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (exMv != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (exMv != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (exMv.isEmpty()) &#123;</span><br><span class=\"line\">\t\t\trequest.setAttribute(EXCEPTION_ATTRIBUTE, ex);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// We might still need view name translation for a plain error model...</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!exMv.hasView()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">String</span> <span class=\"variable\">defaultViewName</span> <span class=\"operator\">=</span> getDefaultViewName(request);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (defaultViewName != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\texMv.setViewName(defaultViewName);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.trace(<span class=\"string\">&quot;Using resolved error view: &quot;</span> + exMv, ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.debug(<span class=\"string\">&quot;Using resolved error view: &quot;</span> + exMv);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tWebUtils.exposeErrorRequestAttributes(request, ex, getServletName());</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> exMv;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用HandlerExceptionResolver来处理异常，遍历容器中所有的异常解析器，解析拿到ModelAndView后就退出循环。默认情况下没有解析器能处理这个异常，所以会被抛出。</p>\n<p>然后就会doDispatch中，触发拦截器的后续的收尾方法后就结束了doDispatch方法，因而这个异常也就没有被处理，而如果异常没有被处理，会<strong>转发一个error请求</strong>（servlet规范规定的逻辑），然后会被自动配置类添加的<strong>BasicErrorController</strong>处理，而这个controller在处理异常的时候，会遍历所有的的ErrorViewResolver，尝试解析并拿到视图View，其中默认只有一个ErrorViewResolver（错误视图解析器）：DefaultErrorViewResolver ，在这个解析器中会根据Http状态码寻找HTML文件并返回。如果都没有找到就返回默认的空白异常界面。</p>\n<h4 id=\"定制化错误处理\"><a href=\"#定制化错误处理\" class=\"headerlink\" title=\"定制化错误处理\"></a>定制化错误处理</h4><h5 id=\"在error目录下定值我们想要的404-html或者5xx-html（像这种写法的html文件）\"><a href=\"#在error目录下定值我们想要的404-html或者5xx-html（像这种写法的html文件）\" class=\"headerlink\" title=\"在error目录下定值我们想要的404.html或者5xx.html（像这种写法的html文件）\"></a>在error目录下定值我们想要的404.html或者5xx.html（像这种写法的html文件）</h5><p>html文件中可以使用thymleaf语法使用返回的数据，显示在界面上</p>\n<h5 id=\"全局异常处理\"><a href=\"#全局异常处理\" class=\"headerlink\" title=\"全局异常处理\"></a>全局异常处理</h5><p>全局范围内的所有异常都可以集中起来一起处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@ControllerAdvice</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GlobalExceptionHandle</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler(ArithmeticException.class)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">mathExceptionHandle</span><span class=\"params\">(Exception e)</span>&#123;</span><br><span class=\"line\">        log.error(e.getMessage());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;error/4xx&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>@ControllerAdvice申明这是一个处理异常的类，这个注解内部包含@Component注解，会把这个类注册进Spring容器中</p>\n<p>@ExceptionHandler(ArithmeticException.class) 申明要捕获的异常，出现了异常后都会跳转到这里来处理</p>\n<p>返回类型是String类型，就会也就返回View对象的地址，也可以直接返回ModelAndView对象，这样既返回视图也返回了数据。</p>\n<p>如果加上了@ResponseBody则会返回JSON格式或者文本类型的数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@ControllerAdvice</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GlobalExceptionHandle</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler(ArithmeticException.class)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">mathExceptionHandle</span><span class=\"params\">(Exception e)</span>&#123;</span><br><span class=\"line\">        log.error(e.getMessage());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;error/4xx&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>返回值规则和普通的Controller一样，只是这个类是专门用于处理异常的</p>\n<p>原理如下：</p>\n<p>之前我们提到过在执行mv = processHandlerException(request, response, handler, exception)方法时会遍历Spring容器中的异常解析器，Spring容器中的异常解析器有以下三种</p>\n<p><img src=\"D:\\学习笔记\\picture\\029c7937f23ed1c8dc2a5a81e74565d8.png\" alt=\"image-20220507004852744\"></p>\n<p><strong>ExceptionHandlerExceptionResolver</strong>对应@ExceptionHandler(ArithmeticException.class)注解，在Spring启动时，会将括号中的class对象类型和方法建立映射关系并缓存起来。之前因为我们没有编写全局异常处理类，所以这里就没有解析器可以处理，而此时我们添加了对应的方法，并且出现了指定的异常，就可以用这个解析器执行我们设置的处理逻辑来处理这和异常</p>\n<p>如果想抛出一个自定义异常，可以使用@ResponseStatus注解来自定义异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@ResponseStatus(value = HttpStatus.FORBIDDEN,reason = &quot;用户太多&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ToManyUserException</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RuntimeException</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个异常中可以重新设置自己的状态码和错误提示信息，并放到请求域中</p>\n<p>使用这个注解后，在processHandlerException解析异常的时候，就可以使用<strong>ResponseStatusExceptionResolver</strong>这个解析器来处理这个异常，不过处理的时候并不会生产ModelAndView对象，而是调用response.sendError()方法向服务器发送一个Error，结束当前请求，然后按照Servlet的规则会转发一个/error请求，然后这个异常最后还是会根据状态码被错误页面处理，例如这里是403会返回4xx.html页面</p>\n<p>而对于框架内部产生的异常（每一种状态码都对应一种异常），则是由第三种异常解析器<strong>DefaultHandlerExceptionResolver</strong>来解析异常，这个解析器能解析的异常如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception</span><br><span class=\"line\">HTTP Status Code</span><br><span class=\"line\">HttpRequestMethodNotSupportedException</span><br><span class=\"line\">405 (SC_METHOD_NOT_ALLOWED)</span><br><span class=\"line\">HttpMediaTypeNotSupportedException</span><br><span class=\"line\">415 (SC_UNSUPPORTED_MEDIA_TYPE)</span><br><span class=\"line\">HttpMediaTypeNotAcceptableException</span><br><span class=\"line\">406 (SC_NOT_ACCEPTABLE)</span><br><span class=\"line\">MissingPathVariableException</span><br><span class=\"line\">500 (SC_INTERNAL_SERVER_ERROR)</span><br><span class=\"line\">MissingServletRequestParameterException</span><br><span class=\"line\">400 (SC_BAD_REQUEST)</span><br><span class=\"line\">ServletRequestBindingException</span><br><span class=\"line\">400 (SC_BAD_REQUEST)</span><br><span class=\"line\">ConversionNotSupportedException</span><br><span class=\"line\">500 (SC_INTERNAL_SERVER_ERROR)</span><br><span class=\"line\">TypeMismatchException</span><br><span class=\"line\">400 (SC_BAD_REQUEST)</span><br><span class=\"line\">HttpMessageNotReadableException</span><br><span class=\"line\">400 (SC_BAD_REQUEST)</span><br><span class=\"line\">HttpMessageNotWritableException</span><br><span class=\"line\">500 (SC_INTERNAL_SERVER_ERROR)</span><br><span class=\"line\">MethodArgumentNotValidException</span><br><span class=\"line\">400 (SC_BAD_REQUEST)</span><br><span class=\"line\">MissingServletRequestPartException</span><br><span class=\"line\">400 (SC_BAD_REQUEST)</span><br><span class=\"line\">BindException</span><br><span class=\"line\">400 (SC_BAD_REQUEST)</span><br><span class=\"line\">NoHandlerFoundException</span><br><span class=\"line\">404 (SC_NOT_FOUND)</span><br><span class=\"line\">AsyncRequestTimeoutException</span><br><span class=\"line\">503 (SC_SERVICE_UNAVAILABLE)</span><br></pre></td></tr></table></figure>\n\n<p>而处理这些异常的方法相同：</p>\n<p>都是直接向tomcat发送一个Error，表示结束当前请求，然后tomcat会再发送一个/error请求，然后被处理这个请求的controller捕获进行处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> ModelAndView <span class=\"title function_\">handleHttpMessageNotWritable</span><span class=\"params\">(HttpMessageNotWritableException ex,</span></span><br><span class=\"line\"><span class=\"params\">\t\tHttpServletRequest request, HttpServletResponse response, <span class=\"meta\">@Nullable</span> Object handler)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsendServerError(ex, request, response);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ModelAndView</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述三个解析器都实现了HandlerExceptionResolver接口，我们也可以实现这个接口定义我们想要的异常解析器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CustomerHandlerExceptionResolver</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HandlerExceptionResolver</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ModelAndView <span class=\"title function_\">resolveException</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            response.sendError(<span class=\"number\">505</span>,<span class=\"string\">&quot;我的错误&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ModelAndView</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样在解析错误的时候就会多出一种异常解析器，但是此时我们的异常解析器的优先级最低，Spring自带的解析器生效后就不会再去执行我们自定义的解析器。</p>\n<p>如果想要我们设置的异常解析器生效，可以加上@Order注解来设置组件的加载顺序</p>\n<p>比如这个注解可以设置最高优先级，其实就是一个INT数的最小值，value值越小，优先级越高，我们也可以直接填入一个数字来合理规划优先级顺序。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Order(value = Ordered.HIGHEST_PRECEDENCE)</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<p>使用respond.sendError()方法或者出现了异常而Spring容器的异常解析器均无法处理，则Tomcat会转发一个/error请求，然后被basicController捕获，因而basicController可以处理所有的异常。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Springboot2基础\"><a href=\"#Springboot2基础\" class=\"headerlink\" title=\"Springboot2基础\"></a>Springboot2基础</h2><p><a href=\"https://blog.csdn.net/u011863024/article/details/113667634\">https://blog.csdn.net/u011863024/article/details/113667634</a></p>\n<h3 id=\"入门案例\"><a href=\"#入门案例\" class=\"headerlink\" title=\"入门案例\"></a>入门案例</h3><p>MAVEN的settings.xml中需要添加如下配置文件：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mirrors</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>nexus-aliyun<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Nexus aliyun<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mirrors</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>jdk-1.8<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">activeByDefault</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">activeByDefault</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">jdk</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">jdk</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">maven.compiler.source</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.source</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">maven.compiler.target</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.target</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>pom依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;-- Spring项目必须导入父依赖 版本是所使用的Springboot的版本--&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.4.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">&lt;-- Spring \tWeb项目导入这个依赖即可--&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>打包部署：使用maven的插件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以直接使用java -jar运行</p>\n<p>可见Springboot相对于SpringMVC的优点：</p>\n<p>简化配置，Springboot所整合的框架都可以在yml或者properties文件中同一配置，并且所有的配置Springboot都设置了默认值，并且通过maven来管理项目，通过简单的几项配置即可完成所需jar包的导入</p>\n<p>简化部署，Springboot内置了Tomcat服务器，可以直接通过main方法启动：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(MainApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>业务部分兼容SpringMVC的所有功能：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">handle01</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello, Spring Boot 2!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>SpringMVC需要打成war包，而Springboot通过MAVEN插件可以直接打成可以运行的jar包</p>\n<h3 id=\"Springboot版本管理\"><a href=\"#Springboot版本管理\" class=\"headerlink\" title=\"Springboot版本管理\"></a>Springboot版本管理</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.4.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>父项目可以用于进行版本管理，Springboot的父项目中帮我们定义了平时常用的jar包中匹配的版本号，从而避免一些版本不匹配的问题</p>\n<p>这个也成为自动版本仲裁机制，如果不想使用Springboot指定的版本，我们可以自己设定版本（例如Mysql），重写里面的版本号（最近优先原则）</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">mysql.version</span>&gt;</span>5.1.43<span class=\"tag\">&lt;/<span class=\"name\">mysql.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>spring-boot-starter-* </code>: *代表某种场景，只要引入这个场景的starter就代表引入了这个场景所有常规的依赖</p>\n<p><code>*-spring-boot-starter-*</code>：第三方提供的starter</p>\n<h3 id=\"Springboot自动配置\"><a href=\"#Springboot自动配置\" class=\"headerlink\" title=\"Springboot自动配置\"></a>Springboot自动配置</h3><p>引入并配置好了Tomcat<br>字符编码拦截器，文件上传解析器，视图解析器等<br>引入配置好了SpringMVC<br>SpringbootApplication.run的返回值就是Spring容器，里面有工作的所有组件</p>\n<h4 id=\"SpringbootApplication\"><a href=\"#SpringbootApplication\" class=\"headerlink\" title=\"@SpringbootApplication\"></a>@SpringbootApplication</h4><p>拥有默认包扫描规则:主程序所在的包，以及它的子包中的类都能被扫描，也可以通过配置<br>@SpringbootApplication(scanBasePackage=”com.demo”)来改变包的扫描路径<br>@SpringbootApplication等于以下三个注解(三合一注解):<br>@SpringBootConfiguration<br>@EnableAutoConfiguration<br>@ComponentScan(“com.demo”)</p>\n<p>可以用这三个注解代替@SpringbootApplication</p>\n<p>properties中配置的属性最后都会映射到一个配置类上，这个类会在容器中创建对象<br>Springboot的所有配置功能都在spring-boot-starter-autoconfigure配置中设置<br>自动配置功能是按需加载的，引入了对应的场景后，对应的场景的自动配置才会生效</p>\n<h3 id=\"Configuration和-Bean向添加Spring容器添加组件\"><a href=\"#Configuration和-Bean向添加Spring容器添加组件\" class=\"headerlink\" title=\"@Configuration和@Bean向添加Spring容器添加组件\"></a>@Configuration和@Bean向添加Spring容器添加组件</h3><p>@Configuration会将这个类申明为Springboot的一个配置类</p>\n<p>在配置类中可以通过@Bean注解添加bean</p>\n<p>添加的bean的名称就是我们的方法名，添加的bean就是方法的返回值，也可以通过@Bean(“cat”)在括号中设置bean的名称</p>\n<p>Springboot.run的返回值就是Spring容器，我们可以在里面拿到容器中注册的所有bean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo2Application</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ConfigurableApplicationContext</span> <span class=\"variable\">run</span> <span class=\"operator\">=</span> SpringApplication.run(Demo2Application.class, args);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String name : run.getBeanDefinitionNames()) &#123;</span><br><span class=\"line\">            System.out.println(name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果出现了组件依赖的情况，可以直接调用其他注册组件的方法来设置bean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    Mypage <span class=\"title function_\">page</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Mypage</span> <span class=\"variable\">mypage</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Mypage</span>();</span><br><span class=\"line\">        mypage.setUser(user01());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mypage;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    User <span class=\"title function_\">user01</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;132&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>设置的bean可以在Spring容器中拿到，并且调用生成bean的方法拿到的bean和在Spring容器中拿到的bean是一样的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan(&quot;com.example.demo.mapper&quot;)</span><span class=\"comment\">//检测mapper的包</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan(&quot;com.example.demo.dao&quot;)</span><span class=\"comment\">//检测mapper的包</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo2Application</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ConfigurableApplicationContext</span> <span class=\"variable\">run</span> <span class=\"operator\">=</span> SpringApplication.run(Demo2Application.class, args);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String name : run.getBeanDefinitionNames()) &#123;</span><br><span class=\"line\">            System.out.println(name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user01</span> <span class=\"operator\">=</span> run.getBean(<span class=\"string\">&quot;user01&quot;</span>, User.class);</span><br><span class=\"line\">        Mypage mypage=run.getBean(Mypage.class);</span><br><span class=\"line\">        System.out.println(user01==mypage.getUser());<span class=\"comment\">//返回true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>包括带有@Configuration的类也是Spring容器中组件的一个，也可以拿到这个bean，调用里面生成bean的方法拿到的bean仍然是唯一的，并不会生成一个新的bean：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan(&quot;com.example.demo.mapper&quot;)</span><span class=\"comment\">//检测mapper的包</span></span><br><span class=\"line\"><span class=\"meta\">@MapperScan(&quot;com.example.demo.dao&quot;)</span><span class=\"comment\">//检测mapper的包</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo2Application</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ConfigurableApplicationContext</span> <span class=\"variable\">run</span> <span class=\"operator\">=</span> SpringApplication.run(Demo2Application.class, args);</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user01</span> <span class=\"operator\">=</span> run.getBean(<span class=\"string\">&quot;user01&quot;</span>, User.class);</span><br><span class=\"line\">        Mypage mypage=run.getBean(Mypage.class);</span><br><span class=\"line\">        <span class=\"type\">MyConfig</span> <span class=\"variable\">config</span> <span class=\"operator\">=</span> run.getBean(MyConfig.class);</span><br><span class=\"line\">        System.out.println(config.user01()==user01);<span class=\"comment\">//true</span></span><br><span class=\"line\">        System.out.println(config.user01()== mypage.getUser());<span class=\"comment\">//true</span></span><br><span class=\"line\">        System.out.println(user01==mypage.getUser());<span class=\"comment\">//true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是因为我们拿到的MyConfig其实是通过CGLIB代理过的对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.example.demo.config.MyConfig$$EnhancerBySpringCGLIB$$a35275ef@6bf54260</span><br></pre></td></tr></table></figure>\n\n<p>这个对象调用组件注册方法前，会先判断这个组件是否出现在Spring容器中，如果出现在了Spring容器中则返回Spring容器中的对象，否则才会new一个对象。</p>\n<h4 id=\"Configuration-proxyBeanMethods-false\"><a href=\"#Configuration-proxyBeanMethods-false\" class=\"headerlink\" title=\"@Configuration(proxyBeanMethods = false)\"></a>@Configuration(proxyBeanMethods = false)</h4><p>proxyBeanMethods 默认为true，当这个属性值为true时Spring会帮我们生成上述的代理对象来保证Spring容器中对象的唯一性，用于设置组件之间的依赖关系（如果设置为false则不能在bean中注入其他属性），来容器外多次调用生成组件的方法返回的都是同一个对象。</p>\n<p>如果设置为false，则不会生成代理对象，Spring容器可以更快的启动，但此时不能设置组件的依赖关系，外部调用生成组件的方法会生成多个对象。</p>\n<p>扫描范围内的@Controller之类的注解的用法和SpringMVC相同</p>\n<h4 id=\"Import\"><a href=\"#Import\" class=\"headerlink\" title=\"@Import\"></a>@Import</h4><p>@Import 导入组件参数是class数组<br>容器中会自动创建一个这个类型的bean，默认名称是这个类的全限定名</p>\n<h4 id=\"Condition-满足某些条件时做某些事情-条件装配\"><a href=\"#Condition-满足某些条件时做某些事情-条件装配\" class=\"headerlink\" title=\"@Condition 满足某些条件时做某些事情(条件装配)\"></a>@Condition 满足某些条件时做某些事情(条件装配)</h4><p>@ConditionalOnBean 容器中有这个bean的时候才在容器启动时执行这个方法，可以通过name和type来指定。可以标注在方法上，也可以标注在类上，表示这个类的方法都需要满足这个条件。<br>@ConditionalOnMissingBean 没有这个bean的时候执行这个方法<br>还有其他的条件装配，这里只列举其中几个<br>@ImportResource(“文件路径”) 这个注解可以加载xml配置文件，往Spring容器中添加组件</p>\n<h4 id=\"配置绑定\"><a href=\"#配置绑定\" class=\"headerlink\" title=\"配置绑定\"></a>配置绑定</h4><p>原生java 使用Properties类的load方法加载配置文件，然后遍历<br>Spring方式<br>需要放在容器中才能使用Spring的功能，即必须加上@Component<br>@ConfigurationProperties(prefix=”xxx”) 将前缀为这个的配置文件和类中对应名称的属性值进行绑定，然后就可以通过这个类的对象拿到配置文件中的属性值<br>@EnableConfigurationProperties(xxx.class)将这个注解加在配置类上 开启属性配置功能，用这个注解代替@Component注解(对于一些我们无法修改的第三方的包可以用这种方式来绑定组件)将我们，@ConfigurationProperties也要加在需要绑定的类上，上面这个注解只是帮我们将其注册到容器中并开启指定类的配置绑定功能</p>\n<h4 id=\"自动配置原理\"><a href=\"#自动配置原理\" class=\"headerlink\" title=\"自动配置原理\"></a>自动配置原理</h4><p>三合一注解：@SpringbootApplication</p>\n<p>@SpringbootConfiguration 声明启动类是Spring容器的主配置类，功能和@Configuration一致<br>@ComponentScan 指定包扫描路径<br>@EnableAutoConfiguration 开启自动配置这个注解是以下两个注解的合成:<br>@ConfigurationPackage（指定默认包规则）<br>自动配置包，里面有@Import注解，用于引入包扫描器，将主类所在的包下面的组件进行批量注册(main方法所在的包)<br>@Import(AutoConfigurationImportSelector.class)<br>Springboot会在容器启动时，加载一些必须加载的组件，这些组件被写在各个jar包的META-INFO下的Spring.Factories中，其中有一个名为autoconfigure的jar包里面的这个目录下有这个配置文件，而这个注解就是用于加载这些配置文件(所有场景的jar包)的，这些配置会被全部加载进来，但最后会按需配置(条件装配)</p>\n<p>按需加载功能通过使用注解来生效：</p>\n<p>@ConditionalOnClass(xxx.class)：如果类路径中有这个类就生效（编译时会编译失败，但是我们引入的jar是已经编译好的class文件）</p>\n<p>@ConditionalOnMissingBean(value = xxx.class ， name=”yyyy”)：如果容器中有这个bean才会生效</p>\n<p><img src=\"D:\\学习笔记\\picture\\123123123.png\" alt=\"image-20220428183847161\"></p>\n<p>如果这些注解加载类上，必须上面的条件都满足，才会在Spring容器的启动的时候加载这个类里面的方法向容器中添加组件，如果加在方法上，表示满足这些条件后，组件注册方法才会生效（执行）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\"><span class=\"meta\">@Conditional(DefaultDispatcherServletCondition.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(ServletRegistration.class)</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(&#123; HttpProperties.class, WebMvcProperties.class &#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DispatcherServletConfiguration</span> &#123;</span><br></pre></td></tr></table></figure>\n\n<p>@ConditionalWebApplication(type = Type.SERVLET) 判断当前的应用类型（是基于Servlet还是基于Reator）</p>\n<p>@AutoConfigurationOrder() 设置配置的优先级，这里这个配置类的优先级设置为高</p>\n<p>@Configuration(proxyBeanMethods = false) 前面说过，声明为组件，并使用轻量级配置</p>\n<p>@AutoConfigureAfter(ServletWebServerFactoryAutoConfiguration.class) 声明这个类要在ServletWebServerFactoryAutoConfiguration这个类之后配置</p>\n<p>上述添加都满足后，我们再看类中注册bean的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean(name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> DispatcherServlet <span class=\"title function_\">dispatcherServlet</span><span class=\"params\">(HttpProperties httpProperties, WebMvcProperties webMvcProperties)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">DispatcherServlet</span> <span class=\"variable\">dispatcherServlet</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DispatcherServlet</span>();</span><br><span class=\"line\">\tdispatcherServlet.setDispatchOptionsRequest(webMvcProperties.isDispatchOptionsRequest());</span><br><span class=\"line\">\tdispatcherServlet.setDispatchTraceRequest(webMvcProperties.isDispatchTraceRequest());</span><br><span class=\"line\">\tdispatcherServlet.setThrowExceptionIfNoHandlerFound(webMvcProperties.isThrowExceptionIfNoHandlerFound());</span><br><span class=\"line\">\tdispatcherServlet.setPublishEvents(webMvcProperties.isPublishRequestHandledEvents());</span><br><span class=\"line\">\tdispatcherServlet.setEnableLoggingRequestDetails(httpProperties.isLogRequestDetails());</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dispatcherServlet;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>@Bean注解下的方法，如果传入了对象参数，Springboot会自动在Spring容器中找到这个对象并作为参数传入</p>\n<p>SpringMVC中我们需要向Spring容器中注入DispatcherServlet类型的对象才能使用SpringMVC的Web功能，而Springboot帮我们在Spring容器中添加了这个对象，因而不需要我们手动去设置。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnBean(MultipartResolver.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> MultipartResolver <span class=\"title function_\">multipartResolver</span><span class=\"params\">(MultipartResolver resolver)</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Detect if the user has created a MultipartResolver but named it incorrectly</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> resolver;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法负责注入处理文件上传的文件解析器，</p>\n<p>@ConditionalOnBean(MultipartResolver.class) ：Spring容器中有MultipartResolver这个类的对象</p>\n<p>@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)：但是名字不是我们想要的名字</p>\n<p>于是我们就执行这个方法，添加一个名字也是我们的想要的bean，@Bean注解添加的bean的名称就是我们的方法名，这样就保证了组件名字的一致性</p>\n<p>再举一个例子：用来处理Http请求的编码类，防止出现中文乱码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(HttpProperties.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(CharacterEncodingFilter.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(prefix = &quot;spring.http.encoding&quot;, value = &quot;enabled&quot;, matchIfMissing = true)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HttpEncodingAutoConfiguration</span> &#123;</span><br></pre></td></tr></table></figure>\n\n<p>注解含义和之前都是类似的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> CharacterEncodingFilter <span class=\"title function_\">characterEncodingFilter</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">CharacterEncodingFilter</span> <span class=\"variable\">filter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OrderedCharacterEncodingFilter</span>();</span><br><span class=\"line\">\tfilter.setEncoding(<span class=\"built_in\">this</span>.properties.getCharset().name());</span><br><span class=\"line\">\tfilter.setForceRequestEncoding(<span class=\"built_in\">this</span>.properties.shouldForce(Type.REQUEST));</span><br><span class=\"line\">\tfilter.setForceResponseEncoding(<span class=\"built_in\">this</span>.properties.shouldForce(Type.RESPONSE));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> filter;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>@ConditionalOnMissingBean 如果没有CharacterEncodingFilter类型的bean，就执行下面这个方法，向容器中添加这个类型的bean</p>\n<p>通过使用注解@ConditionalOnMissingBean，Spring会向容器中添加所有我们需要的组件，但如果用户自己配置了组件，则以用户配置的组件优先</p>\n<h4 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h4><p><img src=\"D:\\学习笔记\\picture\\image-20220429002822205-1669804541526-41.png\" alt=\"image-20220429002822205\"></p>\n<p>Spring容器会加载指定路径下所有的自动配置类，然后这些配置类会根据@Condition系列注解配置的条件判断是否生效，每个自动配置类在注册组件时，属性值需要从xxxProperties类中拿，xxxProperties中是属性值会有默认值，同时也和我们设置的配置文件绑定在一起。所以我们向修改组件可以通过修改配置文件来做到。容器有有了对应的组件也就有了对应的功能。注册组件前会先判断用户是否注册了对应类型的组件，如果注册了就以用户的优先，所以我们可以通过在配置类中使用@Bean注解来定制化我们自己想要的组件。</p>\n<p>debug=true：开启自动配置报告</p>\n<p>更多配置信息可以查阅官方文档：<a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties\">https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties</a></p>\n<p>spring.banner.image.location=xxx.jpg 指定spring加载的图标，默认路径是classpath下的banner.jpg</p>\n<p>xxxxCustomize 自定义组件</p>\n<h3 id=\"开发小技巧\"><a href=\"#开发小技巧\" class=\"headerlink\" title=\"开发小技巧\"></a>开发小技巧</h3><h4 id=\"Lombok\"><a href=\"#Lombok\" class=\"headerlink\" title=\"Lombok\"></a>Lombok</h4><p>引入依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.18.22<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>还需要下载Lombok插件</p>\n<p>@Data ：设置set get方法，设置toString，hashcode，equals方法</p>\n<p>@AllArgsConstructor 全参数构造器</p>\n<p>@NoArgsConstructor 无参数构造器</p>\n<p>@Slf4j 自动添加一个log对象，用于打印日志</p>\n<h4 id=\"detTools\"><a href=\"#detTools\" class=\"headerlink\" title=\"detTools\"></a>detTools</h4><p>引入依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-devtools<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>调试时，代码的即使更新</p>\n<p>修改静态文件时，重新编译即可</p>\n<h4 id=\"Spring-Initailzer\"><a href=\"#Spring-Initailzer\" class=\"headerlink\" title=\"Spring Initailzer\"></a>Spring Initailzer</h4><p>帮我们创建全局的包结构和自动引入各种常用依赖，甚至还帮我们创建了.gitignore之类的文件</p>\n<h2 id=\"Springboot核心功能（2-2-4）\"><a href=\"#Springboot核心功能（2-2-4）\" class=\"headerlink\" title=\"Springboot核心功能（2.2.4）\"></a>Springboot核心功能（2.2.4）</h2><h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><h4 id=\"Yaml语法\"><a href=\"#Yaml语法\" class=\"headerlink\" title=\"Yaml语法\"></a>Yaml语法</h4><p>properties的优先级高于yml</p>\n<ul>\n<li>key: value；kv之间有空格</li>\n<li>大小写敏感</li>\n<li>使用缩进表示层级关系</li>\n<li>缩进不允许使用tab，只允许空格</li>\n<li>缩进的空格数不重要，只要相同层级的元素左对齐即可</li>\n<li>‘#’表示注释</li>\n<li>字符串无需加引号，如果要加，单引号’’、双引号””表示字符串内容会被 转义、不转义</li>\n</ul>\n<p>kv表示：k: v</p>\n<p>注意要有空格</p>\n<p>数组可以用y: [xx,xxx]来表示</p>\n<p>也可以用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">y: </span><br><span class=\"line\">  - xx</span><br><span class=\"line\">  - xxx</span><br></pre></td></tr></table></figure>\n\n<p><code>-</code>代表集合中的一个元素</p>\n<p>可以用一个类和配置文件来绑定</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.demo.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String userName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean boss;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date birth;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Pet pet;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String[] interests;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; animal;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, Object&gt; score;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Set&lt;Double&gt; salarys;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, List&lt;Pet&gt;&gt; allPets;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Pet</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Double weight;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在yml配置对应的属性：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">person:</span></span><br><span class=\"line\">  <span class=\"attr\">userName:</span> <span class=\"string\">zhangsan</span></span><br><span class=\"line\">  <span class=\"attr\">boss:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">birth:</span> <span class=\"number\">2019</span><span class=\"string\">/12/12</span> <span class=\"number\">20</span><span class=\"string\">:12:33</span></span><br><span class=\"line\">  <span class=\"attr\">age:</span> <span class=\"number\">18</span></span><br><span class=\"line\">  <span class=\"attr\">pet:</span> </span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">tomcat</span></span><br><span class=\"line\">    <span class=\"attr\">weight:</span> <span class=\"number\">23.4</span></span><br><span class=\"line\">  <span class=\"attr\">interests:</span> [<span class=\"string\">篮球</span>,<span class=\"string\">游泳</span>]</span><br><span class=\"line\">  <span class=\"attr\">animal:</span> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">jerry</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">mario</span></span><br><span class=\"line\">  <span class=\"attr\">score:</span></span><br><span class=\"line\">    <span class=\"attr\">english:</span> </span><br><span class=\"line\">      <span class=\"attr\">first:</span> <span class=\"number\">30</span></span><br><span class=\"line\">      <span class=\"attr\">second:</span> <span class=\"number\">40</span></span><br><span class=\"line\">      <span class=\"attr\">third:</span> <span class=\"number\">50</span></span><br><span class=\"line\">    <span class=\"attr\">math:</span> [<span class=\"number\">131</span>,<span class=\"number\">140</span>,<span class=\"number\">148</span>]</span><br><span class=\"line\">    <span class=\"attr\">chinese:</span> &#123;<span class=\"attr\">first:</span> <span class=\"number\">128</span>,<span class=\"attr\">second:</span> <span class=\"number\">136</span>&#125;</span><br><span class=\"line\">  <span class=\"attr\">salarys:</span> [<span class=\"number\">3999</span>,<span class=\"number\">4999.98</span>,<span class=\"number\">5999.99</span>]</span><br><span class=\"line\">  <span class=\"attr\">allPets:</span></span><br><span class=\"line\">    <span class=\"attr\">sick:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> &#123;<span class=\"attr\">name:</span> <span class=\"string\">tom</span>&#125;</span><br><span class=\"line\">      <span class=\"bullet\">-</span> &#123;<span class=\"attr\">name:</span> <span class=\"string\">jerry</span>,<span class=\"attr\">weight:</span> <span class=\"number\">47</span>&#125;</span><br><span class=\"line\">    <span class=\"attr\">health:</span> [&#123;<span class=\"attr\">name:</span> <span class=\"string\">mario</span>,<span class=\"attr\">weight:</span> <span class=\"number\">47</span>&#125;]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编写配置文件时，添加提示\"><a href=\"#编写配置文件时，添加提示\" class=\"headerlink\" title=\"编写配置文件时，添加提示\"></a>编写配置文件时，添加提示</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 下面插件作用是工程打包时，不将spring-boot-configuration-processor打进包内，让其只在编码的时候有用 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>大写字母等价于小写字母前加上- 也就是：N 和-n的意义相同</p>\n<h3 id=\"Web开发\"><a href=\"#Web开发\" class=\"headerlink\" title=\"Web开发\"></a>Web开发</h3><p>Springboot框架是框架的框架</p>\n<h4 id=\"静态资源\"><a href=\"#静态资源\" class=\"headerlink\" title=\"静态资源\"></a>静态资源</h4><p>Springboot默认的静态资源目录是在resources目录下的：</p>\n<p>/static</p>\n<p>/public</p>\n<p>/resources</p>\n<p>/META-INF/resources</p>\n<p>这些目录静态资源都可以直接访问</p>\n<p>例如：<a href=\"http://localhost:8080/123.png\">http://localhost:8080/123.png</a></p>\n<p>如果是他们在他们的子目录下，则需要加上子目录的包名</p>\n<h5 id=\"请求顺序\"><a href=\"#请求顺序\" class=\"headerlink\" title=\"请求顺序\"></a>请求顺序</h5><p>在请求进来时，先判断Controller能不能处理，如果不能处理再交给静态资源处理器来处理，否则返回404</p>\n<h5 id=\"配置静态资源的访问前缀\"><a href=\"#配置静态资源的访问前缀\" class=\"headerlink\" title=\"配置静态资源的访问前缀\"></a>配置静态资源的访问前缀</h5><p>访问静态资源默认是没有前缀的，但是实际上我们需要加上前缀来对资源进行一些个性化的拦截（登录拦截动态资源，而为静态资源放行）</p>\n<p>设置静态资源前缀：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">mvc:</span></span><br><span class=\"line\">    <span class=\"attr\">static-path-pattern:</span> <span class=\"string\">/res/**</span></span><br></pre></td></tr></table></figure>\n\n<p>表示和这个正则表达式匹配的可以由静态资源处理器来处理</p>\n<h5 id=\"设置静态资源的目录\"><a href=\"#设置静态资源的目录\" class=\"headerlink\" title=\"设置静态资源的目录\"></a>设置静态资源的目录</h5><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">static-locations:</span> [<span class=\"string\">classpath:/static/</span>,<span class=\"string\">classpath:/static/img/</span>]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"D:\\学习笔记\\picture\\image-20220429142943211-1669804541526-50.png\" alt=\"image-20220429142943211\"></p>\n<p>底层是一个String数组，所以我们采用数组（列表）的写法</p>\n<p>webjars：用于编写web应用的jar包（例如JQuery）</p>\n<p>在pom引入后，可以在webjars/目录下访问</p>\n<h5 id=\"欢迎页\"><a href=\"#欢迎页\" class=\"headerlink\" title=\"欢迎页\"></a>欢迎页</h5><p>如果静态目录下有index.html页面，访问<code>http://localhost:8080/</code>也就是项目路径时，会默认显示index.html页面</p>\n<p>但是如果配置了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  mvc:</span><br><span class=\"line\">    static-path-pattern: /res/**</span><br></pre></td></tr></table></figure>\n\n<p>会让欢迎页功能失效，也会让图标功能失效</p>\n<h5 id=\"图标功能\"><a href=\"#图标功能\" class=\"headerlink\" title=\"图标功能\"></a>图标功能</h5><p>在静态目录下添加favicon.ico作为所有页面的图标，然后用ctrl+F5强制刷新并清空缓存可以看到效果</p>\n<h5 id=\"静态资源访问底层原理\"><a href=\"#静态资源访问底层原理\" class=\"headerlink\" title=\"静态资源访问底层原理\"></a>静态资源访问底层原理</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addResourceHandlers</span><span class=\"params\">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!<span class=\"built_in\">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class=\"line\">\t\tlogger.debug(<span class=\"string\">&quot;Default resource handling disabled&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">Duration</span> <span class=\"variable\">cachePeriod</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class=\"line\">\t<span class=\"type\">CacheControl</span> <span class=\"variable\">cacheControl</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!registry.hasMappingForPattern(<span class=\"string\">&quot;/webjars/**&quot;</span>)) &#123;</span><br><span class=\"line\">\t\tcustomizeResourceHandlerRegistration(registry.addResourceHandler(<span class=\"string\">&quot;/webjars/**&quot;</span>)</span><br><span class=\"line\">\t\t\t\t.addResourceLocations(<span class=\"string\">&quot;classpath:/META-INF/resources/webjars/&quot;</span>)</span><br><span class=\"line\">\t\t\t\t.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">staticPathPattern</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class=\"line\">\t\tcustomizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)</span><br><span class=\"line\">\t\t\t\t.addResourceLocations(getResourceLocations(<span class=\"built_in\">this</span>.resourceProperties.getStaticLocations()))</span><br><span class=\"line\">\t\t\t\t.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>resourceProperties.isAddMappings() </code>对应配置：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">add-mappings:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<p>从源码可知，如果配置成了false，后面的逻辑都不会执行，也就禁用了静态资源的访问功能（默认是true）</p>\n<p><code>Duration cachePeriod = this.resourceProperties.getCache().getPeriod();</code></p>\n<p>这条语句用于获取配置：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">cache:</span></span><br><span class=\"line\">      <span class=\"attr\">period:</span> <span class=\"number\">11000</span></span><br></pre></td></tr></table></figure>\n\n<p>也就是设置静态资源的缓存时间，在这段时间内不用再重新加载静态资源，可以直接从浏览器缓存中获取，单位是秒</p>\n<p>通过缓存拿到的资源状态码会显示304</p>\n<p>webjars访问规则：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!registry.hasMappingForPattern(<span class=\"string\">&quot;/webjars/**&quot;</span>)) &#123;</span><br><span class=\"line\">\tcustomizeResourceHandlerRegistration(registry.addResourceHandler(<span class=\"string\">&quot;/webjars/**&quot;</span>)</span><br><span class=\"line\">\t\t\t.addResourceLocations(<span class=\"string\">&quot;classpath:/META-INF/resources/webjars/&quot;</span>)</span><br><span class=\"line\">\t\t\t.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果在Controller中没有设置<code>/webjars/**</code>的路由，就在访问带有webjars的前缀时，访问classpath:/META-INF/resources/webjars/这个目录下的资源，同时设置缓存时间和缓存控制</p>\n<h5 id=\"静态资源访问规则：\"><a href=\"#静态资源访问规则：\" class=\"headerlink\" title=\"静态资源访问规则：\"></a>静态资源访问规则：</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">staticPathPattern</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class=\"line\">\tcustomizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)</span><br><span class=\"line\">\t\t\t.addResourceLocations(getResourceLocations(<span class=\"built_in\">this</span>.resourceProperties.getStaticLocations()))</span><br><span class=\"line\">\t\t\t.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果在Controller中没有设置staticPathPattern的url访问规则，则在访问staticPathPattern规则下的资源时，访问this.resourceProperties.getStaticLocations()路径下对应静态资源，同时设置缓存时间。</p>\n<p>staticPathPattern：</p>\n<p><img src=\"D:\\学习笔记\\picture\\image-20220429154312189-1669804541526-51.png\" alt=\"image-20220429154312189\"></p>\n<p>这就解释了为什么静态资源访问的url是/ 而没有前缀</p>\n<p>staticLocations：</p>\n<p><img src=\"D:\\学习笔记\\picture\\image-20220429154625565-1669804541526-52.png\" alt=\"image-20220429154625565\"></p>\n<p>这就也就静态资源默认路径的由来，如果我们进行了配置，staticLocations就会被更新为配置文件中的值。</p>\n<p>关于欢迎页：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WelcomePageHandlerMapping(TemplateAvailabilityProviders templateAvailabilityProviders,</span><br><span class=\"line\">\t\t\tApplicationContext applicationContext, Optional&lt;Resource&gt; welcomePage, String staticPathPattern) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (welcomePage.isPresent() &amp;&amp; <span class=\"string\">&quot;/**&quot;</span>.equals(staticPathPattern)) &#123;</span><br><span class=\"line\">\t\t\tlogger.info(<span class=\"string\">&quot;Adding welcome page: &quot;</span> + welcomePage.get());</span><br><span class=\"line\">\t\t\tsetRootViewName(<span class=\"string\">&quot;forward:index.html&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (welcomeTemplateExists(templateAvailabilityProviders, applicationContext)) &#123;</span><br><span class=\"line\">\t\t\tlogger.info(<span class=\"string\">&quot;Adding welcome page template: index&quot;</span>);</span><br><span class=\"line\">\t\t\tsetRootViewName(<span class=\"string\">&quot;index&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>&quot;/**&quot;.equals(staticPathPattern)</code>我们可以看到，只有在静态路径没有被配置时，欢迎页才会生效</p>\n<h3 id=\"Restful风格开发\"><a href=\"#Restful风格开发\" class=\"headerlink\" title=\"Restful风格开发\"></a>Restful风格开发</h3><p>对于原生的HTML中的form元素没有PUT和DELETE方法，可以使用post方法模拟这两个请求（如果用一些能直接发这两种请求的工具则不需要以下流程，因为在HTTP层就已经是PUT和DELETE了，所以这一项是选择性开启）</p>\n<p>WebMvcAutoConfiguration类中有这样的一段配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(prefix = &quot;spring.mvc.hiddenmethod.filter&quot;, name = &quot;enabled&quot;, matchIfMissing = false)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> OrderedHiddenHttpMethodFilter <span class=\"title function_\">hiddenHttpMethodFilter</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OrderedHiddenHttpMethodFilter</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意到@ConditionalOnProperty(prefix = “spring.mvc.hiddenmethod.filter”, name = “enabled”, matchIfMissing = false)，需要我们在配置文件中，将spring.mvc.hiddenmethod.filter 设置为enabled 才可以：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">mvc:</span></span><br><span class=\"line\">    <span class=\"attr\">hiddenmethod:</span></span><br><span class=\"line\">      <span class=\"attr\">filter:</span></span><br><span class=\"line\">        <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>前端需要添加隐藏参数_method，才能使用PUT方法和DELETE方法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/user&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;get&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;REST-GET提交&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/user&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;REST-POST提交&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/user&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;_method&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;DELETE&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;REST-DELETE 提交&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/user&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;_method&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;PUT&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;REST-PUT提交&quot;</span><span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Rest原理（表单提交要使用REST的时候）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doFilterInternal</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">HttpServletRequest</span> <span class=\"variable\">requestToUse</span> <span class=\"operator\">=</span> request;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"string\">&quot;POST&quot;</span>.equals(request.getMethod()) &amp;&amp; request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">paramValue</span> <span class=\"operator\">=</span> request.getParameter(<span class=\"built_in\">this</span>.methodParam);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (StringUtils.hasLength(paramValue)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">String</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> paramValue.toUpperCase(Locale.ENGLISH);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (ALLOWED_METHODS.contains(method)) &#123;</span><br><span class=\"line\">\t\t\t\trequestToUse = <span class=\"keyword\">new</span> <span class=\"title class_\">HttpMethodRequestWrapper</span>(request, method);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfilterChain.doFilter(requestToUse, response);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在执行拦截器前，会先获取到我们_method字段的参数，然后根据这个字段重新设置我们的请求方法，然后生成一个HttpServletRequest的包装类（这个类也实现了HttpServletRequest接口），然后将原来的request和新设置的方法传进去，从而完成方法的替换，然后再去执行接下来的逻辑。</p>\n<p>使用@GetMapping(“/“) @PostMapping(“/“) 等更方便</p>\n<h3 id=\"请求映射原理\"><a href=\"#请求映射原理\" class=\"headerlink\" title=\"请求映射原理\"></a>请求映射原理</h3><p>DispatcherServlet实现了HttpServlet接口，所以本质上就是一个Servlet，而Servlet的功能就是接收从服务器发送来的请求，并予以返回值的框架。</p>\n<p>DispatcherServlet里面实现了doGet，doPost等方法，这些方法都会调用processRequest方法，在这个方法中调用doService方法，在doService方法再调用doDispatch方法，而处理请求的核心代码就在这个方法中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doDispatch</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t<span class=\"type\">HttpServletRequest</span> <span class=\"variable\">processedRequest</span> <span class=\"operator\">=</span> request;</span><br><span class=\"line\">\t<span class=\"type\">HandlerExecutionChain</span> <span class=\"variable\">mappedHandler</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"variable\">multipartRequestParsed</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">WebAsyncManager</span> <span class=\"variable\">asyncManager</span> <span class=\"operator\">=</span> WebAsyncUtils.getAsyncManager(request);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">ModelAndView</span> <span class=\"variable\">mv</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">Exception</span> <span class=\"variable\">dispatchException</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">               <span class=\"comment\">//判断是不是文件上传请求</span></span><br><span class=\"line\">\t\t\tprocessedRequest = checkMultipart(request);</span><br><span class=\"line\">\t\t\tmultipartRequestParsed = (processedRequest != request);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Determine handler for the current request.</span></span><br><span class=\"line\">\t\t\tmappedHandler = getHandler(processedRequest);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (mappedHandler == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tnoHandlerFound(processedRequest, response);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Determine handler adapter for the current request.</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">HandlerAdapter</span> <span class=\"variable\">ha</span> <span class=\"operator\">=</span> getHandlerAdapter(mappedHandler.getHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Process last-modified header, if supported by the handler.</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">String</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> request.getMethod();</span><br><span class=\"line\">\t\t\t<span class=\"type\">boolean</span> <span class=\"variable\">isGet</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;GET&quot;</span>.equals(method);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isGet || <span class=\"string\">&quot;HEAD&quot;</span>.equals(method)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">long</span> <span class=\"variable\">lastModified</span> <span class=\"operator\">=</span> ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">new</span> <span class=\"title class_\">ServletWebRequest</span>(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Actually invoke the handler.</span></span><br><span class=\"line\">\t\t\tmv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tapplyDefaultViewName(processedRequest, mv);</span><br><span class=\"line\">\t\t\tmappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">\t\t\tdispatchException = ex;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (Throwable err) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// making them available for @ExceptionHandler methods and other scenarios.</span></span><br><span class=\"line\">\t\t\tdispatchException = <span class=\"keyword\">new</span> <span class=\"title class_\">NestedServletException</span>(<span class=\"string\">&quot;Handler dispatch failed&quot;</span>, err);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tprocessDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">\t\ttriggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Throwable err) &#123;</span><br><span class=\"line\">\t\ttriggerAfterCompletion(processedRequest, response, mappedHandler,</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">NestedServletException</span>(<span class=\"string\">&quot;Handler processing failed&quot;</span>, err));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Instead of postHandle and afterCompletion</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (mappedHandler != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tmappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Clean up any resources used by a multipart request.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (multipartRequestParsed) &#123;</span><br><span class=\"line\">\t\t\t\tcleanupMultipart(processedRequest);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>mappedHandler = getHandler(processedRequest)</strong></p>\n<p>根据请求获取对应url的处理器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> HandlerExecutionChain <span class=\"title function_\">getHandler</span><span class=\"params\">(HttpServletRequest request)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.handlerMappings != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (HandlerMapping mapping : <span class=\"built_in\">this</span>.handlerMappings) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">HandlerExecutionChain</span> <span class=\"variable\">handler</span> <span class=\"operator\">=</span> mapping.getHandler(request);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (handler != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> handler;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>遍历容器中所有的HandlerMapping，找到第一个能处理这个请求的handler并返回</p>\n<p>Spring帮我们注册的handler有欢迎页的handler，我们在Controller定义的handler，以及我们自定义的handler</p>\n<p>先根据URL找到URL匹配的处理器handler，先找到方法也匹配的handler，如果有多个匹配则报错</p>\n<h3 id=\"Springboot参数注解\"><a href=\"#Springboot参数注解\" class=\"headerlink\" title=\"Springboot参数注解\"></a>Springboot参数注解</h3><h4 id=\"PathVariable-路径参数\"><a href=\"#PathVariable-路径参数\" class=\"headerlink\" title=\"@PathVariable  路径参数\"></a>@PathVariable  路径参数</h4><p>将路径的一部分作为参数/user/{id}<br>数字或者字符串变量，加上这个注解后可以获取到路径参数中对应的名称。如果是一个Map型变量加上了这个注解则会将所有参数以kv的形式传入到这个Map中</p>\n<h4 id=\"RequestHeader-请求头参数\"><a href=\"#RequestHeader-请求头参数\" class=\"headerlink\" title=\"@RequestHeader  请求头参数\"></a>@RequestHeader  请求头参数</h4><p>可以拿到请求头中对应的参数，如果参数类型是Map,MultiValueMap,HttpHeaders则会拿到所有的请求头参数</p>\n<h4 id=\"RequestParam-请求参数\"><a href=\"#RequestParam-请求参数\" class=\"headerlink\" title=\"@RequestParam  请求参数\"></a>@RequestParam  请求参数</h4><p>用来获取路由参数<br>例如/user?age=13<br>如果等号左边有相同的值，则会以列表的形式读取进来<br>如果参数列表是Map类型，则会将所有方法参数都读进来，类型是String,String或者String,Object</p>\n<h4 id=\"CookieValue-Cookie参数\"><a href=\"#CookieValue-Cookie参数\" class=\"headerlink\" title=\"@CookieValue  Cookie参数\"></a>@CookieValue  Cookie参数</h4><p>可以获取指定Cookie的值<br>参数类型可以是String，也可以是Cookie类型的变量，用getName和getValue来获取KV的值</p>\n<h4 id=\"RequestBody-请求体\"><a href=\"#RequestBody-请求体\" class=\"headerlink\" title=\"@RequestBody  请求体\"></a>@RequestBody  请求体</h4><p>获取请求体中的所有参数，如果参数类型是String会把参数url原样拿过来，如果是其他对象类型，会将参数按照属性名装配进去后返回</p>\n<h4 id=\"RequestAttribute-请求域参数\"><a href=\"#RequestAttribute-请求域参数\" class=\"headerlink\" title=\"@RequestAttribute 请求域参数\"></a>@RequestAttribute 请求域参数</h4><p>设置获取请求域的参数，请求域的参数可以通过request的setAttribute来设置，也可以用过getAttribute来获取，在进行路由转发的时候可以使用这种方式传递参数，转发方式:<br>return “forward:/success” 在forward后面设置转发的路由，这样可以让多个路由映射到同一个功能上</p>\n<h4 id=\"MatrixVariable-矩阵变量\"><a href=\"#MatrixVariable-矩阵变量\" class=\"headerlink\" title=\"@MatrixVariable  矩阵变量\"></a>@MatrixVariable  矩阵变量</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/cars/sell;low=34;brand=byd,audi,yd</span><br></pre></td></tr></table></figure>\n\n<p>URL中还可以通过矩阵变量传递参数，每个参数用分号<code>;</code>分割，List类型的参数可以直接用逗号<code>,</code>分割，相同参数会被封装成一个list</p>\n<p>在参数中加上这个注解@MatrixVariable来获取值</p>\n<p>每个矩阵变量依附于它前面的路由变量，每个路径变量都可以有一个一系列矩阵变量，可以通过设置@MatrixVariable中的pathVar属性来获取指定变量参数后面的矩阵变量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ParameterTestController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">///cars/sell;low=34;brand=byd,audi,yd</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/cars/&#123;path&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map <span class=\"title function_\">carsSell</span><span class=\"params\">(<span class=\"meta\">@MatrixVariable(&quot;low&quot;)</span> Integer low,</span></span><br><span class=\"line\"><span class=\"params\">                        <span class=\"meta\">@MatrixVariable(&quot;brand&quot;)</span> List&lt;String&gt; brand,</span></span><br><span class=\"line\"><span class=\"params\">                        <span class=\"meta\">@PathVariable(&quot;path&quot;)</span> String path)</span>&#123;</span><br><span class=\"line\">        Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;low&quot;</span>,low);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;brand&quot;</span>,brand);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;path&quot;</span>,path);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// /boss/1;age=20/2;age=10</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/boss/&#123;bossId&#125;/&#123;empId&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map <span class=\"title function_\">boss</span><span class=\"params\">(<span class=\"meta\">@MatrixVariable(value = &quot;age&quot;,pathVar = &quot;bossId&quot;)</span> Integer bossAge,</span></span><br><span class=\"line\"><span class=\"params\">                    <span class=\"meta\">@MatrixVariable(value = &quot;age&quot;,pathVar = &quot;empId&quot;)</span> Integer empAge)</span>&#123;</span><br><span class=\"line\">        Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;bossAge&quot;</span>,bossAge);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;empAge&quot;</span>,empAge);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Springboot禁用了矩阵变量的功能，需要我们手动开启</p>\n<p>原因：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&quot;deprecation&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configurePathMatch</span><span class=\"params\">(PathMatchConfigurer configurer)</span> &#123;</span><br><span class=\"line\">\tconfigurer.setUseSuffixPatternMatch(<span class=\"built_in\">this</span>.mvcProperties.getPathmatch().isUseSuffixPattern());</span><br><span class=\"line\">\tconfigurer.setUseRegisteredSuffixPatternMatch(</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.mvcProperties.getPathmatch().isUseRegisteredSuffixPattern());</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.dispatcherServletPath.ifAvailable((dispatcherPath) -&gt; &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">servletUrlMapping</span> <span class=\"operator\">=</span> dispatcherPath.getServletUrlMapping();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (servletUrlMapping.equals(<span class=\"string\">&quot;/&quot;</span>) &amp;&amp; singleDispatcherServlet()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">UrlPathHelper</span> <span class=\"variable\">urlPathHelper</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UrlPathHelper</span>();</span><br><span class=\"line\">\t\t\turlPathHelper.setAlwaysUseFullPath(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t\t\tconfigurer.setUrlPathHelper(urlPathHelper);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>路由匹配在上述方法中进行，而路由解析需要用到UrlPathHelper，而在UrlPathHelper中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Set if &quot;;&quot; (semicolon) content should be stripped from the request URI.</span></span><br><span class=\"line\"><span class=\"comment\">\t * &lt;p&gt;Default is &quot;true&quot;.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setRemoveSemicolonContent</span><span class=\"params\">(<span class=\"type\">boolean</span> removeSemicolonContent)</span> &#123;</span><br><span class=\"line\">\t\tcheckReadOnly();</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.removeSemicolonContent = removeSemicolonContent;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面提到如果removeSemicolonContent这个变量是true，则会移除我们分号后面的内容，因而我们获取不到矩阵参数</p>\n<p>所以我们在组件中设置一个这个变量为false的组件即可：</p>\n<p>可以单独写一个类实现接口，JDK8有接口默认方法，所以们不用实现所有的类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebConfig</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">WebMvcConfigurer</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configurePathMatch</span><span class=\"params\">(PathMatchConfigurer configurer)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">UrlPathHelper</span> <span class=\"variable\">urlPathHelper</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UrlPathHelper</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 不移除；后面的内容。矩阵变量功能就可以生效</span></span><br><span class=\"line\">        urlPathHelper.setRemoveSemicolonContent(<span class=\"literal\">false</span>);</span><br><span class=\"line\">        configurer.setUrlPathHelper(urlPathHelper);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也可以在配置类中用@Bean注入：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebConfig</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> WebMvcConfigurer <span class=\"title function_\">webMvcConfigurer</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WebMvcConfigurer</span>() &#123;</span><br><span class=\"line\">                        <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configurePathMatch</span><span class=\"params\">(PathMatchConfigurer configurer)</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">UrlPathHelper</span> <span class=\"variable\">urlPathHelper</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UrlPathHelper</span>();</span><br><span class=\"line\">                <span class=\"comment\">// 不移除；后面的内容。矩阵变量功能就可以生效</span></span><br><span class=\"line\">                urlPathHelper.setRemoveSemicolonContent(<span class=\"literal\">false</span>);</span><br><span class=\"line\">                configurer.setUrlPathHelper(urlPathHelper);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>（但是重写这个方法的话，其他方法怎么办呢……可能Spring还做了一些其他的事情……，不过我们知道这个怎么配置，大致的原因是什么即可）</p>\n<h4 id=\"Springboot参数注解原理\"><a href=\"#Springboot参数注解原理\" class=\"headerlink\" title=\"Springboot参数注解原理\"></a>Springboot参数注解原理</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doDispatch</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t<span class=\"type\">HttpServletRequest</span> <span class=\"variable\">processedRequest</span> <span class=\"operator\">=</span> request;</span><br><span class=\"line\">\t<span class=\"type\">HandlerExecutionChain</span> <span class=\"variable\">mappedHandler</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"variable\">multipartRequestParsed</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">WebAsyncManager</span> <span class=\"variable\">asyncManager</span> <span class=\"operator\">=</span> WebAsyncUtils.getAsyncManager(request);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">ModelAndView</span> <span class=\"variable\">mv</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">Exception</span> <span class=\"variable\">dispatchException</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">               <span class=\"comment\">//判断是不是文件上传请求</span></span><br><span class=\"line\">\t\t\tprocessedRequest = checkMultipart(request);</span><br><span class=\"line\">\t\t\tmultipartRequestParsed = (processedRequest != request);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Determine handler for the current request.</span></span><br><span class=\"line\">\t\t\tmappedHandler = getHandler(processedRequest);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (mappedHandler == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tnoHandlerFound(processedRequest, response);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Determine handler adapter for the current request.</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">HandlerAdapter</span> <span class=\"variable\">ha</span> <span class=\"operator\">=</span> getHandlerAdapter(mappedHandler.getHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Process last-modified header, if supported by the handler.</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">String</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> request.getMethod();</span><br><span class=\"line\">\t\t\t<span class=\"type\">boolean</span> <span class=\"variable\">isGet</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;GET&quot;</span>.equals(method);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isGet || <span class=\"string\">&quot;HEAD&quot;</span>.equals(method)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">long</span> <span class=\"variable\">lastModified</span> <span class=\"operator\">=</span> ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">new</span> <span class=\"title class_\">ServletWebRequest</span>(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Actually invoke the handler.</span></span><br><span class=\"line\">\t\t\tmv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tapplyDefaultViewName(processedRequest, mv);</span><br><span class=\"line\">\t\t\tmappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">\t\t\tdispatchException = ex;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (Throwable err) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// making them available for @ExceptionHandler methods and other scenarios.</span></span><br><span class=\"line\">\t\t\tdispatchException = <span class=\"keyword\">new</span> <span class=\"title class_\">NestedServletException</span>(<span class=\"string\">&quot;Handler dispatch failed&quot;</span>, err);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tprocessDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">\t\ttriggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Throwable err) &#123;</span><br><span class=\"line\">\t\ttriggerAfterCompletion(processedRequest, response, mappedHandler,</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">NestedServletException</span>(<span class=\"string\">&quot;Handler processing failed&quot;</span>, err));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Instead of postHandle and afterCompletion</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (mappedHandler != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tmappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Clean up any resources used by a multipart request.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (multipartRequestParsed) &#123;</span><br><span class=\"line\">\t\t\t\tcleanupMultipart(processedRequest);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"获取handler\"><a href=\"#获取handler\" class=\"headerlink\" title=\"获取handler\"></a>获取handler</h5><p>mappedHandler = getHandler(processedRequest);</p>\n<p>获取能处理这个请求的handler，而所谓的handler就是在Controller中通过URL找到的对应的方法，拿到方法的各种信息。</p>\n<h5 id=\"获取适配器\"><a href=\"#获取适配器\" class=\"headerlink\" title=\"获取适配器\"></a>获取适配器</h5><p>HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</p>\n<p>获取能处理这个handler的适配器，适配器用于解析上述各种注解的参数，相当于一个大的反射工具</p>\n<p>HandlerAdapter 里面有这些方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">HandlerAdapter</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//是否能处理这个handler</span></span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"title function_\">supports</span><span class=\"params\">(Object handler)</span>;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    对应的实现类，直接比较是不是我们想要的类型的对象</span></span><br><span class=\"line\"><span class=\"comment\">    @Override</span></span><br><span class=\"line\"><span class=\"comment\">\tpublic final boolean supports(Object handler) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\treturn (handler instanceof HandlerMethod &amp;&amp; supportsInternal((HandlerMethod) handler));</span></span><br><span class=\"line\"><span class=\"comment\">\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">    </span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">//如果能处理则调用这个方法处理请求</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\tModelAndView <span class=\"title function_\">handle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"title function_\">getLastModified</span><span class=\"params\">(HttpServletRequest request, Object handler)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>获取对应的handlerAdapter的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> HandlerAdapter <span class=\"title function_\">getHandlerAdapter</span><span class=\"params\">(Object handler)</span> <span class=\"keyword\">throws</span> ServletException &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.handlerAdapters != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (HandlerAdapter adapter : <span class=\"built_in\">this</span>.handlerAdapters) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (adapter.supports(handler)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> adapter;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServletException</span>(<span class=\"string\">&quot;No adapter for handler [&quot;</span> + handler +</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>遍历容器中注册的所有HandlerAdapter，找到能支持这个handler的HandlerAdapter</p>\n<p><img src=\"D:\\学习笔记\\picture\\image-20220430192846168-1669804541526-53.png\" alt=\"image-20220430192846168\"></p>\n<p>RequestMappingHandlerAdapter ：用于处理Controller的方法中带哟@RequestMapping注解的方法（也就是我们所写的普通方法）</p>\n<p>HandlerFunctionAdapter ：用于处理函数式编程的方法对应的Controller</p>\n<h5 id=\"浏览器缓存\"><a href=\"#浏览器缓存\" class=\"headerlink\" title=\"浏览器缓存\"></a>浏览器缓存</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> request.getMethod();</span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">isGet</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;GET&quot;</span>.equals(method);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (isGet || <span class=\"string\">&quot;HEAD&quot;</span>.equals(method)) &#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">lastModified</span> <span class=\"operator\">=</span> ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">new</span> <span class=\"title class_\">ServletWebRequest</span>(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>判断是不是GET方法或者方法，这个String method是我们之前设置的方法名（回顾之前用内置参数模拟PUT,DELETE方法，这里的HEAD方法也是这样），如果是HEAD方法则直接返回（并不是真正的请求），如果是GET方法的则判断静态资源最后的修改时间，如果没有修改则提示客户端可以从浏览器缓存中获取静态资源</p>\n<h5 id=\"执行方法\"><a href=\"#执行方法\" class=\"headerlink\" title=\"执行方法\"></a>执行方法</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br></pre></td></tr></table></figure>\n\n<p>返回值是视图解析器(-&gt;代表调用)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handle -&gt; handleInternal-&gt;invokeHandlerMethod</span><br></pre></td></tr></table></figure>\n\n<p>invokeHandlerMethod方法中</p>\n<p>根据不同的类型的注解解析参数，并设置参数的值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (this.argumentResolvers != null) &#123;</span><br><span class=\"line\">    invocableMethod.setHandlerMethodArgumentResolvers(this.argumentResolvers);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解析返回值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (this.returnValueHandlers != null) &#123;</span><br><span class=\"line\">    invocableMethod.setHandlerMethodReturnValueHandlers(this.returnValueHandlers);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>准备工作完成，真正执行方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">invocableMethod.invokeAndHandle(webRequest, mavContainer);</span><br></pre></td></tr></table></figure>\n\n<p>在这个方法中调用<strong>invokeForRequest</strong>方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Object <span class=\"title function_\">invokeForRequest</span><span class=\"params\">(NativeWebRequest request, <span class=\"meta\">@Nullable</span> ModelAndViewContainer mavContainer,</span></span><br><span class=\"line\"><span class=\"params\">\t\tObject... providedArgs)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tObject[] args = getMethodArgumentValues(request, mavContainer, providedArgs);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\tlogger.trace(<span class=\"string\">&quot;Arguments: &quot;</span> + Arrays.toString(args));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> doInvoke(args);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第一条语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);</span><br></pre></td></tr></table></figure>\n\n<p>用于获取这个方法所有所需的参数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> Object[] getMethodArgumentValues(NativeWebRequest request, <span class=\"meta\">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class=\"line\">\t\tObject... providedArgs) <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//拿到所有参数的信息，但是此时参数还没有值</span></span><br><span class=\"line\">\tMethodParameter[] parameters = getMethodParameters();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ObjectUtils.isEmpty(parameters)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> EMPTY_ARGS;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//创建等大的数组作为参数列表，准备设置值</span></span><br><span class=\"line\">\tObject[] args = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[parameters.length];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; parameters.length; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">MethodParameter</span> <span class=\"variable\">parameter</span> <span class=\"operator\">=</span> parameters[i];</span><br><span class=\"line\">\t\tparameter.initParameterNameDiscovery(<span class=\"built_in\">this</span>.parameterNameDiscoverer);</span><br><span class=\"line\">\t\targs[i] = findProvidedArgument(parameter, providedArgs);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (args[i] != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">           <span class=\"comment\">//判断在所有的参数解析器中是否有能够处理这个参数的解析器</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!<span class=\"built_in\">this</span>.resolvers.supportsParameter(parameter)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalStateException</span>(formatArgumentError(parameter, <span class=\"string\">&quot;No suitable resolver&quot;</span>));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           <span class=\"comment\">//解析参数的值</span></span><br><span class=\"line\">\t\t\targs[i] = <span class=\"built_in\">this</span>.resolvers.resolveArgument(parameter, mavContainer, request, <span class=\"built_in\">this</span>.dataBinderFactory);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Leave stack trace for later, exception may actually be resolved and handled...</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">String</span> <span class=\"variable\">exMsg</span> <span class=\"operator\">=</span> ex.getMessage();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (exMsg != <span class=\"literal\">null</span> &amp;&amp; !exMsg.contains(parameter.getExecutable().toGenericString())) &#123;</span><br><span class=\"line\">\t\t\t\t\tlogger.debug(formatArgumentError(parameter, exMsg));</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> args;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>this.resolvers.supportsParameter(parameter)</strong> //判断在所有的视图解析器中是否有能够处理这个参数的解析器</p>\n<p>判断方法是看是否能找到合适的参数解析器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">public boolean supportsParameter(MethodParameter parameter) &#123;</span><br><span class=\"line\">\treturn getArgumentResolver(parameter) != null;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>查找过程getArgumentResolver：</p>\n<p>先判断缓存map里面有没有，如果有就直接拿到，如果没有则遍历所有的视图解析器，判断是否支持解析这个参数，如果支持则放入缓存中并返回这个视图解析器。</p>\n<p>判断方法：1. 是否有对应的参数注解 2.参数类型是否满足要去 3.其他</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> HandlerMethodArgumentResolver <span class=\"title function_\">getArgumentResolver</span><span class=\"params\">(MethodParameter parameter)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">HandlerMethodArgumentResolver</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.argumentResolverCache.get(parameter);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (result == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (HandlerMethodArgumentResolver resolver : <span class=\"built_in\">this</span>.argumentResolvers) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (resolver.supportsParameter(parameter)) &#123;</span><br><span class=\"line\">\t\t\t\t\tresult = resolver;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">this</span>.argumentResolverCache.put(parameter, result);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>args[i] = this.resolvers.resolveArgument(parameter, mavContainer, request, this.dataBinderFactory)</strong> 解析参数的值</p>\n<p>进入后来到可以来到：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> Object <span class=\"title function_\">resolveName</span><span class=\"params\">(String name, MethodParameter parameter, NativeWebRequest request)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\tMap&lt;String, String&gt; uriTemplateVars = (Map&lt;String, String&gt;) request.getAttribute(</span><br><span class=\"line\">\t\t\tHandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (uriTemplateVars != <span class=\"literal\">null</span> ? uriTemplateVars.get(name) : <span class=\"literal\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法用于获取参数的值，不同注解的的解析器有不同的实现，上面这个是@PathVariable参数注解的解析器。</p>\n<p>之前我们看到Springboot用urlPathHelper解析了URL中的各种参数，解析后Springboot会将其放到HttpServletRequest的请求域中，然后再这里直接根据参数名从请求域中获取参数的值</p>\n<p>获取后回到原来的方法中，设置参数的值</p>\n<h5 id=\"进行一些善后处理\"><a href=\"#进行一些善后处理\" class=\"headerlink\" title=\"进行一些善后处理\"></a>进行一些善后处理</h5><p>mappedHandler.applyPostHandle(processedRequest, response, mv);</p>\n<h5 id=\"处理最后的结果\"><a href=\"#处理最后的结果\" class=\"headerlink\" title=\"处理最后的结果\"></a>处理最后的结果</h5><p>也就设置最后要去哪个页面，需要处理哪些参数</p>\n<p>processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</p>\n<h3 id=\"Servlet-API\"><a href=\"#Servlet-API\" class=\"headerlink\" title=\"Servlet API\"></a>Servlet API</h3><p>Springboot给Servlet API类型的参数赋值时，解析用的方法和上面加了注解的参数一致，只是用的参数解析器不同。这里用的参数解析器只用判断参数的类型即可，如果是指定的类型比如HttpServletRequest 类型，他就会封装出一个对应的请求对象并进行引用赋值。</p>\n<h3 id=\"复杂参数\"><a href=\"#复杂参数\" class=\"headerlink\" title=\"复杂参数\"></a>复杂参数</h3><p>Map，Model类型的参数对应HttpServletRequest的请求域，操作这两个参数（map.put）就相当于操作request的请求域(request.setAttribute)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/params&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">testParam</span><span class=\"params\">(Map&lt;String,Object&gt; map,</span></span><br><span class=\"line\"><span class=\"params\">                        Model model,</span></span><br><span class=\"line\"><span class=\"params\">                        HttpServletRequest request,</span></span><br><span class=\"line\"><span class=\"params\">                        HttpServletResponse response)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//下面三位都是可以给request域中放数据</span></span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;hello&quot;</span>,<span class=\"string\">&quot;world666&quot;</span>);</span><br><span class=\"line\">    model.addAttribute(<span class=\"string\">&quot;world&quot;</span>,<span class=\"string\">&quot;hello666&quot;</span>);</span><br><span class=\"line\">    request.setAttribute(<span class=\"string\">&quot;message&quot;</span>,<span class=\"string\">&quot;HelloWorld&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Cookie</span> <span class=\"variable\">cookie</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Cookie</span>(<span class=\"string\">&quot;c1&quot;</span>,<span class=\"string\">&quot;v1&quot;</span>);</span><br><span class=\"line\">    response.addCookie(cookie);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;forward:/success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/success&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Map <span class=\"title function_\">success</span><span class=\"params\">(<span class=\"meta\">@RequestAttribute(value = &quot;msg&quot;,required = false)</span> String msg,</span></span><br><span class=\"line\"><span class=\"params\">                   <span class=\"meta\">@RequestAttribute(value = &quot;code&quot;,required = false)</span>Integer code,</span></span><br><span class=\"line\"><span class=\"params\">                   HttpServletRequest request)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">msg1</span> <span class=\"operator\">=</span> request.getAttribute(<span class=\"string\">&quot;msg&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">hello</span> <span class=\"operator\">=</span> request.getAttribute(<span class=\"string\">&quot;hello&quot;</span>);<span class=\"comment\">//得出testParam方法赋予的值 world666</span></span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">world</span> <span class=\"operator\">=</span> request.getAttribute(<span class=\"string\">&quot;world&quot;</span>);<span class=\"comment\">//得出testParam方法赋予的值 hello666</span></span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> request.getAttribute(<span class=\"string\">&quot;message&quot;</span>);<span class=\"comment\">//得出testParam方法赋予的值 HelloWorld</span></span><br><span class=\"line\"></span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;reqMethod_msg&quot;</span>,msg1);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;annotation_msg&quot;</span>,msg);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;hello&quot;</span>,hello);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;world&quot;</span>,world);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;message&quot;</span>,message);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>response可以方Cookie</p>\n<h4 id=\"Map，Model\"><a href=\"#Map，Model\" class=\"headerlink\" title=\"Map，Model\"></a>Map，Model</h4><p>底层都会调用ModelAndViewContainer的getModel方法获取到一个MAP型的变量，因而在经过参数解析器解析后，这两个指向的对象实际上是同一个</p>\n<p>ModelAndViewContainer 故名意思就是模型和视图的容器，Model用于存放数据，View用于存放视图（页面的地址），这两个都在这个容器中</p>\n<p>这两个参数操作的是request中请求域的参数，而这两个类型的参数是怎么操作请求域的呢？</p>\n<p>解析参数的时候如果参数类型是Map或者Model，则会创建一个BindingAwareModelMap变量来装载请求域中的参数，这个类既是Map也是Model，所以可以完成赋值。</p>\n<p><img src=\"D:\\学习笔记\\picture\\watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE4NjMwMjQ=,size_16,color_FFFFFF,t_70#pic_center.png\"></p>\n<p>请求结束后，我们再来到具体的逻辑：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">invokeAndHandle</span><span class=\"params\">(ServletWebRequest webRequest, ModelAndViewContainer mavContainer,</span></span><br><span class=\"line\"><span class=\"params\">\t\tObject... providedArgs)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//执行方法，得到返回值是&quot;forward:/success&quot;</span></span><br><span class=\"line\">\t<span class=\"type\">Object</span> <span class=\"variable\">returnValue</span> <span class=\"operator\">=</span> invokeForRequest(webRequest, mavContainer, providedArgs);</span><br><span class=\"line\">       <span class=\"comment\">//设置请求状态</span></span><br><span class=\"line\">\tsetResponseStatus(webRequest);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (returnValue == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isRequestNotModified(webRequest) || getResponseStatus() != <span class=\"literal\">null</span> || mavContainer.isRequestHandled()) &#123;</span><br><span class=\"line\">\t\t\tdisableContentCachingIfNecessary(webRequest);</span><br><span class=\"line\">\t\t\tmavContainer.setRequestHandled(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (StringUtils.hasText(getResponseStatusReason())) &#123;</span><br><span class=\"line\">\t\tmavContainer.setRequestHandled(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmavContainer.setRequestHandled(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\tAssert.state(<span class=\"built_in\">this</span>.returnValueHandlers != <span class=\"literal\">null</span>, <span class=\"string\">&quot;No return value handlers&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           <span class=\"comment\">//处理返回值,这里有我们要的转发逻辑，里面会传入我们方法的返回值returnValue</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.returnValueHandlers.handleReturnValue(</span><br><span class=\"line\">\t\t\t\treturnValue, getReturnValueType(returnValue), mavContainer, webRequest);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.trace(formatErrorForReturnValue(returnValue), ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们深入handleReturnValue方法可以来到这个方法里面：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleReturnValue</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Object returnValue, MethodParameter returnType,</span></span><br><span class=\"line\"><span class=\"params\">\t\tModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//判断返回值是不是字符串</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (returnValue <span class=\"keyword\">instanceof</span> CharSequence) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">viewName</span> <span class=\"operator\">=</span> returnValue.toString();</span><br><span class=\"line\">           <span class=\"comment\">//如果是字符串则设置容器中view的名称(转发路径)</span></span><br><span class=\"line\">\t\tmavContainer.setViewName(viewName);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isRedirectViewName(viewName)) &#123;</span><br><span class=\"line\">\t\t\tmavContainer.setRedirectModelScenario(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (returnValue != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// should not happen</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UnsupportedOperationException</span>(<span class=\"string\">&quot;Unexpected return type: &quot;</span> +</span><br><span class=\"line\">\t\t\t\treturnType.getParameterType().getName() + <span class=\"string\">&quot; in method: &quot;</span> + returnType.getMethod());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在方法执行完成后我们会得到一个ModelAndView对象：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br></pre></td></tr></table></figure>\n\n<p>mv里面包含我们想要的数据（model）和转发的地址（view）</p>\n<p>然后传入到</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br></pre></td></tr></table></figure>\n\n<p>进行最后结果的处理</p>\n<p>深入这个方法后来到：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render(mv, request, response);</span><br></pre></td></tr></table></figure>\n\n<p>这个方法用于渲染页面</p>\n<p>核心逻辑是：</p>\n<p>封装成视图对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">view = resolveViewName(<span class=\"comment\">/*视图名*/</span>viewName,<span class=\"comment\">/*视图数据*/</span> mv.getModelInternal(), locale, request);</span><br></pre></td></tr></table></figure>\n\n<p>然后渲染视图：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">view.render(mv.getModelInternal(), request, response);</span><br><span class=\"line\"><span class=\"comment\">/////////////////////////////////////////////////////////////</span></span><br><span class=\"line\"><span class=\"comment\">//这个方法的逻辑是：</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">render</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Map&lt;String, ?&gt; model, HttpServletRequest request,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\tHttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.debug(<span class=\"string\">&quot;View &quot;</span> + formatViewName() +</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">&quot;, model &quot;</span> + (model != <span class=\"literal\">null</span> ? model : Collections.emptyMap()) +</span><br><span class=\"line\">\t\t\t\t\t(<span class=\"built_in\">this</span>.staticAttributes.isEmpty() ? <span class=\"string\">&quot;&quot;</span> : <span class=\"string\">&quot;, static attributes &quot;</span> + <span class=\"built_in\">this</span>.staticAttributes));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//这一步，将我们model中的数据放到一个新的map里面mergedModel</span></span><br><span class=\"line\">\t\tMap&lt;String, Object&gt; mergedModel = createMergedOutputModel(model, request, response);</span><br><span class=\"line\">\t\tprepareResponse(request, response);</span><br><span class=\"line\">\t\trenderMergedOutputModel(mergedModel, getRequestToExpose(request), response);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>renderMergedOutputModel方法中会执行语句：exposeModelAsRequestAttributes(model, request);</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">exposeModelAsRequestAttributes</span><span class=\"params\">(Map&lt;String, Object&gt; model,</span></span><br><span class=\"line\"><span class=\"params\">\t\tHttpServletRequest request)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmodel.forEach((name, value) -&gt; &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (value != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\trequest.setAttribute(name, value);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\trequest.removeAttribute(name);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>显然这个方法的作用就是将model中的数据放到新的request的请求域中，这就解释了我们转发请求后，为啥新的方法中能拿到上一个请域的参数</p>\n<h3 id=\"Springboot自定义参数\"><a href=\"#Springboot自定义参数\" class=\"headerlink\" title=\"Springboot自定义参数\"></a>Springboot自定义参数</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ParameterTestController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/saveuser&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Person <span class=\"title function_\">saveuser</span><span class=\"params\">(Person person)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> person;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>参数列表是我们自定义的对象时，Spring会自动帮我们将参数按照参数名装配进去（如果包含了其他引用类型要用pet.name,pte.age的形式传过来才能解析）</p>\n<p><img src=\"D:\\学习笔记\\picture\\image-20220502111900935-1669804541526-54.png\" alt=\"image-20220502111900935\"></p>\n<p>参数解析过程和前面讲的一样，只是用的参数解析器不同，这里用的参数解析器是<code>ServletModelAttributeMethodProcessor</code></p>\n<p>能用这个的处理器的条件是加了@ModelAttribute的注解或者它不是简单数据类型（即是引用类型）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">supportsParameter</span><span class=\"params\">(MethodParameter parameter)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (parameter.hasParameterAnnotation(ModelAttribute.class) ||</span><br><span class=\"line\">\t\t\t(<span class=\"built_in\">this</span>.annotationNotRequired &amp;&amp; !BeanUtils.isSimpleProperty(parameter.getParameterType())));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后给Person参数的赋值过程如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Object <span class=\"title function_\">resolveArgument</span><span class=\"params\">(MethodParameter parameter, <span class=\"meta\">@Nullable</span> ModelAndViewContainer mavContainer,</span></span><br><span class=\"line\"><span class=\"params\">\t\tNativeWebRequest webRequest, <span class=\"meta\">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tAssert.state(mavContainer != <span class=\"literal\">null</span>, <span class=\"string\">&quot;ModelAttributeMethodProcessor requires ModelAndViewContainer&quot;</span>);</span><br><span class=\"line\">\tAssert.state(binderFactory != <span class=\"literal\">null</span>, <span class=\"string\">&quot;ModelAttributeMethodProcessor requires WebDataBinderFactory&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> ModelFactory.getNameForParameter(parameter);</span><br><span class=\"line\">\t<span class=\"type\">ModelAttribute</span> <span class=\"variable\">ann</span> <span class=\"operator\">=</span> parameter.getParameterAnnotation(ModelAttribute.class);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ann != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\tmavContainer.setBinding(name, ann.binding());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">Object</span> <span class=\"variable\">attribute</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t<span class=\"type\">BindingResult</span> <span class=\"variable\">bindingResult</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//如果请求域中已经有了就直接返回</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (mavContainer.containsAttribute(name)) &#123;</span><br><span class=\"line\">\t\tattribute = mavContainer.getModel().get(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Create attribute instance</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">               <span class=\"comment\">//根据对象属性创建一个空对象（也就是上文中属性值为null的对象）</span></span><br><span class=\"line\">\t\t\tattribute = createAttribute(name, parameter, binderFactory, webRequest);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (BindException ex) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isBindExceptionRequired(parameter)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// No BindingResult parameter -&gt; fail with BindException</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Otherwise, expose null/empty value and associated BindingResult</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (parameter.getParameterType() == Optional.class) &#123;</span><br><span class=\"line\">\t\t\t\tattribute = Optional.empty();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tbindingResult = ex.getBindingResult();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (bindingResult == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Bean property binding and validation;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// skipped in case of binding failure on construction.</span></span><br><span class=\"line\">           <span class=\"comment\">//为我们刚才创建的空对象绑定属性</span></span><br><span class=\"line\">\t\t<span class=\"type\">WebDataBinder</span> <span class=\"variable\">binder</span> <span class=\"operator\">=</span> binderFactory.createBinder(webRequest, attribute, name);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (binder.getTarget() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!mavContainer.isBindingDisabled(name)) &#123;</span><br><span class=\"line\">                   <span class=\"comment\">//实际绑定属性</span></span><br><span class=\"line\">\t\t\t\tbindRequestParameters(binder, webRequest);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tvalidateIfApplicable(binder, parameter);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (binder.getBindingResult().hasErrors() &amp;&amp; isBindExceptionRequired(binder, parameter)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BindException</span>(binder.getBindingResult());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Value type adaptation, also covering java.util.Optional</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!parameter.getParameterType().isInstance(attribute)) &#123;</span><br><span class=\"line\">\t\t\tattribute = binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tbindingResult = binder.getBindingResult();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Add resolved attribute and BindingResult at the end of the model</span></span><br><span class=\"line\">\tMap&lt;String, Object&gt; bindingResultModel = bindingResult.getModel();</span><br><span class=\"line\">\tmavContainer.removeAttributes(bindingResultModel);</span><br><span class=\"line\">\tmavContainer.addAllAttributes(bindingResultModel);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> attribute;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name);</p>\n<p>WebDataBinder 是属性绑定器，这个类里面有各种数据类型之间的转换器，可以利用反射和转换器根据webRequest里面拿到的数据为对象属性赋值</p>\n<p><img src=\"https://s2.loli.net/2022/05/26/kJjRoQfiZYBhDeN.png\" alt=\"image-20220501131802770\"></p>\n<p>实际绑定的过程是在<code>bindRequestParameters(binder, webRequest);</code>这个方法里面，这个方法过后对象属性就有值了</p>\n<p><code>MutablePropertyValues mpvs = new MutablePropertyValues(request.getParameterMap());</code>通过这个方法拿到request中的所有kv属性值，然后接下来遍历对象中的所有参数，然后根据属性名从这个mpvs里面找就能拿到对应的属性值，但是拿到后还需要将原来的类型（一般是String，也可能是文件流之类的）转换为我们需要的类型，所以在绑定的时候还会遍历所有的属性转换器（Converter），找到可以进行转换的属性转换器，然后将其放入缓存，用转换器来进行属性值的转换，然后就可以为对象中的属性值赋值。</p>\n<h4 id=\"自定义类型转换器\"><a href=\"#自定义类型转换器\" class=\"headerlink\" title=\"自定义类型转换器\"></a>自定义类型转换器</h4><p>上面使用的都是Springboot提供的转换器，使用Spring为我们提供的转换规则，我们也可以自定义一个转换规则。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//1、WebMvcConfigurer定制化SpringMVC的功能</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> WebMvcConfigurer <span class=\"title function_\">webMvcConfigurer</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WebMvcConfigurer</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addFormatters</span><span class=\"params\">(FormatterRegistry registry)</span> &#123;</span><br><span class=\"line\">                registry.addConverter(<span class=\"keyword\">new</span> <span class=\"title class_\">Converter</span>&lt;String, Pet&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"keyword\">public</span> Pet <span class=\"title function_\">convert</span><span class=\"params\">(String source)</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 啊猫,3</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(!StringUtils.isEmpty(source))&#123;</span><br><span class=\"line\">                            <span class=\"type\">Pet</span> <span class=\"variable\">pet</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Pet</span>();</span><br><span class=\"line\">                            String[] split = source.split(<span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">                            pet.setName(split[<span class=\"number\">0</span>]);</span><br><span class=\"line\">                            pet.setAge(Integer.parseInt(split[<span class=\"number\">1</span>]));</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> pet;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>WebMvcConfigurer</strong>是Spring给我们提供的扩展功能的接口，我们可以重写其中的很多方法来定制化我们想要的功能</p>\n<p>在我们添加自定义的转换器后，Springboot在处理参数的时候就可以根据转换前后的参数类型找到能够使用的Converter进行转换，这样就不会报String无法转换成Pet的异常。</p>\n<p>并且Converter类带有@FunctionalInterface注解，申明了是一个函数式接口，我们可以直接传入Lamda表达式来进行设置。</p>\n<h3 id=\"响应数据与内容协商\"><a href=\"#响应数据与内容协商\" class=\"headerlink\" title=\"响应数据与内容协商\"></a>响应数据与内容协商</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在这个依赖中会自动帮我们引入JSON的依赖，可以帮我们将返回值处理成JSON格式的数据</p>\n<p>在Controller中，如果方法上带有@ResponBody注解，则会将返回值以JSON格式返回给前端</p>\n<h4 id=\"原理解析\"><a href=\"#原理解析\" class=\"headerlink\" title=\"原理解析\"></a>原理解析</h4><p>我们再来到处理请求的流程里面：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> ModelAndView <span class=\"title function_\">handleInternal</span><span class=\"params\">(HttpServletRequest request,</span></span><br><span class=\"line\"><span class=\"params\">\t\tHttpServletResponse response, HandlerMethod handlerMethod)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tModelAndView mav;</span><br><span class=\"line\">\tcheckRequest(request);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Execute invokeHandlerMethod in synchronized block if required.</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.synchronizeOnSession) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">HttpSession</span> <span class=\"variable\">session</span> <span class=\"operator\">=</span> request.getSession(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (session != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">Object</span> <span class=\"variable\">mutex</span> <span class=\"operator\">=</span> WebUtils.getSessionMutex(session);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (mutex) &#123;</span><br><span class=\"line\">\t\t\t\tmav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// No HttpSession available -&gt; no mutex necessary</span></span><br><span class=\"line\">\t\t\tmav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// No synchronization on session demanded at all...</span></span><br><span class=\"line\">           <span class=\"comment\">//因为没有session锁，所以我们会来到这个方法中</span></span><br><span class=\"line\">\t\tmav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!response.containsHeader(HEADER_CACHE_CONTROL)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (getSessionAttributesHandler(handlerMethod).hasSessionAttributes()) &#123;</span><br><span class=\"line\">\t\t\tapplyCacheSeconds(response, <span class=\"built_in\">this</span>.cacheSecondsForSessionAttributeHandlers);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tprepareResponse(response);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> mav;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>mav = invokeHandlerMethod(request, response, handlerMethod)  这个方法的逻辑如下：（其实解析参数的时候我们也进去过）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.argumentResolvers != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//传入所有参数解析器</span></span><br><span class=\"line\">    invocableMethod.setHandlerMethodArgumentResolvers(<span class=\"built_in\">this</span>.argumentResolvers);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.returnValueHandlers != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//传入所有的返回值处理器</span></span><br><span class=\"line\">    invocableMethod.setHandlerMethodReturnValueHandlers(<span class=\"built_in\">this</span>.returnValueHandlers);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后来到invokeAndHandle方法来处理请求：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">invokeAndHandle</span><span class=\"params\">(ServletWebRequest webRequest, ModelAndViewContainer mavContainer,</span></span><br><span class=\"line\"><span class=\"params\">\t\tObject... providedArgs)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//执行方法并拿到返回值（里面的逻辑就是获取参数值和执行controller的方法，在上一节分析过）</span></span><br><span class=\"line\">\t<span class=\"type\">Object</span> <span class=\"variable\">returnValue</span> <span class=\"operator\">=</span> invokeForRequest(webRequest, mavContainer, providedArgs);</span><br><span class=\"line\">       <span class=\"comment\">//设置请求返回值状态</span></span><br><span class=\"line\">\tsetResponseStatus(webRequest);</span><br><span class=\"line\">\t<span class=\"comment\">//如果返回值为空，则不用处理返回值，直接返回</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (returnValue == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isRequestNotModified(webRequest) || getResponseStatus() != <span class=\"literal\">null</span> || mavContainer.isRequestHandled()) &#123;</span><br><span class=\"line\">\t\t\tdisableContentCachingIfNecessary(webRequest);</span><br><span class=\"line\">\t\t\tmavContainer.setRequestHandled(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;<span class=\"comment\">//判断请求处理是否失败，如果失败也不处理返回值直接返回</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (StringUtils.hasText(getResponseStatusReason())) &#123;</span><br><span class=\"line\">\t\tmavContainer.setRequestHandled(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmavContainer.setRequestHandled(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\tAssert.state(<span class=\"built_in\">this</span>.returnValueHandlers != <span class=\"literal\">null</span>, <span class=\"string\">&quot;No return value handlers&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">//重点：处理返回值的方法，参数为返回值，返回值类型，容器，请求</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.returnValueHandlers.handleReturnValue(</span><br><span class=\"line\">\t\t\t\treturnValue, getReturnValueType(returnValue), mavContainer, webRequest);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.trace(formatErrorForReturnValue(returnValue), ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>处理返回值的方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.returnValueHandlers.handleReturnValue(returnValue, getReturnValueType(returnValue), mavContainer, webRequest);</span><br></pre></td></tr></table></figure>\n\n<p>方法体：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleReturnValue</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Object returnValue, MethodParameter returnType,</span></span><br><span class=\"line\"><span class=\"params\">\t\tModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//根据返回值和返回值类型获得返回值处理器</span></span><br><span class=\"line\">\t<span class=\"type\">HandlerMethodReturnValueHandler</span> <span class=\"variable\">handler</span> <span class=\"operator\">=</span> selectHandler(returnValue, returnType);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (handler == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;Unknown return value type: &quot;</span> + returnType.getParameterType().getName());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">       <span class=\"comment\">//用返回值处理器处理返回值</span></span><br><span class=\"line\">\thandler.handleReturnValue(returnValue, returnType, mavContainer, webRequest);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>selectHandler(returnValue, returnType) ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> HandlerMethodReturnValueHandler <span class=\"title function_\">selectHandler</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Object value, MethodParameter returnType)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"variable\">isAsyncValue</span> <span class=\"operator\">=</span> isAsyncReturnValue(value, returnType);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (HandlerMethodReturnValueHandler handler : <span class=\"built_in\">this</span>.returnValueHandlers) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isAsyncValue &amp;&amp; !(handler <span class=\"keyword\">instanceof</span> AsyncHandlerMethodReturnValueHandler)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (handler.supportsReturnType(returnType)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> handler;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>遍历所有的返回值处理器，判断哪个能够用来处理返回值，判断依据大多都是判断返回值类型是不是这个处理器想要的类型，或者有没有对应的注解</p>\n<p>SpringMVC能支持的返回值类型有：</p>\n<p><img src=\"D:\\学习笔记\\picture\\image-20220502131627510-1669804541526-56.png\" alt=\"image-20220502131627510\"></p>\n<p>我们在方法上加了@ResponseBody注解，所以使用最后一种处理器</p>\n<p>找到返回值处理器后，用处理器处理返回值：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handler.handleReturnValue(returnValue, returnType, mavContainer, webRequest);</span><br></pre></td></tr></table></figure>\n\n<p>方法体：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleReturnValue</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Object returnValue, MethodParameter returnType,</span></span><br><span class=\"line\"><span class=\"params\">\t\tModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throws</span> IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmavContainer.setRequestHandled(<span class=\"literal\">true</span>);</span><br><span class=\"line\">       <span class=\"comment\">//请求</span></span><br><span class=\"line\">\t<span class=\"type\">ServletServerHttpRequest</span> <span class=\"variable\">inputMessage</span> <span class=\"operator\">=</span> createInputMessage(webRequest);</span><br><span class=\"line\">       <span class=\"comment\">//响应</span></span><br><span class=\"line\">\t<span class=\"type\">ServletServerHttpResponse</span> <span class=\"variable\">outputMessage</span> <span class=\"operator\">=</span> createOutputMessage(webRequest);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Try even with null return value. ResponseBodyAdvice could get involved.</span></span><br><span class=\"line\">\twriteWithMessageConverters(returnValue, returnType, inputMessage, outputMessage);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中核心的是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage);</span><br></pre></td></tr></table></figure>\n\n<p>方法体：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> &lt;T&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">writeWithMessageConverters</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> T value, MethodParameter returnType,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\tServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throws</span> IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tObject body;</span><br><span class=\"line\">\t\tClass&lt;?&gt; valueType;</span><br><span class=\"line\">\t\tType targetType;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> CharSequence) &#123;</span><br><span class=\"line\">\t\t\tbody = value.toString();</span><br><span class=\"line\">\t\t\tvalueType = String.class;</span><br><span class=\"line\">\t\t\ttargetType = String.class;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取返回值</span></span><br><span class=\"line\">\t\t\tbody = value;</span><br><span class=\"line\">            <span class=\"comment\">//原类型</span></span><br><span class=\"line\">\t\t\tvalueType = getReturnValueType(body, returnType);</span><br><span class=\"line\">\t\t\ttargetType = GenericTypeResolver.resolveType(getGenericType(returnType), returnType.getContainingClass());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//判断返回值是否是资源文件</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isResourceType(value, returnType)) &#123;</span><br><span class=\"line\">\t\t\toutputMessage.getHeaders().set(HttpHeaders.ACCEPT_RANGES, <span class=\"string\">&quot;bytes&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (value != <span class=\"literal\">null</span> &amp;&amp; inputMessage.getHeaders().getFirst(HttpHeaders.RANGE) != <span class=\"literal\">null</span> &amp;&amp;</span><br><span class=\"line\">\t\t\t\t\toutputMessage.getServletResponse().getStatus() == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">Resource</span> <span class=\"variable\">resource</span> <span class=\"operator\">=</span> (Resource) value;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tList&lt;HttpRange&gt; httpRanges = inputMessage.getHeaders().getRange();</span><br><span class=\"line\">\t\t\t\t\toutputMessage.getServletResponse().setStatus(HttpStatus.PARTIAL_CONTENT.value());</span><br><span class=\"line\">\t\t\t\t\tbody = HttpRange.toResourceRegions(httpRanges, resource);</span><br><span class=\"line\">\t\t\t\t\tvalueType = body.getClass();</span><br><span class=\"line\">\t\t\t\t\ttargetType = RESOURCE_REGION_LIST_TYPE;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">catch</span> (IllegalArgumentException ex) &#123;</span><br><span class=\"line\">\t\t\t\t\toutputMessage.getHeaders().set(HttpHeaders.CONTENT_RANGE, <span class=\"string\">&quot;bytes */&quot;</span> + resource.contentLength());</span><br><span class=\"line\">\t\t\t\t\toutputMessage.getServletResponse().setStatus(HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE.value());</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">MediaType</span> <span class=\"variable\">selectedMediaType</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    \t<span class=\"comment\">//判断响应中是否已经有了返回类型，如果有就赋值，因为之前可能已经处理了一部分而确定了返回值</span></span><br><span class=\"line\">\t\t<span class=\"type\">MediaType</span> <span class=\"variable\">contentType</span> <span class=\"operator\">=</span> outputMessage.getHeaders().getContentType();</span><br><span class=\"line\">\t\t<span class=\"type\">boolean</span> <span class=\"variable\">isContentTypePreset</span> <span class=\"operator\">=</span> contentType != <span class=\"literal\">null</span> &amp;&amp; contentType.isConcrete();</span><br><span class=\"line\">    \t<span class=\"comment\">//如果找到了返回值类型</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isContentTypePreset) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.debug(<span class=\"string\">&quot;Found &#x27;Content-Type:&quot;</span> + contentType + <span class=\"string\">&quot;&#x27; in response&quot;</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tselectedMediaType = contentType;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果没找到返回类型</span></span><br><span class=\"line\">            <span class=\"comment\">//获得被包装的请求</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">HttpServletRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> inputMessage.getServletRequest();</span><br><span class=\"line\">            <span class=\"comment\">//获得浏览器能接收什么样的媒体类型(text/html之类的)</span></span><br><span class=\"line\">\t\t\tList&lt;MediaType&gt; acceptableTypes = getAcceptableMediaTypes(request);</span><br><span class=\"line\">            <span class=\"comment\">//获得服务器能生产什么样的媒体类型(json之类的)</span></span><br><span class=\"line\">\t\t\tList&lt;MediaType&gt; producibleTypes = getProducibleMediaTypes(request, valueType, targetType);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (body != <span class=\"literal\">null</span> &amp;&amp; producibleTypes.isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HttpMessageNotWritableException</span>(</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"string\">&quot;No converter found for return value of type: &quot;</span> + valueType);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tList&lt;MediaType&gt; mediaTypesToUse = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">            <span class=\"comment\">//暴力的两层for循环，找出浏览器能接受并且服务器能生产的数据</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (MediaType requestedType : acceptableTypes) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (MediaType producibleType : producibleTypes) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (requestedType.isCompatibleWith(producibleType)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tmediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType));</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (mediaTypesToUse.isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (body != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HttpMediaTypeNotAcceptableException</span>(producibleTypes);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\t\tlogger.debug(<span class=\"string\">&quot;No match for &quot;</span> + acceptableTypes + <span class=\"string\">&quot;, supported: &quot;</span> + producibleTypes);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">            <span class=\"comment\">//按照优先级排序(q的值)</span></span><br><span class=\"line\">\t\t\tMediaType.sortBySpecificityAndQuality(mediaTypesToUse);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//确定返回的媒体类型（优先级最高的）</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (MediaType mediaType : mediaTypesToUse) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (mediaType.isConcrete()) &#123;</span><br><span class=\"line\">\t\t\t\t\tselectedMediaType = mediaType;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mediaType.isPresentIn(ALL_APPLICATION_MEDIA_TYPES)) &#123;</span><br><span class=\"line\">\t\t\t\t\tselectedMediaType = MediaType.APPLICATION_OCTET_STREAM;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.debug(<span class=\"string\">&quot;Using &#x27;&quot;</span> + selectedMediaType + <span class=\"string\">&quot;&#x27;, given &quot;</span> +</span><br><span class=\"line\">\t\t\t\t\t\tacceptableTypes + <span class=\"string\">&quot; and supported &quot;</span> + producibleTypes);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (selectedMediaType != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tselectedMediaType = selectedMediaType.removeQualityValue();</span><br><span class=\"line\">            <span class=\"comment\">//遍历所有的类型转换器，找到能实现的转换器</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (HttpMessageConverter&lt;?&gt; converter : <span class=\"built_in\">this</span>.messageConverters) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">GenericHttpMessageConverter</span> <span class=\"variable\">genericConverter</span> <span class=\"operator\">=</span> (converter <span class=\"keyword\">instanceof</span> GenericHttpMessageConverter ?</span><br><span class=\"line\">\t\t\t\t\t\t(GenericHttpMessageConverter&lt;?&gt;) converter : <span class=\"literal\">null</span>);</span><br><span class=\"line\">                <span class=\"comment\">//判断是否支持我们协商的返回值</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (genericConverter != <span class=\"literal\">null</span> ?</span><br><span class=\"line\">\t\t\t\t\t\t((GenericHttpMessageConverter) converter).canWrite(targetType, valueType, selectedMediaType) :</span><br><span class=\"line\">\t\t\t\t\t\tconverter.canWrite(valueType, selectedMediaType)) &#123;</span><br><span class=\"line\">\t\t\t\t\tbody = getAdvice().beforeBodyWrite(body, returnType, selectedMediaType,</span><br><span class=\"line\">\t\t\t\t\t\t\t(Class&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">HttpMessageConverter</span>&lt;?&gt;&gt;) converter.getClass(),</span><br><span class=\"line\">\t\t\t\t\t\t\tinputMessage, outputMessage);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (body != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"type\">Object</span> <span class=\"variable\">theBody</span> <span class=\"operator\">=</span> body;</span><br><span class=\"line\">\t\t\t\t\t\tLogFormatUtils.traceDebug(logger, traceOn -&gt;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"string\">&quot;Writing [&quot;</span> + LogFormatUtils.formatValue(theBody, !traceOn) + <span class=\"string\">&quot;]&quot;</span>);</span><br><span class=\"line\">\t\t\t\t\t\taddContentDispositionHeader(inputMessage, outputMessage);</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (genericConverter != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">//往outMessage中写入转换后的JSON数据</span></span><br><span class=\"line\">\t\t\t\t\t\t\tgenericConverter.write(body, targetType, selectedMediaType, outputMessage);</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t((HttpMessageConverter) converter).write(body, selectedMediaType, outputMessage);</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tlogger.debug(<span class=\"string\">&quot;Nothing to write: null body&quot;</span>);</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (body != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tSet&lt;MediaType&gt; producibleMediaTypes =</span><br><span class=\"line\">\t\t\t\t\t(Set&lt;MediaType&gt;) inputMessage.getServletRequest()</span><br><span class=\"line\">\t\t\t\t\t\t\t.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isContentTypePreset || !CollectionUtils.isEmpty(producibleMediaTypes)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HttpMessageNotWritableException</span>(</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"string\">&quot;No converter for [&quot;</span> + valueType + <span class=\"string\">&quot;] with preset Content-Type &#x27;&quot;</span> + contentType + <span class=\"string\">&quot;&#x27;&quot;</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HttpMediaTypeNotAcceptableException</span>(<span class=\"built_in\">this</span>.allSupportedMediaTypes);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用MessageConverters将返回值转化为JSON格式</p>\n<p>1.内容协商：浏览器会告诉服务器它能接收什么样的数据</p>\n<p><img src=\"D:\\学习笔记\\picture\\image-20220502145831045-1669804541526-55.png\" alt=\"image-20220502145831045\"></p>\n<p>q代表权值，也就是优先级，表示优先接收text/html之类的数据，如果没有再接收image/webp，如果还没有就接收所有类型的数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">         <span class=\"comment\">//获得被包装的请求</span></span><br><span class=\"line\"><span class=\"type\">HttpServletRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> inputMessage.getServletRequest();</span><br><span class=\"line\">         <span class=\"comment\">//获得浏览器能接收什么样的数据(text/html之类的，这个方法会获取request中ACCEPT字段的值，并封装成List)</span></span><br><span class=\"line\">List&lt;MediaType&gt; acceptableTypes = getAcceptableMediaTypes(request);</span><br><span class=\"line\">         <span class=\"comment\">//获得服务器能生产什么样的数据(json之类的)</span></span><br><span class=\"line\">List&lt;MediaType&gt; producibleTypes = getProducibleMediaTypes(request, valueType, targetType);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (body != <span class=\"literal\">null</span> &amp;&amp; producibleTypes.isEmpty()) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HttpMessageNotWritableException</span>(</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;No converter found for return value of type: &quot;</span> + valueType);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">List&lt;MediaType&gt; mediaTypesToUse = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">         <span class=\"comment\">//暴力的两层for循环，找出浏览器能接受并且服务器能生产的数据</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (MediaType requestedType : acceptableTypes) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (MediaType producibleType : producibleTypes) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (requestedType.isCompatibleWith(producibleType)) &#123;</span><br><span class=\"line\">\t\t\tmediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (mediaTypesToUse.isEmpty()) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (body != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HttpMediaTypeNotAcceptableException</span>(producibleTypes);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\tlogger.debug(<span class=\"string\">&quot;No match for &quot;</span> + acceptableTypes + <span class=\"string\">&quot;, supported: &quot;</span> + producibleTypes);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">         <span class=\"comment\">//按照优先级排序(q的值)</span></span><br><span class=\"line\">MediaType.sortBySpecificityAndQuality(mediaTypesToUse);</span><br><span class=\"line\"><span class=\"comment\">//确定返回值类型（优先级最高的）</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (MediaType mediaType : mediaTypesToUse) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (mediaType.isConcrete()) &#123;</span><br><span class=\"line\">\t\tselectedMediaType = mediaType;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mediaType.isPresentIn(ALL_APPLICATION_MEDIA_TYPES)) &#123;</span><br><span class=\"line\">\t\tselectedMediaType = MediaType.APPLICATION_OCTET_STREAM;</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\tlogger.debug(<span class=\"string\">&quot;Using &#x27;&quot;</span> + selectedMediaType + <span class=\"string\">&quot;&#x27;, given &quot;</span> +</span><br><span class=\"line\">\t\t\tacceptableTypes + <span class=\"string\">&quot; and supported &quot;</span> + producibleTypes);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2.浏览器会根据自己能生产的类型的数据进行内容协商，确定最后返回值的类型</p>\n<p>3.消息转换</p>\n<p>HttpMessageConverter消息转换器是一个接口，里面定义了消息转换的相关方法，用这些方法来进行返回值类型的转换</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">HttpMessageConverter</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">//是否能将mediaType媒体类型的数据转换为clazz类型的数据</span></span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"title function_\">canRead</span><span class=\"params\">(Class&lt;?&gt; clazz, <span class=\"meta\">@Nullable</span> MediaType mediaType)</span>;</span><br><span class=\"line\">    <span class=\"comment\">//是否能将clazz类型的数据转换为mediaType媒体类型的数据</span></span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"title function_\">canWrite</span><span class=\"params\">(Class&lt;?&gt; clazz, <span class=\"meta\">@Nullable</span> MediaType mediaType)</span>;</span><br><span class=\"line\">rn the list of supported media types, potentially an immutable copy</span><br><span class=\"line\">\t */</span><br><span class=\"line\">    <span class=\"comment\">//能支持转换的媒体类型</span></span><br><span class=\"line\">\tList&lt;MediaType&gt; <span class=\"title function_\">getSupportedMediaTypes</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//从转换器中读取T类型数据</span></span><br><span class=\"line\">\tT <span class=\"title function_\">read</span><span class=\"params\">(Class&lt;? extends T&gt; clazz, HttpInputMessage inputMessage)</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throws</span> IOException, HttpMessageNotReadableException;</span><br><span class=\"line\">    <span class=\"comment\">//向outputMessage中写入T类型的数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">write</span><span class=\"params\">(T t, <span class=\"meta\">@Nullable</span> MediaType contentType, HttpOutputMessage outputMessage)</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throws</span> IOException, HttpMessageNotWritableException;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>SpringMVC中内置的所有类型转换器</p>\n<p><img src=\"https://s2.loli.net/2022/05/26/oGiReDN7mcwLOJU.png\" alt=\"image-20220502154807257\"></p>\n<p>遍历所有的类型转化器，判断哪个类型转换器能处理这个请求（将对象类型转换为JSON数据）</p>\n<p>其中MappingJackson2HttpMessageConverter类向的能处理我们的对象类型（实际上它能处理所有类型的返回值）</p>\n<p>然后用MappingJackson2HttpMessageConverter的write方法向outputMessage中写入转换后的JSON数据</p>\n<h4 id=\"原理总结\"><a href=\"#原理总结\" class=\"headerlink\" title=\"原理总结\"></a>原理总结</h4><p><img src=\"D:\\学习笔记\\picture\\image-20220502160312589-1669804541526-58.png\" alt=\"image-20220502160312589\"></p>\n<p>根据@ResponBody注解判断使用RequestResponseBodyMethodProccessor这个返回值处理器，这个返回值处理器又会根据返回值选择不同的Converter来转换数据的格式，例如返回资源文件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">import org.springframework.core.io.FileSystemResource;</span></span><br><span class=\"line\"><span class=\"comment\">import org.springframework.core.io.Resource;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/file&quot;)</span></span><br><span class=\"line\"> <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> Resource <span class=\"title function_\">testParam</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileSystemResource</span>(<span class=\"string\">&quot;src/main/resources/application.yml&quot;</span>);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后得到的就不是JSON格式的数据了：</p>\n<p><img src=\"https://s2.loli.net/2022/05/26/r1xqvUn4L8oemGl.png\" alt=\"image-20220502161738933\"></p>\n<h4 id=\"内容协商\"><a href=\"#内容协商\" class=\"headerlink\" title=\"内容协商\"></a>内容协商</h4><p>如果在pom文件中引入这个依赖（这个jar包可以把对象转换为XML格式的数据）</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-dataformat-xml<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>那么返回给浏览器的数据就是XML的数据，这是因为在浏览器的响应头中设置的优先级</p>\n<p><img src=\"https://s2.loli.net/2022/05/26/mPwSYCWdg5kVABR.png\" alt=\"image-20220502145831045\"></p>\n<p>xhtml+xml的优先级高(q=0.9)，比q=0.8的<code>*/*</code>要高，所以Spring会优先将其转换为XML格式的数据，而如果我们在PostMan中将Accept字段的值设置为<code>*/*</code>，就会得到JSON格式的数据。我们需要不同格式的数据只需要改变Header中Accept的字段的值即可。这些得益于Spring的内容协商功能。</p>\n<p>原理：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;MediaType&gt; acceptableTypes = getAcceptableMediaTypes(request);</span><br></pre></td></tr></table></figure>\n\n<p>获取浏览器支持的类型，这个方法中会获取request中的ACCEPT字段并解析成List<MediaType>类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;MediaType&gt; producibleTypes = getProducibleMediaTypes(request, valueType, targetType);</span><br></pre></td></tr></table></figure>\n\n<p>获得服务器可以返回的媒体类型</p>\n<p>方法体：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> List&lt;MediaType&gt; <span class=\"title function_\">getProducibleMediaTypes</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">\t\tHttpServletRequest request, Class&lt;?&gt; valueClass, <span class=\"meta\">@Nullable</span> Type targetType)</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//从请求域中获取媒体类型</span></span><br><span class=\"line\">\tSet&lt;MediaType&gt; mediaTypes =</span><br><span class=\"line\">\t\t\t(Set&lt;MediaType&gt;) request.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE);</span><br><span class=\"line\">       <span class=\"comment\">//如果非空则直接返回</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!CollectionUtils.isEmpty(mediaTypes)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(mediaTypes);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!<span class=\"built_in\">this</span>.allSupportedMediaTypes.isEmpty()) &#123;</span><br><span class=\"line\">\t\tList&lt;MediaType&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">           <span class=\"comment\">//遍历所有的类型转换器Converter</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (HttpMessageConverter&lt;?&gt; converter : <span class=\"built_in\">this</span>.messageConverters) &#123;</span><br><span class=\"line\">               <span class=\"comment\">//如果这个类型转换器是一个合法的转换器</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (converter <span class=\"keyword\">instanceof</span> GenericHttpMessageConverter &amp;&amp; targetType != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                   <span class=\"comment\">//转换器是否支持valueClass类型的数据（GenericHttpMessageConverter这个类有三个参数，媒体类型为空）</span></span><br><span class=\"line\">                   <span class=\"comment\">//targetType,valueClass都是从返回参数中得到的，targetType只为GenericHttpMessageConverter类服务</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (((GenericHttpMessageConverter&lt;?&gt;) converter).canWrite(targetType, valueClass, <span class=\"literal\">null</span>)) \t\t\t\t\t &#123;</span><br><span class=\"line\">                       <span class=\"comment\">//将转换器能转换出的媒体类型添加到集合中</span></span><br><span class=\"line\">\t\t\t\t\tresult.addAll(converter.getSupportedMediaTypes());</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (converter.canWrite(valueClass, <span class=\"literal\">null</span>)) &#123;</span><br><span class=\"line\">\t\t\t\tresult.addAll(converter.getSupportedMediaTypes());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Collections.singletonList(MediaType.ALL);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>内容协商原理（writeWithMessageConverters方法执行流程，源码在上一章有）：</p>\n<ol>\n<li><p>判断请求域中是否已经有返回值类型（可能在拦截的时候做了处理）</p>\n</li>\n<li><p>获得浏览器支持的媒体类型（基于内容协商管理器contentNegotiationManager，使用请求头策略HeaderContentNegotiationStrategy获取）</p>\n</li>\n<li><p>获得服务器能产生的媒体类型：</p>\n<p>1.遍历所有的转换器，找到所有支持返回类型的转换器(A -&gt; 转换器 -&gt; B，已知A，找到所有的转换器)</p>\n<p>2.将这些转换器能转换出的媒体类型统计出来</p>\n</li>\n<li><p>遍历浏览器支持的媒体类型和服务器能产生的媒体类型，找到所有能匹配的媒体类型</p>\n</li>\n<li><p>对找到的媒体类型按照优先级排序（设置的q的值），取最大的作为返回的媒体类型</p>\n</li>\n<li><p>再次遍历所有的转化器，找到能转换的转换器（A（返回值类型） -&gt; 转换器 -&gt; B（媒体类型），已知A,B找到转换器）</p>\n</li>\n<li><p>用转换器实现A（返回值类型） -&gt; 转换器 -&gt; B（媒体类型）的转换</p>\n</li>\n</ol>\n<h4 id=\"自定义内容协商策略\"><a href=\"#自定义内容协商策略\" class=\"headerlink\" title=\"自定义内容协商策略\"></a>自定义内容协商策略</h4><p>浏览器的ACCEPT字段我们提交form表单后没办法随意修改，所以我们可以将协商内容放在参数部分</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">mvc:</span></span><br><span class=\"line\">    <span class=\"attr\">contentnegotiation:</span></span><br><span class=\"line\">      <span class=\"attr\">favor-parameter:</span> <span class=\"literal\">true</span>  <span class=\"comment\">#开启请求参数内容协商模式</span></span><br></pre></td></tr></table></figure>\n\n<p>开启参数内容协商后，我们就可以用format参数决定返回值的类型（json，xml）</p>\n<p>（如果内容协商失败，会返回406）</p>\n<p>获取浏览器的请求类型：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;MediaType&gt; <span class=\"title function_\">resolveMediaTypes</span><span class=\"params\">(NativeWebRequest request)</span> <span class=\"keyword\">throws</span> HttpMediaTypeNotAcceptableException &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (ContentNegotiationStrategy strategy : <span class=\"built_in\">this</span>.strategies) &#123;</span><br><span class=\"line\">\t\tList&lt;MediaType&gt; mediaTypes = strategy.resolveMediaTypes(request);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (mediaTypes.equals(MEDIA_TYPE_ALL_LIST)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> mediaTypes;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> MEDIA_TYPE_ALL_LIST;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在将favor-parameter设置为true后，这里再寻找浏览器能接受的媒体类型时会多一种策略：根据参数确定媒体类型，而这个策略排在根据请求头确定媒体类型的策略之前，所以会按照参数策略确定媒体类型。</p>\n<p><img src=\"https://s2.loli.net/2022/05/26/y2jnEmiaZMSI8PJ.png\" alt=\"image-20220502222239380\"></p>\n<p>确定过程是先拿到请求参数对应的format字段的值（比如json），然后根据这个值得到对应的媒体类型，可以忽略大小写</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> MediaType <span class=\"title function_\">lookupMediaType</span><span class=\"params\">(String extension)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.mediaTypes.get(extension.toLowerCase(Locale.ENGLISH));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;MediaType&gt; <span class=\"title function_\">resolveMediaTypeKey</span><span class=\"params\">(NativeWebRequest webRequest, <span class=\"meta\">@Nullable</span> String key)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throws</span> HttpMediaTypeNotAcceptableException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (StringUtils.hasText(key)) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">MediaType</span> <span class=\"variable\">mediaType</span> <span class=\"operator\">=</span> lookupMediaType(key);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (mediaType != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\thandleMatch(key, mediaType);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> Collections.singletonList(mediaType);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmediaType = handleNoMatch(webRequest, key);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (mediaType != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\taddMapping(key, mediaType);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> Collections.singletonList(mediaType);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> MEDIA_TYPE_ALL_LIST;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果拿到的媒体类型是<code>&quot;*/*&quot;</code>，则使用下一个策略，如果所有策略都返回<code>*/*</code>，则返回<code>*/*</code></p>\n<h4 id=\"内容协商适用场景\"><a href=\"#内容协商适用场景\" class=\"headerlink\" title=\"内容协商适用场景\"></a>内容协商适用场景</h4><p>假如我们有这个场景：</p>\n<p>1.浏览器发请求，返回xml格式的数据</p>\n<p>2.AJAX发请求返回JSON格式的数据</p>\n<p>3.App发请求返回一个名为”x-atguigu”格式的数据</p>\n<p>在容器启动的时候，Spring会帮我们注册默认的Converter进入Spring容器：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addDefaultHttpMessageConverters</span><span class=\"params\">(List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters)</span> &#123;</span><br><span class=\"line\">\tmessageConverters.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayHttpMessageConverter</span>());</span><br><span class=\"line\">\tmessageConverters.add(<span class=\"keyword\">new</span> <span class=\"title class_\">StringHttpMessageConverter</span>());</span><br><span class=\"line\">\tmessageConverters.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ResourceHttpMessageConverter</span>());</span><br><span class=\"line\">\tmessageConverters.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ResourceRegionHttpMessageConverter</span>());</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tmessageConverters.add(<span class=\"keyword\">new</span> <span class=\"title class_\">SourceHttpMessageConverter</span>&lt;&gt;());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Ignore when no TransformerFactory implementation is available...</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmessageConverters.add(<span class=\"keyword\">new</span> <span class=\"title class_\">AllEncompassingFormHttpMessageConverter</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (romePresent) &#123;</span><br><span class=\"line\">\t\tmessageConverters.add(<span class=\"keyword\">new</span> <span class=\"title class_\">AtomFeedHttpMessageConverter</span>());</span><br><span class=\"line\">\t\tmessageConverters.add(<span class=\"keyword\">new</span> <span class=\"title class_\">RssChannelHttpMessageConverter</span>());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (jackson2XmlPresent) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Jackson2ObjectMapperBuilder</span> <span class=\"variable\">builder</span> <span class=\"operator\">=</span> Jackson2ObjectMapperBuilder.xml();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.applicationContext != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tbuilder.applicationContext(<span class=\"built_in\">this</span>.applicationContext);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmessageConverters.add(<span class=\"keyword\">new</span> <span class=\"title class_\">MappingJackson2XmlHttpMessageConverter</span>(builder.build()));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (jaxb2Present) &#123;</span><br><span class=\"line\">\t\tmessageConverters.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Jaxb2RootElementHttpMessageConverter</span>());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (jackson2Present) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Jackson2ObjectMapperBuilder</span> <span class=\"variable\">builder</span> <span class=\"operator\">=</span> Jackson2ObjectMapperBuilder.json();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.applicationContext != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tbuilder.applicationContext(<span class=\"built_in\">this</span>.applicationContext);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmessageConverters.add(<span class=\"keyword\">new</span> <span class=\"title class_\">MappingJackson2HttpMessageConverter</span>(builder.build()));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (gsonPresent) &#123;</span><br><span class=\"line\">\t\tmessageConverters.add(<span class=\"keyword\">new</span> <span class=\"title class_\">GsonHttpMessageConverter</span>());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (jsonbPresent) &#123;</span><br><span class=\"line\">\t\tmessageConverters.add(<span class=\"keyword\">new</span> <span class=\"title class_\">JsonbHttpMessageConverter</span>());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (jackson2SmilePresent) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Jackson2ObjectMapperBuilder</span> <span class=\"variable\">builder</span> <span class=\"operator\">=</span> Jackson2ObjectMapperBuilder.smile();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.applicationContext != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tbuilder.applicationContext(<span class=\"built_in\">this</span>.applicationContext);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmessageConverters.add(<span class=\"keyword\">new</span> <span class=\"title class_\">MappingJackson2SmileHttpMessageConverter</span>(builder.build()));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (jackson2CborPresent) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Jackson2ObjectMapperBuilder</span> <span class=\"variable\">builder</span> <span class=\"operator\">=</span> Jackson2ObjectMapperBuilder.cbor();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.applicationContext != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tbuilder.applicationContext(<span class=\"built_in\">this</span>.applicationContext);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmessageConverters.add(<span class=\"keyword\">new</span> <span class=\"title class_\">MappingJackson2CborHttpMessageConverter</span>(builder.build()));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中我们注意到有诸如jackson2XmlPresent是否为true的判断，而这个值的true还是false取决于：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">ClassLoader</span> <span class=\"variable\">classLoader</span> <span class=\"operator\">=</span> WebMvcConfigurationSupport.class.getClassLoader();</span><br><span class=\"line\">\tromePresent = ClassUtils.isPresent(<span class=\"string\">&quot;com.rometools.rome.feed.WireFeed&quot;</span>, classLoader);</span><br><span class=\"line\">\tjaxb2Present = ClassUtils.isPresent(<span class=\"string\">&quot;javax.xml.bind.Binder&quot;</span>, classLoader);</span><br><span class=\"line\">\tjackson2Present = ClassUtils.isPresent(<span class=\"string\">&quot;com.fasterxml.jackson.databind.ObjectMapper&quot;</span>, classLoader) &amp;&amp;</span><br><span class=\"line\">\t\t\tClassUtils.isPresent(<span class=\"string\">&quot;com.fasterxml.jackson.core.JsonGenerator&quot;</span>, classLoader);</span><br><span class=\"line\">\tjackson2XmlPresent = ClassUtils.isPresent(<span class=\"string\">&quot;com.fasterxml.jackson.dataformat.xml.XmlMapper&quot;</span>, classLoader);</span><br><span class=\"line\">\tjackson2SmilePresent = ClassUtils.isPresent(<span class=\"string\">&quot;com.fasterxml.jackson.dataformat.smile.SmileFactory&quot;</span>, classLoader);</span><br><span class=\"line\">\tjackson2CborPresent = ClassUtils.isPresent(<span class=\"string\">&quot;com.fasterxml.jackson.dataformat.cbor.CBORFactory&quot;</span>, classLoader);</span><br><span class=\"line\">\tgsonPresent = ClassUtils.isPresent(<span class=\"string\">&quot;com.google.gson.Gson&quot;</span>, classLoader);</span><br><span class=\"line\">\tjsonbPresent = ClassUtils.isPresent(<span class=\"string\">&quot;javax.json.bind.Jsonb&quot;</span>, classLoader);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以引入这个依赖后，才可以实现对象和XML格式之间的转换。</p>\n<p>适用类工具ClassUtils判断某个类是否存在</p>\n<p>我们想自定义消息转换器，方法和前面一样，向Spring容器中注册WebMvcConfigurer组件，在里面通过实现里面的方法来定制化我们想要的功能。</p>\n<p>这里面有两个方法可以让我们定制化消息转换器：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configureMessageConverters</span><span class=\"params\">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">extendMessageConverters</span><span class=\"params\">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class=\"line\">       WebMvcConfigurer.<span class=\"built_in\">super</span>.extendMessageConverters(converters);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面那个会覆盖默认的类型转换器，下面那个会在默认类型转换器的基础上添加新的消息转换器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class&lt;T&gt; 类的 isAssignableFrom方法 用于判断某个类是不是一个类或者它的子类</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;MediaType&gt; <span class=\"title function_\">getSupportedMediaTypes</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> MediaType.parseMediaTypes(<span class=\"string\">&quot;application/atguigu&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过字符串得到一个application/atguigu类型的消息转换器（集合类型）</p>\n<p>实现一个自定义的消息转换器：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AtGuiguConverter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HttpMessageConverter</span>&lt;Pet&gt; &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">canRead</span><span class=\"params\">(Class&lt;?&gt; clazz, MediaType mediaType)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//支持转换什么类型的数据（Pet）</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">canWrite</span><span class=\"params\">(Class&lt;?&gt; clazz, MediaType mediaType)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> clazz.isAssignableFrom(Pet.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//支持转换成什么类型的数据（application/atguigu类型）</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;MediaType&gt; <span class=\"title function_\">getSupportedMediaTypes</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MediaType.parseMediaTypes(<span class=\"string\">&quot;application/atguigu&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Pet <span class=\"title function_\">read</span><span class=\"params\">(Class&lt;? extends Pet&gt; clazz, HttpInputMessage inputMessage)</span> <span class=\"keyword\">throws</span> IOException, HttpMessageNotReadableException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//如何转换，定制化转换规则</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">write</span><span class=\"params\">(Pet pet, MediaType contentType, HttpOutputMessage outputMessage)</span> <span class=\"keyword\">throws</span> IOException, HttpMessageNotWritableException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//转换后得到数据</span></span><br><span class=\"line\">        String data=pet.getName()+<span class=\"string\">&quot;:&quot;</span>+pet.getAge();</span><br><span class=\"line\">        <span class=\"comment\">//拿到封装在outputMessage的输出流</span></span><br><span class=\"line\">        <span class=\"type\">OutputStream</span> <span class=\"variable\">body</span> <span class=\"operator\">=</span> outputMessage.getBody();</span><br><span class=\"line\">        <span class=\"comment\">//往输出流中写入数据</span></span><br><span class=\"line\">        body.write(data.getBytes(StandardCharsets.UTF_8));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s2.loli.net/2022/05/26/RcgDOuXW3svw4Et.png\" alt=\"image-20220503004520534\"></p>\n<p>在WebMvcConfigurer中添加转换器：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//1、WebMvcConfigurer定制化SpringMVC的功能</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> WebMvcConfigurer <span class=\"title function_\">webMvcConfigurer</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WebMvcConfigurer</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">extendMessageConverters</span><span class=\"params\">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class=\"line\">                converters.add(<span class=\"keyword\">new</span> <span class=\"title class_\">AtGuiguConverter</span>());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>实现功能：</p>\n<p><img src=\"https://s2.loli.net/2022/05/26/RcgDOuXW3svw4Et.png\" alt=\"image-20220503004520534\"></p>\n<p>我们新添加的转换器和默认转换器的适用流程都是一样的</p>\n<p><img src=\"https://s2.loli.net/2022/05/26/yIM4q2z6xwtFp9U.png\" alt=\"image-20220503142857435\"></p>\n<h4 id=\"添加参数和媒体映射关系\"><a href=\"#添加参数和媒体映射关系\" class=\"headerlink\" title=\"添加参数和媒体映射关系\"></a>添加参数和媒体映射关系</h4><p>如果我们想在url中设置format字段，当format=gg（可以是url参数，也可以是请求体中的参数）时，内容协商后的媒体类型是atguigu，那么就需要我们在内容协商管理器中添加我们自定义的映射规则。（和前面一样要在WebMvcConfigurer里面实现里面的方法configureContentNegotiation）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//1、WebMvcConfigurer定制化SpringMVC的功能</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> WebMvcConfigurer <span class=\"title function_\">webMvcConfigurer</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WebMvcConfigurer</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">extendMessageConverters</span><span class=\"params\">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class=\"line\">                converters.add(<span class=\"keyword\">new</span> <span class=\"title class_\">AtGuiguConverter</span>());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configureContentNegotiation</span><span class=\"params\">(ContentNegotiationConfigurer configurer)</span> &#123;</span><br><span class=\"line\">                Map&lt;String, MediaType&gt; map=<span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">                map.put(<span class=\"string\">&quot;json&quot;</span>,MediaType.APPLICATION_JSON);</span><br><span class=\"line\">                map.put(<span class=\"string\">&quot;xml&quot;</span>,MediaType.APPLICATION_XML);</span><br><span class=\"line\">                map.put(<span class=\"string\">&quot;gg&quot;</span>,MediaType.parseMediaType(<span class=\"string\">&quot;application/atguigu&quot;</span>));</span><br><span class=\"line\">                <span class=\"type\">ParameterContentNegotiationStrategy</span> <span class=\"variable\">paramStrage</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ParameterContentNegotiationStrategy</span>(map);</span><br><span class=\"line\">                configurer.strategies(Arrays.asList(paramStrage));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们回顾一下之前所讲的内容：</p>\n<p>在进行内容协商的时候要获取浏览器能接受的媒体类型，服务器要根据浏览器能接受的媒体类型返回对应格式的数据，而获取媒体类型时Spring会使用内容协商管理器遍历所有注册到Spring容器中的内容协商策略（获取浏览器支持的媒体类型的途径），在默认情况下，内容协商策略只有根据请求头获取媒体类型（HeaderContentNegotiationStrategy），而在spring.mvc.contentnegotiation.favor-parameter设置为true后，Spring容器中会多出一种策略：按照请求参数获取媒体类型（ParameterContentNegotiationStrategy），创建这个策略对象需要传入一个<code>Map&lt;String, MediaType&gt;</code>类型的参数，代表format值和媒体类型的对应关系，默认情况下只有json和xml，所以我们需要把这两个加上的同时将gg和application/atguigu媒体类型建立关系，然后创建新的策略对象添加进策略协商管理器中。可以看到结果生效：</p>\n<p><img src=\"https://s2.loli.net/2022/05/26/DYvVo7rbaQ9LEnF.png\" alt=\"image-20220503152216636\"></p>\n<p>但是我们也发现根据请求设置媒体类型的策略失效了：</p>\n<p><img src=\"https://s2.loli.net/2022/05/26/ax6Z2SLFEBJvcAH.png\" alt=\"image-20220503152319677\"></p>\n<p>这是因为我们在配置类中用configurer.strategies(Arrays.asList(paramStrage));重新设置了内容协商管理器的所有策略（覆盖了默认情况，而不是添加），我们没有添加HeaderContentNegotiationStrategy策略，所以请求头会失效。同时在没有获取到浏览器的媒体类型时，会默认将媒体类型视为<code>*/*</code>，即接受所有的类型：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;MediaType&gt; <span class=\"title function_\">resolveMediaTypes</span><span class=\"params\">(NativeWebRequest request)</span> <span class=\"keyword\">throws</span> HttpMediaTypeNotAcceptableException &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (ContentNegotiationStrategy strategy : <span class=\"built_in\">this</span>.strategies) &#123;</span><br><span class=\"line\">\t\tList&lt;MediaType&gt; mediaTypes = strategy.resolveMediaTypes(request);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (mediaTypes.equals(MEDIA_TYPE_ALL_LIST)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> mediaTypes;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> MEDIA_TYPE_ALL_LIST;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而服务器能产生json,xml,atguigu等类型的数据，都能与<code>*/*</code>匹配，其中json优先级最高，排序后是第一个，所以会默认使用json格式的数据返回。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ParameterContentNegotiationStrategy</span> <span class=\"variable\">paramStrage</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ParameterContentNegotiationStrategy</span>(map);</span><br><span class=\"line\">HeaderContentNegotiationStrategy headerStrage=<span class=\"keyword\">new</span> <span class=\"title class_\">HeaderContentNegotiationStrategy</span>();</span><br><span class=\"line\">configurer.strategies(Arrays.asList(paramStrage,headerStrage));</span><br></pre></td></tr></table></figure>\n\n<p>添加请求头策略后又重新生效</p>\n<p>在请求头策略和参数策略同时存在时，优先使用参数策略。</p>\n<p>如果不想获取format字段的数据作为协商依据，可以通过paramStrage.setParameterName(“ff”)方法更换为其他字段。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configureContentNegotiation</span><span class=\"params\">(ContentNegotiationConfigurer configurer)</span> &#123;</span><br><span class=\"line\">    Map&lt;String, MediaType&gt; map=<span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;json&quot;</span>,MediaType.APPLICATION_JSON);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;xml&quot;</span>,MediaType.APPLICATION_XML);</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;gg&quot;</span>,MediaType.parseMediaType(<span class=\"string\">&quot;application/atguigu&quot;</span>));</span><br><span class=\"line\">    <span class=\"type\">ParameterContentNegotiationStrategy</span> <span class=\"variable\">paramStrage</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ParameterContentNegotiationStrategy</span>(map);</span><br><span class=\"line\">    paramStrage.setParameterName(<span class=\"string\">&quot;ff&quot;</span>);</span><br><span class=\"line\">    HeaderContentNegotiationStrategy headerStrage=<span class=\"keyword\">new</span> <span class=\"title class_\">HeaderContentNegotiationStrategy</span>();</span><br><span class=\"line\">    configurer.strategies(Arrays.asList(paramStrage,headerStrage));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"视图解析\"><a href=\"#视图解析\" class=\"headerlink\" title=\"视图解析\"></a>视图解析</h3><p><a href=\"https://blog.csdn.net/u011863024/article/details/113667946\">https://blog.csdn.net/u011863024/article/details/113667946</a></p>\n<h4 id=\"Thymeleaf模板引擎\"><a href=\"#Thymeleaf模板引擎\" class=\"headerlink\" title=\"Thymeleaf模板引擎\"></a>Thymeleaf模板引擎</h4><p>Thymeleaf模板引擎适用于开发后台管理界面（给管理人员使用而非具体的用户），没有与后端分离，性能也较差，但是开发起来会容易很多。</p>\n<p>使用Thymeleaf模板的html页面，放在前面也能运行，使用的是没有数据的普通页面，放在Spring的资源目录下就会经过视图的渲染而获得数据</p>\n<p>引入依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>自动配好的策略</p>\n<ol>\n<li>所有thymeleaf的配置值都在 ThymeleafProperties</li>\n<li>配置好了 <strong>SpringTemplateEngine</strong></li>\n<li>配好了 <strong>ThymeleafViewResolver</strong></li>\n<li>我们只需要直接开发页面</li>\n</ol>\n<p>在寻找html页面时会在classpath:/templates/目录下面找，并且会自动帮我们加上.html的后缀名，这两个和我们的字符串拼接再一起共同构成html的请求路径</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static final String DEFAULT_PREFIX = &quot;classpath:/templates/&quot;;//模板放置处</span><br><span class=\"line\">public static final String DEFAULT_SUFFIX = &quot;.html&quot;;//文件的后缀名</span><br></pre></td></tr></table></figure>\n\n<p>JSP语法：</p>\n<h5 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h5><table>\n<thead>\n<tr>\n<th>表达式名字</th>\n<th>语法</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>变量取值</td>\n<td>${…}</td>\n<td>获取请求域、session域、对象等值</td>\n</tr>\n<tr>\n<td>选择变量</td>\n<td>*{…}</td>\n<td>获取上下文对象值</td>\n</tr>\n<tr>\n<td>消息</td>\n<td>#{…}</td>\n<td>获取国际化等值</td>\n</tr>\n<tr>\n<td>链接</td>\n<td>@{…}</td>\n<td>生成链接</td>\n</tr>\n<tr>\n<td>片段表达式</td>\n<td>~{…}</td>\n<td>jsp:include 作用，引入公共页面片段</td>\n</tr>\n</tbody></table>\n<h5 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;msg&#125;&quot;</span>&gt;</span>nice<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;www.baidu.com&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;$&#123;link&#125;&quot;</span>&gt;</span>去百度<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>  <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;www.google.com&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/link&#125;&quot;</span>&gt;</span>去百度<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>直接打开这个html页面显示的”去百度”这个原始内容，经过Spring加载后会显示变量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xmlns:th=&quot;http://www.thymeleaf.org&quot;</span><br></pre></td></tr></table></figure>\n\n<p>这个用于引入命名空间</p>\n<p>修改标签的值：<code>th:text=&quot;$&#123;msg&#125;&quot;</code></p>\n<p>设置页面跳转的值：</p>\n<p><code>th:href=&quot;$&#123;link&#125;&quot;</code> 将链接内容替换为model中link变量的值（替换的是变量的值）</p>\n<p><code>th:href=&quot;@&#123;/link&#125;&quot;</code>  将链接内容替换为/link（替换的字面量的值）</p>\n<p>用${}获取我们放在model中的数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ViewTestController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">(Model model)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//model中的数据会被放在请求域中 request.setAttribute(&quot;a&quot;,aa)</span></span><br><span class=\"line\">        model.addAttribute(<span class=\"string\">&quot;msg&quot;</span>,<span class=\"string\">&quot;一定要大力发展工业文化&quot;</span>);</span><br><span class=\"line\">        model.addAttribute(<span class=\"string\">&quot;link&quot;</span>,<span class=\"string\">&quot;http://www.baidu.com&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>设置标签内部属性的值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src=&quot;../../images/gtvglogo.png&quot;  </span><br><span class=\"line\">     th:attr=&quot;src=@&#123;/images/gtvglogo.png&#125;,title=#&#123;logo&#125;,alt=#&#123;logo&#125;&quot; /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>可以在双引号中使用单引号进行字符串拼接操作</p>\n<p>Tip：@GetMapping(value={}) 这些注解的value字段可以是数组，表示这些注解对应到同一个controller</p>\n<p>thymleaf原则:model有值就用model里的值，model里没有值就用html中的值。</p>\n<p>官网:thymeleaf.org/doc</p>\n<p>th:action=”@{/login}” 加在form表单上，表示设置form表单请求的url</p>\n<p>controller返回 “redirect:/main.html”表示进行请求重定向</p>\n<p>th:text=${msg} 修改内容，用这个可以动态修改文本自己标签页</p>\n<p>除了能获得model中的数据，也默认能有session中的数据（参数名需要叫session）</p>\n<p>thymeleaf行内写法:[[${session.user.name}]]</p>\n<p>跳转到template目录下的basic目录下，返回”basic/index”即可</p>\n<p>html中需要用src属性，thymeleaf用th:src=”@{/}”</p>\n<p>html需要用href属性的，thymeleaf用th:href=”@{/}”</p>\n<h5 id=\"模板引入\"><a href=\"#模板引入\" class=\"headerlink\" title=\"模板引入\"></a>模板引入</h5><p>html页面可能会有很多功能的部分，例如导航条，侧边栏等。如果要修改这些部分的话需要修改所以的html页面，十分繁琐，所以我们可以使用thymeleaf的模板语法来将html可能会用到的功能组件保存起来，再需要使用的时候从组件库中引入组件（组件可以是任何公共的部分，例如公共的css，js，html元素），这样在修改组件的时候直接修改组件库的内容即可。</p>\n<p>引入组件的方式可以使用thymleaf提供的fragment字段来设置一个唯一的标识，也可以使用html’的属性选择器（比如设置了id，引入的时候使用#id来引入）</p>\n<p>使用fragment字段：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span> <span class=\"attr\">th:fragment</span>=<span class=\"string\">&quot;commonheader&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--common--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;css/style.css&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/css/style.css&#125;&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>引入的时候：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:include</span>=<span class=\"string\">&quot;common :: commonheader&quot;</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>common是存放组件的<strong>html文件</strong>的名称，commonheader是我们设置的th:fragmen字段的值</p>\n<p>使用id：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;commonscript&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Placed js at the end of the document so the pages load faster --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">&quot;@&#123;/js/jquery-1.10.2.min.js&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">&quot;@&#123;/js/jquery-ui-1.9.2.custom.min.js&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">&quot;@&#123;/js/jquery-migrate-1.2.1.min.js&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">&quot;@&#123;/js/bootstrap.min.js&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">&quot;@&#123;/js/modernizr.min.js&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">&quot;@&#123;/js/jquery.nicescroll.js&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--common scripts for all pages--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">&quot;@&#123;/js/scripts.js&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>引入的时候：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">&quot;common :: #commonscript&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>其实就是多加了一个#</p>\n<p>组件库里的链接(href)和内容(src) ，都要替换成th的格式</p>\n<p>编写组件库common.html：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><span class=\"comment\">&lt;!--注意要添加xmlns:th才能添加thymeleaf的标签--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span> <span class=\"attr\">th:fragment</span>=<span class=\"string\">&quot;commonheader&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--common--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;css/style.css&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/css/style.css&#125;&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;css/style-responsive.css&quot;</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/css/style-responsive.css&#125;&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- left side start--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;leftmenu&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;left-side sticky-left-side&quot;</span>&gt;</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;left-side-inner&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t...</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--sidebar nav start--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav nav-pills nav-stacked custom-nav&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/main.html&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-home&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Dashboard<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            ...</span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;menu-list nav-active&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-th-list&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Data Tables<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;sub-menu-list&quot;</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/basic_table&#125;&quot;</span>&gt;</span> Basic Table<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/dynamic_table&#125;&quot;</span>&gt;</span> Advanced Table<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/responsive_table&#125;&quot;</span>&gt;</span> Responsive Table<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/editable_table&#125;&quot;</span>&gt;</span> Edit Table<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            ...</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--sidebar nav end--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- left side end--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- header section start--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:fragment</span>=<span class=\"string\">&quot;headermenu&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;header-section&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--toggle button start--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;toggle-btn&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-bars&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--toggle button end--&gt;</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- header section end--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;commonscript&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Placed js at the end of the document so the pages load faster --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">&quot;@&#123;/js/jquery-1.10.2.min.js&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">&quot;@&#123;/js/jquery-ui-1.9.2.custom.min.js&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">&quot;@&#123;/js/jquery-migrate-1.2.1.min.js&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">&quot;@&#123;/js/bootstrap.min.js&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">&quot;@&#123;/js/modernizr.min.js&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">&quot;@&#123;/js/jquery.nicescroll.js&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--common scripts for all pages--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">th:src</span>=<span class=\"string\">&quot;@&#123;/js/scripts.js&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>引入组件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;description&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;author&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;ThemeBucket&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;shortcut icon&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;image/png&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Basic Table<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:include</span>=<span class=\"string\">&quot;common :: commonheader&quot;</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"comment\">&lt;!--将common.html的代码段 插进来--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;sticky-header&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">&quot;common :: #leftmenu&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- main content start--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;main-content&quot;</span> &gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">&quot;common :: headermenu&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- main content end--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- Placed js at the end of the document so the pages load faster --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">&quot;common :: #commonscript&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"引入语法\"><a href=\"#引入语法\" class=\"headerlink\" title=\"引入语法\"></a>引入语法</h5><p><a href=\"https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#difference-between-thinsert-and-threplace-and-thinclude\">https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#difference-between-thinsert-and-threplace-and-thinclude</a></p>\n<p>（其实都用div即可）</p>\n<p>假如在footer.html中有</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">footer</span> <span class=\"attr\">th:fragment</span>=<span class=\"string\">&quot;copy&quot;</span>&gt;</span></span><br><span class=\"line\">\thello,lth</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>1.insert 引入用的标签在外，被引入的标签在内</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:insert</span>=<span class=\"string\">&quot;footer :: copy&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>替换后的效果是：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">        hello,lth</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2.replace 只保留被引入的标签</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">&quot;footer :: copy&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>替换后：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">  hello,lth</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3.include 只保留引入用的标签</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:include</span>=<span class=\"string\">&quot;footer :: copy&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>替换后：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  hello,lth</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"集合遍历\"><a href=\"#集合遍历\" class=\"headerlink\" title=\"集合遍历\"></a>集合遍历</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">th:each</span>=<span class=\"string\">&quot;pet,status:$&#123;pets&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>[[$&#123;status.index&#125;]]<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>[[$&#123;pet.name&#125;]]<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>[[$&#123;pet.age&#125;]]<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>除了我们集合中对应的对象，每个集合还默认会有一个status对象（默认在第二个参数里），里面有相关的索引信息</p>\n<h4 id=\"视图解析原理\"><a href=\"#视图解析原理\" class=\"headerlink\" title=\"视图解析原理\"></a>视图解析原理</h4><p>视图解析流程与前面所说一致，拿到返回值后，会根据返回值的类型以及注解判断使用哪种视图解析器，而对于返回值是String类型，且没有加上@ResponBody注解，则会使用ViewNameMethodReturnValueHandler这个返回值解析器来解析返回值。</p>\n<p>处理过程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleReturnValue</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Object returnValue, MethodParameter returnType,</span></span><br><span class=\"line\"><span class=\"params\">\t\tModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//如果返回值是字符串</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (returnValue <span class=\"keyword\">instanceof</span> CharSequence) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">viewName</span> <span class=\"operator\">=</span> returnValue.toString();</span><br><span class=\"line\">           <span class=\"comment\">//将视图的地址放入到视图容器中</span></span><br><span class=\"line\">\t\tmavContainer.setViewName(viewName);</span><br><span class=\"line\">           <span class=\"comment\">//判断是否能重定向</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isRedirectViewName(viewName)) &#123;</span><br><span class=\"line\">               <span class=\"comment\">//将重定向标志设置为true</span></span><br><span class=\"line\">\t\t\tmavContainer.setRedirectModelScenario(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (returnValue != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// should not happen</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UnsupportedOperationException</span>(<span class=\"string\">&quot;Unexpected return type: &quot;</span> +</span><br><span class=\"line\">\t\t\t\treturnType.getParameterType().getName() + <span class=\"string\">&quot; in method: &quot;</span> + returnType.getMethod());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在方法执行过程中，方法中数据（model）和视图地址（view）都会放在一个ModelAndViewContainer视图容器中</p>\n<p>isRedirectViewName(viewName)方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isRedirectViewName</span><span class=\"params\">(String viewName)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (PatternMatchUtils.simpleMatch(<span class=\"built_in\">this</span>.redirectPatterns, viewName) || viewName.startsWith(<span class=\"string\">&quot;redirect:&quot;</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果返回的字符符串和redirectPatterns设置的正则表达式匹配，或者以”redirect:”开头，则将这个字符串视为重定向。所以我们在加上redirect:作为前缀后可以进行请求重定向。</p>\n<p>如果我们方法去请求参数中有我们的自定义对象，那么这个自定义对象也会被放到mavContainer中</p>\n<p>在invokeHandlerMethod方法执行完后，会执行下面的getModelAndView方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> ModelAndView <span class=\"title function_\">getModelAndView</span><span class=\"params\">(ModelAndViewContainer mavContainer,</span></span><br><span class=\"line\"><span class=\"params\">\t\tModelFactory modelFactory, NativeWebRequest webRequest)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//拿到mavContainer容器</span></span><br><span class=\"line\">\tmodelFactory.updateModel(webRequest, mavContainer);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (mavContainer.isRequestHandled()) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">       <span class=\"comment\">//获取容器中的model，这里的model和我们在方法参数中通过设置Map型参数或者Model型参数拿到的对象是同一个，类型都是ModelMap类型，对应request的请求域</span></span><br><span class=\"line\">\t<span class=\"type\">ModelMap</span> <span class=\"variable\">model</span> <span class=\"operator\">=</span> mavContainer.getModel();</span><br><span class=\"line\">       <span class=\"comment\">//使用model(数据),视图名(view)创建一个ModelAndView对象</span></span><br><span class=\"line\">\t<span class=\"type\">ModelAndView</span> <span class=\"variable\">mav</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ModelAndView</span>(mavContainer.getViewName(), model, mavContainer.getStatus());</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!mavContainer.isViewReference()) &#123;</span><br><span class=\"line\">\t\tmav.setView((View) mavContainer.getView());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">       <span class=\"comment\">//如果model带有@RedirectAttribute注解，则会将这个model放入到下一次请求的参数中</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (model <span class=\"keyword\">instanceof</span> RedirectAttributes) &#123;</span><br><span class=\"line\">\t\tMap&lt;String, ?&gt; flashAttributes = ((RedirectAttributes) model).getFlashAttributes();</span><br><span class=\"line\">\t\t<span class=\"type\">HttpServletRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> webRequest.getNativeRequest(HttpServletRequest.class);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (request != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tRequestContextUtils.getOutputFlashMap(request).putAll(flashAttributes);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> mav;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>1.所有请求的执行结果都是一个ModelAndView对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br></pre></td></tr></table></figure>\n\n<p>2.如果视图名称为null，则会根据uri给它一个默认的视图名</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">applyDefaultViewName(processedRequest, mv);</span><br></pre></td></tr></table></figure>\n\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/success&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">(Model model, HttpSession httpSession)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>会返回template目录下的success.html页面</p>\n<p>3.处理派发结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">processDispatchResult</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"meta\">@Nullable</span> HandlerExecutionChain mappedHandler, <span class=\"meta\">@Nullable</span> ModelAndView mv,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"meta\">@Nullable</span> Exception exception)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"variable\">errorView</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//如果有异常，处理异常</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (exception != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (exception <span class=\"keyword\">instanceof</span> ModelAndViewDefiningException) &#123;</span><br><span class=\"line\">\t\t\tlogger.debug(<span class=\"string\">&quot;ModelAndViewDefiningException encountered&quot;</span>, exception);</span><br><span class=\"line\">\t\t\tmv = ((ModelAndViewDefiningException) exception).getModelAndView();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">Object</span> <span class=\"variable\">handler</span> <span class=\"operator\">=</span> (mappedHandler != <span class=\"literal\">null</span> ? mappedHandler.getHandler() : <span class=\"literal\">null</span>);</span><br><span class=\"line\">\t\t\tmv = processHandlerException(request, response, handler, exception);</span><br><span class=\"line\">\t\t\terrorView = (mv != <span class=\"literal\">null</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 如果视图不为空，渲染视图</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (mv != <span class=\"literal\">null</span> &amp;&amp; !mv.wasCleared()) &#123;</span><br><span class=\"line\">\t\trender(mv, request, response);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (errorView) &#123;</span><br><span class=\"line\">\t\t\tWebUtils.clearErrorRequestAttributes(request);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.trace(<span class=\"string\">&quot;No view rendering, null ModelAndView returned.&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Concurrent handling started during a forward</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (mappedHandler != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Exception (if any) is already handled..</span></span><br><span class=\"line\">\t\tmappedHandler.triggerAfterCompletion(request, response, <span class=\"literal\">null</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>渲染视图：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render(mv, request, response);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">render</span><span class=\"params\">(ModelAndView mv, HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Determine locale for request and apply it to the response.</span></span><br><span class=\"line\">\t<span class=\"type\">Locale</span> <span class=\"variable\">locale</span> <span class=\"operator\">=</span></span><br><span class=\"line\">\t\t\t(<span class=\"built_in\">this</span>.localeResolver != <span class=\"literal\">null</span> ? <span class=\"built_in\">this</span>.localeResolver.resolveLocale(request) : request.getLocale());</span><br><span class=\"line\">\tresponse.setLocale(locale);</span><br><span class=\"line\">\t<span class=\"comment\">//根据视图名，拿到视图对象</span></span><br><span class=\"line\">\tView view;</span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">viewName</span> <span class=\"operator\">=</span> mv.getViewName();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (viewName != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// We need to resolve the view name.</span></span><br><span class=\"line\">\t\tview = resolveViewName(viewName, mv.getModelInternal(), locale, request);</span><br><span class=\"line\">           <span class=\"comment\">//如果无法解析就抛出异常</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (view == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServletException</span>(<span class=\"string\">&quot;Could not resolve view with name &#x27;&quot;</span> + mv.getViewName() +</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">&quot;&#x27; in servlet with name &#x27;&quot;</span> + getServletName() + <span class=\"string\">&quot;&#x27;&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// No need to lookup: the ModelAndView object contains the actual View object.</span></span><br><span class=\"line\">\t\tview = mv.getView();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (view == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServletException</span>(<span class=\"string\">&quot;ModelAndView [&quot;</span> + mv + <span class=\"string\">&quot;] neither contains a view name nor a &quot;</span> +</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">&quot;View object in servlet with name &#x27;&quot;</span> + getServletName() + <span class=\"string\">&quot;&#x27;&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Delegate to the View object for rendering.</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\tlogger.trace(<span class=\"string\">&quot;Rendering view [&quot;</span> + view + <span class=\"string\">&quot;] &quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (mv.getStatus() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tresponse.setStatus(mv.getStatus().value());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">           <span class=\"comment\">//得到视图后，调用view的render方法来觉得最后的视图如何渲染</span></span><br><span class=\"line\">\t\tview.render(mv.getModelInternal(), request, response);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.debug(<span class=\"string\">&quot;Error rendering view [&quot;</span> + view + <span class=\"string\">&quot;]&quot;</span>, ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>1.根据视图名拿到视图对象View，View中会定义页面的渲染逻辑（也就是得到返回给前端的文本）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> View <span class=\"title function_\">resolveViewName</span><span class=\"params\">(String viewName, <span class=\"meta\">@Nullable</span> Map&lt;String, Object&gt; model,</span></span><br><span class=\"line\"><span class=\"params\">\t\tLocale locale, HttpServletRequest request)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.viewResolvers != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (ViewResolver viewResolver : <span class=\"built_in\">this</span>.viewResolvers) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">View</span> <span class=\"variable\">view</span> <span class=\"operator\">=</span> viewResolver.resolveViewName(viewName, locale);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (view != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> view;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>遍历所有的视图解析器，尝试解析视图名，如果能成功解析就直接返回，否则返回null</p>\n<p>包含的视图解析有：</p>\n<p><img src=\"https://s2.loli.net/2022/05/26/4JR7XPYnoZhETNU.png\" alt=\"image-20220505003040015\"></p>\n<p>第0个是内容协商视图解析器，里面内容协商管理器中包含下面所有的视图解析器，因而还是会遍历下面所有的视图解析器，尝试解析viewName得到view。所以在这个循环中不会进入到下面中，但是解析过程还是用下面的解析器完成</p>\n<p>第2个视图解析器是Thymeleaf视图解析器，会创建RedirectView对象</p>\n<p>视图渲染逻辑：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">render</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Map&lt;String, ?&gt; model, HttpServletRequest request,</span></span><br><span class=\"line\"><span class=\"params\">\t\tHttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\tlogger.debug(<span class=\"string\">&quot;View &quot;</span> + formatViewName() +</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;, model &quot;</span> + (model != <span class=\"literal\">null</span> ? model : Collections.emptyMap()) +</span><br><span class=\"line\">\t\t\t\t(<span class=\"built_in\">this</span>.staticAttributes.isEmpty() ? <span class=\"string\">&quot;&quot;</span> : <span class=\"string\">&quot;, static attributes &quot;</span> + <span class=\"built_in\">this</span>.staticAttributes));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//这一步，将我们model中的数据放到一个新的map里面mergedModel</span></span><br><span class=\"line\">\tMap&lt;String, Object&gt; mergedModel = createMergedOutputModel(model, request, response);</span><br><span class=\"line\">\tprepareResponse(request, response);</span><br><span class=\"line\">       <span class=\"comment\">//将需要的参数都统合起来，觉得最后的视图渲染逻辑</span></span><br><span class=\"line\">\trenderMergedOutputModel(mergedModel, getRequestToExpose(request), response);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中：renderMergedOutputModel(mergedModel, getRequestToExpose(request), response)方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">renderMergedOutputModel</span><span class=\"params\">(Map&lt;String, Object&gt; model, HttpServletRequest request,</span></span><br><span class=\"line\"><span class=\"params\">\t\tHttpServletResponse response)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//获取模板URL，拼接URL并将model中的参数作为URL的路径参数放在后面</span></span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">targetUrl</span> <span class=\"operator\">=</span> createTargetUrl(model, request);</span><br><span class=\"line\">\ttargetUrl = updateTargetUrl(targetUrl, model, request, response);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 保存参数</span></span><br><span class=\"line\">\tRequestContextUtils.saveOutputFlashMap(targetUrl, request, response);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//使用原生的response.sendRedirect(encodedURL)方法进行重定向</span></span><br><span class=\"line\">\tsendRedirect(request, response, targetUrl, <span class=\"built_in\">this</span>.http10Compatible);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>返回值如果是以**”forward:”**开始，则返回new InternalResourceView(forwardUrl)视图对象</p>\n<p>功能是<strong>转发</strong>：request.getRequestDispatcher(URL).forward(request,response)</p>\n<p>转发是以当前请求为代理，生产一次的新的请求，将新的请求的返回值作为当前请求的返回值返回，调用的是request的方法，转发新的请求是服务器发起的，所以浏览器只会发送一次请求（相当于处理请求的时候调用了其他请求对应的方法），并且地址栏不会发送变化</p>\n<p>返回值如果以**”redirect:”**开始，则返回new RedirectView()视图对象</p>\n<p>功能是<strong>重定向</strong>：response.sendRedirect(URL)</p>\n<p>重定向是返回下一次应当查询的URL，让浏览器向这个URL发请求，调用的是response的方法，浏览器会发送多次请求直到得到结果，地址栏的请求地址会变成最后一次重定向的地址</p>\n<p>补充：转发和重定向的区别</p>\n<p><img src=\"https://s2.loli.net/2022/05/26/lOW3a9JGhrH7gXq.png\" alt=\"在这里插入图片描述\"></p>\n<p>返回值如果是普通字符串，则返回new ThymeleafView()视图对象，这个view会使用HTML解析器等工具填充数据，返回HTML文本</p>\n<p>我们可以实现一个View接口和一个自定义的视图解析器，这样就可以返回我们自定义的文本内容</p>\n<h3 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h3><p>添加拦截器需要我们实现HandlerInterceptor接口，里面有三个方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">HandlerInterceptor</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//用于前置拦截，在方法执行前执行</span></span><br><span class=\"line\">\t<span class=\"keyword\">default</span> <span class=\"type\">boolean</span> <span class=\"title function_\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">//后置拦截，在方法执行完，还没有渲染页面的时候，如果我们需要添加一些数据进model里面的可以使用这个方法</span></span><br><span class=\"line\">\t<span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title function_\">postHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t<span class=\"meta\">@Nullable</span> ModelAndView modelAndView)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">//在视图渲染完成后执行，用于进行一些清理工作</span></span><br><span class=\"line\">\t<span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterCompletion</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t<span class=\"meta\">@Nullable</span> Exception ex)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定制化SpringMVC的功能都需要我们实现一个WebMvcConfigurer</p>\n<h4 id=\"preHandle-前置拦截\"><a href=\"#preHandle-前置拦截\" class=\"headerlink\" title=\"preHandle 前置拦截\"></a>preHandle 前置拦截</h4><p>实现一个拦截器：</p>\n<p>如果session没有对应的值，说明没有登录，返回false表示进行拦截，返回true表示放行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoginIntercepter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HandlerInterceptor</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(request.getSession().getAttribute(<span class=\"string\">&quot;loginUser&quot;</span>)!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在实现的WebMvcConfigurer接口中，实现方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> &#123;</span><br><span class=\"line\">    registry.addInterceptor(<span class=\"keyword\">new</span> <span class=\"title class_\">LoginIntercepter</span>())</span><br><span class=\"line\">            .addPathPatterns(<span class=\"string\">&quot;/**&quot;</span>)</span><br><span class=\"line\">            .excludePathPatterns(<span class=\"string\">&quot;/login&quot;</span>,<span class=\"string\">&quot;/&quot;</span>,<span class=\"string\">&quot;/css/**&quot;</span>,<span class=\"string\">&quot;/js/**&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>addInterceptor：添加一个拦截器</p>\n<p>addPathPatterns：添加拦截的路由，动态路由和静态资源都会被拦截，所以要为静态资源的路径也放行</p>\n<p>excludePathPatterns：添加放行的路由</p>\n<p>重定向会丢失原来request中的数据（因为发了一个新的request），所以使用转发功能即可保留请求域中的数据</p>\n<h4 id=\"拦截器原理\"><a href=\"#拦截器原理\" class=\"headerlink\" title=\"拦截器原理\"></a>拦截器原理</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在执行mv = ha.handle(processedRequest, response, mappedHandler.getHandler());方法前，会先执行上述方法，可以看到只要这个方法返回false，请求过程就结束了。</p>\n<p>applyPreHandle：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">applyPreHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\tHandlerInterceptor[] interceptors = getInterceptors();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!ObjectUtils.isEmpty(interceptors)) &#123;</span><br><span class=\"line\">           <span class=\"comment\">//顺序执行所有的拦截器</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; interceptors.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">HandlerInterceptor</span> <span class=\"variable\">interceptor</span> <span class=\"operator\">=</span> interceptors[i];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!interceptor.preHandle(request, response, <span class=\"built_in\">this</span>.handler)) &#123;</span><br><span class=\"line\">                   <span class=\"comment\">//如果被拦截了则逆序执行返回true的拦截器的AfterCompletion方法</span></span><br><span class=\"line\">\t\t\t\ttriggerAfterCompletion(request, response, <span class=\"literal\">null</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.interceptorIndex = i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如代码所示，请求会顺序执行我们添加的拦截器列表，执行里面的preHandle方法。如果拦截器返回true则执行下一个拦截器，如果有拦截器返回false，也就是请求被拦截了，在返回doDispatch之前会执行triggerAfterCompletion方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">triggerAfterCompletion</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, <span class=\"meta\">@Nullable</span> Exception ex)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tHandlerInterceptor[] interceptors = getInterceptors();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!ObjectUtils.isEmpty(interceptors)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.interceptorIndex; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">HandlerInterceptor</span> <span class=\"variable\">interceptor</span> <span class=\"operator\">=</span> interceptors[i];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tinterceptor.afterCompletion(request, response, <span class=\"built_in\">this</span>.handler, ex);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">catch</span> (Throwable ex2) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.error(<span class=\"string\">&quot;HandlerInterceptor.afterCompletion threw exception&quot;</span>, ex2);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法中会逆序执行先前已经返回true的拦截器中的afterCompletion方法（最后那个返回false的拦截器不会执行afterCompletion方法）</p>\n<p>方法执行完成后会执行applyPostHandle方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">applyPostHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, <span class=\"meta\">@Nullable</span> ModelAndView mv)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tHandlerInterceptor[] interceptors = getInterceptors();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!ObjectUtils.isEmpty(interceptors)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> interceptors.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">HandlerInterceptor</span> <span class=\"variable\">interceptor</span> <span class=\"operator\">=</span> interceptors[i];</span><br><span class=\"line\">\t\t\tinterceptor.postHandle(request, response, <span class=\"built_in\">this</span>.handler, mv);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个方法中会逆序执行所有的拦截器的postHandle方法（能执行这里说明所有拦截器的preHandle方法都返回了true）</p>\n<p>如果正常结束，会在processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);中逆序触发triggerAfterCompletion方法。</p>\n<p>如果出现异常，则直接触发triggerAfterCompletion方法</p>\n<p>triggerAfterCompletion只会执行已经执行了preHandle并且返回true的拦截器的方法</p>\n<p><img src=\"D:\\学习笔记\\picture\\3ec2d5bca54c51b80b6d2c5a9f1fbf32-1669804541526-57.png\" alt=\"image-20220505172331957\"></p>\n<h3 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h3><p>文件上传页面</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- role 申明这是个表单 th:action表示表单提交的路由 method表示请求方法是post enctype表示多文件上传--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">role</span>=<span class=\"string\">&quot;form&quot;</span> <span class=\"attr\">th:action</span>=<span class=\"string\">&quot;@&#123;/upload&#125;&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span> <span class=\"attr\">enctype</span>=<span class=\"string\">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;exampleInputEmail1&quot;</span>&gt;</span>邮箱<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;email&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;email&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;exampleInputEmail1&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Enter email&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;exampleInputPassword1&quot;</span>&gt;</span>名字<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;exampleInputPassword1&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Password&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;exampleInputFile&quot;</span>&gt;</span>头像<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;headerImg&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;exampleInputFile&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;exampleInputFile&quot;</span>&gt;</span>生活照<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;photos&quot;</span> <span class=\"attr\">multiple</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;checkbox&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span>&gt;</span> Check me out</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-primary&quot;</span>&gt;</span>提交<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>文件上传处理的Controller：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/upload&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Object <span class=\"title function_\">upload</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;email&quot;)</span> String email,</span></span><br><span class=\"line\"><span class=\"params\">                     <span class=\"meta\">@RequestPart(&quot;headerImg&quot;)</span> MultipartFile headerImage,</span></span><br><span class=\"line\"><span class=\"params\">                     <span class=\"meta\">@RequestPart(&quot;photos&quot;)</span> MultipartFile[] photos)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;email,headerImage.getName(),photos.length&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>单个文件使用MultipartFile headerImage</p>\n<p>多个文件上传使用数组MultipartFile[] photos</p>\n<p>使用@RequestPart(“headerImg”) 来接收文件</p>\n<p>在配置中设置文件大小：（因为Spring有某人的文件上传大小限制）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.servlet.multipart.max-file-size=10MB</span><br><span class=\"line\">spring.servlet.multipart.max-request-size=100MB</span><br></pre></td></tr></table></figure>\n\n<p>文件下载：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FileController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">LOCATION</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;&quot;</span>).getAbsolutePath()+<span class=\"string\">&quot;/src/main/resources/static/&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/upload&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">upload</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;email&quot;)</span> String email,</span></span><br><span class=\"line\"><span class=\"params\">                         <span class=\"meta\">@RequestPart(&quot;headerImg&quot;)</span> MultipartFile headerImage,</span></span><br><span class=\"line\"><span class=\"params\">                         <span class=\"meta\">@RequestPart(&quot;photos&quot;)</span> MultipartFile[] photos)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!headerImage.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                System.out.println(headerImage.getName());</span><br><span class=\"line\">                System.out.println(headerImage.getOriginalFilename());</span><br><span class=\"line\"></span><br><span class=\"line\">                headerImage.transferTo(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(LOCATION+headerImage.getOriginalFilename()));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;email,headerImage.getName(),photos.length&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用headerImage.transferTo(new File(LOCATION+headerImage.getOriginalFilename()));保存文件</p>\n<p>使用的是底层使用的是FileCopyUtils.copy(getInputStream(), Files.newOutputStream(dest));实现文件拷贝</p>\n<h4 id=\"文件上传原理\"><a href=\"#文件上传原理\" class=\"headerlink\" title=\"文件上传原理\"></a>文件上传原理</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(&#123; Servlet.class, StandardServletMultipartResolver.class, MultipartConfigElement.class &#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(prefix = &quot;spring.servlet.multipart&quot;, name = &quot;enabled&quot;, matchIfMissing = true)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(MultipartProperties.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MultipartAutoConfiguration</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> MultipartProperties multipartProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">MultipartAutoConfiguration</span><span class=\"params\">(MultipartProperties multipartProperties)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.multipartProperties = multipartProperties;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnMissingBean(&#123; MultipartConfigElement.class, CommonsMultipartResolver.class &#125;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> MultipartConfigElement <span class=\"title function_\">multipartConfigElement</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.multipartProperties.createMultipartConfig();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"comment\">//向容器中添加文件上传解析器</span></span><br><span class=\"line\">\t<span class=\"meta\">@Bean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnMissingBean(MultipartResolver.class)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> StandardServletMultipartResolver <span class=\"title function_\">multipartResolver</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">StandardServletMultipartResolver</span> <span class=\"variable\">multipartResolver</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StandardServletMultipartResolver</span>();</span><br><span class=\"line\">\t\tmultipartResolver.setResolveLazily(<span class=\"built_in\">this</span>.multipartProperties.isResolveLazily());</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> multipartResolver;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果我们向自定义文件解析过程，往Spring容器中添加我们自定义的文件解析器即可</p>\n<p>在doDispatch方法中，在解析参数之前会先判断当前请求是否是文件上传请求：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">processedRequest = checkMultipart(request);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> HttpServletRequest <span class=\"title function_\">checkMultipart</span><span class=\"params\">(HttpServletRequest request)</span> <span class=\"keyword\">throws</span> MultipartException &#123;</span><br><span class=\"line\">       <span class=\"comment\">//使用文件上传解析器判断是不是文件上传请求</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.multipartResolver != <span class=\"literal\">null</span> &amp;&amp; <span class=\"built_in\">this</span>.multipartResolver.isMultipart(request)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (WebUtils.getNativeRequest(request, MultipartHttpServletRequest.class) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (request.getDispatcherType().equals(DispatcherType.REQUEST)) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.trace(<span class=\"string\">&quot;Request already resolved to MultipartHttpServletRequest, e.g. by MultipartFilter&quot;</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (hasMultipartException(request)) &#123;</span><br><span class=\"line\">\t\t\tlogger.debug(<span class=\"string\">&quot;Multipart resolution previously failed for current request - &quot;</span> +</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">&quot;skipping re-resolution for undisturbed error rendering&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                   <span class=\"comment\">//如果是文件上传请求则对原请求进行包装</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.multipartResolver.resolveMultipart(request);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">catch</span> (MultipartException ex) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tlogger.debug(<span class=\"string\">&quot;Multipart resolution failed for error dispatch&quot;</span>, ex);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// Keep processing error dispatch with regular request handle below</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 不是文件上传请求则直接返回原请求</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> request;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>this.multipartResolver.isMultipart(request) 使用这个方法判断是不是文件上传请求</p>\n<p>如果是文件上传请求则将原请求进行包装</p>\n<p>return this.multipartResolver.resolveMultipart(request);</p>\n<p>然后返回doDispatch方法，判断返回的请求和原来的请求是否一样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">multipartRequestParsed = (processedRequest != request);</span><br></pre></td></tr></table></figure>\n\n<p>如果不一样，说明对原请求进行了包装，因而是文件上传请求</p>\n<p>如果一样，说明没有包装，则不是文件上传请求</p>\n<p>解析参数的过程和前面一样，根据@RequestPart注解判断使用RequestPartMethodArgumentResolver这个文件上传解析器来解析文件参数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Object <span class=\"title function_\">resolveArgument</span><span class=\"params\">(MethodParameter parameter, <span class=\"meta\">@Nullable</span> ModelAndViewContainer mavContainer,</span></span><br><span class=\"line\"><span class=\"params\">\t\tNativeWebRequest request, <span class=\"meta\">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">HttpServletRequest</span> <span class=\"variable\">servletRequest</span> <span class=\"operator\">=</span> request.getNativeRequest(HttpServletRequest.class);</span><br><span class=\"line\">\tAssert.state(servletRequest != <span class=\"literal\">null</span>, <span class=\"string\">&quot;No HttpServletRequest&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//获取注解信息，判断这个参数是不是必须的</span></span><br><span class=\"line\">\t<span class=\"type\">RequestPart</span> <span class=\"variable\">requestPart</span> <span class=\"operator\">=</span> parameter.getParameterAnnotation(RequestPart.class);</span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"variable\">isRequired</span> <span class=\"operator\">=</span> ((requestPart == <span class=\"literal\">null</span> || requestPart.required()) &amp;&amp; !parameter.isOptional());</span><br><span class=\"line\">\t<span class=\"comment\">//获得参数名</span></span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> getPartName(parameter, requestPart);</span><br><span class=\"line\">\tparameter = parameter.nestedIfOptional();</span><br><span class=\"line\">\t<span class=\"type\">Object</span> <span class=\"variable\">arg</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//解析文件上传参数</span></span><br><span class=\"line\">\t<span class=\"type\">Object</span> <span class=\"variable\">mpArg</span> <span class=\"operator\">=</span> MultipartResolutionDelegate.resolveMultipartArgument(name, parameter, servletRequest);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (mpArg != MultipartResolutionDelegate.UNRESOLVABLE) &#123;</span><br><span class=\"line\">\t\targ = mpArg;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">HttpInputMessage</span> <span class=\"variable\">inputMessage</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RequestPartServletServerHttpRequest</span>(servletRequest, name);</span><br><span class=\"line\">\t\t\targ = readWithMessageConverters(inputMessage, parameter, parameter.getNestedGenericParameterType());</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (binderFactory != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">WebDataBinder</span> <span class=\"variable\">binder</span> <span class=\"operator\">=</span> binderFactory.createBinder(request, arg, name);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (arg != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tvalidateIfApplicable(binder, parameter);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (binder.getBindingResult().hasErrors() &amp;&amp; isBindExceptionRequired(binder, parameter)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MethodArgumentNotValidException</span>(parameter, binder.getBindingResult());</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (mavContainer != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tmavContainer.addAttribute(BindingResult.MODEL_KEY_PREFIX + name, binder.getBindingResult());</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (MissingServletRequestPartException | MultipartException ex) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isRequired) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (arg == <span class=\"literal\">null</span> &amp;&amp; isRequired) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!MultipartResolutionDelegate.isMultipartRequest(servletRequest)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MultipartException</span>(<span class=\"string\">&quot;Current request is not a multipart request&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MissingServletRequestPartException</span>(name);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> adaptArgumentIfNecessary(arg, parameter);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在文件上传请求发送过来后，所有的文件的文件流都被被直接封装在一个MultiValueMap中，而文件上传解析器的作用则是从这个MultiValueMap中根据字段名拿到对应的MultiPartFile（数组）对象。</p>\n<p>MultiPartFile类有很多好用的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MultipartFile</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">InputStreamSource</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//获取上传文件的参数名</span></span><br><span class=\"line\">\tString <span class=\"title function_\">getName</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//获取上传的文件原来的名字</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\tString <span class=\"title function_\">getOriginalFilename</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//获取文件类型</span></span><br><span class=\"line\">\t<span class=\"meta\">@Nullable</span></span><br><span class=\"line\">\tString <span class=\"title function_\">getContentType</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//判断文件是否合法</span></span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"title function_\">isEmpty</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//获取文件大小</span></span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"title function_\">getSize</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//获得字节数组形式的文件</span></span><br><span class=\"line\">\t<span class=\"type\">byte</span>[] getBytes() <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\">\t<span class=\"comment\">//获取文件输入流</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\tInputStream <span class=\"title function_\">getInputStream</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException;</span><br><span class=\"line\">\t<span class=\"comment\">//获取资源类型</span></span><br><span class=\"line\">\t<span class=\"keyword\">default</span> Resource <span class=\"title function_\">getResource</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MultipartFileResource</span>(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">//保存文件</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">transferTo</span><span class=\"params\">(File dest)</span> <span class=\"keyword\">throws</span> IOException, IllegalStateException;</span><br><span class=\"line\">\t<span class=\"comment\">//保存文件实际就是调用FileCopyUtils进行流拷贝</span></span><br><span class=\"line\">\t<span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title function_\">transferTo</span><span class=\"params\">(Path dest)</span> <span class=\"keyword\">throws</span> IOException, IllegalStateException &#123;</span><br><span class=\"line\">\t\tFileCopyUtils.copy(getInputStream(), Files.newOutputStream(dest));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h3><p>Springboot在执行过程中如果出现了异常，会默认转发到/error路由上</p>\n<p>如果是机器客户端（如PostMan）则会返回JSON格式id错误信息以及状态码</p>\n<p>如果是浏览器客户端则会返回一个错误页</p>\n<p>在template目录下创建一个error目录，这个目录下的4xx.html和5xx.html（泛指以4开头和以5开头的状态码对于的页面）,页面会被自动解析，在状态码为对应值时会自动跳转到这个错误页，可以用具体的404.html,500.html来精确定位</p>\n<p>也可以根据错误信息使用thymleaf语法设置错误页面的信息</p>\n<h4 id=\"错误处理原理\"><a href=\"#错误处理原理\" class=\"headerlink\" title=\"错误处理原理\"></a>错误处理原理</h4><p>我们来到配置类：ErrorMvcAutoConfiguration</p>\n<p>和异常处理相关的配置都设置在这里</p>\n<p>添加了一个错误处理组件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(value = ErrorAttributes.class, search = SearchStrategy.CURRENT)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> DefaultErrorAttributes <span class=\"title function_\">errorAttributes</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultErrorAttributes</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个组件实现了接口： ErrorAttributes, HandlerExceptionResolver, Ordered</p>\n<h5 id=\"BasicErrorController\"><a href=\"#BasicErrorController\" class=\"headerlink\" title=\"BasicErrorController\"></a>BasicErrorController</h5><p>添加了一个Controller：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(value = ErrorController.class, search = SearchStrategy.CURRENT)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> BasicErrorController <span class=\"title function_\">basicErrorController</span><span class=\"params\">(ErrorAttributes errorAttributes,</span></span><br><span class=\"line\"><span class=\"params\">\t\tObjectProvider&lt;ErrorViewResolver&gt; errorViewResolvers)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BasicErrorController</span>(errorAttributes, <span class=\"built_in\">this</span>.serverProperties.getError(),</span><br><span class=\"line\">\t\t\terrorViewResolvers.orderedStream().collect(Collectors.toList()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个Controller中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BasicErrorController</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractErrorController</span> &#123;</span><br></pre></td></tr></table></figure>\n\n<p>如果我们配置了server.error.path，就用这个路由，如果没有配置再看error.path有没有配置，如果也没有就按照/error路由来进行映射</p>\n<p>也就是如果没有配置，这个Controller默认处理/error为前缀的请求</p>\n<p>如果内容协商的结果是返回HTML页面：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(produces = MediaType.TEXT_HTML_VALUE)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title function_\">errorHtml</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">HttpStatus</span> <span class=\"variable\">status</span> <span class=\"operator\">=</span> getStatus(request);</span><br><span class=\"line\">\tMap&lt;String, Object&gt; model = Collections</span><br><span class=\"line\">\t\t\t.unmodifiableMap(getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.TEXT_HTML)));</span><br><span class=\"line\">\tresponse.setStatus(status.value());</span><br><span class=\"line\">\t<span class=\"type\">ModelAndView</span> <span class=\"variable\">modelAndView</span> <span class=\"operator\">=</span> resolveErrorView(request, response, status, model);</span><br><span class=\"line\">       <span class=\"comment\">//如果没有找到404.html文件，也没有找到4xx.html文件，则会返回默认的异常界面</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (modelAndView != <span class=\"literal\">null</span>) ? modelAndView : <span class=\"keyword\">new</span> <span class=\"title class_\">ModelAndView</span>(<span class=\"string\">&quot;error&quot;</span>, model);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>会返回一个new ModelAndView(“error”, model)</p>\n<p>如果协商结果不是HTML则返回一个Entity：</p>\n<p>相当于返回了JSON</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; <span class=\"title function_\">error</span><span class=\"params\">(HttpServletRequest request)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">HttpStatus</span> <span class=\"variable\">status</span> <span class=\"operator\">=</span> getStatus(request);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (status == HttpStatus.NO_CONTENT) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ResponseEntity</span>&lt;&gt;(status);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tMap&lt;String, Object&gt; body = getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.ALL));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ResponseEntity</span>&lt;&gt;(body, status);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>容器中如果没有名为error的组件，会向容器中加入一个View类型的组件error</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean(name = &quot;error&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(name = &quot;error&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> View <span class=\"title function_\">defaultErrorView</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.defaultErrorView;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以如果返回的是HTML页面，返回new ModelAndView(“error”, model)时，会从Spring容器中拿到error组件作为视图返回</p>\n<p>同时会放入视图解析器：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> BeanNameViewResolver <span class=\"title function_\">beanNameViewResolver</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">BeanNameViewResolver</span> <span class=\"variable\">resolver</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BeanNameViewResolver</span>();</span><br><span class=\"line\">\tresolver.setOrder(Ordered.LOWEST_PRECEDENCE - <span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> resolver;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用视图解析器就可以根据error这个id找到对于的view对象</p>\n<p>然后就可以使用前面处理请求的逻辑来处理/error请求，也就是拿到包含由数据和视图的ModelAndView对象后，在处理返回值的流程中，调用view的render方法来渲染视图：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">render</span><span class=\"params\">(Map&lt;String, ?&gt; model, HttpServletRequest request, HttpServletResponse response)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (response.isCommitted()) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> getMessage(model);</span><br><span class=\"line\">\t\tlogger.error(message);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tresponse.setContentType(TEXT_HTML_UTF8.toString());</span><br><span class=\"line\">\t<span class=\"type\">StringBuilder</span> <span class=\"variable\">builder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">\t<span class=\"type\">Object</span> <span class=\"variable\">timestamp</span> <span class=\"operator\">=</span> model.get(<span class=\"string\">&quot;timestamp&quot;</span>);</span><br><span class=\"line\">\t<span class=\"type\">Object</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> model.get(<span class=\"string\">&quot;message&quot;</span>);</span><br><span class=\"line\">\t<span class=\"type\">Object</span> <span class=\"variable\">trace</span> <span class=\"operator\">=</span> model.get(<span class=\"string\">&quot;trace&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (response.getContentType() == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\tresponse.setContentType(getContentType());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tbuilder.append(<span class=\"string\">&quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Whitelabel Error Page&lt;/h1&gt;&quot;</span>).append(</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;&lt;p&gt;This application has no explicit mapping for /error, so you are seeing this as a fallback.&lt;/p&gt;&quot;</span>)</span><br><span class=\"line\">\t\t\t.append(<span class=\"string\">&quot;&lt;div id=&#x27;created&#x27;&gt;&quot;</span>).append(timestamp).append(<span class=\"string\">&quot;&lt;/div&gt;&quot;</span>)</span><br><span class=\"line\">\t\t\t.append(<span class=\"string\">&quot;&lt;div&gt;There was an unexpected error (type=&quot;</span>).append(htmlEscape(model.get(<span class=\"string\">&quot;error&quot;</span>)))</span><br><span class=\"line\">\t\t\t.append(<span class=\"string\">&quot;, status=&quot;</span>).append(htmlEscape(model.get(<span class=\"string\">&quot;status&quot;</span>))).append(<span class=\"string\">&quot;).&lt;/div&gt;&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (message != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\tbuilder.append(<span class=\"string\">&quot;&lt;div&gt;&quot;</span>).append(htmlEscape(message)).append(<span class=\"string\">&quot;&lt;/div&gt;&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (trace != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\tbuilder.append(<span class=\"string\">&quot;&lt;div style=&#x27;white-space:pre-wrap;&#x27;&gt;&quot;</span>).append(htmlEscape(trace)).append(<span class=\"string\">&quot;&lt;/div&gt;&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tbuilder.append(<span class=\"string\">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class=\"line\">\tresponse.getWriter().append(builder.toString());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以其实就是根据数据拼接成一个HTML格式的字符串返回，也就是我们看到的错误页的来源</p>\n<h5 id=\"DefaultErrorViewResolver-异常视图解析器\"><a href=\"#DefaultErrorViewResolver-异常视图解析器\" class=\"headerlink\" title=\"DefaultErrorViewResolver 异常视图解析器\"></a>DefaultErrorViewResolver 异常视图解析器</h5><p>这个视图用于根据异常名称解析错误页的，解析过程如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title function_\">resolveErrorView</span><span class=\"params\">(HttpServletRequest request, HttpStatus status, Map&lt;String, Object&gt; model)</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">//解析视图</span></span><br><span class=\"line\">\t<span class=\"type\">ModelAndView</span> <span class=\"variable\">modelAndView</span> <span class=\"operator\">=</span> resolve(String.valueOf(status.value()), model);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (modelAndView == <span class=\"literal\">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;</span><br><span class=\"line\">\t\tmodelAndView = resolve(SERIES_VIEWS.get(status.series()), model);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面会调用resove方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> ModelAndView <span class=\"title function_\">resolve</span><span class=\"params\">(String viewName, Map&lt;String, Object&gt; model)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">errorViewName</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;error/&quot;</span> + viewName;</span><br><span class=\"line\">\t<span class=\"type\">TemplateAvailabilityProvider</span> <span class=\"variable\">provider</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.templateAvailabilityProviders.getProvider(errorViewName,</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.applicationContext);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (provider != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ModelAndView</span>(errorViewName, model);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> resolveResource(errorViewName, model);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>String errorViewName = “error/“ + viewName 通过这条语句可以看到解析的视图地址是在/error目录下，并且视图名称是viewName</p>\n<p>创建ModelAndView对象时，会默认从template目录寻找对于的html文件，而加上/error前缀后，默认的视图页就会从/templates/error目录下面找，而视图名称viewName 从哪里来呢，我们看调用这个方法的语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ModelAndView modelAndView = resolve(String.valueOf(status.value()), model);</span><br></pre></td></tr></table></figure>\n\n<p>将Http状态码作为viewName穿了进去，并且在寻找视图时会默认加上.html的后缀，所以在出现404的时候会找到404.html页面，依次类推。</p>\n<p>而如果没有找到，则会来到下一条语句：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (modelAndView == <span class=\"literal\">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;</span><br><span class=\"line\">\tmodelAndView = resolve(SERIES_VIEWS.get(status.series()), model);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这条语句也是执行resolve方法，只是传入的viewName不一样，而SERIES_VIEWS.get(status.series())，追溯到最后就是</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Series <span class=\"title function_\">resolve</span><span class=\"params\">(<span class=\"type\">int</span> statusCode)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"variable\">seriesCode</span> <span class=\"operator\">=</span> statusCode / <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (Series series : values()) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (series.value == seriesCode) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> series;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Series是个枚举类型，这个枚举类型有以下字段：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFORMATIONAL(1),</span><br><span class=\"line\">SUCCESSFUL(2),</span><br><span class=\"line\">REDIRECTION(3),</span><br><span class=\"line\">CLIENT_ERROR(4),</span><br><span class=\"line\">SERVER_ERROR(5);</span><br></pre></td></tr></table></figure>\n\n<p>这些字段都是Series类型，对于的value值是括号里的值。</p>\n<p>所以这个方法的逻辑就是遍历这里所有的枚举类型，然后根据状态码/100判断是哪个series。也就是将状态码转换成2xx，3xx，4xx，5xx类型的格式，然后在template/error/目录下查找有无对于类型格式的html文件，例如404.html没有找到就会去找4xx.html文件</p>\n<h5 id=\"DefaultErrorAttributes\"><a href=\"#DefaultErrorAttributes\" class=\"headerlink\" title=\"DefaultErrorAttributes\"></a>DefaultErrorAttributes</h5><p>这个类中定义了返回值中需要包含的数据（需要包含在页面中，或者以JSON返回）：</p>\n<p>如果就相关信息就添加相关信息，如果没有相关信息就从返回参数中移除</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title function_\">getErrorAttributes</span><span class=\"params\">(WebRequest webRequest, ErrorAttributeOptions options)</span> &#123;</span><br><span class=\"line\">\tMap&lt;String, Object&gt; errorAttributes = getErrorAttributes(webRequest, options.isIncluded(Include.STACK_TRACE));</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (Boolean.TRUE.equals(<span class=\"built_in\">this</span>.includeException)) &#123;</span><br><span class=\"line\">\t\toptions = options.including(Include.EXCEPTION);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">       <span class=\"comment\">//异常信息</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!options.isIncluded(Include.EXCEPTION)) &#123;</span><br><span class=\"line\">\t\terrorAttributes.remove(<span class=\"string\">&quot;exception&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">       <span class=\"comment\">//调用路径</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!options.isIncluded(Include.STACK_TRACE)) &#123;</span><br><span class=\"line\">\t\terrorAttributes.remove(<span class=\"string\">&quot;trace&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">       <span class=\"comment\">//相关信息</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!options.isIncluded(Include.MESSAGE) &amp;&amp; errorAttributes.get(<span class=\"string\">&quot;message&quot;</span>) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\terrorAttributes.put(<span class=\"string\">&quot;message&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">       <span class=\"comment\">//错误</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!options.isIncluded(Include.BINDING_ERRORS)) &#123;</span><br><span class=\"line\">\t\terrorAttributes.remove(<span class=\"string\">&quot;errors&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> errorAttributes;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"meta\">@Deprecated</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title function_\">getErrorAttributes</span><span class=\"params\">(WebRequest webRequest, <span class=\"type\">boolean</span> includeStackTrace)</span> &#123;</span><br><span class=\"line\">\tMap&lt;String, Object&gt; errorAttributes = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedHashMap</span>&lt;&gt;();</span><br><span class=\"line\">       <span class=\"comment\">//时间戳</span></span><br><span class=\"line\">\terrorAttributes.put(<span class=\"string\">&quot;timestamp&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">\taddStatus(errorAttributes, webRequest);</span><br><span class=\"line\">\taddErrorDetails(errorAttributes, webRequest, includeStackTrace);</span><br><span class=\"line\">\taddPath(errorAttributes, webRequest);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> errorAttributes;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addStatus</span><span class=\"params\">(Map&lt;String, Object&gt; errorAttributes, RequestAttributes requestAttributes)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">Integer</span> <span class=\"variable\">status</span> <span class=\"operator\">=</span> getAttribute(requestAttributes, RequestDispatcher.ERROR_STATUS_CODE);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (status == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\terrorAttributes.put(<span class=\"string\">&quot;status&quot;</span>, <span class=\"number\">999</span>);</span><br><span class=\"line\">\t\terrorAttributes.put(<span class=\"string\">&quot;error&quot;</span>, <span class=\"string\">&quot;None&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">       <span class=\"comment\">//状态码</span></span><br><span class=\"line\">\terrorAttributes.put(<span class=\"string\">&quot;status&quot;</span>, status);</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\terrorAttributes.put(<span class=\"string\">&quot;error&quot;</span>, HttpStatus.valueOf(status).getReasonPhrase());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Unable to obtain a reason</span></span><br><span class=\"line\">\t\terrorAttributes.put(<span class=\"string\">&quot;error&quot;</span>, <span class=\"string\">&quot;Http Status &quot;</span> + status);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结</p>\n<p>BasicErrorController -》用于处理异常请求（/error），如果向定制化在发送错误时的响应则需要修改BasicErrorController 对象</p>\n<p>DefaultErrorViewResolver -》用于查找错误页，如果不想根据Spring的规则返回错误页面可以修改这个视图解析器</p>\n<p>DefaultErrorAttributes -》用于设置返回的参数，如果觉得返回的数据不够多，可以修改这个类，添加我们需要的参数（然后可以使用thymleaf定制我们想要的页面）</p>\n<p>（不过一般情况下用Spring默认的错误处理机制即可）</p>\n<h4 id=\"异常处理流程\"><a href=\"#异常处理流程\" class=\"headerlink\" title=\"异常处理流程\"></a>异常处理流程</h4><p>我们再回顾以下doDispatch方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doDispatch</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">\t<span class=\"type\">HttpServletRequest</span> <span class=\"variable\">processedRequest</span> <span class=\"operator\">=</span> request;</span><br><span class=\"line\">\t<span class=\"type\">HandlerExecutionChain</span> <span class=\"variable\">mappedHandler</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"variable\">multipartRequestParsed</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">WebAsyncManager</span> <span class=\"variable\">asyncManager</span> <span class=\"operator\">=</span> WebAsyncUtils.getAsyncManager(request);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">ModelAndView</span> <span class=\"variable\">mv</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">Exception</span> <span class=\"variable\">dispatchException</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tprocessedRequest = checkMultipart(request);</span><br><span class=\"line\">\t\t\tmultipartRequestParsed = (processedRequest != request);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Determine handler for the current request.</span></span><br><span class=\"line\">\t\t\tmappedHandler = getHandler(processedRequest);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (mappedHandler == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tnoHandlerFound(processedRequest, response);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Determine handler adapter for the current request.</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">HandlerAdapter</span> <span class=\"variable\">ha</span> <span class=\"operator\">=</span> getHandlerAdapter(mappedHandler.getHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Process last-modified header, if supported by the handler.</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">String</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> request.getMethod();</span><br><span class=\"line\">\t\t\t<span class=\"type\">boolean</span> <span class=\"variable\">isGet</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;GET&quot;</span>.equals(method);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isGet || <span class=\"string\">&quot;HEAD&quot;</span>.equals(method)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">long</span> <span class=\"variable\">lastModified</span> <span class=\"operator\">=</span> ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">new</span> <span class=\"title class_\">ServletWebRequest</span>(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Actually invoke the handler.</span></span><br><span class=\"line\">\t\t\tmv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tapplyDefaultViewName(processedRequest, mv);</span><br><span class=\"line\">\t\t\tmappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">\t\t\tdispatchException = ex;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (Throwable err) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// making them available for @ExceptionHandler methods and other scenarios.</span></span><br><span class=\"line\">\t\t\tdispatchException = <span class=\"keyword\">new</span> <span class=\"title class_\">NestedServletException</span>(<span class=\"string\">&quot;Handler dispatch failed&quot;</span>, err);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tprocessDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">\t\ttriggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Throwable err) &#123;</span><br><span class=\"line\">\t\ttriggerAfterCompletion(processedRequest, response, mappedHandler,</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">NestedServletException</span>(<span class=\"string\">&quot;Handler processing failed&quot;</span>, err));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Instead of postHandle and afterCompletion</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (mappedHandler != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tmappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Clean up any resources used by a multipart request.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (multipartRequestParsed) &#123;</span><br><span class=\"line\">\t\t\t\tcleanupMultipart(processedRequest);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>既然是异常处理，所以我们关心try catch语句块即可，我们之前所讲的内容都是在第一层try 块中，所有的请求流程，包括解析url，拦截器，执行具体的方法等等只要出现异常就会跳转到catch语句块中。</p>\n<p>所有的Exception和Error都会被记录在dispatchException中</p>\n<p>如果是handle方法中出现了异常，会被catch，将当前请求状态设置为结束，然后向外抛出</p>\n<p>执行请求以及处理完请求中的异常后会进入视图解析流程：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">processDispatchResult</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"meta\">@Nullable</span> HandlerExecutionChain mappedHandler, <span class=\"meta\">@Nullable</span> ModelAndView mv,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"meta\">@Nullable</span> Exception exception)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"variable\">errorView</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (exception != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (exception <span class=\"keyword\">instanceof</span> ModelAndViewDefiningException) &#123;</span><br><span class=\"line\">\t\t\tlogger.debug(<span class=\"string\">&quot;ModelAndViewDefiningException encountered&quot;</span>, exception);</span><br><span class=\"line\">\t\t\tmv = ((ModelAndViewDefiningException) exception).getModelAndView();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">Object</span> <span class=\"variable\">handler</span> <span class=\"operator\">=</span> (mappedHandler != <span class=\"literal\">null</span> ? mappedHandler.getHandler() : <span class=\"literal\">null</span>);</span><br><span class=\"line\">\t\t\tmv = processHandlerException(request, response, handler, exception);</span><br><span class=\"line\">\t\t\terrorView = (mv != <span class=\"literal\">null</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Did the handler return a view to render?</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (mv != <span class=\"literal\">null</span> &amp;&amp; !mv.wasCleared()) &#123;</span><br><span class=\"line\">\t\trender(mv, request, response);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (errorView) &#123;</span><br><span class=\"line\">\t\t\tWebUtils.clearErrorRequestAttributes(request);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.trace(<span class=\"string\">&quot;No view rendering, null ModelAndView returned.&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Concurrent handling started during a forward</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (mappedHandler != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Exception (if any) is already handled..</span></span><br><span class=\"line\">\t\tmappedHandler.triggerAfterCompletion(request, response, <span class=\"literal\">null</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中，如果在之前执行过程中出现了异常则会进入这个代码块，这个代码块中会获取错误页的ModelAndView数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (exception != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (exception <span class=\"keyword\">instanceof</span> ModelAndViewDefiningException) &#123;</span><br><span class=\"line\">\t\tlogger.debug(<span class=\"string\">&quot;ModelAndViewDefiningException encountered&quot;</span>, exception);</span><br><span class=\"line\">\t\tmv = ((ModelAndViewDefiningException) exception).getModelAndView();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Object</span> <span class=\"variable\">handler</span> <span class=\"operator\">=</span> (mappedHandler != <span class=\"literal\">null</span> ? mappedHandler.getHandler() : <span class=\"literal\">null</span>);</span><br><span class=\"line\">\t\tmv = processHandlerException(request, response, handler, exception);</span><br><span class=\"line\">\t\terrorView = (mv != <span class=\"literal\">null</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果不是ModelAndViewException则会执行mv = processHandlerException(request, response, handler, exception)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> ModelAndView <span class=\"title function_\">processHandlerException</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"meta\">@Nullable</span> Object handler, Exception ex)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Success and error responses may use different content types</span></span><br><span class=\"line\">\trequest.removeAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Check registered HandlerExceptionResolvers...</span></span><br><span class=\"line\">\t<span class=\"type\">ModelAndView</span> <span class=\"variable\">exMv</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.handlerExceptionResolvers != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (HandlerExceptionResolver resolver : <span class=\"built_in\">this</span>.handlerExceptionResolvers) &#123;</span><br><span class=\"line\">\t\t\texMv = resolver.resolveException(request, response, handler, ex);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (exMv != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (exMv != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (exMv.isEmpty()) &#123;</span><br><span class=\"line\">\t\t\trequest.setAttribute(EXCEPTION_ATTRIBUTE, ex);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// We might still need view name translation for a plain error model...</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!exMv.hasView()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">String</span> <span class=\"variable\">defaultViewName</span> <span class=\"operator\">=</span> getDefaultViewName(request);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (defaultViewName != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\texMv.setViewName(defaultViewName);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.trace(<span class=\"string\">&quot;Using resolved error view: &quot;</span> + exMv, ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.debug(<span class=\"string\">&quot;Using resolved error view: &quot;</span> + exMv);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tWebUtils.exposeErrorRequestAttributes(request, ex, getServletName());</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> exMv;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用HandlerExceptionResolver来处理异常，遍历容器中所有的异常解析器，解析拿到ModelAndView后就退出循环。默认情况下没有解析器能处理这个异常，所以会被抛出。</p>\n<p>然后就会doDispatch中，触发拦截器的后续的收尾方法后就结束了doDispatch方法，因而这个异常也就没有被处理，而如果异常没有被处理，会<strong>转发一个error请求</strong>（servlet规范规定的逻辑），然后会被自动配置类添加的<strong>BasicErrorController</strong>处理，而这个controller在处理异常的时候，会遍历所有的的ErrorViewResolver，尝试解析并拿到视图View，其中默认只有一个ErrorViewResolver（错误视图解析器）：DefaultErrorViewResolver ，在这个解析器中会根据Http状态码寻找HTML文件并返回。如果都没有找到就返回默认的空白异常界面。</p>\n<h4 id=\"定制化错误处理\"><a href=\"#定制化错误处理\" class=\"headerlink\" title=\"定制化错误处理\"></a>定制化错误处理</h4><h5 id=\"在error目录下定值我们想要的404-html或者5xx-html（像这种写法的html文件）\"><a href=\"#在error目录下定值我们想要的404-html或者5xx-html（像这种写法的html文件）\" class=\"headerlink\" title=\"在error目录下定值我们想要的404.html或者5xx.html（像这种写法的html文件）\"></a>在error目录下定值我们想要的404.html或者5xx.html（像这种写法的html文件）</h5><p>html文件中可以使用thymleaf语法使用返回的数据，显示在界面上</p>\n<h5 id=\"全局异常处理\"><a href=\"#全局异常处理\" class=\"headerlink\" title=\"全局异常处理\"></a>全局异常处理</h5><p>全局范围内的所有异常都可以集中起来一起处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@ControllerAdvice</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GlobalExceptionHandle</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler(ArithmeticException.class)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">mathExceptionHandle</span><span class=\"params\">(Exception e)</span>&#123;</span><br><span class=\"line\">        log.error(e.getMessage());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;error/4xx&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>@ControllerAdvice申明这是一个处理异常的类，这个注解内部包含@Component注解，会把这个类注册进Spring容器中</p>\n<p>@ExceptionHandler(ArithmeticException.class) 申明要捕获的异常，出现了异常后都会跳转到这里来处理</p>\n<p>返回类型是String类型，就会也就返回View对象的地址，也可以直接返回ModelAndView对象，这样既返回视图也返回了数据。</p>\n<p>如果加上了@ResponseBody则会返回JSON格式或者文本类型的数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@ControllerAdvice</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GlobalExceptionHandle</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler(ArithmeticException.class)</span></span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">mathExceptionHandle</span><span class=\"params\">(Exception e)</span>&#123;</span><br><span class=\"line\">        log.error(e.getMessage());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;error/4xx&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>返回值规则和普通的Controller一样，只是这个类是专门用于处理异常的</p>\n<p>原理如下：</p>\n<p>之前我们提到过在执行mv = processHandlerException(request, response, handler, exception)方法时会遍历Spring容器中的异常解析器，Spring容器中的异常解析器有以下三种</p>\n<p><img src=\"D:\\学习笔记\\picture\\029c7937f23ed1c8dc2a5a81e74565d8.png\" alt=\"image-20220507004852744\"></p>\n<p><strong>ExceptionHandlerExceptionResolver</strong>对应@ExceptionHandler(ArithmeticException.class)注解，在Spring启动时，会将括号中的class对象类型和方法建立映射关系并缓存起来。之前因为我们没有编写全局异常处理类，所以这里就没有解析器可以处理，而此时我们添加了对应的方法，并且出现了指定的异常，就可以用这个解析器执行我们设置的处理逻辑来处理这和异常</p>\n<p>如果想抛出一个自定义异常，可以使用@ResponseStatus注解来自定义异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@ResponseStatus(value = HttpStatus.FORBIDDEN,reason = &quot;用户太多&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ToManyUserException</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RuntimeException</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个异常中可以重新设置自己的状态码和错误提示信息，并放到请求域中</p>\n<p>使用这个注解后，在processHandlerException解析异常的时候，就可以使用<strong>ResponseStatusExceptionResolver</strong>这个解析器来处理这个异常，不过处理的时候并不会生产ModelAndView对象，而是调用response.sendError()方法向服务器发送一个Error，结束当前请求，然后按照Servlet的规则会转发一个/error请求，然后这个异常最后还是会根据状态码被错误页面处理，例如这里是403会返回4xx.html页面</p>\n<p>而对于框架内部产生的异常（每一种状态码都对应一种异常），则是由第三种异常解析器<strong>DefaultHandlerExceptionResolver</strong>来解析异常，这个解析器能解析的异常如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception</span><br><span class=\"line\">HTTP Status Code</span><br><span class=\"line\">HttpRequestMethodNotSupportedException</span><br><span class=\"line\">405 (SC_METHOD_NOT_ALLOWED)</span><br><span class=\"line\">HttpMediaTypeNotSupportedException</span><br><span class=\"line\">415 (SC_UNSUPPORTED_MEDIA_TYPE)</span><br><span class=\"line\">HttpMediaTypeNotAcceptableException</span><br><span class=\"line\">406 (SC_NOT_ACCEPTABLE)</span><br><span class=\"line\">MissingPathVariableException</span><br><span class=\"line\">500 (SC_INTERNAL_SERVER_ERROR)</span><br><span class=\"line\">MissingServletRequestParameterException</span><br><span class=\"line\">400 (SC_BAD_REQUEST)</span><br><span class=\"line\">ServletRequestBindingException</span><br><span class=\"line\">400 (SC_BAD_REQUEST)</span><br><span class=\"line\">ConversionNotSupportedException</span><br><span class=\"line\">500 (SC_INTERNAL_SERVER_ERROR)</span><br><span class=\"line\">TypeMismatchException</span><br><span class=\"line\">400 (SC_BAD_REQUEST)</span><br><span class=\"line\">HttpMessageNotReadableException</span><br><span class=\"line\">400 (SC_BAD_REQUEST)</span><br><span class=\"line\">HttpMessageNotWritableException</span><br><span class=\"line\">500 (SC_INTERNAL_SERVER_ERROR)</span><br><span class=\"line\">MethodArgumentNotValidException</span><br><span class=\"line\">400 (SC_BAD_REQUEST)</span><br><span class=\"line\">MissingServletRequestPartException</span><br><span class=\"line\">400 (SC_BAD_REQUEST)</span><br><span class=\"line\">BindException</span><br><span class=\"line\">400 (SC_BAD_REQUEST)</span><br><span class=\"line\">NoHandlerFoundException</span><br><span class=\"line\">404 (SC_NOT_FOUND)</span><br><span class=\"line\">AsyncRequestTimeoutException</span><br><span class=\"line\">503 (SC_SERVICE_UNAVAILABLE)</span><br></pre></td></tr></table></figure>\n\n<p>而处理这些异常的方法相同：</p>\n<p>都是直接向tomcat发送一个Error，表示结束当前请求，然后tomcat会再发送一个/error请求，然后被处理这个请求的controller捕获进行处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> ModelAndView <span class=\"title function_\">handleHttpMessageNotWritable</span><span class=\"params\">(HttpMessageNotWritableException ex,</span></span><br><span class=\"line\"><span class=\"params\">\t\tHttpServletRequest request, HttpServletResponse response, <span class=\"meta\">@Nullable</span> Object handler)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsendServerError(ex, request, response);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ModelAndView</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述三个解析器都实现了HandlerExceptionResolver接口，我们也可以实现这个接口定义我们想要的异常解析器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CustomerHandlerExceptionResolver</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HandlerExceptionResolver</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ModelAndView <span class=\"title function_\">resolveException</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            response.sendError(<span class=\"number\">505</span>,<span class=\"string\">&quot;我的错误&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ModelAndView</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样在解析错误的时候就会多出一种异常解析器，但是此时我们的异常解析器的优先级最低，Spring自带的解析器生效后就不会再去执行我们自定义的解析器。</p>\n<p>如果想要我们设置的异常解析器生效，可以加上@Order注解来设置组件的加载顺序</p>\n<p>比如这个注解可以设置最高优先级，其实就是一个INT数的最小值，value值越小，优先级越高，我们也可以直接填入一个数字来合理规划优先级顺序。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Order(value = Ordered.HIGHEST_PRECEDENCE)</span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<p>使用respond.sendError()方法或者出现了异常而Spring容器的异常解析器均无法处理，则Tomcat会转发一个/error请求，然后被basicController捕获，因而basicController可以处理所有的异常。</p>\n"},{"title":"Springboot(下篇)","date":"2022-11-30T11:00:46.000Z","_content":"# Springboot底层原理（2）\n\n[Spring Framework Documentation](https://docs.spring.io/spring-framework/docs/5.3.x/reference/html/)\n\n## 使用原生的Servlet\n\n### 使用注解声明为Servlet组件\n\n```java\n@WebServlet(\"/my\")\npublic class MyServlet extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        resp.getWriter().write(\"1212\");\n    }\n}\n```\n\n可以在Spring中使用原生的Servlet组件，重写里面的doGet，doPost等方法实现具体的逻辑，并加上@WebServlet(\"/my\")添加路由映射，但是只是这样还不能生效，因为它并不是Spring框架下的组件，所以需要在启动类上加上@ServletComponentScan(basePackages = \"com.demo\")设置包扫描路径，用于扫描原生的Servlet组件。\n\n```java\n@ServletComponentScan(basePackages = \"com.demo\")\n@SpringBootApplication\npublic class MydemoApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(MydemoApplication.class, args);\n    }\n}\n```\n\n因为不是Spring框架下的组件，所以Spring注册的拦截器不会生效，想要进行拦截需要使用Servlet组件中的拦截器：\n\n```java\n@WebFilter(urlPatterns = \"/*\")\n@Slf4j\npublic class MyFilter implements Filter {\n\n    //Spring容器启动的时候执行\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n        log.info(\"Filter init\");\n    }\n\t//如果路由和设置的路由匹配，则先执行这个过滤器，然后再执行具体的业务逻辑\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        log.info(\"do Filter\");\n    }\n\t//Spring容器销毁（也就是Servlet销毁时）执行的方法\n    @Override\n    public void destroy() {\n        log.info(\"destroy\");\n    }\n}\n```\n\n@WebFilter(urlPatterns = \"/*\") 注意路由的写法，Spring组件中的url是`/**` 而Servlet组件的写法是`/*`\n\n监听器：\n\n在项目初始化完成，开始监听之前可以执行contextInitialized方法，项目关闭的时候会执行contextDestroyed方法\n\n```java\n@WebListener\npublic class MyListener implements ServletContextListener {\n    @Override\n    public void contextDestroyed(ServletContextEvent sce) {\n        System.out.println(\"项目结束\");\n    }\n\n    @Override\n    public void contextInitialized(ServletContextEvent sce) {\n        System.out.println(\"检测到初始化完成\");\n    }\n}\n```\n\n![image-20220507193721185](pictures/4855e5cc40ab39b4cc76d71effdace90.png)\n\n### 向Spring容器中添加Servlet组件\n\n```java\n@Configuration\npublic class MyServletConfiger {\n    //注册Servlet\n    @Bean\n    public ServletRegistrationBean myRegistrationBean(){\n        return new ServletRegistrationBean(new MyServlet(),\"/my\",\"/my1\");\n    }\n    //注册过滤器\n    @Bean\n    public FilterRegistrationBean filterRegistrationBean(){\n        return new FilterRegistrationBean(new MyFilter(),myRegistrationBean());\n    }\n    //注册监听器\n    @Bean\n    public ServletListenerRegistrationBean listenerRegistrationBean(){\n        return new ServletListenerRegistrationBean(new MyListener());\n    }\n}\n```\n\n注册过滤器也可以使用：\n\n```java\n    @Bean\n    public FilterRegistrationBean filterRegistrationBean(){\n        FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean();\n        filterRegistrationBean.setFilter(new MyFilter());\n        filterRegistrationBean.setUrlPatterns(Arrays.asList(\"/*\",\"/css/*\"));\n        return filterRegistrationBean;\n    }\n```\n\n注意：\n\n这里的@Configuration注解不能将proxyBeanMethods 属性设置为 false，我们前面提到过，如果将这个属性设置为true，在调用里面带有@Bean的方法时，会在Spring容器中找有没有相同的bean，如果有就返回Spring容器中的bean，如果没有会创建一个bean。而设置为false后，会不会生产代理对象，因而会生成很多多余的bean。所以这里需要将proxyBeanMethods 设置为true，也就是它的默认值，来保证依赖的组件始终的单实例的。\n\n### 原生的Servlet的作用原理\n\n前面提到使用原生的Servlet不会触发Spring的拦截器，下面解释这个的原因。\n\nSpringboot Web处理请求的核心是DispatcherServlet类，而这个Servlet是在DispatcherServletAutoConfiguration这个自动配置类中注册进Spring容器中的。\n\n```java\n\t\t@Bean(name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)\n\t\tpublic DispatcherServlet dispatcherServlet(WebMvcProperties webMvcProperties) {\n\t\t\tDispatcherServlet dispatcherServlet = new DispatcherServlet();\n\t\t\tdispatcherServlet.setDispatchOptionsRequest(webMvcProperties.isDispatchOptionsRequest());\n\t\t\tdispatcherServlet.setDispatchTraceRequest(webMvcProperties.isDispatchTraceRequest());\n\t\t\tdispatcherServlet.setThrowExceptionIfNoHandlerFound(webMvcProperties.isThrowExceptionIfNoHandlerFound());\n\t\t\tdispatcherServlet.setPublishEvents(webMvcProperties.isPublishRequestHandledEvents());\n\t\t\tdispatcherServlet.setEnableLoggingRequestDetails(webMvcProperties.isLogRequestDetails());\n\t\t\treturn dispatcherServlet;\n\t\t}\n```\n\n之前介绍介绍的很多组件，比如各种解析器都是在这个类中注册进Spring容器中的\n\n其中的参数：WebMvcProperties webMvcProperties，对应配置文件中spring.mvc下的配置项\n\n```\n@ConfigurationProperties(prefix = \"spring.mvc\")\npublic class WebMvcProperties {\n```\n\n然后通过dispatcherServletRegistration这个方法将DispatcherServlet注册进Servlet框架中\n\n```java\n\t\t@Bean(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)\n\t\t@ConditionalOnBean(value = DispatcherServlet.class, name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)\n\t\tpublic DispatcherServletRegistrationBean dispatcherServletRegistration(DispatcherServlet dispatcherServlet,\n\t\t\t\tWebMvcProperties webMvcProperties, ObjectProvider<MultipartConfigElement> multipartConfig) {\n\t\t\tDispatcherServletRegistrationBean registration = new DispatcherServletRegistrationBean(dispatcherServlet,\n\t\t\t\t\twebMvcProperties.getServlet().getPath());\n\t\t\tregistration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);\n\t\t\tregistration.setLoadOnStartup(webMvcProperties.getServlet().getLoadOnStartup());\n\t\t\tmultipartConfig.ifAvailable(registration::setMultipartConfig);\n\t\t\treturn registration;\n\t\t}\n```\n\n既然是Servlet，就有需要由它来处理的URL\n\n```java\n\t\t\tDispatcherServletRegistrationBean registration = new DispatcherServletRegistrationBean(dispatcherServlet,\n\t\t\t\t\twebMvcProperties.getServlet().getPath());\n```\n\n通过这个方法向服务器中添加Servlet，而它的请求路径是webMvcProperties.getServlet().getPath())，而这个方法的 值就是我们配置的spring.mvc.servlet.path，这个值默认是`/`，也就默认情况下，所有请求都由dispatcherServlet来处理（也就是由Springboot的Web框架来处理）\n\n所以我们用Spring处理请求的时候，实际上用的是一个Servlet：DispatcherServlet，在这个Servlet中处理所有的请求。\n\ntomcat在一个请求有多个Servlet可以处理时，使用精确优先原则，它会在所有能处理的Servlet中，选择前缀匹配程度最长的Servlet进行处理。\n\n例如\n\n如果有两个Servlet，A对应路由`/my`，B对应路由`/my/1`，此时如果收到了`/my/1/2`的请求，则会交给B来处理，而如果收到`/my/2`的请求，则会由A来处理。\n\n我们自定义的原生Servlet组件和Spring的DispatcherServlet也是上述这种关系。DispatcherServlet默认处理的URL是`/`也就是所有的请求，而我们自定义的Servlet对应的URL是`/my/`，所以我们发送/my请求后，根据精确匹配原则会交付给我们自定义的MyServlet，由Tomcat直接来处理，而如果不是/my/开头的请求，就会和DispatcherServlet匹配，然后走Spring的流程后再交给Tomcat来处理。\n\n![image-20220507224859818](pictures/38456e2bfda4fea76779e78a77c816e1.png)\n\n所以我们发送的/my请求没有被Spring拦截的原因就是它是由我们定义的MyServlet处理的，而不是由Spring里的DispatcherServlet来处理，自然不会触发DispatcherServlet中定义的拦截器。\n\n## Spring嵌入式Servlet容器\n\n### 底层原理\n\nSpringboot如果发现当前是Web应用，就会自动导入Tomcat服务器所需的依赖，并且会创建一个Web类型的IOC容器ServletWebServerApplicationContext\n\nServletWebServerApplicationContext 启动的时候需要用到 ServletWebServerFactory 来创建服务器（Servlet 的web服务器工厂——>Servlet 的web服务器）。而SpringBoot底层默认有很多的WebServer工厂（ServletWebServerFactoryConfiguration内创建Bean），如：TomcatServletWebServerFactory，JettyServletWebServerFactory，UndertowServletWebServerFactory，对应三种不同的服务器（Tomcat，Jetty，Undertow）。这几个服务器工厂是在ServletWebServerFactoryAutoConfiguration这个自动配置类中放入Spring容器的，而这个自动配置需要使用使用ServletWebServerFactoryConfiguration这个配置类。\n\n```java\n@Configuration(proxyBeanMethods = false)\nclass ServletWebServerFactoryConfiguration {\n\n\t@Configuration(proxyBeanMethods = false)\n    //需要tomcat依赖才会放入TomcatServletWebServerFactory\n\t@ConditionalOnClass({ Servlet.class, Tomcat.class, UpgradeProtocol.class })\n\t@ConditionalOnMissingBean(value = ServletWebServerFactory.class, search = SearchStrategy.CURRENT)\n\tstatic class EmbeddedTomcat {\n\n\t\t@Bean\n\t\tTomcatServletWebServerFactory tomcatServletWebServerFactory(\n\t\t\t\tObjectProvider<TomcatConnectorCustomizer> connectorCustomizers,\n\t\t\t\tObjectProvider<TomcatContextCustomizer> contextCustomizers,\n\t\t\t\tObjectProvider<TomcatProtocolHandlerCustomizer<?>> protocolHandlerCustomizers) {\n\t\t\tTomcatServletWebServerFactory factory = new TomcatServletWebServerFactory();\n\t\t\tfactory.getTomcatConnectorCustomizers()\n\t\t\t\t\t.addAll(connectorCustomizers.orderedStream().collect(Collectors.toList()));\n\t\t\tfactory.getTomcatContextCustomizers()\n\t\t\t\t\t.addAll(contextCustomizers.orderedStream().collect(Collectors.toList()));\n\t\t\tfactory.getTomcatProtocolHandlerCustomizers()\n\t\t\t\t\t.addAll(protocolHandlerCustomizers.orderedStream().collect(Collectors.toList()));\n\t\t\treturn factory;\n\t\t}\n\n\t}\n\n\t/**\n\t * Nested configuration if Jetty is being used.\n\t */\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnClass({ Servlet.class, Server.class, Loader.class, WebAppContext.class })\n\t@ConditionalOnMissingBean(value = ServletWebServerFactory.class, search = SearchStrategy.CURRENT)\n\tstatic class EmbeddedJetty {\n\n\t\t@Bean\n\t\tJettyServletWebServerFactory JettyServletWebServerFactory(\n\t\t\t\tObjectProvider<JettyServerCustomizer> serverCustomizers) {\n\t\t\tJettyServletWebServerFactory factory = new JettyServletWebServerFactory();\n\t\t\tfactory.getServerCustomizers().addAll(serverCustomizers.orderedStream().collect(Collectors.toList()));\n\t\t\treturn factory;\n\t\t}\n\n\t}\n\n\t/**\n\t * Nested configuration if Undertow is being used.\n\t */\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnClass({ Servlet.class, Undertow.class, SslClientAuthMode.class })\n\t@ConditionalOnMissingBean(value = ServletWebServerFactory.class, search = SearchStrategy.CURRENT)\n\tstatic class EmbeddedUndertow {\n\n\t\t@Bean\n\t\tUndertowServletWebServerFactory undertowServletWebServerFactory(\n\t\t\t\tObjectProvider<UndertowDeploymentInfoCustomizer> deploymentInfoCustomizers,\n\t\t\t\tObjectProvider<UndertowBuilderCustomizer> builderCustomizers) {\n\t\t\tUndertowServletWebServerFactory factory = new UndertowServletWebServerFactory();\n\t\t\tfactory.getDeploymentInfoCustomizers()\n\t\t\t\t\t.addAll(deploymentInfoCustomizers.orderedStream().collect(Collectors.toList()));\n\t\t\tfactory.getBuilderCustomizers().addAll(builderCustomizers.orderedStream().collect(Collectors.toList()));\n\t\t\treturn factory;\n\t\t}\n\n\t\t@Bean\n\t\tUndertowServletWebServerFactoryCustomizer undertowServletWebServerFactoryCustomizer(\n\t\t\t\tServerProperties serverProperties) {\n\t\t\treturn new UndertowServletWebServerFactoryCustomizer(serverProperties);\n\t\t}\n\t}\n}\n```\n\n可以看到这个配置类用于向Spring容器中添加三种服务器工厂，利用条件装配判断放入哪些服务器工厂，只有在导入了所依赖的jar包后，相关的配置才能生效。\n\n```java\n//导入tomcat依赖才会放入TomcatServletWebServerFactory\n@ConditionalOnClass({ Servlet.class, Tomcat.class, UpgradeProtocol.class })\n//导入Jetty依赖才会引入JettyServletWebServerFactory\n@ConditionalOnClass({ Servlet.class, Server.class, Loader.class, WebAppContext.class })\n//导入Undertow的依赖才会放入UndertowServletWebServerFactory\n@ConditionalOnClass({ Servlet.class, Undertow.class, SslClientAuthMode.class })\n```\n\n而我们在pom文件导入的spring-boot-starter-web依赖会默认导入tomcat的依赖，所以默认会放入导入tomcat依赖才会放入TomcatServletWebServerFactory这个服务器工厂，得到Tomcat服务器\n\n```\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n```\n\n三种服务器工厂的都是ServletWebServerFactory的子类，在查找服务器工厂时会从Spring容器中拿到所有ServletWebServerFactory类型的bean，如果数量是0个或者多个都会抛出异常，因而Spring容器中只能有一个服务器工厂（默认是Tomcat）\n\n```java\n\tprotected ServletWebServerFactory getWebServerFactory() {\n\t\t// Use bean names so that we don't consider the hierarchy\n\t\tString[] beanNames = getBeanFactory().getBeanNamesForType(ServletWebServerFactory.class);\n\t\tif (beanNames.length == 0) {\n\t\t\tthrow new ApplicationContextException(\"Unable to start ServletWebServerApplicationContext due to missing \"\n\t\t\t\t\t+ \"ServletWebServerFactory bean.\");\n\t\t}\n\t\tif (beanNames.length > 1) {\n\t\t\tthrow new ApplicationContextException(\"Unable to start ServletWebServerApplicationContext due to multiple \"\n\t\t\t\t\t+ \"ServletWebServerFactory beans : \" + StringUtils.arrayToCommaDelimitedString(beanNames));\n\t\t}\n\t\treturn getBeanFactory().getBean(beanNames[0], ServletWebServerFactory.class);\n\t}\n```\n\nSpring容器启动的时候会调用ServletWebServerApplicationContext类的onRefresh方法\n\n```java\n\t@Override\n\tprotected void onRefresh() {\n\t\tsuper.onRefresh();\n\t\ttry {\n\t\t\tcreateWebServer();\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\tthrow new ApplicationContextException(\"Unable to start web server\", ex);\n\t\t}\n\t}\n```\n\n在这个方法中调用createWebServer()方法创建服务器\n\n```java\n\tprivate void createWebServer() {\n\t\tWebServer webServer = this.webServer;\n        //尝试获取IOC容器，默认是空\n\t\tServletContext servletContext = getServletContext();\n\t\tif (webServer == null && servletContext == null) {\n            //从Spring容器中获取服务器工厂，如果有0个或者多个会抛出异常，默认是Tomcat\n\t\t\tServletWebServerFactory factory = getWebServerFactory();\n            //使用服务器工厂创建服务器\n\t\t\tthis.webServer = factory.getWebServer(getSelfInitializer());\n\t\t\tgetBeanFactory().registerSingleton(\"webServerGracefulShutdown\",\n\t\t\t\t\tnew WebServerGracefulShutdownLifecycle(this.webServer));\n\t\t\tgetBeanFactory().registerSingleton(\"webServerStartStop\",\n\t\t\t\t\tnew WebServerStartStopLifecycle(this, this.webServer));\n\t\t}\n\t\telse if (servletContext != null) {\n\t\t\ttry {\n\t\t\t\tgetSelfInitializer().onStartup(servletContext);\n\t\t\t}\n\t\t\tcatch (ServletException ex) {\n\t\t\t\tthrow new ApplicationContextException(\"Cannot initialize servlet context\", ex);\n\t\t\t}\n\t\t}\n\t\tinitPropertySources();\n\t}\n```\n\n创建服务器的方法getWebServer：\n\n```java\n@Override\npublic WebServer getWebServer(ServletContextInitializer... initializers) {\n   if (this.disableMBeanRegistry) {\n      Registry.disableRegistry();\n   }\n   //获取一个tomcat服务器对象\n   Tomcat tomcat = new Tomcat();\n   //下面是配置tomcat的一些参数\n   File baseDir = (this.baseDirectory != null) ? this.baseDirectory : createTempDir(\"tomcat\");\n   tomcat.setBaseDir(baseDir.getAbsolutePath());\n   Connector connector = new Connector(this.protocol);\n   connector.setThrowOnFailure(true);\n   tomcat.getService().addConnector(connector);\n   customizeConnector(connector);\n   tomcat.setConnector(connector);\n   tomcat.getHost().setAutoDeploy(false);\n   configureEngine(tomcat.getEngine());\n   for (Connector additionalConnector : this.additionalTomcatConnectors) {\n      tomcat.getService().addConnector(additionalConnector);\n   }\n   prepareContext(tomcat.getHost(), initializers);\n   return getTomcatWebServer(tomcat);\n}\n```\n\n所以实际上内嵌服务器就是调用封装好的服务器对象，以前启动Tomcat服务器的时候，是以服务器为顶层调用SpringMVC的逻辑，而在调用之前也会设置这些参数。而Springboot内嵌的Tomcat服务器则是以Springboot为顶层，调用Tomcat对象。如下图所示，tomcat对象中有main方法可以直接运行。\n\n![image-20220508004519983](pictures/7586ecf7941b2ea8d5e4867c9eeb1414.png)\n\n通过tomcat服务器对象会得到一个WebServer对象来操作Tomcat服务器\n\n```java\npublic interface WebServer {\n\t//启动服务器\n\tvoid start() throws WebServerException;\n\t//关闭服务器\n\tvoid stop() throws WebServerException;\n\t//获得监听的端口\n\tint getPort();\n\n\tdefault void shutDownGracefully(GracefulShutdownCallback callback) {\n\t\tcallback.shutdownComplete(GracefulShutdownResult.IMMEDIATE);\n\t}\n\n}\n```\n\n创建TomcatWebServer时，会在构造器中调用initialize()方法，这个方法中会调用this.tomcat.start()来启动服务器\n\n```java\n\tpublic TomcatWebServer(Tomcat tomcat, boolean autoStart, Shutdown shutdown) {\n\t\tAssert.notNull(tomcat, \"Tomcat Server must not be null\");\n\t\tthis.tomcat = tomcat;\n\t\tthis.autoStart = autoStart;\n\t\tthis.gracefulShutdown = (shutdown == Shutdown.GRACEFUL) ? new GracefulShutdown(tomcat) : null;\n\t\tinitialize();\n\t}\n```\n\n### 切换服务器（一般使用Tomcat即可）\n\n如果想要切换服务器的类型，我们只需要将tomcat服务器的依赖排除，然后导入我们需要的服务器的依赖即可，然后根据上面所说的自动装配原理就会自动帮我们向Spring容器中添加对应的服务器工厂。\n\n```xml\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n            <!-- 排除tomcat依赖 -->\n            <exclusions>\n                <exclusion>\n                    <groupId>org.springframework.boot</groupId>\n                    <artifactId>spring-boot-starter-tomcat</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n\t\t<!-- 引入undertow依赖 -->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-undertow</artifactId>\n        </dependency>\n```\n\n根据我们之前的分析，Spring容器中只能有一个服务器工厂，所以需要排除tomcat依赖，防止Spring将tomcat的服务器工厂注册进Spring容器中\n\n### 定制服务器\n\n1.修改配置文件\n\n```java\n@Configuration(proxyBeanMethods = false)\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)\n@ConditionalOnClass(ServletRequest.class)\n@ConditionalOnWebApplication(type = Type.SERVLET)\n@EnableConfigurationProperties(ServerProperties.class)\n@Import({ ServletWebServerFactoryAutoConfiguration.BeanPostProcessorsRegistrar.class,\n\t\tServletWebServerFactoryConfiguration.EmbeddedTomcat.class,\n\t\tServletWebServerFactoryConfiguration.EmbeddedJetty.class,\n\t\tServletWebServerFactoryConfiguration.EmbeddedUndertow.class })\npublic class ServletWebServerFactoryAutoConfiguration\n```\n\nServletWebServerFactoryAutoConfiguration这个自动配置类需要使用ServerProperties这个类\n\n```\n@ConfigurationProperties(prefix = \"server\", ignoreUnknownFields = true)\npublic class ServerProperties \n```\n\n这个类和以server开头的配置项绑定在一起，所以配置项在server开头的配置项下\n\n2.直接向Spring容器中添加一个我们定制的服务器工厂\n\n3.可以实现一个定制化器：\n\n```java\nimport org.springframework.boot.web.server.WebServerFactoryCustomizer;\nimport org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class CustomizationBean implements WebServerFactoryCustomizer<ConfigurableServletWebServerFactory> {\n\n    @Override\n    public void customize(ConfigurableServletWebServerFactory server) {\n        server.setPort(9000);\n    }\n}\n```\n\n### 定制化原理\n\n根据前面的总结，我们可以得到Spring配置的原理\n\n导入场景的starter包-->相关的AutoConfigration自动配置生效-->自动配置类会引入对应的Properties配置类-->配置类会绑定配置文件的参数\n\n所以一般情况下，我们想要修改Springbooot的功能只需要导入对应场景的包，然后修改配置文件即可\n\n总结起来，常用的定制化方式有：\n\n1.修改配置文件\n\n2.@Confugration+@Bean注解根据Springboot的执行逻辑添加组件\n\n3.xxxCustomizer\n\n4.高级配置：修改Springboot的底层组件，比如RequestMappingHandlerMapping，可以通过以下方式来实现\n\n```java\n    @Bean\n    public WebMvcRegistrations registrations(){\n        return new WebMvcRegistrations() {\n            @Override\n            public RequestMappingHandlerMapping getRequestMappingHandlerMapping() {\n                return WebMvcRegistrations.super.getRequestMappingHandlerMapping();\n            }\n        };\n    }\n```\n\n5.高级配置：全面接管SpringMVC：@EnableWebMvc+WebMvcConfigurer,加上这个注解后，Springboot一些相关的自动配置就会失效，需要我们进行手动配置。\n\n如果我们不加@EnableWebMvc这个注解，则会在原先配置的基础上添加（修改）成我们需要的配置，如果我们注册了多个WebMvcConfigurer类型的组件，Springboot会让所有的WebMvcConfigurer生效，这个过程发生在DelegatingWebMvcConfiguration类中：\n\n```java\n\t@Autowired(required = false)\n\tpublic void setConfigurers(List<WebMvcConfigurer> configurers) {\n\t\tif (!CollectionUtils.isEmpty(configurers)) {\n\t\t\tthis.configurers.addWebMvcConfigurers(configurers);\n\t\t}\n\t}\n```\n\nTips：@Autowired作用在普通方法上，会在注入的时候调用一次该方法，如果方法中有实体参数，会对方法里面的参数进行装配，并调用一次该方法。这个可以用来在自动注入的时候做一些初始化操作。\n\nDelegatingWebMvcConfiguration这个类保证了SpringMVC最基本的使用（即使我们进行了全面接管，但是一些底层的一定要有的组件还是会放入Spring容器）\n\n```java\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnWebApplication(type = Type.SERVLET)\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class })\n@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)\n@AutoConfigureAfter({ DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,\n\t\tValidationAutoConfiguration.class })\npublic class WebMvcAutoConfiguration {\n```\n\nSpringMVC的自动装配原理集中在WebMvcAutoConfiguration这个配置类中，而这个配置类生效的条件之一是@ConditionalOnMissingBean(WebMvcConfigurationSupport.class) 也就是Spring容器中不能有WebMvcConfigurationSupport类型的组件，否则自动配置就不会生效。\n\n而@EnableWebMvc注解的定义如下：\n\n```java\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\n@Documented\n@Import(DelegatingWebMvcConfiguration.class)\npublic @interface EnableWebMvc {\n}\n```\n\n因而加上这个注解后会自动帮我们导入DelegatingWebMvcConfiguration这个类的一个组件，而这个类是WebMvcConfigurationSupport这个类的子类，所以会导致自动配置类失效（也同时提醒我们不要往Spring容器中添加功能时不要继承WebMvcConfigurationSupport，而应该用WebMvcConfigurer），所以DelegatingWebMvcConfiguration在WebMvcAutoConfiguration生效前，默认是不在Spring容器中的，会在我们全面接管SpringMvc的时候提供一些基础的功能，而在WebMvcAutoConfiguration里面继承了DelegatingWebMvcConfiguration实现了更多的功能，并保留了让所有WebMvcConfigurer生效的方法，所以无论是全面接管SpringMVC还是使用默认配置，容器启动的时候会让所有的WebMvcConfigurer生效\n\n```\n@Configuration(proxyBeanMethods = false)\n\tpublic static class EnableWebMvcConfiguration extends DelegatingWebMvcConfiguration implements ResourceLoaderAware {\n```\n\n## 数据操作\n\n### 依赖引入\n\n使用jdbc操作数据库：\n\n```xml\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-jdbc</artifactId>\n        </dependency>\n```\n\n![image-20220508140938283](pictures/9d915490f9a0ab4ef17c92d2c88236bc.png)\n\nspring-boot-starter-data-jdbc中为我们整合了数据库连接池，jdbc编程和数据库事务，但是没有数据库连接驱动，这是因为Spring并不知道我们要使用哪种数据库，因而只导入了通用的依赖\n\n引入连接器依赖：\n\n```xml\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>8.0.11</version>\n        </dependency>\n```\n\nSpring会帮我们进行版本仲裁，但是默认的版本是最新的数据库的版本，也就是8.0以上的版本。实际上这里的数据库连接器的配置应当与本地数据库的版本相匹配，如果本地数据库是5.x的数据库就不要用8.0.x的连接器，而应该用5.x的连接器\n\n修改版本方法：\n\n1.直接引入具体版本（maven的就近依赖原则，优先使用我们设置的版本）\n\n2.修改properties，也就修改了Spring默认配置的数据库版本（属性就近优先原则，优先使用我们配置的属性）\n\n```xml\n    <properties>\n        <java.version>1.8</java.version>\n        <mysql.version>8.0.11</mysql.version>\n    </properties>\n```\n\n### 自动配置\n\n#### DataSourceAutoConfiguration\n\n自动配置数据源和连接池（默认使用HikariDataSource连接池）\n\n```java\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass({ DataSource.class, EmbeddedDatabaseType.class })\n@ConditionalOnMissingBean(type = \"io.r2dbc.spi.ConnectionFactory\")\n@EnableConfigurationProperties(DataSourceProperties.class)\n@Import({ DataSourcePoolMetadataProvidersConfiguration.class, DataSourceInitializationConfiguration.class })\npublic class DataSourceAutoConfiguration {\n```\n\n`@ConditionalOnMissingBean(type = \"io.r2dbc.spi.ConnectionFactory\")` 如果没有使用响应式编程框架则自动配置这个类\n\n`@EnableConfigurationProperties(DataSourceProperties.class)`绑定配置类DataSourceProperties\n\nDataSourceProperties绑定的配置为：spring.datasource下的所有配置\n\n例如数据库的账号，密码，URL等信息都会绑定到这个配置类中\n\n```\n@ConfigurationProperties(prefix = \"spring.datasource\")\npublic class DataSourceProperties implements BeanClassLoaderAware, InitializingBean {\n```\n\n如果我们没有配置数据库连接池，Spring会帮我们配置一个数据库连接池：\n\n```java\n\t@Configuration(proxyBeanMethods = false)\n\t@Conditional(PooledDataSourceCondition.class)\n\t//如果没有配置数据库连接池，这个类才会生效\n\t@ConditionalOnMissingBean({ DataSource.class, XADataSource.class })\n\t//引入数据库连接池相关的依赖\n\t@Import({ DataSourceConfiguration.Hikari.class, DataSourceConfiguration.Tomcat.class,\n\t\t\tDataSourceConfiguration.Dbcp2.class, DataSourceConfiguration.Generic.class,\n\t\t\tDataSourceJmxConfiguration.class })\n\tprotected static class PooledDataSourceConfiguration {\n\n\t}\n```\n\n而数据库连接池是如何创建的，我们可以来到DataSourceConfiguration配置类：\n\n在有相关的依赖的时候这个类才会生效，然后才会创建HikariDataSource的数据源（其他的还有Tomcat数据源等，但是默认是HikariDataSource数据源）\n\n```java\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnClass(HikariDataSource.class)\n\t@ConditionalOnMissingBean(DataSource.class)\n\t@ConditionalOnProperty(name = \"spring.datasource.type\", havingValue = \"com.zaxxer.hikari.HikariDataSource\",\n\t\t\tmatchIfMissing = true)\n\tstatic class Hikari {\n\n\t\t@Bean\n\t\t@ConfigurationProperties(prefix = \"spring.datasource.hikari\")\n\t\tHikariDataSource dataSource(DataSourceProperties properties) {\n\t\t\tHikariDataSource dataSource = createDataSource(properties, HikariDataSource.class);\n\t\t\tif (StringUtils.hasText(properties.getName())) {\n\t\t\t\tdataSource.setPoolName(properties.getName());\n\t\t\t}\n\t\t\treturn dataSource;\n\t\t}\n\n\t}\n```\n\n数据源配置（Mysql8.0以上）：\n\n```yml\nspring:\n  datasource:\n    name: document\n    url: jdbc:mysql://localhost:3306/document?characterEncoding=utf8&useSSL=false&serverTimezone=UTC&rewriteBatchedStatements=true&useJDBCCompliantTimezoneShift=true\n    username: root\n    password: 123456\n    driver-class-name: com.mysql.cj.jdbc.Driver\n#    type: com.zaxxer.hikari.HikariDataSource #默认是HikariDataSource数据库连接池\n```\n\n数据源配置（Mysql5.x）：\n\n```yml\nspring:\n  datasource:\n    url: jdbc:mysql://localhost:3306/document\n    username: root\n    password: 123456\n    driver-class-name: com.mysql.jdbc.Driver\n```\n\n#### DataSourceTransactionManagerAutoConfiguration\n\n事务管理器自动配置\n\n#### JdbcTemplateAutoConfiguration\n\n自动配置JdbcTemplate，可以用于增删改查\n\n```java\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass({ DataSource.class, JdbcTemplate.class })\n@ConditionalOnSingleCandidate(DataSource.class)\n@AutoConfigureAfter(DataSourceAutoConfiguration.class)\n@EnableConfigurationProperties(JdbcProperties.class)\n@Import({ JdbcTemplateConfiguration.class, NamedParameterJdbcTemplateConfiguration.class })\npublic class JdbcTemplateAutoConfiguration {\n\n}\n```\n\n其中@EnableConfigurationProperties(JdbcProperties.class)代表与JdbcProperties类绑定，而这个类与@ConfigurationProperties(prefix = \"spring.jdbc\")绑定，也就是可以通过修改spring.jdbc下面的配置来配置JdbcTemplate的功能\n\n```yml\nspring:\n  jdbc:\n    template:\n      query-timeout: 3\n```\n\n#### 扩展\n\nJndiDataSourceAutoConfiguration\n\nJDNI自动配置\n\nXADataSourceAutoConfiguration\n\n分布式事务自动配置\n\n### 整合Druid数据源\n\nHikariDataSource是目前市面上性能最好的数据源，而Druid对性能监控，防止sql注入攻击有整套的解决方案\n\n```java\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>druid</artifactId>\n            <version>1.1.17</version>\n        </dependency>\n```\n\n配置HikariDataSource的代码块：\n\n```java\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnClass(HikariDataSource.class)\n\t@ConditionalOnMissingBean(DataSource.class)\n\t@ConditionalOnProperty(name = \"spring.datasource.type\", havingValue = \"com.zaxxer.hikari.HikariDataSource\",\n\t\t\tmatchIfMissing = true)\n\tstatic class Hikari {\n\n\t\t@Bean\n\t\t@ConfigurationProperties(prefix = \"spring.datasource.hikari\")\n\t\tHikariDataSource dataSource(DataSourceProperties properties) {\n\t\t\tHikariDataSource dataSource = createDataSource(properties, HikariDataSource.class);\n\t\t\tif (StringUtils.hasText(properties.getName())) {\n\t\t\t\tdataSource.setPoolName(properties.getName());\n\t\t\t}\n\t\t\treturn dataSource;\n\t\t}\n\n\t}\n```\n\n@ConditionalOnMissingBean(DataSource.class)表示如果Spring容器中没有DataSource数据源来回帮我们配置HikariDataSource数据源，如果我们配置了DataSource就用我们自己的数据源。向Spring容器添加我们自己的数据源即可。\n\n方式一：用户名密码直接在配置类中设置用户名密码\n\n```java\n@Configuration\npublic class DataSourceConfig {\n    @Bean\n    DataSource druidDataSource(){\n        DruidDataSource druidDataSource=new DruidDataSource();\n        druidDataSource.setUrl();\n        druidDataSource.setUsername();\n        druidDataSource.setPassword();\n        return druidDataSource;\n    }\n}\n```\n\n但是这样不方便修改，所以我们可以使用配置文件中配置的参数\n\n```java\n@Configuration\npublic class DataSourceConfig {\n    @Bean\n    @ConfigurationProperties(\"spring.datasource\")\n    DataSource druidDataSource(){\n        DruidDataSource druidDataSource=new DruidDataSource();\n        return druidDataSource;\n    }\n}\n```\n\n@ConfigurationProperties(\"spring.datasource\") 这个注解我们在研究源码的时候看了很多回了，用于将返回值中对应的名称的参数和配置文件中对应的名称的参数绑定在一起。\n\nTips：Spring中的测试环节可以直接在Test目录下进行，这样就不用使用postman发请求了\n\n```java\n@SpringBootTest\nclass MydemoApplicationTests {\n\n    @Resource\n    JdbcTemplate jdbcTemplate;\n    @Test\n    void contextLoads() {\n        List<Usert> userts = jdbcTemplate.query(\"select * from usert\",new BeanPropertyRowMapper<>(Usert.class));\n        userts.forEach((System.out::println));\n    }\n\n}\n```\n\n### Druid数据监控\n\n#### 监控SQL\n\n整合Druid数据源后，我们就可以通过配置Druid监控页来监控数据库的状态\n\n想要达成监控功能就需要配置一个给Druid使用的Servlet\n\n```java\n    @Bean\n    public ServletRegistrationBean servletRegistrationBean(){\n        return new ServletRegistrationBean<>(new StatViewServlet(),\"/druid/*\");\n    }\n```\n\n这样/druid/*的请求就会交给Druid中的StatViewServlet来处理，而不会走Spring的流程，如下图所示，获得成功\n\n![image-20220508171446887](pictures/22fcaaf1be52e5d0800f4db8995570bf.png)\n\n但是这样只能显示界面，要统计SQL语句执行的各种信息还需要在配置数据源时加上druidDataSource.setFilters(\"stat\");\n\n```java\n    @SneakyThrows\n    @Bean\n    @ConfigurationProperties(\"spring.datasource\")\n    DataSource druidDataSource(){\n        DruidDataSource druidDataSource=new DruidDataSource();\n        druidDataSource.setFilters(\"stat\");\n        return druidDataSource;\n    }\n```\n\n#### 监控请求\n\n配置这个后监控页的URI请求就有数据来源\n\n```java\n    @Bean\n    public FilterRegistrationBean webStatFilter(){\n        WebStatFilter webStatFilter = new WebStatFilter();\n\n        FilterRegistrationBean<WebStatFilter> filterRegistrationBean = new FilterRegistrationBean<>(webStatFilter);\n        filterRegistrationBean.setUrlPatterns(Arrays.asList(\"/*\"));\n        filterRegistrationBean.addInitParameter(\"exclusions\",\"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*\");\n\n        return filterRegistrationBean;\n    }\n```\n\n![image-20220508175213844](pictures/3be6aa060673577be3bf992760f16089.png)\n\n![image-20220508211828211](pictures/65a129f1a71eac87e2c80c5fce3facc1.png)\n\n#### 开启防火墙\n\n```java\n    @SneakyThrows\n    @Bean\n    @ConfigurationProperties(\"spring.datasource\")\n    DataSource druidDataSource(){\n        DruidDataSource druidDataSource=new DruidDataSource();\n        druidDataSource.setFilters(\"stat,wall\");\n        return druidDataSource;\n    }\n```\n\n而我们上面也用到过，在@ConfigurationProperties(\"spring.datasource\")注解下的方法中，使用set方法配置的属性，在配置文件中配置同样有效：\n\n```yml\n  datasource:\n    name: document\n    url: jdbc:mysql://localhost:3306/document?characterEncoding=utf8&useSSL=false&serverTimezone=UTC&rewriteBatchedStatements=true&useJDBCCompliantTimezoneShift=true\n    username: root\n    password: 123456\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    Filters: stat,wall\n```\n\nstat代表状态监控\n\nwall代表防火墙\n\n不过Filters会变黄，因为这个并不是Spring的配置\n\nXML配置->配置类配置：看到bean标签就向Spring容器中通过@Bean注解添加一个bean，下面的其他标签就只是它的属性值\n\nhttps://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatViewServlet%E9%85%8D%E7%BD%AE\n\n#### 设置访问的账号和密码\n\n```java\n    @Bean\n\t//用于设置监控页的访问路径\n    public ServletRegistrationBean servletRegistrationBean(){\n        ServletRegistrationBean<StatViewServlet> registrationBean = new ServletRegistrationBean<>(new StatViewServlet(), \"/druid/*\");\n        //监控页账号密码：\n        registrationBean.addInitParameter(\"loginUsername\",\"admin\");\n        registrationBean.addInitParameter(\"loginPassword\",\"123456\");\n        return registrationBean;\n    }\n```\n\n完整配置：\n\n```java\npackage com.demo.config;\n\nimport com.alibaba.druid.pool.DruidDataSource;\nimport com.alibaba.druid.support.http.StatViewServlet;\nimport com.alibaba.druid.support.http.WebStatFilter;\nimport lombok.SneakyThrows;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.web.servlet.FilterRegistrationBean;\nimport org.springframework.boot.web.servlet.ServletRegistrationBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport javax.sql.DataSource;\nimport java.util.Arrays;\n\n/**\n * @author 李天航\n */\n@Configuration\npublic class DataSourceConfig {\n    @SneakyThrows\n    @Bean\n    @ConfigurationProperties(\"spring.datasource\")\n    DataSource druidDataSource(){\n        DruidDataSource druidDataSource=new DruidDataSource();\n        druidDataSource.setFilters(\"stat,wall\");\n        return druidDataSource;\n    }\n\n    @Bean\n    public ServletRegistrationBean servletRegistrationBean(){\n        ServletRegistrationBean<StatViewServlet> registrationBean = new ServletRegistrationBean<>(new StatViewServlet(), \"/druid/*\");\n        //监控页账号密码：\n        registrationBean.addInitParameter(\"loginUsername\",\"admin\");\n        registrationBean.addInitParameter(\"loginPassword\",\"123456\");\n        return registrationBean;\n    }\n\n    @Bean\n    public FilterRegistrationBean webStatFilter(){\n        WebStatFilter webStatFilter = new WebStatFilter();\n\n        FilterRegistrationBean<WebStatFilter> filterRegistrationBean = new FilterRegistrationBean<>(webStatFilter);\n        filterRegistrationBean.setUrlPatterns(Arrays.asList(\"/*\"));\n        filterRegistrationBean.addInitParameter(\"exclusions\",\"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*\");\n\n        return filterRegistrationBean;\n    }\n}\n```\n\n\n\n### Druid Starter配置连接池\n\n上述的配置过程显得过去麻烦了，如果有一个自动配置类能像其他组件一样自动帮我们把上述组件配置好，然后用一个配置类绑定配置文件，然后我们直接修改配置文件就会方便很多，这个starter就是druid-spring-boot-starter\n\n```xml\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>druid-spring-boot-starter</artifactId>\n            <version>1.1.17</version>\n        </dependency>\n```\n\n我们来看一下starter源码：\n\n```java\n@Configuration\n//必须导入DruidDataSource的依赖\n@ConditionalOnClass(DruidDataSource.class)\n//必须在DataSourceAutoConfiguration之前配置\n@AutoConfigureBefore(DataSourceAutoConfiguration.class)\n@EnableConfigurationProperties({DruidStatProperties.class, DataSourceProperties.class})\n//引入下面四种依赖\n@Import({DruidSpringAopConfiguration.class,\n    DruidStatViewServletConfiguration.class,\n    DruidWebStatFilterConfiguration.class,\n    DruidFilterConfiguration.class})\npublic class DruidDataSourceAutoConfigure {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(DruidDataSourceAutoConfigure.class);\n\n    @Bean(initMethod = \"init\")\n    @ConditionalOnMissingBean\n    public DataSource dataSource() {\n        LOGGER.info(\"Init DruidDataSource\");\n        return new DruidDataSourceWrapper();\n    }\n}\n```\n\n我们可以看到注解@AutoConfigureBefore(DataSourceAutoConfiguration.class) ，申明了要在DataSourceAutoConfiguration这个配置类生效之前，让当前这个配置类生效（因为如果DataSourceAutoConfiguration先生效就会像Spring容器放入HikariDataSource），这样我们想要的DruidDataSource就不会被放进去，所以必须要在DataSourceAutoConfiguration之前装配DruidDataSource）\n\n其中引入了四种依赖：\n\nDruidSpringAopConfiguration.class\t用于监控各种指标\n\n对应的配置项是spring.datasource.druid.aop-patterns\n\nDruidStatViewServletConfiguration.class\n\n这个类用于向Spring中注册一个用于监控的Servlet，用于开启监控页（和我们前面自己的配置的大致一样，只是这里配置的参数更详细一些）\n\n对应的配置项是spring.datasource.druid.stat-view-servlet\n\n```java\n@ConditionalOnWebApplication\n@ConditionalOnProperty(name = \"spring.datasource.druid.stat-view-servlet.enabled\", havingValue = \"true\")\npublic class DruidStatViewServletConfiguration {\n    private static final String DEFAULT_ALLOW_IP = \"127.0.0.1\";\n\n    @Bean\n    public ServletRegistrationBean statViewServletRegistrationBean(DruidStatProperties properties) {\n        DruidStatProperties.StatViewServlet config = properties.getStatViewServlet();\n        ServletRegistrationBean registrationBean = new ServletRegistrationBean();\n        registrationBean.setServlet(new StatViewServlet());\n        registrationBean.addUrlMappings(config.getUrlPattern() != null ? config.getUrlPattern() : \"/druid/*\");\n        if (config.getAllow() != null) {\n            registrationBean.addInitParameter(\"allow\", config.getAllow());\n        } else {\n            registrationBean.addInitParameter(\"allow\", DEFAULT_ALLOW_IP);\n        }\n        if (config.getDeny() != null) {\n            registrationBean.addInitParameter(\"deny\", config.getDeny());\n        }\n        if (config.getLoginUsername() != null) {\n            registrationBean.addInitParameter(\"loginUsername\", config.getLoginUsername());\n        }\n        if (config.getLoginPassword() != null) {\n            registrationBean.addInitParameter(\"loginPassword\", config.getLoginPassword());\n        }\n        if (config.getResetEnable() != null) {\n            registrationBean.addInitParameter(\"resetEnable\", config.getResetEnable());\n        }\n        return registrationBean;\n    }\n}\n```\n\nDruidWebStatFilterConfiguration.class\n\n这个类用于开启过滤器，统计各种请求的数据，这也是监控页的数据来源\n\n```java\n@ConditionalOnWebApplication\n@ConditionalOnProperty(name = \"spring.datasource.druid.web-stat-filter.enabled\", havingValue = \"true\")\npublic class DruidWebStatFilterConfiguration {\n    @Bean\n    public FilterRegistrationBean webStatFilterRegistrationBean(DruidStatProperties properties) {\n        DruidStatProperties.WebStatFilter config = properties.getWebStatFilter();\n        FilterRegistrationBean registrationBean = new FilterRegistrationBean();\n        WebStatFilter filter = new WebStatFilter();\n        registrationBean.setFilter(filter);\n        registrationBean.addUrlPatterns(config.getUrlPattern() != null ? config.getUrlPattern() : \"/*\");\n        registrationBean.addInitParameter(\"exclusions\", config.getExclusions() != null ? config.getExclusions() : \"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*\");\n        if (config.getSessionStatEnable() != null) {\n            registrationBean.addInitParameter(\"sessionStatEnable\", config.getSessionStatEnable());\n        }\n        if (config.getSessionStatMaxCount() != null) {\n            registrationBean.addInitParameter(\"sessionStatMaxCount\", config.getSessionStatMaxCount());\n        }\n        if (config.getPrincipalSessionName() != null) {\n            registrationBean.addInitParameter(\"principalSessionName\", config.getPrincipalSessionName());\n        }\n        if (config.getPrincipalCookieName() != null) {\n            registrationBean.addInitParameter(\"principalCookieName\", config.getPrincipalCookieName());\n        }\n        if (config.getProfileEnable() != null) {\n            registrationBean.addInitParameter(\"profileEnable\", config.getProfileEnable());\n        }\n        return registrationBean;\n    }\n}\n```\n\nDruidFilterConfiguration.class\n\n用于设置Druid自己的一些配置项，开启一些功能（比如stat：状态监控，wall防火墙）\n\n```java\n    private static final String FILTER_STAT_PREFIX = \"spring.datasource.druid.filter.stat\";\n    private static final String FILTER_CONFIG_PREFIX = \"spring.datasource.druid.filter.config\";\n    private static final String FILTER_ENCODING_PREFIX = \"spring.datasource.druid.filter.encoding\";\n    private static final String FILTER_SLF4J_PREFIX = \"spring.datasource.druid.filter.slf4j\";\n    private static final String FILTER_LOG4J_PREFIX = \"spring.datasource.druid.filter.log4j\";\n    private static final String FILTER_LOG4J2_PREFIX = \"spring.datasource.druid.filter.log4j2\";\n    private static final String FILTER_COMMONS_LOG_PREFIX = \"spring.datasource.druid.filter.commons-log\";\n    private static final String FILTER_WALL_PREFIX = \"spring.datasource.druid.filter.wall\";\n    private static final String FILTER_WALL_CONFIG_PREFIX = FILTER_WALL_PREFIX + \".config\";\n```\n\n然后我们根据上述配置中的规则配置我们想要的功能即可：\n\n```yml\nspring:\n  datasource:\n    url: jdbc:mysql://localhost:3306/db_account\n    username: root\n    password: 123456\n    driver-class-name: com.mysql.jdbc.Driver\n\n    druid:\n      aop-patterns: com.atguigu.admin.*  #监控的范围\n      filters: stat,wall,slf4j     # 底层开启功能，stat（sql监控），wall（防火墙），slf4j打印SQL日志\n\n      stat-view-servlet:   # 配置监控页功能\n        enabled: true\t#开启监控页，默认是false不开启，所以这里需要配置成true\n        login-username: admin\t#登录用户名\n        login-password: admin\t#登录密码\n        resetEnable: false\t#是否开启重置按钮\n\n      web-stat-filter:  # 监控web\n        enabled: true\t#默认不开启，所以需要配置成true\n        urlPattern: /*\t#匹配的URL\n        exclusions: '*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*'\t#不监控的URI\n\n\n      filter:\n        stat:    # 对上面filters里面的stat的详细配置\n          slow-sql-millis: 1000 #慢查询的阈值\n          logSlowSql: true #是否统计慢查询\n          enabled: true\t#是否开启这个功能\n        wall:\n          enabled: true\t#是否开启防火墙\n          config:\n            drop-table-allow: false\t#拦截哪些操作\n\n```\n\n### 整合MyBatis\n\n#### 完全配置方式\n\n整合框架前我们应当优先寻找这个框架对应的starter，导入这个starter依赖\n\n```xml\n        <dependency>\n            <groupId>org.mybatis.spring.boot</groupId>\n            <artifactId>mybatis-spring-boot-starter</artifactId>\n            <version>2.2.0</version>\n        </dependency>\n```\n\n查看源码的时候我们先查看它的META-INF中的spring.factories中指定了哪些自定配置类需要加载，然后查看这些自动配置类，然后再查看它引入的配置类绑定了哪些属性，这样就知道再配置文件中有哪些需要配置的属性\n\nMybatis的自动配置类：MybatisAutoConfiguration\n\n```java\n@org.springframework.context.annotation.Configuration\n//必须引入这些jar包\n@ConditionalOnClass({ SqlSessionFactory.class, SqlSessionFactoryBean.class })\n//容器中有且仅有一个数据源DataSource\n@ConditionalOnSingleCandidate(DataSource.class)\n//使用Mybatis配置绑定类\n@EnableConfigurationProperties(MybatisProperties.class)\n@AutoConfigureAfter({ DataSourceAutoConfiguration.class, MybatisLanguageDriverAutoConfiguration.class })\npublic class MybatisAutoConfiguration implements InitializingBean {\n```\n\n我们可以看到这个自动配置类需要使用MybatisProperties这个配置类，并且前缀是mybatis\n\n```java\n@ConfigurationProperties(prefix = MybatisProperties.MYBATIS_PREFIX)\npublic class MybatisProperties {\n\n  public static final String MYBATIS_PREFIX = \"mybatis\";\n\n```\n\n在自动配置类中自动帮我们配置好的SqlSessionFactory，也就是SQL会话工厂\n\n```java\n  @Bean\n  @ConditionalOnMissingBean\n  public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {\n```\n\n装配了sqlSessionTemplate，这个里面含有sqlSession\n\n```java\n  @Bean\n  @ConditionalOnMissingBean\n  public SqlSessionTemplate sqlSessionTemplate(SqlSessionFactory sqlSessionFactory) {\n    ExecutorType executorType = this.properties.getExecutorType();\n    if (executorType != null) {\n      return new SqlSessionTemplate(sqlSessionFactory, executorType);\n    } else {\n      return new SqlSessionTemplate(sqlSessionFactory);\n    }\n  }\n```\n\n@Import(AutoConfiguredMapperScannerRegistrar.class) 引入包的扫描规则\n\nMapper：只要我们写的mybatis接口标注了@Mapper注解就会会被自动扫描进来\n\nMybatis所需要的配置\n\n```yaml\nspring:\n  datasource:\n    username: root\n    password: 1234\n    url: jdbc:mysql://localhost:3306/my\n    driver-class-name: com.mysql.jdbc.Driver\n\n# 配置mybatis规则\nmybatis:\n  config-location: classpath:mybatis/mybatis-config.xml  #全局配置文件位置\n  mapper-locations: classpath:mybatis/*.xml  #Mapper接口的sql映射文件位置\n\n```\n\n对应这个包结构：\n\n![image-20220508232429677](pictures/6529dfcdabd63991f971352fc625b8b5.png)\n\n**mybatis-config.xml**:\n\n这里可以配置一些mybatis的额外功能，可以参照官方文档\n\nhttps://mybatis.org/mybatis-3/zh/configuration.html#settings\n\n例如配置命名规则\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n<!--    开启将下滑线命名法转换为驼峰命名法-->\n    <settings>\n        <setting name=\"mapUnderscoreToCamelCase\" value=\"true\"/>\n    </settings>\n</configuration>\n\n```\n\n**Mapper接口**：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<!-- 这里需要指定对应的接口 -->\n<mapper namespace=\"com.lun.boot.mapper.UserMapper\">\n\n    <select id=\"getUser\" resultType=\"com.lun.boot.bean.User\">\n        select * from user where id=#{id}\n    </select>\n</mapper>\n\n```\n\njava目录下的Mapper接口\n\n```java\nimport com.lun.boot.bean.User;\nimport org.apache.ibatis.annotations.Mapper;\n\n@Mapper\npublic interface UserMapper {\n    public User getUser(Integer id);\n}\n\n```\n\n注意这两个文件的文件名的前缀要相同，同时接口函数要加上@Mapper注解来申明这是Mybatis的Mapper层接口。\n\n如果使用@Repository注解，还需要在配置 类加上@MapperScan注解指定Mapper接口所在路径\n\n我们关于Mybatis的配置除了可以在xml里面配置外，也可以直接在yml里面配置\n\n```yml\nmybatis:\n#  config-location: classpath:mybatis/mybatis-config.xml  #全局配置文件位置\n  mapper-locations: classpath:mybatis/*.xml  #Mapper接口的sql映射文件位置\n  configuration: #指定Mybatis的全局配置\n    map-underscore-to-camel-case: true\n```\n\n但是注意config-location配置和configuration配置不能同时存在，要么我使用config-location指定xml配置文件的位置，然后在xml文件中配置，要么就直接在configuration下面配置\n\n使用步骤：\n\n1. 导入mybatis官方starter\n2. 编写mapper接口\n3. 编写sql映射文件并绑定mapper接口\n4. 在application.yml中指定配置文件的位置，以及指定全局配置文件的信息（建议直接在mybatis.configuration下面的配置）\n\n#### 完全注解方式\n\n```java\n@Mapper\npublic interface UserMapper2 {\n\n    @Select(\"select * from usert\")\n    List<User> getUsers();\n}\n```\n\n直接在注解上写上sql语句，即可完成对应的功能，这样就无需编写xml文件\n\n#### 混合使用\n\n上面两种方式可以同时使用，也就是一个接口中可以既有使用注解的方式，也可以有在xml文件中配置的方式\n\nxml中可以编写复杂的sql，而简单的sql直接使用注解即可\n\n```java\n@Mapper\npublic interface UserMapper {\n    public User getUser(Integer id);\n\n    @Select(\"select * from user where id=#{id}\")\n    public User getUser2(Integer id);\n\n    public void saveUser(User user);\n\n    @Insert(\"insert into user(`name`) values(#{name})\")\n    @Options(useGeneratedKeys = true, keyProperty = \"id\")\n    public void saveUser2(User user);\n}\n```\n\n得到自增的主键：\n\nxml：\n\n```xml\n    <insert id=\"saveUser\" useGeneratedKeys=\"true\" keyProperty=\"id\">\n        insert into user(`name`) values(#{name})\n    </insert>\n```\n\n注解：\n\n```java\n    @Insert(\"insert into user(`name`) values(#{name})\")\n    @Options(useGeneratedKeys = true, keyProperty = \"id\")\n    public void saveUser2(User user);\n```\n\nuseGeneratedKeys=\"true\"表示开启主键自增，keyProperty=\"id\"表示自增的主键是id\n\n开启这个后会把自增得到的主键放入User中的id字段中（面向对象，传入的User内部被修改后，外面显然还能拿到）\n\n### 整合Mybatis Plus\n\nMybatis可以帮我们生成代码，简化开发\n\n```xml\n        <dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>mybatis-plus-boot-starter</artifactId>\n            <version>3.4.1</version>\n        </dependency>\n```\n\n这个依赖帮我们引入了jdbc和基础的mybatis和一些扩展包，所以引入这个包后就不用再引入mybatis和jdbc\n\n- `MybatisPlusAutoConfiguration`配置类，`MybatisPlusProperties`配置项绑定，对应着mybatis-plus为前缀的配置项\n\n- `SqlSessionFactory`自动配置好，底层是容器中默认的数据源。\n\n- `mapperLocations`自动配置好的，有默认值`classpath*:/mapper/**/*.xml`，这表示mapper文件夹下任意路径下的所有xml都是sql映射文件。 建议以后sql映射文件放在 mapper下。\n- 容器中也自动配置好了`SqlSessionTemplate`。\n- `@Mapper` 标注的接口也会被自动扫描，也可以用MapperScan批量扫描\n\n使用方法：\n\n接口直接继承BaseMapper<User>，泛型是我们要操作的数据库的表\n\n```java\n@Mapper\npublic interface UserMapper extends BaseMapper<User> {\n\n}\n```\n\n表名必须和泛型的名称一致，数组库字段要和属性字段一致，并且出现的字段对应数据库中对应名称的字段，如果没有出现可以用加上@TableField(exist = false) 来表示这个字段不存在\n\n```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class User implements Serializable {\n\n    private Integer id;\n    private String name;\n    private String password;\n    private String email;\n    private Date birthday;\n    private Float money;\n\n    @TableField(exist = false)\n    private String uid;\n\n}\n```\n\n查询测试\n\n```java\n@SpringBootTest\nclass MydemoApplicationTests {\n\n    @Resource\n    UserMapper userMapper;\n    @Test\n    void contextLoads() {\n        System.out.println(userMapper.selectById(57));\n    }\n}\n```\n\n上述严格的对应关系会让开发变得有些麻烦，mybatis-plus提供了一些好用的注解来解决这些问题\n\n```\n@TableName(\"usert\") //设置对应的表名\n```\n\nMybatis Plus不仅提供了Mapper层的通用功能接口，也提供了Service层的通用实现接口\n\n```java\npublic interface UserService extends IService<User> {\n}\n```\n\n接口类继承IService<User> User是对应的实体类\n\n```java\n@Service\npublic class UserServiceImpl extends ServiceImpl<UserMapper,User> implements UserService {\n\n}\n```\n\n编写实现类，规范如下：\n\n```java\n@Service\npublic class UserServiceImpl extends ServiceImpl<UserMapper,User> implements UserService {\n\n}\n```\n\n需要继承ServiceImpl，传入两个泛型：\n\nUserMapper是我们继承了BaseMapper的接口\n\nUser是对应的实体类\n\nServiceImpl为我们实现了很多方法：\n\nlist()\t查询所有的数据\n\npage(Page,Wrapper) 分页查询\n\nremoveById() 根据主键删除\n\nPage：\n\ngetPages：查询总页数\n\ngetRecordes：获取查询的数据\n\n测试：\n\n```java\n@SpringBootTest\nclass MydemoApplicationTests {\n\n    @Resource\n    UserService userService;\n    @Test\n    void contextLoads() {\n        Page<User> page1 = userService.page(new Page<>(0,5),null);\n        page1.getRecords().forEach(System.out::println);\n    }\n}\n```\n\n但是此时，分页功能会失效，Mybatis会查到所有数据，需要加上一个配置插件才能开启分页功能：\n\n```java\n@Configuration\npublic class MyBatisConfig {\n    /**\n     * MybatisPlusInterceptor\n     */\n    @Bean\n    public MybatisPlusInterceptor paginationInterceptor() {\n        MybatisPlusInterceptor mybatisPlusInterceptor = new MybatisPlusInterceptor();\n        // 设置请求的页面大于最大页后操作， true调回到首页，false 继续请求  默认false\n        // paginationInterceptor.setOverflow(false);\n        // 设置最大单页限制数量，默认 500 条，-1 不受限制\n        // paginationInterceptor.setLimit(500);\n        // 开启 count 的 join 优化,只针对部分 left join\n\n        //设置一个分页拦截器\n        PaginationInnerInterceptor paginationInnerInterceptor = new PaginationInnerInterceptor();\n        paginationInnerInterceptor.setOverflow(true);\n        paginationInnerInterceptor.setMaxLimit(500L);\n        //添加拦截器\n        mybatisPlusInterceptor.addInnerInterceptor(paginationInnerInterceptor);\n\n        return mybatisPlusInterceptor;\n    }\n}\n```\n\n这样分页就能成功使用了：\n\n```java\n@SpringBootTest\nclass MydemoApplicationTests {\n\n    @Resource\n    UserService userService;\n    @Test\n    void contextLoads() {\n        Page<User> page1 = userService.page(new Page<>(2,5),null);\n        page1.getRecords().forEach(System.out::println);\n    }\n\n}\n```\n\n注意Spring的分页是从1开始的，0和1都会返回第一页\n\n分页前端表格示例：\n\n```html\n<table class=\"display table table-bordered table-striped\" id=\"dynamic-table\">\n    <thead>\n        <tr>\n            <th>#</th>\n            <th>name</th>\n            <th>age</th>\n            <th>email</th>\n            <th>操作</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr class=\"gradeX\" th:each=\"user: ${users.records}\">\n            <td th:text=\"${user.id}\"></td>\n            <td>[[${user.name}]]</td>\n            <td th:text=\"${user.age}\">Win 95+</td>\n            <td th:text=\"${user.email}\">4</td>\n            <td>\n                <a th:href=\"@{/user/delete/{id}(id=${user.id},pn=${users.current})}\" \n                   class=\"btn btn-danger btn-sm\" type=\"button\">删除</a>\n            </td>\n        </tr>\n    </tfoot>\n</table>\n\n<div class=\"row-fluid\">\n    <div class=\"span6\">\n        <div class=\"dataTables_info\" id=\"dynamic-table_info\">\n            当前第[[${users.current}]]页  总计 [[${users.pages}]]页  共[[${users.total}]]条记录\n        </div>\n    </div>\n    <div class=\"span6\">\n        <div class=\"dataTables_paginate paging_bootstrap pagination\">\n            <ul>\n                <li class=\"prev disabled\"><a href=\"#\">← 前一页</a></li>\n                <li th:class=\"${num == users.current?'active':''}\" \n                    th:each=\"num:${#numbers.sequence(1,users.pages)}\" >\n                    <a th:href=\"@{/dynamic_table(pn=${num})}\">[[${num}]]</a>\n                </li>\n                <li class=\"next disabled\"><a href=\"#\">下一页 → </a></li>\n            </ul>\n        </div>\n    </div>\n</div>\n```\n\n#### Mybatis-Plus使用手册\n\nhttps://blog.csdn.net/weixin_43811057/article/details/123449767\n\n实际上Mybatis-Plus用于处理基本的增删改成即可，复杂的业务逻辑我们使用xml文件即可，稍简单的逻辑我们可以使用注解来实现\n\n### 整合Redis\n\n引入依赖\n\n```xml\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n        </dependency>\n```\n\n我们先来看Redis的自动配置类RedisAutoConfiguration\n\n```java\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass(RedisOperations.class)\n@EnableConfigurationProperties(RedisProperties.class)\n@Import({ LettuceConnectionConfiguration.class, JedisConnectionConfiguration.class })\npublic class RedisAutoConfiguration {\n```\n\n这个自动配置类绑定了配置类：RedisProperties\n\n这个配置类绑定的配置是@ConfigurationProperties(prefix = \"spring.redis\")\n\n内部封装了jedis和letture\n\n也就是我们需要配置redis就在spring.redis下配置\n\n并且帮我们准备了两种客户端的连接配置：LettuceConnectionConfiguration，JedisConnectionConfiguration\n\n和两种操作redis的接口：redisTemplate，stringRedisTemplate\n\nredisTemplate<Object,Object>\n\nstringRedisTemplate，kv都是String\n\nRedisProperties中的默认配置：\n\n```java\n\t/**\n\t * Database index used by the connection factory.\n\t */\n\tprivate int database = 0;\n\n\t/**\n\t * Connection URL. Overrides host, port, and password. User is ignored. Example:\n\t * redis://user:password@example.com:6379\n\t */\n\tprivate String url;\n\n\t/**\n\t * Redis server host.\n\t */\n\tprivate String host = \"localhost\";\n\n\t/**\n\t * Login password of the redis server.\n\t */\n\tprivate String password;\n\n\t/**\n\t * Redis server port.\n\t */\n\tprivate int port = 6379;\n```\n\n在yml中配置Redis的相关信息：\n\n可以设置Redis的相关属性来连接（推荐）：\n\n```yml\nspring:\n  redis:\n    host: localhost\n    port: 6379\n    password: 123456\n```\n\n也可以直接设置url代替上述参数：\n\n```yml\nspring:\n  redis:\n    url: redis://root:123456@127.0.0.1:6379\n```\n\nRedisTemplate默认使用letture来操作redis，我们也可以切换客户端至jedis切换客户端\n\n导入jedis：\n\n```xml\n        <dependency>\n            <groupId>redis.clients</groupId>\n            <artifactId>jedis</artifactId>\n        </dependency>\n```\n\njedis也是可以直接使用的\n\n```java\nspring:\n  redis:\n#   url: redis://lfy:Lfy123456@r-bp1nc7reqesxisgxpipd.redis.rds.aliyuncs.com:6379\n    host: r-bp1nc7reqesxisgxpipd.redis.rds.aliyuncs.com\n    port: 6379\n    password: lfy:Lfy123456\n    client-type: jedis\n    jedis:\n      pool:\n        max-active: 10\n#   lettuce:# 另一个用来连接redis的java框架\n#      pool:\n#        max-active: 10\n#        min-idle: 5\n```\n\n小功能：\n\n编写一个拦截器类，这个类加上@Component申明为一个组件，这样就可以使用Spring容器中的组件的各种功能。\n\n```java\n@Component\npublic class UriInterceptor implements HandlerInterceptor {\n\n    @Resource\n    RedisTemplate redisTemplate;\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        redisTemplate.opsForValue().increment(request.getRequestURI());\n        return true;\n    }\n}\n```\n\n添加拦截器：\n\n拦截器要从Spring容器中拿才能实现我们想要的功能\n\n```java\n            @Resource\n            UriInterceptor uriInterceptor;\n            @Override\n            public void addInterceptors(InterceptorRegistry registry) {\n                registry.addInterceptor(new LoginIntercepter())\n                        .addPathPatterns(\"/**\")\n                        .excludePathPatterns(\"/login\",\"/\",\"/css/**\",\"/js/**\",\"/img/**\");\n                registry.addInterceptor(uriInterceptor)\n                        .addPathPatterns(\"/**\")\n                        .excludePathPatterns(\"/\",\"/css/**\",\"/js/**\",\"/img/**\");\n            }\n```\n\n过滤器和拦截器的区别（Filter和Interceptor的区别）\n\n1.过滤器Filter是Servlet的原生组件，脱离了Spring也能使用，并且被拦截后不能直接回到原来的方法中\n\n2.拦截器Interceptor是Spring处理请求的一个流程，可以使用Spring容器中的组件\n\n![image-20220509162643868](pictures/949df1adea40b3db10776a4d65c3bd53.png)\n\n## 单元测试\n\n### 依赖引入\n\nJunit4用@SpringbootTest+@RunWith(SpringTest.class)来进行单元测试\n\n**Spring Boot 2.2.0 版本开始引入 JUnit 5 作为单元测试默认库**\n\nSpringBoot 2.4 以上版本移除了默认对 Vintage 的依赖。如果需要兼容JUnit4需要自行引入（不能使用JUnit4的功能 @Test）\n\nJUnit 5’s Vintage已经从spring-boot-starter-test从移除。如果需要继续兼容Junit4需要自行引入Vintage依赖：\n\n```xml\n<dependency>\n    <groupId>org.junit.vintage</groupId>\n    <artifactId>junit-vintage-engine</artifactId>\n    <scope>test</scope>\n    <exclusions>\n        <exclusion>\n            <groupId>org.hamcrest</groupId>\n            <artifactId>hamcrest-core</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n\n```\n\n但是其实我们也没有必要兼容Junit4，直接使用Junit5的功能即可，以org.junit.jupiter开头的就是Junit5下面的框架\n\n单元测试其实之前我们也用过：\n\n```java\n@SpringBootTest\nclass MydemoApplicationTests {\n\n    @Resource\n    RedisTemplate redisTemplate;\n    @Autowired\n    RedisConnectionFactory redisConnectionFactory;\n\n    @Test\n    void contextLoads() {\n        redisTemplate.opsForValue().set(\"lth\",\"lth\");\n        System.out.println(redisTemplate.opsForValue().get(\"lth\"));\n        System.out.println(redisConnectionFactory.getClass());\n    }\n}\n```\n\n在Test目录下，人家以及自动帮我们配置了一个测试类，我们直接在这个里面测试即可，要引入什么框架也可以直接注入\n\n### 常见注解使用\n\n官方文档：\n\nhttps://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations\n\n- @Test：表示方法是测试方法。\n- @ParameterizedTest：表示方法是参数化测试。\n- @RepeatedTest：表示方法可重复执行，括号中可以写出重复次数。\n- @DisplayName：为测试类或者测试方法设置展示名称，展示的名称会在控制台显示出来。\n- @BeforeEach：表示在每个单元测试之前执行。\n- @AfterEach：表示在每个单元测试之后执行。\n- @BeforeAll：表示在所有单元测试之前执行，使用这个注解的方法必须是静态方法。\n- @AfterAll：表示在所有单元测试之后执行，使用这个注解的方法必须是静态方法。\n- @Tag：表示单元测试类别，类似于JUnit4中的@Categories。\n- @Disabled：表示测试类或测试方法不执行，整体测试时会忽略这个方法。\n- @Timeout：表示测试方法运行如果超过了指定时间将会返回错误，括号中可以设置超时时间和时间单位。\n- @ExtendWith：为测试类或测试方法提供扩展类引用，例如@ExtendWith(SpringExtension.class)申明是使用Spring提供的测试组件，申明这个后就可以进行依赖注入，可以使用@SpringBootTest代替。\n\n```java\nimport org.junit.jupiter.api.*;\n\n@DisplayName(\"junit5功能测试类\")\npublic class Junit5Test {\n\n\n    @DisplayName(\"测试displayname注解\")\n    @Test\n    void testDisplayName() {\n        System.out.println(1);\n        System.out.println(jdbcTemplate);\n    }\n    \n    @ParameterizedTest\n    @ValueSource(strings = { \"racecar\", \"radar\", \"able was I ere I saw elba\" })\n    void palindromes(String candidate) {\n        assertTrue(StringUtils.isPalindrome(candidate));\n    }\n    \n\n    @Disabled\n    @DisplayName(\"测试方法2\")\n    @Test\n    void test2() {\n        System.out.println(2);\n    }\n\n    @RepeatedTest(5)\n    @Test\n    void test3() {\n        System.out.println(5);\n    }\n\n    /**\n     * 规定方法超时时间。超出时间测试出异常\n     *\n     * @throws InterruptedException\n     */\n    @Timeout(value = 500, unit = TimeUnit.MILLISECONDS)\n    @Test\n    void testTimeout() throws InterruptedException {\n        Thread.sleep(600);\n    }\n\n\n    @BeforeEach\n    void testBeforeEach() {\n        System.out.println(\"测试就要开始了...\");\n    }\n\n    @AfterEach\n    void testAfterEach() {\n        System.out.println(\"测试结束了...\");\n    }\n\n    @BeforeAll\n    static void testBeforeAll() {\n        System.out.println(\"所有测试就要开始了...\");\n    }\n\n    @AfterAll\n    static void testAfterAll() {\n        System.out.println(\"所有测试以及结束了...\");\n\n    }\n\n}\n```\n\n### 断言\n\n如果满足我们给定的条件就无事发生，否则就会抛出异常，后面的代码都不会执行\n\n#### 简单断言\n\n方法\t说明\nassertEquals\t判断两个对象或两个原始类型是否相等（调用equal方法）\nassertNotEquals\t判断两个对象或两个原始类型是否不相等\nassertSame\t判断两个对象引用是否指向同一个对象（调用==）\nassertNotSame\t判断两个对象引用是否指向不同的对象\nassertTrue\t判断给定的布尔值是否为 true\nassertFalse\t判断给定的布尔值是否为 false\nassertNull\t判断给定的对象引用是否为 null\nassertNotNull\t判断给定的对象引用是否不为 null\n\n#### 数组断言\n\n通过 assertArrayEquals 方法来判断两个对象或原始类型的数组是否相等。\n\n```java\n@Test\n@DisplayName(\"array assertion\")\npublic void array() {\n\tassertArrayEquals(new int[]{1, 2}, new int[] {1, 2});\n}\n```\n\n#### 组合断言\n\n`assertAll()`方法接受多个 `org.junit.jupiter.api.Executable` 函数式接口的实例作为要验证的断言，可以通过 lambda 表达式很容易的提供这些断言。所有这些断言都通过了才算这个断言通过，有一个不通过就视为这个断言不通过。\n\n```java\n@Test\n@DisplayName(\"assert all\")\npublic void all() {\n assertAll(\"Math\",\n    () -> assertEquals(2, 1 + 1),\n    () -> assertTrue(1 > 0)\n );\n}\n```\n\n#### 异常断言\n\n如果不抛出指定异常则断言失败\n\n```java\n@Test\n@DisplayName(\"异常测试\")\npublic void exceptionTest() {\n    ArithmeticException exception = Assertions.assertThrows(\n           //扔出断言异常\n            ArithmeticException.class, () -> System.out.println(1 % 0));\n}\n\n```\n\n#### 超时断言\n\n```java\n@Test\n@DisplayName(\"超时测试\")\npublic void timeoutTest() {\n    //如果测试方法时间超过1s将会异常\n    Assertions.assertTimeout(Duration.ofMillis(1000), () -> Thread.sleep(500));\n}\n\n```\n\n#### 快速失败\n\n```java\n@Test\n@DisplayName(\"fail\")\npublic void shouldFail() {\n\tfail(\"This should fail\");\n}\n```\n\n我们使用maven的Test功能对测试类进行测试，测试完成后会生成一个汇总的报告\n\n#### 前置条件\n\n使用方法和断言一样，但是如果前置条件实现了，这个方法会显示被忽略而不是错误\n\n```java\n@DisplayName(\"前置条件\")\npublic class AssumptionsTest {\n    private final String environment = \"DEV\";\n\n    @Test\n    @DisplayName(\"simple\")\n    public void simpleAssume() {\n        assumeTrue(Objects.equals(this.environment, \"DEV\"));\n        assumeFalse(() -> Objects.equals(this.environment, \"PROD\"));\n    }\n\n    @Test\n    @DisplayName(\"assume then do\")\n    public void assumeThenDo() {\n        assumingThat(\n            Objects.equals(this.environment, \"DEV\"),\n            () -> System.out.println(\"In DEV\")\n        );\n    }\n}\n```\n\n### 嵌套测试\n\n使用@Nested注解可以在测试类的内部定义一个新的测试类，外层的测试类的@AfterEach等注解可以驱动内部的测试生效，而内部的这些注解不会驱动外部的测试类生效。\n\n```java\n@DisplayName(\"A stack\")\nclass TestingAStackDemo {\n\n    Stack<Object> stack;\n\n    @Test\n    @DisplayName(\"is instantiated with new Stack()\")\n    void isInstantiatedWithNew() {\n        new Stack<>();\n    }\n\n    @Nested\n    @DisplayName(\"when new\")\n    class WhenNew {\n\n        @BeforeEach\n        void createNewStack() {\n            stack = new Stack<>();\n        }\n\n        @Test\n        @DisplayName(\"is empty\")\n        void isEmpty() {\n            assertTrue(stack.isEmpty());\n        }\n\n        @Test\n        @DisplayName(\"throws EmptyStackException when popped\")\n        void throwsExceptionWhenPopped() {\n            assertThrows(EmptyStackException.class, stack::pop);\n        }\n\n        @Test\n        @DisplayName(\"throws EmptyStackException when peeked\")\n        void throwsExceptionWhenPeeked() {\n            assertThrows(EmptyStackException.class, stack::peek);\n        }\n\n        @Nested\n        @DisplayName(\"after pushing an element\")\n        class AfterPushing {\n\n            String anElement = \"an element\";\n\n            @BeforeEach\n            void pushAnElement() {\n                stack.push(anElement);\n            }\n\n            @Test\n            @DisplayName(\"it is no longer empty\")\n            void isNotEmpty() {\n                assertFalse(stack.isEmpty());\n            }\n\n            @Test\n            @DisplayName(\"returns the element when popped and is empty\")\n            void returnElementWhenPopped() {\n                assertEquals(anElement, stack.pop());\n                assertTrue(stack.isEmpty());\n            }\n\n            @Test\n            @DisplayName(\"returns the element when peeked but remains not empty\")\n            void returnElementWhenPeeked() {\n                assertEquals(anElement, stack.peek());\n                assertFalse(stack.isEmpty());\n            }\n        }\n    }\n}\n```\n\n### 指定参数来源\n\n```\n@ValueSource: 为参数化测试指定入参来源，支持八大基础类以及String类型,Class类型\n@NullSource: 表示为参数化测试提供一个null的入参\n@EnumSource: 表示为参数化测试提供一个枚举入参\n@CsvFileSource：表示读取指定CSV文件内容作为参数化测试入参\n@MethodSource：表示读取指定方法的返回值作为参数化测试入参(注意方法返回需要是一个流)\n```\n\n```java\n@ParameterizedTest\n@ValueSource(strings = {\"one\", \"two\", \"three\"})\n@DisplayName(\"参数化测试1\")\npublic void parameterizedTest1(String string) {\n    System.out.println(string);\n    Assertions.assertTrue(StringUtils.isNotBlank(string));\n}\n\n\n@ParameterizedTest\n@MethodSource(\"method\")    //指定方法名\n@DisplayName(\"方法来源参数\")\npublic void testWithExplicitLocalMethodSource(String name) {\n    System.out.println(name);\n    Assertions.assertNotNull(name);\n}\n\nstatic Stream<String> method() {\n    return Stream.of(\"apple\", \"banana\");\n}\n```\n\n## 指标监控\n\nSpringboot-actuator可以帮我们监控各个微服务的运行状态\n\n引入依赖：\n\n```xml\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-actuator</artifactId>\n        </dependency>\n```\n\n引入依赖后就可以直接通过http://localhost:8080/actuator来获取可以拿到的信息的列表\n\n```json\n{\n    \"_links\": {\n        \"self\": {\n            \"href\": \"http://localhost:8080/actuator\",\n            \"templated\": false\n        },\n        \"health-path\": {\n            \"href\": \"http://localhost:8080/actuator/health/{*path}\",\n            \"templated\": true\n        },\n        \"health\": {\n            \"href\": \"http://localhost:8080/actuator/health\",\n            \"templated\": false\n        },\n        \"info\": {\n            \"href\": \"http://localhost:8080/actuator/info\",\n            \"templated\": false\n        }\n    }\n}\n```\n\n然后再根据其中的网址获取我们想要的信息\n\nself代表当前访问的网址：\n\n```json\n    \"self\": {\n        \"href\": \"http://localhost:8080/actuator\",\n        \"templated\": false\n    }\n```\n\nhealth代表当前服务的运行状态：\n\n```json\n        \"health\": {\n            \"href\": \"http://localhost:8080/actuator/health\",\n            \"templated\": false\n        }\n```\n\n```\n{\n    \"status\": \"UP\"\n}\n```\n\nUP代表正在运行状态，DOWN代表宕机\n\ninfo代表当前服务的信息（默认没有信息）\n\n```json\n        \"info\": {\n            \"href\": \"http://localhost:8080/actuator/info\",\n            \"templated\": false\n        }\n```\n\nSpring默认给我密文提供了info和health两个监控端点（EndPoint），但其实还有很多我们可以监控的端点，需要我们手动开启\n\nhttps://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#production-ready\n\n以web的方式暴露所有端点\n\n```yml\nmanagement:\n  endpoints:\n    enabled-by-default: true #暴露所有端点信息\n    web:\n      exposure:\n        include: '*'  #以web方式暴露\n```\n\n查询信息的格式是：http://localhost:8080/actuator/{端点名称}/{具体的路径名称}\n\n会返回JSON格式的数据\n\n常用的端点信息：\n\nauditevents\t暴露当前应用程序的审核事件信息。需要一个AuditEventRepository组件。\nbeans\t显示应用程序中所有Spring Bean的完整列表。\ncaches\t暴露可用的缓存。\nconditions\t显示自动配置的所有条件信息，包括匹配或不匹配的原因。\nconfigprops\t显示所有@ConfigurationProperties。\nenv\t暴露Spring的属性ConfigurableEnvironment\nflyway\t显示已应用的所有Flyway数据库迁移。 需要一个或多个Flyway组件。\nhealth\t显示应用程序运行状况信息。\nhttptrace\t显示HTTP跟踪信息（默认情况下，最近100个HTTP请求-响应）。需要一个HttpTraceRepository组件。\ninfo\t显示应用程序信息。\nintegrationgraph\t显示Spring integrationgraph 。需要依赖spring-integration-core。\nloggers\t显示和修改应用程序中日志的配置。\nliquibase\t显示已应用的所有Liquibase数据库迁移。需要一个或多个Liquibase组件。\nmetrics\t显示当前应用程序的“指标”信息。\nmappings\t显示所有@RequestMapping路径列表。\nscheduledtasks\t显示应用程序中的计划任务。\nsessions\t允许从Spring Session支持的会话存储中检索和删除用户会话。需要使用Spring Session的基于Servlet的Web应用程序。\nshutdown\t使应用程序正常关闭。默认禁用。\nstartup\t显示由ApplicationStartup收集的启动步骤数据。需要使用SpringApplication进行配置BufferingApplicationStartup。\nthreaddump\t执行线程转储。\n\n- **Health：监控状况**\n- **Metrics：运行时指标**\n- **Loggers：日志记录**\n\n\n\n```yml\nmanagement:\n  endpoints:\n    enabled-by-default: true #暴露所有端点信息\n    web:\n      exposure:\n        include: '*'  #以web方式暴露\n  endpoint:\n    health: #对某个端点的具体配置\n      show-details: always #显示详细信息\n```\n\n我们也可以或者禁用所有的Endpoint然后手动开启指定的Endpoint：\n\n```yml\nmanagement:\n  endpoints:\n    enabled-by-default: false\n  endpoint:\n    beans:\n      enabled: true\n    health:\n      enabled: true\n```\n\n### 定制健康信息\n\n```java\n@Component\npublic class MyComHealthIndicator extends AbstractHealthIndicator {\n\n    /**\n     * 真实的检查方法\n     * @param builder\n     * @throws Exception\n     */\n    @Override\n    protected void doHealthCheck(Health.Builder builder) throws Exception {\n        //mongodb。  获取连接进行测试\n        Map<String,Object> map = new HashMap<>();\n        // 检查完成\n        if(1 == 2){\n//            builder.up(); //健康\n            builder.status(Status.UP);\n            map.put(\"count\",1);\n            map.put(\"ms\",100);\n        }else {\n//            builder.down();\n            builder.status(Status.OUT_OF_SERVICE);\n            map.put(\"err\",\"连接超时\");\n            map.put(\"ms\",3000);\n        }\n\n        builder.withDetail(\"code\",100)\n                .withDetails(map);\n\n    }\n}\n```\n\nbuilder.down() 表示不健康\n\nbuilde.up() 表示健康\n\n也可以用 builder.status(Status.UP);\n\n```java\n        builder.withDetail(\"code\",100)\n                .withDetails(map);\n```\n\n可以往detail中添加一些信息\n\n注意，这个组件的名字是根据类的名称来的，必须实现AbstractHealthIndicator，而且必须以HealthIndicator结尾，前面的就是组件的名称\n\n查询health：\n\n```json\n        \"myCom\": {\n            \"status\": \"OUT_OF_SERVICE\",\n            \"details\": {\n                \"code\": 100,\n                \"err\": \"连接超时\",\n                \"ms\": 3000\n            }\n        }\n```\n\n### 定值info信息\n\n可以在yml里定值，获取pom文件的值，可以使用@@来获取\n\n```yml\ninfo:\n  appName: boot-admin\n  version: 2.0.1\n  mavenProjectName: @project.artifactId@  #使用@@可以获取maven的pom文件值\n  mavenProjectVersion: @project.version@\n\n```\n\n可以定义一个Controller：\n\n```java\nimport java.util.Collections;\n\nimport org.springframework.boot.actuate.info.Info;\nimport org.springframework.boot.actuate.info.InfoContributor;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class ExampleInfoContributor implements InfoContributor {\n\n    @Override\n    public void contribute(Info.Builder builder) {\n        builder.withDetail(\"example\",\n                Collections.singletonMap(\"key\", \"value\"));\n    }\n\n}\n```\n\n这个controller的名字就没有限制了，只要继承InfoContributor并注入Spring容器中即可\n\n### 定制Metrics\n\n这样在Metrics端点就会有myservice.method.running.counter的相关信息\n\n```java\nclass MyService{\n    Counter counter;\n    public MyService(MeterRegistry meterRegistry){\n         counter = meterRegistry.counter(\"myservice.method.running.counter\");\n    }\n\n    public void hello() {\n        counter.increment();\n    }\n}\n```\n\n### 自定义Endpoint\n\n```java\n@Component\n//Endpoint叫container\n@Endpoint(id = \"container\")\npublic class DockerEndpoint {\n\n    //可读。不能有参数，显示的信息从这里获取\n    @ReadOperation\n    public Map getDockerInfo(){\n        return Collections.singletonMap(\"info\",\"docker started...\");\n    }\n\t可写\n    @WriteOperation\n    private void restartDocker(){\n        System.out.println(\"docker restarted....\");\n    }\n\n}\n```\n\n### 整合图形界面\n\n引入依赖：\n\n```xml\n        <dependency>\n            <groupId>de.codecentric</groupId>\n            <artifactId>spring-boot-admin-starter-server</artifactId>\n            <version>2.3.1</version>\n        </dependency>\n```\n\n在启动类加上@EnableAdminServer表示这是一个监控服务器\n\n```java\n@SpringBootApplication\n@EnableAdminServer\npublic class ActuatorApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ActuatorApplication.class, args);\n    }\n}\n```\n\n修改一下server.port确保端口不冲突，例如修改为8888\n\n然后访问localhost:8888，即可看到监控页面，但是此时还没有数据，因为监控服务器也不知道要监控什么服务器，所以我们需要配置需要监控的服务器（客户端）\n\n在客户端加上：\n\n```xml\n<dependency>\n    <groupId>de.codecentric</groupId>\n    <artifactId>spring-boot-admin-starter-client</artifactId>\n    <version>2.3.1</version>\n</dependency>\n```\n\n\n\n然后设置一下配置文件：\n\n```yml\nspring:\n  application:\n    name: mydemo\n  boot:\n    admin:\n      client:\n        url: http://localhost:8888\n        instance:\n          prefer-ip: true\n```\n\n和spring-cloud配置注册中心的过程很像\n\n点开配置文件如下：\n\n```java\n\t/**\n\t * Name to register with. Defaults to ${spring.application.name}\n\t */\n\t@Value(\"${spring.application.name:spring-boot-application}\")\n\tprivate String name = \"spring-boot-application\";\n\n\t/**\n\t * Should the registered urls be built with server.address or with hostname.\n\t */\n\tprivate boolean preferIp = false;\n\n\t/**\n\t * Metadata that should be associated with this application\n\t */\n\tprivate Map<String, String> metadata = new LinkedHashMap<>();\n```\n\n注意到配置：\n\n```java\n@Value(\"${spring.application.name:spring-boot-application}\")\n\tprivate String name = \"spring-boot-application\";\n```\n\n我们也发现可以使用@Value注解获取配置文件中的值\n\n@Value(\"${spring.application.name:spring-boot-application}\") 表示获取spring.application.name这个配置项的值，如果没有就叫spring-boot-application\n\n配置完成后可以有很好看的图形界面：\n\n![image-20220510213637957](pictures/1483bd50890ef67bc276ad0b239b61c0.png)\n\n## 原理解析\n\n### profile 配置文件切换\n\n我们一般情况测试开发环境所用的配置文件和上线部署后用的配置文件一般不同，比如测试环境中我们可以用localhost，但是上线部署的生产环境中就需要切换到部署环境，而我们直接修改配置文件有些麻烦，所以Spring给我们提供了profile配置文件切换功能。\n\n我们先编写两种配置文件，配置文件的名字必须是application-xxx.yml，xxx是配置文件的名称（测试环境的名称）：\n\n比如：\n\n测试环境所用的配置文件：applcation-test.yml\n\n```yml\nperson:\n  name: test\n```\n\n生产环境所用的配置文件：application-prod.yml\n\n```yml\nperson:\n  name: prod\n```\n\n然后我们在测试用手动controller中获取配置文件的值并输出\n\n```java\npackage com.demo.controller;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author 李天航\n */\n@RestController\npublic class TestController {\n\n    @Value(\"${person.name:default}\")\n    private String name;\n\n    @GetMapping(\"/\")\n    public Object test(){\n        return name;\n    }\n}\n```\n\n这样根据name的值就知道当前使用的是哪个配置文件\n\nname标注了@Value(\"${person.name:default}\")，从配置文件中获取值，如果配置文件没有相关的配置则值默认是default（上一节也提到过）\n\n然后设置默认配置文件application.properties：\n\n```\nperson.name=okk\nspring.profiles.active=test\n```\n\napplication.properties是一定会被加载的配置文件，其中spring.profiles.active自动用于设置当前使用哪个配置文件\n\nspring.profiles.active=test表示使用application-test.yml配置文件，得到结果test\n\nspring.profiles.active=prod表示使用application-prod.yml配置文件，得到结果prod\n\n如果application.properties和选择的yml配置文件中有同名的配置，则优先使用选择的yml中的配置，如果yml中没有配置（获取选择的配置文件不存在）则使用application.properties配置文件，如果application.properties中也没有相关的配置则使用设置的默认值（例如这里是default）\n\n打包后如果想要切换配置文件，可以在后面用--加上启动参数，启动参数的优先级最高，可以设置多个参数，参数名称和配置项的名称一致\n\n```\njava -jar demo2-0.0.1-SNAPSHOT.jar --spring.profiles.active=prod --server.port=8888\n```\n\n--spring.profiles.active=prod 使用prod配置文件\n\n--server.port=8888 切换端口至8888\n\n获取配置文件的信息除了可以用@Value注解，还可以使用@ConfigurationProperties注解，这个注解之前在阅读Spring源码的时候我们见过很多次，每一个自动配置类都需要一个配置类，而配置类就是使用@ConfigurationProperties注解获取到配置文件的信息\n\n例如配置文件中是这么写的：\n\n```yml\nperson:\n  name: test\n  age: 88\n```\n\n我们想要获取配置信息：\n\n```java\n@Component\n@ConfigurationProperties(\"person\")\n@Data\npublic class Person {\n    String name;\n    String age;\n}\n```\n\n用@ConfigurationProperties(\"person\")绑定要获取的配置项，然后根据属性名称将值装配进去，需要加上@Component注解\n\n（这个注解会让idea报错，但是运行没有问题）\n\n```java\n@RestController\npublic class TestController {\n    @Resource\n    Person person;\n\n    @GetMapping(\"/\")\n    public Object test(){\n        return person;\n    }\n}\n```\n\n经过测试成功得到返回值person的值\n\n![image-20220510232548151](pictures/da0266f5b88527d8c11b1e6a04cd825e.png)\n\n假如一个环境中包含多个配置文件，我们可以设置配置文件组：\n\n```properties\nspring.profiles.active=production\n\nspring.profiles.group.production[0]=proddb\nspring.profiles.group.production[1]=prodmq\n```\n\n假如有个生产环境叫production，这个生产环境包含两个配置文件：proddb，prodmq，可以通过下面这两行配置实现\n\n```properties\nspring.profiles.group.production[0]=proddb\nspring.profiles.group.production[1]=prodmq\n```\n\n然后选择生产环境的时候选择组即可：\n\n```properties\nspring.profiles.active=production\n```\n\n选择的组中的配置文件都会生效\n\n### Profile条件装配\n\n假如我们有一个类叫Person：\n\n```java\n@Data\npublic class Person {\n    protected String name;\n    protected String age;\n}\n```\n\n它有两个子类：\n\n```java\n@Data\n@Component\npublic class Boss extends Person{\n    String type=\"boss\";\n}\n```\n\n```java\n@Data\n@Component\npublic class Worker extends Person{\n    String type=\"worker\";\n}\n```\n\n测试类中是\n\n```java\n@RestController\npublic class TestController {\n    @Resource\n    Person person;\n\n    @GetMapping(\"/\")\n    public Object test(){\n        return person;\n    }\n}\n```\n\n我们想要在test环境下返回Worker对象，在prod环境下返回Boss对象，此时Spring容器中有两个Person对象，所以Spring不知道装配哪个对象所以会报错。所以这时候可以使用条件装配，在不同的环境下选择让一些类在特性的测试环境下生效。\n\n```java\n@Profile(\"prod\")\n@Component\n@ConfigurationProperties(\"person\")\n@Data\npublic class Boss extends Person{\n    String type=\"boss\";\n}\n```\n\n```java\n@Profile(\"test\")\n@Component\n@ConfigurationProperties(\"person\")\n@Data\npublic class Worker extends Person{\n    String type=\"worker\";\n}\n```\n\n@Profile(\"prod\")表示这个类只在运行环境为prod时才放入Spring容器中（并不影响编译）\n\n例如当前运行环境是test，即spring.profiles.active=test，则会返回Worker对象\n\n![image-20220510234810086](pictures/5a0e92a91297e1bc9d8c55826bf790e4.png)\n\n@Profile可以标注在带有@Bean注解的方法上来选择性在Spring容器中注册bean\n\n@Profile如果不设置value字段的值，则value字段的值默认是default，也就是默认环境下会使用的配置，不加@Profile则是在任何环境都会加载的bean。如果不激活任何环境也就是不设置spring.profiles.active的值（或者设置为default），这个值默认是default，默认会加载默认环境下的bean\n\n### 配置文件加载的优先级\n\n#### 配置信息的来源\n\nproperties文件，yml文件，环境变量，命令行参数（除了环境变量外我们都使用过，下面演示环境变量）\n\n获取环境变量，使用方法就和控制台中一样，${环境变量名}：\n\n```java\n@RestController\npublic class TestController {\n\n    @Value(\"${person.name:default}\")\n    private String name;\n\n    @Resource\n    Person person;\n\n    @Value(\"${JAVA_HOME}\")\n    private String JAVA_HOME;\n\n    @GetMapping(\"/\")\n    public Object test(){\n        System.out.println(JAVA_HOME);\n        return person;\n    }\n}\n```\n\nSpringboot在启动的时候也会获取当前机器的环境变量和各种属性值：\n\n```java\n@SpringBootApplication\npublic class Demo2Application {\n\n    public static void main(String[] args) {\n        ConfigurableApplicationContext run = SpringApplication.run(Demo2Application.class, args);\n        ConfigurableEnvironment environment = run.getEnvironment();\n        //获取环境变量\n        System.out.println(environment.getSystemEnvironment());\n        //获取各种JVM参数和操作系统等信息\n        System.out.println(environment.getPropertySources());\n    }\n}\n```\n\n其中命令行参数设置配置项的时候有一点要注意：\n\n```java\n@SpringBootApplication\npublic class DemoApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(DemoApplication.class, args);\n    }\n}\n```\n\n在启动类中SpringApplication.run(DemoApplication.class, args)一定要把args传进去，我们设置的命令行参数才能生效QWQ\n\n#### 配置文件的优先级\n\n1. Default properties (specified by setting SpringApplication.setDefaultProperties).\n2. @PropertySource annotations on your @Configuration classes. Please note that such property sources are not added to the Environment until the application context is being refreshed. This is too late to configure certain properties such as logging.* and spring.main.* which are read before refresh begins.\n3. Config data (such as application.properties files)\n4. A RandomValuePropertySource that has properties only in random.*.\n5. OS environment variables.\n6. Java System properties (System.getProperties()).\n7. JNDI attributes from java:comp/env.\n8. ServletContext init parameters.\n9. ServletConfig init parameters.\n10. Properties from SPRING_APPLICATION_JSON (inline JSON embedded in an environment variable or system property).\n11. Command line arguments.\n12. properties attribute on your tests. Available on @SpringBootTest and the test annotations for testing a particular slice of your application.\n13. @TestPropertySource annotations on your tests.\n14. Devtools global settings properties in the $HOME/.config/spring-boot directory when devtools is active.\n\n后面的会覆盖前面的同名配置项\n\n#### 配置文件的位置\n\n1. classpath 根路径（resource目录是classpath的根路径）。\n2. classpath 根路径下config目录。\n3. jar包当前目录。\n4. jar包当前目录的config目录。\n5. /config子目录的直接子目录。\n\n后面的优先级更高\n\n我们可以使用外部配置文件来修改配置，这样就不用重新打包编译文件也能修改配置\n\n#### 配置文件加载顺序\n\n1. 当前jar包内部的application.properties和application.yml。\n2. 当前jar包内部的application-{profile}.properties 和 application-{profile}.yml。\n3. 引用的外部jar包的application.properties和application.yml。\n4. 引用的外部jar包的application-{profile}.properties和application-{profile}.yml。\n\n后面的优先级更高\n\n（测试的时候不要使用idea直接运行，使用命令行来启动）\n\n### 自定义starter和自动配置类\n\n如果我们使用Spring-Initializer时，没有选择任何场景，则会自动帮我们导入\n\n```xml\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n```\n\n这个依赖抱哈Spring的基本功能（Spring容器和自动配置的的依赖）\n\n我们创建一个名为lth-spring-boot-starter的MAVEN项目，也就是我们自定义的starter，这这个starter中引入我们想要引入的依赖，然后其他项目想引入这些依赖时，直接引入这个starter即可\n\n这个starter没有业务逻辑，起到统合依赖的作用：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.lth</groupId>\n    <artifactId>lth-spring-boot-starter</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <dependencies>\n        <dependency>\n            <groupId>com.lth</groupId>\n            <artifactId>lth-spring-boot-starter-autoconfiguration</artifactId>\n            <version>0.0.1-SNAPSHOT</version>\n        </dependency>\n    </dependencies>\n\n</project>\n```\n\n这个starter引入了lth-spring-boot-starter-autoconfiguration，其他项目引入这个starter时也会自动引入autoconfiguration\n\n在lth-spring-boot-starter-autoconfiguration模块中编写一些具体的业务逻辑，比如我们想要根据配置文件设置打招呼的前缀和后缀\n\npom文件：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.6.7</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.lth</groupId>\n    <artifactId>lth-spring-boot-starter-autoconfiguration</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>lth-spring-boot-starter-autoconfiguration</name>\n    <description>lth-spring-boot-starter-autoconfiguration</description>\n    <properties>\n        <java.version>1.8</java.version>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n        </dependency>\n    </dependencies>\n\n</project>\n```\n\n引入依赖时是根据，这两个属性引入到项目中的\n\n```xml\n    <groupId>com.lth</groupId>\n    <artifactId>lth-spring-boot-starter-autoconfiguration</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n```\n\n我们设置一个配置类来绑定依赖：\n\n```java\npackage com.lth.bean;\n\nimport lombok.Data;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\n\n@ConfigurationProperties(\"lth.hello\")\n@Data\npublic class HelloProperties {\n    private String prefix;\n    private String suffix;\n}\n```\n\n然后编写一个业务类实现具体的业务逻辑：从Spring容器中获取helloProperties，然后利用这个配置项在名称前后加上前缀和后缀\n\n```java\npackage com.lth.bean;\n\nimport javax.annotation.Resource;\n\npublic class HelloService {\n    @Resource\n    HelloProperties helloProperties;\n    public String helloWorld(String name){\n        return helloProperties.getPrefix()+\" name \"+helloProperties.getSuffix();\n    }\n}\n```\n\n但是此时helloProperties并不在Spring容器中，HelloService也不在Spring容器中，我们可以通过编写自动配置类将这两个bean注入到Spring容器中：\n\n```java\n@Configuration\n//注入配置类\n@EnableConfigurationProperties(HelloProperties.class)\npublic class HelloAutoConfiguration {\n    //注入业务类\n    @Bean\n    public HelloService helloService(){\n        return new HelloService();\n    }\n}\n```\n\n@EnableConfigurationPropertie注解用于向Spring容器中添加配置类的bean（也就是向容器中添加一个带有@ConfigurationProperties注解的类的对象），等价于通过@Bean注解向Spring容器添加带有@ConfigurationProperties注解的bean，通过@EnableConfigurationPropertie，@Bean，@Component注解注入的bean都会经过Spring容器的自动装配，相关的注解都会生效。\n\n然后我们使用maven的lifecycle中clean，install将当前项目编译，然后安装到我们的项目中\n\n先安装自动配置类lth-spring-boot-starter-autoconfiguration，再安装我们的lth-spring-boot-starter，因为starter编译需要用到autoconfiguration的jar包，实际上我们需要将starter所引用的jar都编译好，再编译starter进行总体上的打包\n\n测试：\n\n```java\n@SpringBootTest\nclass DemoApplicationTests {\n\n    @Resource\n    HelloService helloService;\n\n    @Test\n    void contextLoads() {\n        System.out.println(helloService.helloWorld(\"LTH\"));\n    }\n}\n```\n\nproperties配置文件：\n\n```properties\nlth.hello.prefix=hello\nlth.hello.suffix=come on\n```\n\n输出hello name come on，代表成功\n\n## 补充：IOC容器的创建流程\n\n```java\n\t@Override\n\tpublic void refresh() throws BeansException, IllegalStateException {\n        //上锁\n\t\tsynchronized (this.startupShutdownMonitor) {\n            //通知监听器开始创建IOC容器\n\t\t\tStartupStep contextRefresh = this.applicationStartup.start(\"spring.context.refresh\");\n\n\t\t\t//创建容器前的预处理\n\t\t\tprepareRefresh();\n\n\t\t\t// Tell the subclass to refresh the internal bean factory.\n\t\t\tConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();\n\n\t\t\t// Prepare the bean factory for use in this context.\n\t\t\tprepareBeanFactory(beanFactory);\n\n\t\t\ttry {\n\t\t\t\t// Allows post-processing of the bean factory in context subclasses.\n\t\t\t\tpostProcessBeanFactory(beanFactory);\n\n\t\t\t\tStartupStep beanPostProcess = this.applicationStartup.start(\"spring.context.beans.post-process\");\n\t\t\t\t// Invoke factory processors registered as beans in the context.\n\t\t\t\tinvokeBeanFactoryPostProcessors(beanFactory);\n\n\t\t\t\t// Register bean processors that intercept bean creation.\n\t\t\t\tregisterBeanPostProcessors(beanFactory);\n\t\t\t\tbeanPostProcess.end();\n\n\t\t\t\t// Initialize message source for this context.\n\t\t\t\tinitMessageSource();\n\n\t\t\t\t// Initialize event multicaster for this context.\n\t\t\t\tinitApplicationEventMulticaster();\n\n\t\t\t\t// Initialize other special beans in specific context subclasses.\n\t\t\t\tonRefresh();\n\n\t\t\t\t// Check for listener beans and register them.\n\t\t\t\tregisterListeners();\n\n\t\t\t\t// Instantiate all remaining (non-lazy-init) singletons.\n\t\t\t\tfinishBeanFactoryInitialization(beanFactory);\n\n\t\t\t\t// Last step: publish corresponding event.\n\t\t\t\tfinishRefresh();\n\t\t\t}\n\n\t\t\tcatch (BeansException ex) {\n\t\t\t\tif (logger.isWarnEnabled()) {\n\t\t\t\t\tlogger.warn(\"Exception encountered during context initialization - \" +\n\t\t\t\t\t\t\t\"cancelling refresh attempt: \" + ex);\n\t\t\t\t}\n\n\t\t\t\t// Destroy already created singletons to avoid dangling resources.\n\t\t\t\tdestroyBeans();\n\n\t\t\t\t// Reset 'active' flag.\n\t\t\t\tcancelRefresh(ex);\n\n\t\t\t\t// Propagate exception to caller.\n\t\t\t\tthrow ex;\n\t\t\t}\n\n\t\t\tfinally {\n\t\t\t\t// Reset common introspection caches in Spring's core, since we\n\t\t\t\t// might not ever need metadata for singleton beans anymore...\n\t\t\t\tresetCommonCaches();\n\t\t\t\tcontextRefresh.end();\n\t\t\t}\n\t\t}\n\t}\n```\n\n### 1. 预处理前的初始化prepareRefresh()\n\n```java\n\tprotected void prepareRefresh() {\n\t\t//记录时间\n\t\tthis.startupDate = System.currentTimeMillis();\n        //设置状态，表示激活IOC容器\n\t\tthis.closed.set(false);\n\t\tthis.active.set(true);\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(\"Refreshing \" + this);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlogger.debug(\"Refreshing \" + getDisplayName());\n\t\t\t}\n\t\t}\n\n\t\t// Initialize any placeholder property sources in the context environment.\n        //初始化属性设置(默认为空，我们可以重写这个方法)\n\t\tinitPropertySources();\n\n\t\t//验证一些必须的属性是否合法\n\t\tgetEnvironment().validateRequiredProperties();\n\n\t\t//将早期事件监听器注册为监听器，并清空早期事件\n\t\tif (this.earlyApplicationListeners == null) {\n\t\t\tthis.earlyApplicationListeners = new LinkedHashSet<>(this.applicationListeners);\n\t\t}\n\t\telse {\n\t\t\t// Reset local application listeners to pre-refresh state.\n\t\t\tthis.applicationListeners.clear();\n\t\t\tthis.applicationListeners.addAll(this.earlyApplicationListeners);\n\t\t}\n\n\t\t// Allow for the collection of early ApplicationEvents,\n\t\t// to be published once the multicaster is available...\n\t\tthis.earlyApplicationEvents = new LinkedHashSet<>();\n\t}\n```\n\n### 2.创建bean工厂beanFactories\n\n### ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory()\n\n```java\n\tprotected ConfigurableListableBeanFactory obtainFreshBeanFactory() {\n\t\t//创建bean工厂\n\t\trefreshBeanFactory();\n        //获取刚才创建的bean工厂并返回\n\t\treturn getBeanFactory();\n\t}\n```\n\n创建的beanFactory的类型是DefaultListableBeanFactory，也就是默认bean工厂\n\n### 3.准备bean工厂prepareBeanFactory(beanFactory)\n\n在这个方法中，向bean工厂设置一些属性\n\n```java\n\tprotected void prepareBeanFactory(ConfigurableListableBeanFactory beanFactory) {\n\t\t// Tell the internal bean factory to use the context's class loader etc.\n        //设置类加载器\n\t\tbeanFactory.setBeanClassLoader(getClassLoader());\n        //设置表达式解析器\n\t\tbeanFactory.setBeanExpressionResolver(new StandardBeanExpressionResolver(beanFactory.getBeanClassLoader()));\n\t\tbeanFactory.addPropertyEditorRegistrar(new ResourceEditorRegistrar(this, getEnvironment()));\n\n\t\t// Configure the bean factory with context callbacks.\n\t\tbeanFactory.addBeanPostProcessor(new ApplicationContextAwareProcessor(this));\n\t\tbeanFactory.ignoreDependencyInterface(EnvironmentAware.class);\n\t\tbeanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class);\n\t\tbeanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);\n\t\tbeanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);\n\t\tbeanFactory.ignoreDependencyInterface(MessageSourceAware.class);\n\t\tbeanFactory.ignoreDependencyInterface(ApplicationContextAware.class);\n\n\t\t// BeanFactory interface not registered as resolvable type in a plain factory.\n\t\t// MessageSource registered (and found for autowiring) as a bean.\n\t\tbeanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);\n\t\tbeanFactory.registerResolvableDependency(ResourceLoader.class, this);\n\t\tbeanFactory.registerResolvableDependency(ApplicationEventPublisher.class, this);\n\t\tbeanFactory.registerResolvableDependency(ApplicationContext.class, this);\n\n\t\t// Register early post-processor for detecting inner beans as ApplicationListeners.\n\t\tbeanFactory.addBeanPostProcessor(new ApplicationListenerDetector(this));\n\n\t\t// Detect a LoadTimeWeaver and prepare for weaving, if found.\n\t\tif (beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) {\n\t\t\tbeanFactory.addBeanPostProcessor(new LoadTimeWeaverAwareProcessor(beanFactory));\n\t\t\t// Set a temporary ClassLoader for type matching.\n\t\t\tbeanFactory.setTempClassLoader(new ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));\n\t\t}\n\n\t\t// Register default environment beans.\n\t\tif (!beanFactory.containsLocalBean(ENVIRONMENT_BEAN_NAME)) {\n\t\t\tbeanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment());\n\t\t}\n\t\tif (!beanFactory.containsLocalBean(SYSTEM_PROPERTIES_BEAN_NAME)) {\n\t\t\tbeanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties());\n\t\t}\n\t\tif (!beanFactory.containsLocalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) {\n\t\t\tbeanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment());\n\t\t}\n\t}\n```\n\n#### 1.设置加载bean所需的工具类\n\n```java\n//类加载器\nbeanFactory.setBeanClassLoader(getClassLoader());\n//表达式解析器\n\t\tbeanFactory.setBeanExpressionResolver(new StandardBeanExpressionResolver(beanFactory.getBeanClassLoader()));\n//属性编辑器\n\t\tbeanFactory.addPropertyEditorRegistrar(new ResourceEditorRegistrar(this, getEnvironment()));\n```\n\n#### 2.设置一些回调方法\n\n```java\n\t\tbeanFactory.addBeanPostProcessor(new ApplicationContextAwareProcessor(this));\n\t\tbeanFactory.ignoreDependencyInterface(EnvironmentAware.class);\n\t\tbeanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class);\n\t\tbeanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);\n\t\tbeanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);\n\t\tbeanFactory.ignoreDependencyInterface(MessageSourceAware.class);\n\t\tbeanFactory.ignoreDependencyInterface(ApplicationContextAware.class);\n```\n\n放入ApplicationContextAwareProcessor（添加部分beanPostProcessor）\n\n忽略以这些接口创建的bean：EnvironmentAware，EmbeddedValueResolverAware，ResourceLoaderAware，ApplicationEventPublisherAware，MessageSourceAware，ApplicationContextAware\n\n#### 3.设置可以通过自动装配获取的bean（@Autowire，@Resource）\n\n```\n\t\tbeanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);\n\t\tbeanFactory.registerResolvableDependency(ResourceLoader.class, this);\n\t\tbeanFactory.registerResolvableDependency(ApplicationEventPublisher.class, this);\n\t\tbeanFactory.registerResolvableDependency(ApplicationContext.class, this);\n```\n\n可以通过自动装配拿到BeanFactory（bean工厂），ResourceLoader（资源加载器），ApplicationEventPublisher（事件推送器），ApplicationContext（IOC容器）\n\n#### 4.注册ApplicationListenerDetector\n\n```\n// Register early post-processor for detecting inner beans as ApplicationListeners.\nbeanFactory.addBeanPostProcessor(new ApplicationListenerDetector(this));\n```\n\n#### 5.添加AspectJ动态代理的支持\n\n#### 6.注册和环境（系统属性，环境变量）相关的组件\n\n### 4.进行bean工厂创建完成后的后置处理\n\npostProcessBeanFactory(beanFactory)\n\n这个方法默认为空，我们重写这个方法，在beanFactory加载完成后进行一些操作\n\n====================================通过以上方法完成了beanFactory的创建和预处理工作=========================\n\n### 5.执行所有的BeanFactoryPostProcessors\n\ninvokeBeanFactoryPostProcessors\n\n在beanFactory标准初始化完成后执行这个这个方法\n\n两个接口：\n\n```java\n\tprotected void invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory beanFactory) {\n        \n\t\tPostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());\n\n\t\t// Detect a LoadTimeWeaver and prepare for weaving, if found in the meantime\n\t\t// (e.g. through an @Bean method registered by ConfigurationClassPostProcessor)\n\t\tif (beanFactory.getTempClassLoader() == null && beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) {\n\t\t\tbeanFactory.addBeanPostProcessor(new LoadTimeWeaverAwareProcessor(beanFactory));\n\t\t\tbeanFactory.setTempClassLoader(new ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));\n\t\t}\n\t}\n```\n\n#### 1.执行所有BeanFactoryPostProcessors\n\n##### 1.获取所有的BeanFactoryPostProcessor\n\n##### 2.优先执行实现了PriorityOrdered接口的BeanDefinitionRegistryPostProcessor\n\n##### 3.然后执行实现了Order接口的BeanDefinitionRegistryPostProcessor\n\n##### 4.执行剩下的BeanDefinitionRegistryPostProcessor\n\n##### 5.获取所有的BeanFactoryPostProcessor\n\n##### 6.依次执行实现了PriorityOrdered，Order，没实现接口的BeanFactoryPostProcessor\n\n### 6.注册bean的后置处理器\n\nregisterBeanPostProcessors(beanFactory);\n\n也是依次注册实现了PriorityOrdered接口，实现了Order接口，没有实现任何接口的BeanFactoryPostProcessor\n\n然后注册MergedBeanDefinitionPostProcessor和ApplicationListenerDetector\n\n### 7.初始化消息（消息绑定，消息解析）\n\ninitMessageSource\n\n如果容器中有MessageSource，则赋值给MessageSource，如果没有则自己创建一个默认的对象\n\nMessageSource：取出某个key的值，安装区域获取值\n\n然后将MessageSource注册进Spring容器中，然后我们就能通过自动装配得到MessageSource\n\n### 8.初始化事件派发器\n\ninitApplicationEventMulticaster()\n\n1.获取BeanFactory\n\n2.从容器中获取applicationEventMulticaster，如果没有就创建一个SimpleApplicationEventMulticaster并注册进Spring容器\n\n### 9.刷新容器onRefresh()\n\nonRefresh()默认为空，留给我们来实现\n\n### 10.注册事件派发器\n\n获取所有的事件监听器，去重后将所有的监听器注册进事件派发器\n\n派发之前步骤产生的事件earlyApplicationEvents\n\n### 11.初始化所有所有单实例bean\n\n```\nfinishBeanFactoryInitialization\n```\n\n```java\n\tprotected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {\n\t\t// Initialize conversion service for this context.\n\t\tif (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &&\n\t\t\t\tbeanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) {\n\t\t\tbeanFactory.setConversionService(\n\t\t\t\t\tbeanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));\n\t\t}\n\n\t\t// Register a default embedded value resolver if no BeanFactoryPostProcessor\n\t\t// (such as a PropertySourcesPlaceholderConfigurer bean) registered any before:\n\t\t// at this point, primarily for resolution in annotation attribute values.\n\t\tif (!beanFactory.hasEmbeddedValueResolver()) {\n\t\t\tbeanFactory.addEmbeddedValueResolver(strVal -> getEnvironment().resolvePlaceholders(strVal));\n\t\t}\n\n\t\t// Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.\n\t\tString[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);\n\t\tfor (String weaverAwareName : weaverAwareNames) {\n\t\t\tgetBean(weaverAwareName);\n\t\t}\n\n\t\t// Stop using the temporary ClassLoader for type matching.\n\t\tbeanFactory.setTempClassLoader(null);\n\n\t\t// Allow for caching all bean definition metadata, not expecting further changes.\n\t\tbeanFactory.freezeConfiguration();\n\n\t\t// Instantiate all remaining (non-lazy-init) singletons.\n\t\tbeanFactory.preInstantiateSingletons();\n\t}\n```\n\n这个方法的核心语句是beanFactory.preInstantiateSingletons()，预加载单实例bean\n\n```java\n\t@Override\n\tpublic void preInstantiateSingletons() throws BeansException {\n\t\tif (logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"Pre-instantiating singletons in \" + this);\n\t\t}\n\n        //拿到所有bean的定义信息\n\t\tList<String> beanNames = new ArrayList<>(this.beanDefinitionNames);\n\n\t\t// Trigger initialization of all non-lazy singleton beans...\n\t\tfor (String beanName : beanNames) {\n\t\t\tRootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);\n\t\t\tif (!bd.isAbstract() && bd.isSingleton() && !bd.isLazyInit()) {\n\t\t\t\tif (isFactoryBean(beanName)) {\n\t\t\t\t\tObject bean = getBean(FACTORY_BEAN_PREFIX + beanName);\n\t\t\t\t\tif (bean instanceof FactoryBean) {\n\t\t\t\t\t\tFactoryBean<?> factory = (FactoryBean<?>) bean;\n\t\t\t\t\t\tboolean isEagerInit;\n\t\t\t\t\t\tif (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {\n\t\t\t\t\t\t\tisEagerInit = AccessController.doPrivileged(\n\t\t\t\t\t\t\t\t\t(PrivilegedAction<Boolean>) ((SmartFactoryBean<?>) factory)::isEagerInit,\n\t\t\t\t\t\t\t\t\tgetAccessControlContext());\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tisEagerInit = (factory instanceof SmartFactoryBean &&\n\t\t\t\t\t\t\t\t\t((SmartFactoryBean<?>) factory).isEagerInit());\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (isEagerInit) {\n\t\t\t\t\t\t\tgetBean(beanName);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tgetBean(beanName);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Trigger post-initialization callback for all applicable beans...\n\t\tfor (String beanName : beanNames) {\n\t\t\tObject singletonInstance = getSingleton(beanName);\n\t\t\tif (singletonInstance instanceof SmartInitializingSingleton) {\n\t\t\t\tSmartInitializingSingleton smartSingleton = (SmartInitializingSingleton) singletonInstance;\n\t\t\t\tif (System.getSecurityManager() != null) {\n\t\t\t\t\tAccessController.doPrivileged((PrivilegedAction<Object>) () -> {\n\t\t\t\t\t\tsmartSingleton.afterSingletonsInstantiated();\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}, getAccessControlContext());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tsmartSingleton.afterSingletonsInstantiated();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```\n\n#### 1.preInstantiateSingletons\n\n##### 1.拿到扫描路径下所有带有@Controller，@Service，@Repository，@Configuration，@Component等向Spring容器中注册组件的注解的类的信息\n\n![image-20220512223534964](pictures/189200b12b1d1c8ec72936c1539a4d80.png)\n\n如上图所示，包含Spring容器中默认加载的组件和我们自己编写的\n\n##### 2.遍历所有的bean的全限定名，创建和初始化对应的对象\n\n- 拿到一个类的全限定名beanName\n- 获取这个类的定义信息RootBeanDefinition\n\nRootBeanDefinition bd = getMergedLocalBeanDefinition(beanName)\n\n![image-20220512232616126](pictures/f0b2393a61b48e7f903b136fab5d1a19.png)\n\n- 如果这个bean不是抽象的，也不是单实例的，也不是懒加载的\n    - 然后判断是不是FactoryBean\n    - 如果是FactoryBean，则使用FactoryBean的getObect方法创建bean\n    - 如果不是FactoryBean，则使用getBean方法创建对象，getBean调用下面的doGetBean方法\n\n\n\n```java\nprotected <T> T doGetBean(\n      String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly)\n      throws BeansException {\n   //拿到bean的名称\n   String beanName = transformedBeanName(name);\n   Object bean;\n\n   //从缓存中获取单实例bean，如果能获取到说明已经被创建过了\n   Object sharedInstance = getSingleton(beanName);\n    //如果缓存中拿不到(不是调用了beanFactory创建bean了吗为什么拿不到，这里先伏笔一下)\n   if (sharedInstance != null && args == null) {\n      if (logger.isTraceEnabled()) {\n         if (isSingletonCurrentlyInCreation(beanName)) {\n            logger.trace(\"Returning eagerly cached instance of singleton bean '\" + beanName +\n                  \"' that is not fully initialized yet - a consequence of a circular reference\");\n         }\n         else {\n            logger.trace(\"Returning cached instance of singleton bean '\" + beanName + \"'\");\n         }\n      }\n      bean = getObjectForBeanInstance(sharedInstance, name, beanName, null);\n   }\n\n   else {\n      // Fail if we're already creating this bean instance:\n      // We're assumably within a circular reference.\n      if (isPrototypeCurrentlyInCreation(beanName)) {\n         throw new BeanCurrentlyInCreationException(beanName);\n      }\n\n      // Check if bean definition exists in this factory.\n      //拿到父工厂(如果有的话)\n      BeanFactory parentBeanFactory = getParentBeanFactory();\n      if (parentBeanFactory != null && !containsBeanDefinition(beanName)) {\n         // Not found -> check parent.\n         String nameToLookup = originalBeanName(name);\n         if (parentBeanFactory instanceof AbstractBeanFactory) {\n            return ((AbstractBeanFactory) parentBeanFactory).doGetBean(\n                  nameToLookup, requiredType, args, typeCheckOnly);\n         }\n         else if (args != null) {\n            // Delegation to parent with explicit args.\n            return (T) parentBeanFactory.getBean(nameToLookup, args);\n         }\n         else if (requiredType != null) {\n            // No args -> delegate to standard getBean method.\n            return parentBeanFactory.getBean(nameToLookup, requiredType);\n         }\n         else {\n            return (T) parentBeanFactory.getBean(nameToLookup);\n         }\n      }\n\n      if (!typeCheckOnly) {\n         //标记当前bean已经被创建了，防止多个线程创建bean\n         markBeanAsCreated(beanName);\n      }\n\n      try {\n         //获取bean的定义信息\n         RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);\n         checkMergedBeanDefinition(mbd, beanName, args);\n\n         // Guarantee initialization of beans that the current bean depends on.\n          //获取当前bean依赖的其他bean\n         String[] dependsOn = mbd.getDependsOn();\n         if (dependsOn != null) {\n            //如果当前有依赖的bean，则遍历所有依赖的bean,创建所有依赖的bean\n            for (String dep : dependsOn) {\n               if (isDependent(beanName, dep)) {\n                  throw new BeanCreationException(mbd.getResourceDescription(), beanName,\n                        \"Circular depends-on relationship between '\" + beanName + \"' and '\" + dep + \"'\");\n               }\n               registerDependentBean(dep, beanName);\n               try {\n                  //尝试获取或者创建所依赖的bean(这里发生了递归)\n                  getBean(dep);\n               }\n               catch (NoSuchBeanDefinitionException ex) {\n                  throw new BeanCreationException(mbd.getResourceDescription(), beanName,\n                        \"'\" + beanName + \"' depends on missing bean '\" + dep + \"'\", ex);\n               }\n            }\n         }\n\n         // Create bean instance.\n         //如果这是一个单实例bean，则采用单实例bean的创建方法\n         if (mbd.isSingleton()) {\n            //调用getSingleton方法(上面也调用这个方法)创建或者从一二级缓存中获取bean，这里的lamda表达式省略的是beanFactory的getObject方法\n            sharedInstance = getSingleton(beanName, () -> {\n               try {\n                   //调用createBean方法创建bean\n                  return createBean(beanName, mbd, args);\n               }\n               catch (BeansException ex) {\n                  // Explicitly remove instance from singleton cache: It might have been put there\n                  // eagerly by the creation process, to allow for circular reference resolution.\n                  // Also remove any beans that received a temporary reference to the bean.\n                  destroySingleton(beanName);\n                  throw ex;\n               }\n            });\n            bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);\n         }\n\n         else if (mbd.isPrototype()) {\n            // It's a prototype -> create a new instance.\n            Object prototypeInstance = null;\n            try {\n               beforePrototypeCreation(beanName);\n               prototypeInstance = createBean(beanName, mbd, args);\n            }\n            finally {\n               afterPrototypeCreation(beanName);\n            }\n            bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);\n         }\n\n         else {\n            String scopeName = mbd.getScope();\n            if (!StringUtils.hasLength(scopeName)) {\n               throw new IllegalStateException(\"No scope name defined for bean ´\" + beanName + \"'\");\n            }\n            Scope scope = this.scopes.get(scopeName);\n            if (scope == null) {\n               throw new IllegalStateException(\"No Scope registered for scope name '\" + scopeName + \"'\");\n            }\n            try {\n               Object scopedInstance = scope.get(beanName, () -> {\n                  beforePrototypeCreation(beanName);\n                  try {\n                     return createBean(beanName, mbd, args);\n                  }\n                  finally {\n                     afterPrototypeCreation(beanName);\n                  }\n               });\n               bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);\n            }\n            catch (IllegalStateException ex) {\n               throw new BeanCreationException(beanName,\n                     \"Scope '\" + scopeName + \"' is not active for the current thread; consider \" +\n                     \"defining a scoped proxy for this bean if you intend to refer to it from a singleton\",\n                     ex);\n            }\n         }\n      }\n      catch (BeansException ex) {\n         cleanupAfterBeanCreationFailure(beanName);\n         throw ex;\n      }\n   }\n\n   // Check if required type matches the type of the actual bean instance.\n   if (requiredType != null && !requiredType.isInstance(bean)) {\n      try {\n         T convertedBean = getTypeConverter().convertIfNecessary(bean, requiredType);\n         if (convertedBean == null) {\n            throw new BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());\n         }\n         return convertedBean;\n      }\n      catch (TypeMismatchException ex) {\n         if (logger.isTraceEnabled()) {\n            logger.trace(\"Failed to convert bean '\" + name + \"' to required type '\" +\n                  ClassUtils.getQualifiedName(requiredType) + \"'\", ex);\n         }\n         throw new BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());\n      }\n   }\n   return (T) bean;\n}\n```\n\n**核心方法doGetBean**\n\n1.从缓存中获取单实例bean，如果能获取到说明已经被创建过了\n\nObject sharedInstance = getSingleton(beanName)\n\n（单例设计模式）\n\n```java\n\t@Nullable\n\tprotected Object getSingleton(String beanName, boolean allowEarlyReference) {\n\t\t//尝试从一级缓存中拿到bean\n\t\tObject singletonObject = this.singletonObjects.get(beanName);\n        //如果没有拿到\n\t\tif (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {\n            //再尝试从二级缓存中找\n\t\t\tsingletonObject = this.earlySingletonObjects.get(beanName);\n            //如果二级缓存中也没有找到，并且允许提前创建bean\n\t\t\tif (singletonObject == null && allowEarlyReference) {\n                //锁住一级缓存(单例模式)\n\t\t\t\tsynchronized (this.singletonObjects) {\n\t\t\t\t\t//再尝试从一级缓存中找\n\t\t\t\t\tsingletonObject = this.singletonObjects.get(beanName);\n                    //如果一级缓存中没有找到\n\t\t\t\t\tif (singletonObject == null) {\n                        //从二级缓存中找\n\t\t\t\t\t\tsingletonObject = this.earlySingletonObjects.get(beanName);\n                        //如果二级缓存中没有找到\n\t\t\t\t\t\tif (singletonObject == null) {\n                            //从三级中找到对应的beanFactory，准备执行创建的bean的流程\n\t\t\t\t\t\t\tObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName);\n                            //如果找到了beanFactory\n\t\t\t\t\t\t\tif (singletonFactory != null) {\n                                //使用beanFactory创建bean\n\t\t\t\t\t\t\t\tsingletonObject = singletonFactory.getObject();\n                                //将这个bean放入二级缓存\n\t\t\t\t\t\t\t\tthis.earlySingletonObjects.put(beanName, singletonObject);\n                                //从三级缓存中移除beanFactory\n\t\t\t\t\t\t\t\tthis.singletonFactories.remove(beanName);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn singletonObject;\n\t}\n```\n\nsingletonObjects：一级缓存：单例池\n\n```\nprivate final Map<String, Object> singletonObjects = new ConcurrentHashMap<>(256);\n```\n\n其实就是一个线程安全的map的\n\nearlySingletonObjects：二级缓存，用于保存半成品的bean\n\n```\nprivate final Map<String, Object> earlySingletonObjects = new ConcurrentHashMap<>(16);\n```\n\n同样是一个线程安全的map\n\nsingletonFactories：三级缓存，用于保存bean工厂\n\n```\nprivate final Map<String, ObjectFactory<?>> singletonFactories = new HashMap<>(16);\n```\n\n同样是一个线程安全的map，但是保存的是 ObjectFactory<?>\n\n**核心方法createBean**\n\n```java\n\t@Override\n\tprotected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args)\n\t\t\tthrows BeanCreationException {\n\n\t\tif (logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"Creating instance of bean '\" + beanName + \"'\");\n\t\t}\n\t\tRootBeanDefinition mbdToUse = mbd;\n\n\t\t// Make sure bean class is actually resolved at this point, and\n\t\t// clone the bean definition in case of a dynamically resolved Class\n\t\t// which cannot be stored in the shared merged bean definition.\n\t\tClass<?> resolvedClass = resolveBeanClass(mbd, beanName);\n\t\tif (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {\n\t\t\tmbdToUse = new RootBeanDefinition(mbd);\n\t\t\tmbdToUse.setBeanClass(resolvedClass);\n\t\t}\n\n\t\t// Prepare method overrides.\n\t\ttry {\n\t\t\tmbdToUse.prepareMethodOverrides();\n\t\t}\n\t\tcatch (BeanDefinitionValidationException ex) {\n\t\t\tthrow new BeanDefinitionStoreException(mbdToUse.getResourceDescription(),\n\t\t\t\t\tbeanName, \"Validation of method overrides failed\", ex);\n\t\t}\n\n\t\ttry {\n\t\t\t// Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.\n            //给这个bean一个返回代理对象的机会\n\t\t\tObject bean = resolveBeforeInstantiation(beanName, mbdToUse);\n\t\t\tif (bean != null) {\n\t\t\t\treturn bean;\n\t\t\t}\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\tthrow new BeanCreationException(mbdToUse.getResourceDescription(), beanName,\n\t\t\t\t\t\"BeanPostProcessor before instantiation of bean failed\", ex);\n\t\t}\n\n\t\ttry {\n            //如果没有返回代理对象，则创建bean\n\t\t\tObject beanInstance = doCreateBean(beanName, mbdToUse, args);\n\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(\"Finished creating instance of bean '\" + beanName + \"'\");\n\t\t\t}\n\t\t\treturn beanInstance;\n\t\t}\n\t\tcatch (BeanCreationException | ImplicitlyAppearedSingletonException ex) {\n\t\t\t// A previously detected exception with proper bean creation context already,\n\t\t\t// or illegal singleton state to be communicated up to DefaultSingletonBeanRegistry.\n\t\t\tthrow ex;\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\tthrow new BeanCreationException(\n\t\t\t\t\tmbdToUse.getResourceDescription(), beanName, \"Unexpected exception during bean creation\", ex);\n\t\t}\n\t}\n```\n\n**创建bean：doCreateBean**\n\n```java\n\tprotected Object doCreateBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args)\n\t\t\tthrows BeanCreationException {\n\n\t\t// Instantiate the bean.\n\t\tBeanWrapper instanceWrapper = null;\n\t\tif (mbd.isSingleton()) {\n\t\t\tinstanceWrapper = this.factoryBeanInstanceCache.remove(beanName);\n\t\t}\n\t\tif (instanceWrapper == null) {\n            //创建bean实例\n\t\t\tinstanceWrapper = createBeanInstance(beanName, mbd, args);\n\t\t}\n\t\tObject bean = instanceWrapper.getWrappedInstance();\n\t\tClass<?> beanType = instanceWrapper.getWrappedClass();\n\t\tif (beanType != NullBean.class) {\n\t\t\tmbd.resolvedTargetType = beanType;\n\t\t}\n\n\t\t// Allow post-processors to modify the merged bean definition.\n        //加上锁，防止多次后置处理，确保只处理一次\n\t\tsynchronized (mbd.postProcessingLock) {\n            //如果没有被后置处理\n\t\t\tif (!mbd.postProcessed) {\n\t\t\t\ttry {\n                    //执行一些后置处理器\n\t\t\t\t\tapplyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);\n\t\t\t\t}\n\t\t\t\tcatch (Throwable ex) {\n\t\t\t\t\tthrow new BeanCreationException(mbd.getResourceDescription(), beanName,\n\t\t\t\t\t\t\t\"Post-processing of merged bean definition failed\", ex);\n\t\t\t\t}\n                //标志位已经被后置处理\n\t\t\t\tmbd.postProcessed = true;\n\t\t\t}\n\t\t}\n\n\t\t// Eagerly cache singletons to be able to resolve circular references\n\t\t// even when triggered by lifecycle interfaces like BeanFactoryAware.\n        //第二级缓存能处理循环依赖，及时有了生命周期的处理方法\n\t\tboolean earlySingletonExposure = (mbd.isSingleton() && this.allowCircularReferences &&\n\t\t\t\tisSingletonCurrentlyInCreation(beanName));\n\t\tif (earlySingletonExposure) {\n\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(\"Eagerly caching bean '\" + beanName +\n\t\t\t\t\t\t\"' to allow for resolving potential circular references\");\n\t\t\t}\n\t\t\taddSingletonFactory(beanName, () -> getEarlyBeanReference(beanName, mbd, bean));\n\t\t}\n\n\t\t// Initialize the bean instance.\n\t\tObject exposedObject = bean;\n\t\ttry {\n            //为bean赋值\n\t\t\tpopulateBean(beanName, mbd, instanceWrapper);\n\t\t\texposedObject = initializeBean(beanName, exposedObject, mbd);\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\tif (ex instanceof BeanCreationException && beanName.equals(((BeanCreationException) ex).getBeanName())) {\n\t\t\t\tthrow (BeanCreationException) ex;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new BeanCreationException(\n\t\t\t\t\t\tmbd.getResourceDescription(), beanName, \"Initialization of bean failed\", ex);\n\t\t\t}\n\t\t}\n\n\t\tif (earlySingletonExposure) {\n            //获取早期保留的bean的引用\n\t\t\tObject earlySingletonReference = getSingleton(beanName, false);\n\t\t\tif (earlySingletonReference != null) {\n\t\t\t\tif (exposedObject == bean) {\n\t\t\t\t\texposedObject = earlySingletonReference;\n\t\t\t\t}\n\t\t\t\telse if (!this.allowRawInjectionDespiteWrapping && hasDependentBean(beanName)) {\n\t\t\t\t\tString[] dependentBeans = getDependentBeans(beanName);\n\t\t\t\t\tSet<String> actualDependentBeans = new LinkedHashSet<>(dependentBeans.length);\n\t\t\t\t\tfor (String dependentBean : dependentBeans) {\n\t\t\t\t\t\tif (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) {\n\t\t\t\t\t\t\tactualDependentBeans.add(dependentBean);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!actualDependentBeans.isEmpty()) {\n\t\t\t\t\t\tthrow new BeanCurrentlyInCreationException(beanName,\n\t\t\t\t\t\t\t\t\"Bean with name '\" + beanName + \"' has been injected into other beans [\" +\n\t\t\t\t\t\t\t\tStringUtils.collectionToCommaDelimitedString(actualDependentBeans) +\n\t\t\t\t\t\t\t\t\"] in its raw version as part of a circular reference, but has eventually been \" +\n\t\t\t\t\t\t\t\t\"wrapped. This means that said other beans do not use the final version of the \" +\n\t\t\t\t\t\t\t\t\"bean. This is often the result of over-eager type matching - consider using \" +\n\t\t\t\t\t\t\t\t\"'getBeanNamesForType' with the 'allowEagerInit' flag turned off, for example.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Register bean as disposable.\n\t\ttry {\n            //注册bean的销毁\n\t\t\tregisterDisposableBeanIfNecessary(beanName, bean, mbd);\n\t\t}\n\t\tcatch (BeanDefinitionValidationException ex) {\n\t\t\tthrow new BeanCreationException(\n\t\t\t\t\tmbd.getResourceDescription(), beanName, \"Invalid destruction signature\", ex);\n\t\t}\n\t\t//返回创建好的bean\n\t\treturn exposedObject;\n\t}\n```\n\n创建对象实例 createBeanInstance\n\n```java\n\tprotected BeanWrapper createBeanInstance(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) {\n\t\t// Make sure bean class is actually resolved at this point.\n        //获取当前的bean是什么类型\n\t\tClass<?> beanClass = resolveBeanClass(mbd, beanName);\n\n\t\tif (beanClass != null && !Modifier.isPublic(beanClass.getModifiers()) && !mbd.isNonPublicAccessAllowed()) {\n\t\t\tthrow new BeanCreationException(mbd.getResourceDescription(), beanName,\n\t\t\t\t\t\"Bean class isn't public, and non-public access not allowed: \" + beanClass.getName());\n\t\t}\n\n\t\tSupplier<?> instanceSupplier = mbd.getInstanceSupplier();\n        //如果是实例bean(@Component)\n\t\tif (instanceSupplier != null) {\n\t\t\treturn obtainFromSupplier(instanceSupplier, beanName);\n\t\t}\n\t\t//如果是用@bean注解创建\n\t\tif (mbd.getFactoryMethodName() != null) {\n            //利用对象的构造器创建bean实例\n\t\t\treturn instantiateUsingFactoryMethod(beanName, mbd, args);\n\t\t}\n\n\t\t// Shortcut when re-creating the same bean...\n\t\tboolean resolved = false;\n\t\tboolean autowireNecessary = false;\n\t\tif (args == null) {\n\t\t\tsynchronized (mbd.constructorArgumentLock) {\n\t\t\t\tif (mbd.resolvedConstructorOrFactoryMethod != null) {\n\t\t\t\t\tresolved = true;\n\t\t\t\t\tautowireNecessary = mbd.constructorArgumentsResolved;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (resolved) {\n\t\t\tif (autowireNecessary) {\n\t\t\t\treturn autowireConstructor(beanName, mbd, null, null);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn instantiateBean(beanName, mbd);\n\t\t\t}\n\t\t}\n\n\t\t// Candidate constructors for autowiring?\n\t\tConstructor<?>[] ctors = determineConstructorsFromBeanPostProcessors(beanClass, beanName);\n\t\tif (ctors != null || mbd.getResolvedAutowireMode() == AUTOWIRE_CONSTRUCTOR ||\n\t\t\t\tmbd.hasConstructorArgumentValues() || !ObjectUtils.isEmpty(args)) {\n\t\t\treturn autowireConstructor(beanName, mbd, ctors, args);\n\t\t}\n\n\t\t// Preferred constructors for default construction?\n\t\tctors = mbd.getPreferredConstructors();\n\t\tif (ctors != null) {\n\t\t\treturn autowireConstructor(beanName, mbd, ctors, null);\n\t\t}\n\n\t\t// No special handling: simply use no-arg constructor.\n\t\treturn instantiateBean(beanName, mbd);\n\t}\n```\n\n属性赋值populateBean\n\n\n\n![image-20220513101910052](pictures/059bb96aa2f5fd724bcaea38a591f7c6.png)\n\n### 12.完成beanFactory的创建工作\n\n```java\n\tprotected void finishRefresh() {\n\t\t// Clear context-level resource caches (such as ASM metadata from scanning).\n\t\tclearResourceCaches();\n\n\t\t// Initialize lifecycle processor for this context.\n        //初始化\n\t\tinitLifecycleProcessor();\n\n\t\t// Propagate refresh to lifecycle processor first.\n\t\tgetLifecycleProcessor().onRefresh();\n\n\t\t// Publish the final event.\n\t\tpublishEvent(new ContextRefreshedEvent(this));\n\n\t\t// Participate in LiveBeansView MBean, if active.\n\t\tLiveBeansView.registerApplicationContext(this);\n\t}\n```\n\n#### 1.初始化LifecycleProcessor（需要我们来实现）\n\n#### 2.执行getLifecycleProcessor().onRefresh();\n\n#### 3.发布容器创建完成事件\n\npublishEvent(new ContextRefreshedEvent(this))","source":"_posts/Springboot-下篇.md","raw":"---\ntitle: Springboot(下篇)\ndate: 2022-11-30 19:00:46\ntags:\n---\n# Springboot底层原理（2）\n\n[Spring Framework Documentation](https://docs.spring.io/spring-framework/docs/5.3.x/reference/html/)\n\n## 使用原生的Servlet\n\n### 使用注解声明为Servlet组件\n\n```java\n@WebServlet(\"/my\")\npublic class MyServlet extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        resp.getWriter().write(\"1212\");\n    }\n}\n```\n\n可以在Spring中使用原生的Servlet组件，重写里面的doGet，doPost等方法实现具体的逻辑，并加上@WebServlet(\"/my\")添加路由映射，但是只是这样还不能生效，因为它并不是Spring框架下的组件，所以需要在启动类上加上@ServletComponentScan(basePackages = \"com.demo\")设置包扫描路径，用于扫描原生的Servlet组件。\n\n```java\n@ServletComponentScan(basePackages = \"com.demo\")\n@SpringBootApplication\npublic class MydemoApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(MydemoApplication.class, args);\n    }\n}\n```\n\n因为不是Spring框架下的组件，所以Spring注册的拦截器不会生效，想要进行拦截需要使用Servlet组件中的拦截器：\n\n```java\n@WebFilter(urlPatterns = \"/*\")\n@Slf4j\npublic class MyFilter implements Filter {\n\n    //Spring容器启动的时候执行\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n        log.info(\"Filter init\");\n    }\n\t//如果路由和设置的路由匹配，则先执行这个过滤器，然后再执行具体的业务逻辑\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        log.info(\"do Filter\");\n    }\n\t//Spring容器销毁（也就是Servlet销毁时）执行的方法\n    @Override\n    public void destroy() {\n        log.info(\"destroy\");\n    }\n}\n```\n\n@WebFilter(urlPatterns = \"/*\") 注意路由的写法，Spring组件中的url是`/**` 而Servlet组件的写法是`/*`\n\n监听器：\n\n在项目初始化完成，开始监听之前可以执行contextInitialized方法，项目关闭的时候会执行contextDestroyed方法\n\n```java\n@WebListener\npublic class MyListener implements ServletContextListener {\n    @Override\n    public void contextDestroyed(ServletContextEvent sce) {\n        System.out.println(\"项目结束\");\n    }\n\n    @Override\n    public void contextInitialized(ServletContextEvent sce) {\n        System.out.println(\"检测到初始化完成\");\n    }\n}\n```\n\n![image-20220507193721185](pictures/4855e5cc40ab39b4cc76d71effdace90.png)\n\n### 向Spring容器中添加Servlet组件\n\n```java\n@Configuration\npublic class MyServletConfiger {\n    //注册Servlet\n    @Bean\n    public ServletRegistrationBean myRegistrationBean(){\n        return new ServletRegistrationBean(new MyServlet(),\"/my\",\"/my1\");\n    }\n    //注册过滤器\n    @Bean\n    public FilterRegistrationBean filterRegistrationBean(){\n        return new FilterRegistrationBean(new MyFilter(),myRegistrationBean());\n    }\n    //注册监听器\n    @Bean\n    public ServletListenerRegistrationBean listenerRegistrationBean(){\n        return new ServletListenerRegistrationBean(new MyListener());\n    }\n}\n```\n\n注册过滤器也可以使用：\n\n```java\n    @Bean\n    public FilterRegistrationBean filterRegistrationBean(){\n        FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean();\n        filterRegistrationBean.setFilter(new MyFilter());\n        filterRegistrationBean.setUrlPatterns(Arrays.asList(\"/*\",\"/css/*\"));\n        return filterRegistrationBean;\n    }\n```\n\n注意：\n\n这里的@Configuration注解不能将proxyBeanMethods 属性设置为 false，我们前面提到过，如果将这个属性设置为true，在调用里面带有@Bean的方法时，会在Spring容器中找有没有相同的bean，如果有就返回Spring容器中的bean，如果没有会创建一个bean。而设置为false后，会不会生产代理对象，因而会生成很多多余的bean。所以这里需要将proxyBeanMethods 设置为true，也就是它的默认值，来保证依赖的组件始终的单实例的。\n\n### 原生的Servlet的作用原理\n\n前面提到使用原生的Servlet不会触发Spring的拦截器，下面解释这个的原因。\n\nSpringboot Web处理请求的核心是DispatcherServlet类，而这个Servlet是在DispatcherServletAutoConfiguration这个自动配置类中注册进Spring容器中的。\n\n```java\n\t\t@Bean(name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)\n\t\tpublic DispatcherServlet dispatcherServlet(WebMvcProperties webMvcProperties) {\n\t\t\tDispatcherServlet dispatcherServlet = new DispatcherServlet();\n\t\t\tdispatcherServlet.setDispatchOptionsRequest(webMvcProperties.isDispatchOptionsRequest());\n\t\t\tdispatcherServlet.setDispatchTraceRequest(webMvcProperties.isDispatchTraceRequest());\n\t\t\tdispatcherServlet.setThrowExceptionIfNoHandlerFound(webMvcProperties.isThrowExceptionIfNoHandlerFound());\n\t\t\tdispatcherServlet.setPublishEvents(webMvcProperties.isPublishRequestHandledEvents());\n\t\t\tdispatcherServlet.setEnableLoggingRequestDetails(webMvcProperties.isLogRequestDetails());\n\t\t\treturn dispatcherServlet;\n\t\t}\n```\n\n之前介绍介绍的很多组件，比如各种解析器都是在这个类中注册进Spring容器中的\n\n其中的参数：WebMvcProperties webMvcProperties，对应配置文件中spring.mvc下的配置项\n\n```\n@ConfigurationProperties(prefix = \"spring.mvc\")\npublic class WebMvcProperties {\n```\n\n然后通过dispatcherServletRegistration这个方法将DispatcherServlet注册进Servlet框架中\n\n```java\n\t\t@Bean(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)\n\t\t@ConditionalOnBean(value = DispatcherServlet.class, name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)\n\t\tpublic DispatcherServletRegistrationBean dispatcherServletRegistration(DispatcherServlet dispatcherServlet,\n\t\t\t\tWebMvcProperties webMvcProperties, ObjectProvider<MultipartConfigElement> multipartConfig) {\n\t\t\tDispatcherServletRegistrationBean registration = new DispatcherServletRegistrationBean(dispatcherServlet,\n\t\t\t\t\twebMvcProperties.getServlet().getPath());\n\t\t\tregistration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);\n\t\t\tregistration.setLoadOnStartup(webMvcProperties.getServlet().getLoadOnStartup());\n\t\t\tmultipartConfig.ifAvailable(registration::setMultipartConfig);\n\t\t\treturn registration;\n\t\t}\n```\n\n既然是Servlet，就有需要由它来处理的URL\n\n```java\n\t\t\tDispatcherServletRegistrationBean registration = new DispatcherServletRegistrationBean(dispatcherServlet,\n\t\t\t\t\twebMvcProperties.getServlet().getPath());\n```\n\n通过这个方法向服务器中添加Servlet，而它的请求路径是webMvcProperties.getServlet().getPath())，而这个方法的 值就是我们配置的spring.mvc.servlet.path，这个值默认是`/`，也就默认情况下，所有请求都由dispatcherServlet来处理（也就是由Springboot的Web框架来处理）\n\n所以我们用Spring处理请求的时候，实际上用的是一个Servlet：DispatcherServlet，在这个Servlet中处理所有的请求。\n\ntomcat在一个请求有多个Servlet可以处理时，使用精确优先原则，它会在所有能处理的Servlet中，选择前缀匹配程度最长的Servlet进行处理。\n\n例如\n\n如果有两个Servlet，A对应路由`/my`，B对应路由`/my/1`，此时如果收到了`/my/1/2`的请求，则会交给B来处理，而如果收到`/my/2`的请求，则会由A来处理。\n\n我们自定义的原生Servlet组件和Spring的DispatcherServlet也是上述这种关系。DispatcherServlet默认处理的URL是`/`也就是所有的请求，而我们自定义的Servlet对应的URL是`/my/`，所以我们发送/my请求后，根据精确匹配原则会交付给我们自定义的MyServlet，由Tomcat直接来处理，而如果不是/my/开头的请求，就会和DispatcherServlet匹配，然后走Spring的流程后再交给Tomcat来处理。\n\n![image-20220507224859818](pictures/38456e2bfda4fea76779e78a77c816e1.png)\n\n所以我们发送的/my请求没有被Spring拦截的原因就是它是由我们定义的MyServlet处理的，而不是由Spring里的DispatcherServlet来处理，自然不会触发DispatcherServlet中定义的拦截器。\n\n## Spring嵌入式Servlet容器\n\n### 底层原理\n\nSpringboot如果发现当前是Web应用，就会自动导入Tomcat服务器所需的依赖，并且会创建一个Web类型的IOC容器ServletWebServerApplicationContext\n\nServletWebServerApplicationContext 启动的时候需要用到 ServletWebServerFactory 来创建服务器（Servlet 的web服务器工厂——>Servlet 的web服务器）。而SpringBoot底层默认有很多的WebServer工厂（ServletWebServerFactoryConfiguration内创建Bean），如：TomcatServletWebServerFactory，JettyServletWebServerFactory，UndertowServletWebServerFactory，对应三种不同的服务器（Tomcat，Jetty，Undertow）。这几个服务器工厂是在ServletWebServerFactoryAutoConfiguration这个自动配置类中放入Spring容器的，而这个自动配置需要使用使用ServletWebServerFactoryConfiguration这个配置类。\n\n```java\n@Configuration(proxyBeanMethods = false)\nclass ServletWebServerFactoryConfiguration {\n\n\t@Configuration(proxyBeanMethods = false)\n    //需要tomcat依赖才会放入TomcatServletWebServerFactory\n\t@ConditionalOnClass({ Servlet.class, Tomcat.class, UpgradeProtocol.class })\n\t@ConditionalOnMissingBean(value = ServletWebServerFactory.class, search = SearchStrategy.CURRENT)\n\tstatic class EmbeddedTomcat {\n\n\t\t@Bean\n\t\tTomcatServletWebServerFactory tomcatServletWebServerFactory(\n\t\t\t\tObjectProvider<TomcatConnectorCustomizer> connectorCustomizers,\n\t\t\t\tObjectProvider<TomcatContextCustomizer> contextCustomizers,\n\t\t\t\tObjectProvider<TomcatProtocolHandlerCustomizer<?>> protocolHandlerCustomizers) {\n\t\t\tTomcatServletWebServerFactory factory = new TomcatServletWebServerFactory();\n\t\t\tfactory.getTomcatConnectorCustomizers()\n\t\t\t\t\t.addAll(connectorCustomizers.orderedStream().collect(Collectors.toList()));\n\t\t\tfactory.getTomcatContextCustomizers()\n\t\t\t\t\t.addAll(contextCustomizers.orderedStream().collect(Collectors.toList()));\n\t\t\tfactory.getTomcatProtocolHandlerCustomizers()\n\t\t\t\t\t.addAll(protocolHandlerCustomizers.orderedStream().collect(Collectors.toList()));\n\t\t\treturn factory;\n\t\t}\n\n\t}\n\n\t/**\n\t * Nested configuration if Jetty is being used.\n\t */\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnClass({ Servlet.class, Server.class, Loader.class, WebAppContext.class })\n\t@ConditionalOnMissingBean(value = ServletWebServerFactory.class, search = SearchStrategy.CURRENT)\n\tstatic class EmbeddedJetty {\n\n\t\t@Bean\n\t\tJettyServletWebServerFactory JettyServletWebServerFactory(\n\t\t\t\tObjectProvider<JettyServerCustomizer> serverCustomizers) {\n\t\t\tJettyServletWebServerFactory factory = new JettyServletWebServerFactory();\n\t\t\tfactory.getServerCustomizers().addAll(serverCustomizers.orderedStream().collect(Collectors.toList()));\n\t\t\treturn factory;\n\t\t}\n\n\t}\n\n\t/**\n\t * Nested configuration if Undertow is being used.\n\t */\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnClass({ Servlet.class, Undertow.class, SslClientAuthMode.class })\n\t@ConditionalOnMissingBean(value = ServletWebServerFactory.class, search = SearchStrategy.CURRENT)\n\tstatic class EmbeddedUndertow {\n\n\t\t@Bean\n\t\tUndertowServletWebServerFactory undertowServletWebServerFactory(\n\t\t\t\tObjectProvider<UndertowDeploymentInfoCustomizer> deploymentInfoCustomizers,\n\t\t\t\tObjectProvider<UndertowBuilderCustomizer> builderCustomizers) {\n\t\t\tUndertowServletWebServerFactory factory = new UndertowServletWebServerFactory();\n\t\t\tfactory.getDeploymentInfoCustomizers()\n\t\t\t\t\t.addAll(deploymentInfoCustomizers.orderedStream().collect(Collectors.toList()));\n\t\t\tfactory.getBuilderCustomizers().addAll(builderCustomizers.orderedStream().collect(Collectors.toList()));\n\t\t\treturn factory;\n\t\t}\n\n\t\t@Bean\n\t\tUndertowServletWebServerFactoryCustomizer undertowServletWebServerFactoryCustomizer(\n\t\t\t\tServerProperties serverProperties) {\n\t\t\treturn new UndertowServletWebServerFactoryCustomizer(serverProperties);\n\t\t}\n\t}\n}\n```\n\n可以看到这个配置类用于向Spring容器中添加三种服务器工厂，利用条件装配判断放入哪些服务器工厂，只有在导入了所依赖的jar包后，相关的配置才能生效。\n\n```java\n//导入tomcat依赖才会放入TomcatServletWebServerFactory\n@ConditionalOnClass({ Servlet.class, Tomcat.class, UpgradeProtocol.class })\n//导入Jetty依赖才会引入JettyServletWebServerFactory\n@ConditionalOnClass({ Servlet.class, Server.class, Loader.class, WebAppContext.class })\n//导入Undertow的依赖才会放入UndertowServletWebServerFactory\n@ConditionalOnClass({ Servlet.class, Undertow.class, SslClientAuthMode.class })\n```\n\n而我们在pom文件导入的spring-boot-starter-web依赖会默认导入tomcat的依赖，所以默认会放入导入tomcat依赖才会放入TomcatServletWebServerFactory这个服务器工厂，得到Tomcat服务器\n\n```\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n```\n\n三种服务器工厂的都是ServletWebServerFactory的子类，在查找服务器工厂时会从Spring容器中拿到所有ServletWebServerFactory类型的bean，如果数量是0个或者多个都会抛出异常，因而Spring容器中只能有一个服务器工厂（默认是Tomcat）\n\n```java\n\tprotected ServletWebServerFactory getWebServerFactory() {\n\t\t// Use bean names so that we don't consider the hierarchy\n\t\tString[] beanNames = getBeanFactory().getBeanNamesForType(ServletWebServerFactory.class);\n\t\tif (beanNames.length == 0) {\n\t\t\tthrow new ApplicationContextException(\"Unable to start ServletWebServerApplicationContext due to missing \"\n\t\t\t\t\t+ \"ServletWebServerFactory bean.\");\n\t\t}\n\t\tif (beanNames.length > 1) {\n\t\t\tthrow new ApplicationContextException(\"Unable to start ServletWebServerApplicationContext due to multiple \"\n\t\t\t\t\t+ \"ServletWebServerFactory beans : \" + StringUtils.arrayToCommaDelimitedString(beanNames));\n\t\t}\n\t\treturn getBeanFactory().getBean(beanNames[0], ServletWebServerFactory.class);\n\t}\n```\n\nSpring容器启动的时候会调用ServletWebServerApplicationContext类的onRefresh方法\n\n```java\n\t@Override\n\tprotected void onRefresh() {\n\t\tsuper.onRefresh();\n\t\ttry {\n\t\t\tcreateWebServer();\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\tthrow new ApplicationContextException(\"Unable to start web server\", ex);\n\t\t}\n\t}\n```\n\n在这个方法中调用createWebServer()方法创建服务器\n\n```java\n\tprivate void createWebServer() {\n\t\tWebServer webServer = this.webServer;\n        //尝试获取IOC容器，默认是空\n\t\tServletContext servletContext = getServletContext();\n\t\tif (webServer == null && servletContext == null) {\n            //从Spring容器中获取服务器工厂，如果有0个或者多个会抛出异常，默认是Tomcat\n\t\t\tServletWebServerFactory factory = getWebServerFactory();\n            //使用服务器工厂创建服务器\n\t\t\tthis.webServer = factory.getWebServer(getSelfInitializer());\n\t\t\tgetBeanFactory().registerSingleton(\"webServerGracefulShutdown\",\n\t\t\t\t\tnew WebServerGracefulShutdownLifecycle(this.webServer));\n\t\t\tgetBeanFactory().registerSingleton(\"webServerStartStop\",\n\t\t\t\t\tnew WebServerStartStopLifecycle(this, this.webServer));\n\t\t}\n\t\telse if (servletContext != null) {\n\t\t\ttry {\n\t\t\t\tgetSelfInitializer().onStartup(servletContext);\n\t\t\t}\n\t\t\tcatch (ServletException ex) {\n\t\t\t\tthrow new ApplicationContextException(\"Cannot initialize servlet context\", ex);\n\t\t\t}\n\t\t}\n\t\tinitPropertySources();\n\t}\n```\n\n创建服务器的方法getWebServer：\n\n```java\n@Override\npublic WebServer getWebServer(ServletContextInitializer... initializers) {\n   if (this.disableMBeanRegistry) {\n      Registry.disableRegistry();\n   }\n   //获取一个tomcat服务器对象\n   Tomcat tomcat = new Tomcat();\n   //下面是配置tomcat的一些参数\n   File baseDir = (this.baseDirectory != null) ? this.baseDirectory : createTempDir(\"tomcat\");\n   tomcat.setBaseDir(baseDir.getAbsolutePath());\n   Connector connector = new Connector(this.protocol);\n   connector.setThrowOnFailure(true);\n   tomcat.getService().addConnector(connector);\n   customizeConnector(connector);\n   tomcat.setConnector(connector);\n   tomcat.getHost().setAutoDeploy(false);\n   configureEngine(tomcat.getEngine());\n   for (Connector additionalConnector : this.additionalTomcatConnectors) {\n      tomcat.getService().addConnector(additionalConnector);\n   }\n   prepareContext(tomcat.getHost(), initializers);\n   return getTomcatWebServer(tomcat);\n}\n```\n\n所以实际上内嵌服务器就是调用封装好的服务器对象，以前启动Tomcat服务器的时候，是以服务器为顶层调用SpringMVC的逻辑，而在调用之前也会设置这些参数。而Springboot内嵌的Tomcat服务器则是以Springboot为顶层，调用Tomcat对象。如下图所示，tomcat对象中有main方法可以直接运行。\n\n![image-20220508004519983](pictures/7586ecf7941b2ea8d5e4867c9eeb1414.png)\n\n通过tomcat服务器对象会得到一个WebServer对象来操作Tomcat服务器\n\n```java\npublic interface WebServer {\n\t//启动服务器\n\tvoid start() throws WebServerException;\n\t//关闭服务器\n\tvoid stop() throws WebServerException;\n\t//获得监听的端口\n\tint getPort();\n\n\tdefault void shutDownGracefully(GracefulShutdownCallback callback) {\n\t\tcallback.shutdownComplete(GracefulShutdownResult.IMMEDIATE);\n\t}\n\n}\n```\n\n创建TomcatWebServer时，会在构造器中调用initialize()方法，这个方法中会调用this.tomcat.start()来启动服务器\n\n```java\n\tpublic TomcatWebServer(Tomcat tomcat, boolean autoStart, Shutdown shutdown) {\n\t\tAssert.notNull(tomcat, \"Tomcat Server must not be null\");\n\t\tthis.tomcat = tomcat;\n\t\tthis.autoStart = autoStart;\n\t\tthis.gracefulShutdown = (shutdown == Shutdown.GRACEFUL) ? new GracefulShutdown(tomcat) : null;\n\t\tinitialize();\n\t}\n```\n\n### 切换服务器（一般使用Tomcat即可）\n\n如果想要切换服务器的类型，我们只需要将tomcat服务器的依赖排除，然后导入我们需要的服务器的依赖即可，然后根据上面所说的自动装配原理就会自动帮我们向Spring容器中添加对应的服务器工厂。\n\n```xml\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n            <!-- 排除tomcat依赖 -->\n            <exclusions>\n                <exclusion>\n                    <groupId>org.springframework.boot</groupId>\n                    <artifactId>spring-boot-starter-tomcat</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n\t\t<!-- 引入undertow依赖 -->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-undertow</artifactId>\n        </dependency>\n```\n\n根据我们之前的分析，Spring容器中只能有一个服务器工厂，所以需要排除tomcat依赖，防止Spring将tomcat的服务器工厂注册进Spring容器中\n\n### 定制服务器\n\n1.修改配置文件\n\n```java\n@Configuration(proxyBeanMethods = false)\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)\n@ConditionalOnClass(ServletRequest.class)\n@ConditionalOnWebApplication(type = Type.SERVLET)\n@EnableConfigurationProperties(ServerProperties.class)\n@Import({ ServletWebServerFactoryAutoConfiguration.BeanPostProcessorsRegistrar.class,\n\t\tServletWebServerFactoryConfiguration.EmbeddedTomcat.class,\n\t\tServletWebServerFactoryConfiguration.EmbeddedJetty.class,\n\t\tServletWebServerFactoryConfiguration.EmbeddedUndertow.class })\npublic class ServletWebServerFactoryAutoConfiguration\n```\n\nServletWebServerFactoryAutoConfiguration这个自动配置类需要使用ServerProperties这个类\n\n```\n@ConfigurationProperties(prefix = \"server\", ignoreUnknownFields = true)\npublic class ServerProperties \n```\n\n这个类和以server开头的配置项绑定在一起，所以配置项在server开头的配置项下\n\n2.直接向Spring容器中添加一个我们定制的服务器工厂\n\n3.可以实现一个定制化器：\n\n```java\nimport org.springframework.boot.web.server.WebServerFactoryCustomizer;\nimport org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class CustomizationBean implements WebServerFactoryCustomizer<ConfigurableServletWebServerFactory> {\n\n    @Override\n    public void customize(ConfigurableServletWebServerFactory server) {\n        server.setPort(9000);\n    }\n}\n```\n\n### 定制化原理\n\n根据前面的总结，我们可以得到Spring配置的原理\n\n导入场景的starter包-->相关的AutoConfigration自动配置生效-->自动配置类会引入对应的Properties配置类-->配置类会绑定配置文件的参数\n\n所以一般情况下，我们想要修改Springbooot的功能只需要导入对应场景的包，然后修改配置文件即可\n\n总结起来，常用的定制化方式有：\n\n1.修改配置文件\n\n2.@Confugration+@Bean注解根据Springboot的执行逻辑添加组件\n\n3.xxxCustomizer\n\n4.高级配置：修改Springboot的底层组件，比如RequestMappingHandlerMapping，可以通过以下方式来实现\n\n```java\n    @Bean\n    public WebMvcRegistrations registrations(){\n        return new WebMvcRegistrations() {\n            @Override\n            public RequestMappingHandlerMapping getRequestMappingHandlerMapping() {\n                return WebMvcRegistrations.super.getRequestMappingHandlerMapping();\n            }\n        };\n    }\n```\n\n5.高级配置：全面接管SpringMVC：@EnableWebMvc+WebMvcConfigurer,加上这个注解后，Springboot一些相关的自动配置就会失效，需要我们进行手动配置。\n\n如果我们不加@EnableWebMvc这个注解，则会在原先配置的基础上添加（修改）成我们需要的配置，如果我们注册了多个WebMvcConfigurer类型的组件，Springboot会让所有的WebMvcConfigurer生效，这个过程发生在DelegatingWebMvcConfiguration类中：\n\n```java\n\t@Autowired(required = false)\n\tpublic void setConfigurers(List<WebMvcConfigurer> configurers) {\n\t\tif (!CollectionUtils.isEmpty(configurers)) {\n\t\t\tthis.configurers.addWebMvcConfigurers(configurers);\n\t\t}\n\t}\n```\n\nTips：@Autowired作用在普通方法上，会在注入的时候调用一次该方法，如果方法中有实体参数，会对方法里面的参数进行装配，并调用一次该方法。这个可以用来在自动注入的时候做一些初始化操作。\n\nDelegatingWebMvcConfiguration这个类保证了SpringMVC最基本的使用（即使我们进行了全面接管，但是一些底层的一定要有的组件还是会放入Spring容器）\n\n```java\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnWebApplication(type = Type.SERVLET)\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class })\n@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)\n@AutoConfigureAfter({ DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,\n\t\tValidationAutoConfiguration.class })\npublic class WebMvcAutoConfiguration {\n```\n\nSpringMVC的自动装配原理集中在WebMvcAutoConfiguration这个配置类中，而这个配置类生效的条件之一是@ConditionalOnMissingBean(WebMvcConfigurationSupport.class) 也就是Spring容器中不能有WebMvcConfigurationSupport类型的组件，否则自动配置就不会生效。\n\n而@EnableWebMvc注解的定义如下：\n\n```java\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\n@Documented\n@Import(DelegatingWebMvcConfiguration.class)\npublic @interface EnableWebMvc {\n}\n```\n\n因而加上这个注解后会自动帮我们导入DelegatingWebMvcConfiguration这个类的一个组件，而这个类是WebMvcConfigurationSupport这个类的子类，所以会导致自动配置类失效（也同时提醒我们不要往Spring容器中添加功能时不要继承WebMvcConfigurationSupport，而应该用WebMvcConfigurer），所以DelegatingWebMvcConfiguration在WebMvcAutoConfiguration生效前，默认是不在Spring容器中的，会在我们全面接管SpringMvc的时候提供一些基础的功能，而在WebMvcAutoConfiguration里面继承了DelegatingWebMvcConfiguration实现了更多的功能，并保留了让所有WebMvcConfigurer生效的方法，所以无论是全面接管SpringMVC还是使用默认配置，容器启动的时候会让所有的WebMvcConfigurer生效\n\n```\n@Configuration(proxyBeanMethods = false)\n\tpublic static class EnableWebMvcConfiguration extends DelegatingWebMvcConfiguration implements ResourceLoaderAware {\n```\n\n## 数据操作\n\n### 依赖引入\n\n使用jdbc操作数据库：\n\n```xml\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-jdbc</artifactId>\n        </dependency>\n```\n\n![image-20220508140938283](pictures/9d915490f9a0ab4ef17c92d2c88236bc.png)\n\nspring-boot-starter-data-jdbc中为我们整合了数据库连接池，jdbc编程和数据库事务，但是没有数据库连接驱动，这是因为Spring并不知道我们要使用哪种数据库，因而只导入了通用的依赖\n\n引入连接器依赖：\n\n```xml\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>8.0.11</version>\n        </dependency>\n```\n\nSpring会帮我们进行版本仲裁，但是默认的版本是最新的数据库的版本，也就是8.0以上的版本。实际上这里的数据库连接器的配置应当与本地数据库的版本相匹配，如果本地数据库是5.x的数据库就不要用8.0.x的连接器，而应该用5.x的连接器\n\n修改版本方法：\n\n1.直接引入具体版本（maven的就近依赖原则，优先使用我们设置的版本）\n\n2.修改properties，也就修改了Spring默认配置的数据库版本（属性就近优先原则，优先使用我们配置的属性）\n\n```xml\n    <properties>\n        <java.version>1.8</java.version>\n        <mysql.version>8.0.11</mysql.version>\n    </properties>\n```\n\n### 自动配置\n\n#### DataSourceAutoConfiguration\n\n自动配置数据源和连接池（默认使用HikariDataSource连接池）\n\n```java\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass({ DataSource.class, EmbeddedDatabaseType.class })\n@ConditionalOnMissingBean(type = \"io.r2dbc.spi.ConnectionFactory\")\n@EnableConfigurationProperties(DataSourceProperties.class)\n@Import({ DataSourcePoolMetadataProvidersConfiguration.class, DataSourceInitializationConfiguration.class })\npublic class DataSourceAutoConfiguration {\n```\n\n`@ConditionalOnMissingBean(type = \"io.r2dbc.spi.ConnectionFactory\")` 如果没有使用响应式编程框架则自动配置这个类\n\n`@EnableConfigurationProperties(DataSourceProperties.class)`绑定配置类DataSourceProperties\n\nDataSourceProperties绑定的配置为：spring.datasource下的所有配置\n\n例如数据库的账号，密码，URL等信息都会绑定到这个配置类中\n\n```\n@ConfigurationProperties(prefix = \"spring.datasource\")\npublic class DataSourceProperties implements BeanClassLoaderAware, InitializingBean {\n```\n\n如果我们没有配置数据库连接池，Spring会帮我们配置一个数据库连接池：\n\n```java\n\t@Configuration(proxyBeanMethods = false)\n\t@Conditional(PooledDataSourceCondition.class)\n\t//如果没有配置数据库连接池，这个类才会生效\n\t@ConditionalOnMissingBean({ DataSource.class, XADataSource.class })\n\t//引入数据库连接池相关的依赖\n\t@Import({ DataSourceConfiguration.Hikari.class, DataSourceConfiguration.Tomcat.class,\n\t\t\tDataSourceConfiguration.Dbcp2.class, DataSourceConfiguration.Generic.class,\n\t\t\tDataSourceJmxConfiguration.class })\n\tprotected static class PooledDataSourceConfiguration {\n\n\t}\n```\n\n而数据库连接池是如何创建的，我们可以来到DataSourceConfiguration配置类：\n\n在有相关的依赖的时候这个类才会生效，然后才会创建HikariDataSource的数据源（其他的还有Tomcat数据源等，但是默认是HikariDataSource数据源）\n\n```java\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnClass(HikariDataSource.class)\n\t@ConditionalOnMissingBean(DataSource.class)\n\t@ConditionalOnProperty(name = \"spring.datasource.type\", havingValue = \"com.zaxxer.hikari.HikariDataSource\",\n\t\t\tmatchIfMissing = true)\n\tstatic class Hikari {\n\n\t\t@Bean\n\t\t@ConfigurationProperties(prefix = \"spring.datasource.hikari\")\n\t\tHikariDataSource dataSource(DataSourceProperties properties) {\n\t\t\tHikariDataSource dataSource = createDataSource(properties, HikariDataSource.class);\n\t\t\tif (StringUtils.hasText(properties.getName())) {\n\t\t\t\tdataSource.setPoolName(properties.getName());\n\t\t\t}\n\t\t\treturn dataSource;\n\t\t}\n\n\t}\n```\n\n数据源配置（Mysql8.0以上）：\n\n```yml\nspring:\n  datasource:\n    name: document\n    url: jdbc:mysql://localhost:3306/document?characterEncoding=utf8&useSSL=false&serverTimezone=UTC&rewriteBatchedStatements=true&useJDBCCompliantTimezoneShift=true\n    username: root\n    password: 123456\n    driver-class-name: com.mysql.cj.jdbc.Driver\n#    type: com.zaxxer.hikari.HikariDataSource #默认是HikariDataSource数据库连接池\n```\n\n数据源配置（Mysql5.x）：\n\n```yml\nspring:\n  datasource:\n    url: jdbc:mysql://localhost:3306/document\n    username: root\n    password: 123456\n    driver-class-name: com.mysql.jdbc.Driver\n```\n\n#### DataSourceTransactionManagerAutoConfiguration\n\n事务管理器自动配置\n\n#### JdbcTemplateAutoConfiguration\n\n自动配置JdbcTemplate，可以用于增删改查\n\n```java\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass({ DataSource.class, JdbcTemplate.class })\n@ConditionalOnSingleCandidate(DataSource.class)\n@AutoConfigureAfter(DataSourceAutoConfiguration.class)\n@EnableConfigurationProperties(JdbcProperties.class)\n@Import({ JdbcTemplateConfiguration.class, NamedParameterJdbcTemplateConfiguration.class })\npublic class JdbcTemplateAutoConfiguration {\n\n}\n```\n\n其中@EnableConfigurationProperties(JdbcProperties.class)代表与JdbcProperties类绑定，而这个类与@ConfigurationProperties(prefix = \"spring.jdbc\")绑定，也就是可以通过修改spring.jdbc下面的配置来配置JdbcTemplate的功能\n\n```yml\nspring:\n  jdbc:\n    template:\n      query-timeout: 3\n```\n\n#### 扩展\n\nJndiDataSourceAutoConfiguration\n\nJDNI自动配置\n\nXADataSourceAutoConfiguration\n\n分布式事务自动配置\n\n### 整合Druid数据源\n\nHikariDataSource是目前市面上性能最好的数据源，而Druid对性能监控，防止sql注入攻击有整套的解决方案\n\n```java\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>druid</artifactId>\n            <version>1.1.17</version>\n        </dependency>\n```\n\n配置HikariDataSource的代码块：\n\n```java\n\t@Configuration(proxyBeanMethods = false)\n\t@ConditionalOnClass(HikariDataSource.class)\n\t@ConditionalOnMissingBean(DataSource.class)\n\t@ConditionalOnProperty(name = \"spring.datasource.type\", havingValue = \"com.zaxxer.hikari.HikariDataSource\",\n\t\t\tmatchIfMissing = true)\n\tstatic class Hikari {\n\n\t\t@Bean\n\t\t@ConfigurationProperties(prefix = \"spring.datasource.hikari\")\n\t\tHikariDataSource dataSource(DataSourceProperties properties) {\n\t\t\tHikariDataSource dataSource = createDataSource(properties, HikariDataSource.class);\n\t\t\tif (StringUtils.hasText(properties.getName())) {\n\t\t\t\tdataSource.setPoolName(properties.getName());\n\t\t\t}\n\t\t\treturn dataSource;\n\t\t}\n\n\t}\n```\n\n@ConditionalOnMissingBean(DataSource.class)表示如果Spring容器中没有DataSource数据源来回帮我们配置HikariDataSource数据源，如果我们配置了DataSource就用我们自己的数据源。向Spring容器添加我们自己的数据源即可。\n\n方式一：用户名密码直接在配置类中设置用户名密码\n\n```java\n@Configuration\npublic class DataSourceConfig {\n    @Bean\n    DataSource druidDataSource(){\n        DruidDataSource druidDataSource=new DruidDataSource();\n        druidDataSource.setUrl();\n        druidDataSource.setUsername();\n        druidDataSource.setPassword();\n        return druidDataSource;\n    }\n}\n```\n\n但是这样不方便修改，所以我们可以使用配置文件中配置的参数\n\n```java\n@Configuration\npublic class DataSourceConfig {\n    @Bean\n    @ConfigurationProperties(\"spring.datasource\")\n    DataSource druidDataSource(){\n        DruidDataSource druidDataSource=new DruidDataSource();\n        return druidDataSource;\n    }\n}\n```\n\n@ConfigurationProperties(\"spring.datasource\") 这个注解我们在研究源码的时候看了很多回了，用于将返回值中对应的名称的参数和配置文件中对应的名称的参数绑定在一起。\n\nTips：Spring中的测试环节可以直接在Test目录下进行，这样就不用使用postman发请求了\n\n```java\n@SpringBootTest\nclass MydemoApplicationTests {\n\n    @Resource\n    JdbcTemplate jdbcTemplate;\n    @Test\n    void contextLoads() {\n        List<Usert> userts = jdbcTemplate.query(\"select * from usert\",new BeanPropertyRowMapper<>(Usert.class));\n        userts.forEach((System.out::println));\n    }\n\n}\n```\n\n### Druid数据监控\n\n#### 监控SQL\n\n整合Druid数据源后，我们就可以通过配置Druid监控页来监控数据库的状态\n\n想要达成监控功能就需要配置一个给Druid使用的Servlet\n\n```java\n    @Bean\n    public ServletRegistrationBean servletRegistrationBean(){\n        return new ServletRegistrationBean<>(new StatViewServlet(),\"/druid/*\");\n    }\n```\n\n这样/druid/*的请求就会交给Druid中的StatViewServlet来处理，而不会走Spring的流程，如下图所示，获得成功\n\n![image-20220508171446887](pictures/22fcaaf1be52e5d0800f4db8995570bf.png)\n\n但是这样只能显示界面，要统计SQL语句执行的各种信息还需要在配置数据源时加上druidDataSource.setFilters(\"stat\");\n\n```java\n    @SneakyThrows\n    @Bean\n    @ConfigurationProperties(\"spring.datasource\")\n    DataSource druidDataSource(){\n        DruidDataSource druidDataSource=new DruidDataSource();\n        druidDataSource.setFilters(\"stat\");\n        return druidDataSource;\n    }\n```\n\n#### 监控请求\n\n配置这个后监控页的URI请求就有数据来源\n\n```java\n    @Bean\n    public FilterRegistrationBean webStatFilter(){\n        WebStatFilter webStatFilter = new WebStatFilter();\n\n        FilterRegistrationBean<WebStatFilter> filterRegistrationBean = new FilterRegistrationBean<>(webStatFilter);\n        filterRegistrationBean.setUrlPatterns(Arrays.asList(\"/*\"));\n        filterRegistrationBean.addInitParameter(\"exclusions\",\"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*\");\n\n        return filterRegistrationBean;\n    }\n```\n\n![image-20220508175213844](pictures/3be6aa060673577be3bf992760f16089.png)\n\n![image-20220508211828211](pictures/65a129f1a71eac87e2c80c5fce3facc1.png)\n\n#### 开启防火墙\n\n```java\n    @SneakyThrows\n    @Bean\n    @ConfigurationProperties(\"spring.datasource\")\n    DataSource druidDataSource(){\n        DruidDataSource druidDataSource=new DruidDataSource();\n        druidDataSource.setFilters(\"stat,wall\");\n        return druidDataSource;\n    }\n```\n\n而我们上面也用到过，在@ConfigurationProperties(\"spring.datasource\")注解下的方法中，使用set方法配置的属性，在配置文件中配置同样有效：\n\n```yml\n  datasource:\n    name: document\n    url: jdbc:mysql://localhost:3306/document?characterEncoding=utf8&useSSL=false&serverTimezone=UTC&rewriteBatchedStatements=true&useJDBCCompliantTimezoneShift=true\n    username: root\n    password: 123456\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    Filters: stat,wall\n```\n\nstat代表状态监控\n\nwall代表防火墙\n\n不过Filters会变黄，因为这个并不是Spring的配置\n\nXML配置->配置类配置：看到bean标签就向Spring容器中通过@Bean注解添加一个bean，下面的其他标签就只是它的属性值\n\nhttps://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatViewServlet%E9%85%8D%E7%BD%AE\n\n#### 设置访问的账号和密码\n\n```java\n    @Bean\n\t//用于设置监控页的访问路径\n    public ServletRegistrationBean servletRegistrationBean(){\n        ServletRegistrationBean<StatViewServlet> registrationBean = new ServletRegistrationBean<>(new StatViewServlet(), \"/druid/*\");\n        //监控页账号密码：\n        registrationBean.addInitParameter(\"loginUsername\",\"admin\");\n        registrationBean.addInitParameter(\"loginPassword\",\"123456\");\n        return registrationBean;\n    }\n```\n\n完整配置：\n\n```java\npackage com.demo.config;\n\nimport com.alibaba.druid.pool.DruidDataSource;\nimport com.alibaba.druid.support.http.StatViewServlet;\nimport com.alibaba.druid.support.http.WebStatFilter;\nimport lombok.SneakyThrows;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.web.servlet.FilterRegistrationBean;\nimport org.springframework.boot.web.servlet.ServletRegistrationBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport javax.sql.DataSource;\nimport java.util.Arrays;\n\n/**\n * @author 李天航\n */\n@Configuration\npublic class DataSourceConfig {\n    @SneakyThrows\n    @Bean\n    @ConfigurationProperties(\"spring.datasource\")\n    DataSource druidDataSource(){\n        DruidDataSource druidDataSource=new DruidDataSource();\n        druidDataSource.setFilters(\"stat,wall\");\n        return druidDataSource;\n    }\n\n    @Bean\n    public ServletRegistrationBean servletRegistrationBean(){\n        ServletRegistrationBean<StatViewServlet> registrationBean = new ServletRegistrationBean<>(new StatViewServlet(), \"/druid/*\");\n        //监控页账号密码：\n        registrationBean.addInitParameter(\"loginUsername\",\"admin\");\n        registrationBean.addInitParameter(\"loginPassword\",\"123456\");\n        return registrationBean;\n    }\n\n    @Bean\n    public FilterRegistrationBean webStatFilter(){\n        WebStatFilter webStatFilter = new WebStatFilter();\n\n        FilterRegistrationBean<WebStatFilter> filterRegistrationBean = new FilterRegistrationBean<>(webStatFilter);\n        filterRegistrationBean.setUrlPatterns(Arrays.asList(\"/*\"));\n        filterRegistrationBean.addInitParameter(\"exclusions\",\"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*\");\n\n        return filterRegistrationBean;\n    }\n}\n```\n\n\n\n### Druid Starter配置连接池\n\n上述的配置过程显得过去麻烦了，如果有一个自动配置类能像其他组件一样自动帮我们把上述组件配置好，然后用一个配置类绑定配置文件，然后我们直接修改配置文件就会方便很多，这个starter就是druid-spring-boot-starter\n\n```xml\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>druid-spring-boot-starter</artifactId>\n            <version>1.1.17</version>\n        </dependency>\n```\n\n我们来看一下starter源码：\n\n```java\n@Configuration\n//必须导入DruidDataSource的依赖\n@ConditionalOnClass(DruidDataSource.class)\n//必须在DataSourceAutoConfiguration之前配置\n@AutoConfigureBefore(DataSourceAutoConfiguration.class)\n@EnableConfigurationProperties({DruidStatProperties.class, DataSourceProperties.class})\n//引入下面四种依赖\n@Import({DruidSpringAopConfiguration.class,\n    DruidStatViewServletConfiguration.class,\n    DruidWebStatFilterConfiguration.class,\n    DruidFilterConfiguration.class})\npublic class DruidDataSourceAutoConfigure {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(DruidDataSourceAutoConfigure.class);\n\n    @Bean(initMethod = \"init\")\n    @ConditionalOnMissingBean\n    public DataSource dataSource() {\n        LOGGER.info(\"Init DruidDataSource\");\n        return new DruidDataSourceWrapper();\n    }\n}\n```\n\n我们可以看到注解@AutoConfigureBefore(DataSourceAutoConfiguration.class) ，申明了要在DataSourceAutoConfiguration这个配置类生效之前，让当前这个配置类生效（因为如果DataSourceAutoConfiguration先生效就会像Spring容器放入HikariDataSource），这样我们想要的DruidDataSource就不会被放进去，所以必须要在DataSourceAutoConfiguration之前装配DruidDataSource）\n\n其中引入了四种依赖：\n\nDruidSpringAopConfiguration.class\t用于监控各种指标\n\n对应的配置项是spring.datasource.druid.aop-patterns\n\nDruidStatViewServletConfiguration.class\n\n这个类用于向Spring中注册一个用于监控的Servlet，用于开启监控页（和我们前面自己的配置的大致一样，只是这里配置的参数更详细一些）\n\n对应的配置项是spring.datasource.druid.stat-view-servlet\n\n```java\n@ConditionalOnWebApplication\n@ConditionalOnProperty(name = \"spring.datasource.druid.stat-view-servlet.enabled\", havingValue = \"true\")\npublic class DruidStatViewServletConfiguration {\n    private static final String DEFAULT_ALLOW_IP = \"127.0.0.1\";\n\n    @Bean\n    public ServletRegistrationBean statViewServletRegistrationBean(DruidStatProperties properties) {\n        DruidStatProperties.StatViewServlet config = properties.getStatViewServlet();\n        ServletRegistrationBean registrationBean = new ServletRegistrationBean();\n        registrationBean.setServlet(new StatViewServlet());\n        registrationBean.addUrlMappings(config.getUrlPattern() != null ? config.getUrlPattern() : \"/druid/*\");\n        if (config.getAllow() != null) {\n            registrationBean.addInitParameter(\"allow\", config.getAllow());\n        } else {\n            registrationBean.addInitParameter(\"allow\", DEFAULT_ALLOW_IP);\n        }\n        if (config.getDeny() != null) {\n            registrationBean.addInitParameter(\"deny\", config.getDeny());\n        }\n        if (config.getLoginUsername() != null) {\n            registrationBean.addInitParameter(\"loginUsername\", config.getLoginUsername());\n        }\n        if (config.getLoginPassword() != null) {\n            registrationBean.addInitParameter(\"loginPassword\", config.getLoginPassword());\n        }\n        if (config.getResetEnable() != null) {\n            registrationBean.addInitParameter(\"resetEnable\", config.getResetEnable());\n        }\n        return registrationBean;\n    }\n}\n```\n\nDruidWebStatFilterConfiguration.class\n\n这个类用于开启过滤器，统计各种请求的数据，这也是监控页的数据来源\n\n```java\n@ConditionalOnWebApplication\n@ConditionalOnProperty(name = \"spring.datasource.druid.web-stat-filter.enabled\", havingValue = \"true\")\npublic class DruidWebStatFilterConfiguration {\n    @Bean\n    public FilterRegistrationBean webStatFilterRegistrationBean(DruidStatProperties properties) {\n        DruidStatProperties.WebStatFilter config = properties.getWebStatFilter();\n        FilterRegistrationBean registrationBean = new FilterRegistrationBean();\n        WebStatFilter filter = new WebStatFilter();\n        registrationBean.setFilter(filter);\n        registrationBean.addUrlPatterns(config.getUrlPattern() != null ? config.getUrlPattern() : \"/*\");\n        registrationBean.addInitParameter(\"exclusions\", config.getExclusions() != null ? config.getExclusions() : \"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*\");\n        if (config.getSessionStatEnable() != null) {\n            registrationBean.addInitParameter(\"sessionStatEnable\", config.getSessionStatEnable());\n        }\n        if (config.getSessionStatMaxCount() != null) {\n            registrationBean.addInitParameter(\"sessionStatMaxCount\", config.getSessionStatMaxCount());\n        }\n        if (config.getPrincipalSessionName() != null) {\n            registrationBean.addInitParameter(\"principalSessionName\", config.getPrincipalSessionName());\n        }\n        if (config.getPrincipalCookieName() != null) {\n            registrationBean.addInitParameter(\"principalCookieName\", config.getPrincipalCookieName());\n        }\n        if (config.getProfileEnable() != null) {\n            registrationBean.addInitParameter(\"profileEnable\", config.getProfileEnable());\n        }\n        return registrationBean;\n    }\n}\n```\n\nDruidFilterConfiguration.class\n\n用于设置Druid自己的一些配置项，开启一些功能（比如stat：状态监控，wall防火墙）\n\n```java\n    private static final String FILTER_STAT_PREFIX = \"spring.datasource.druid.filter.stat\";\n    private static final String FILTER_CONFIG_PREFIX = \"spring.datasource.druid.filter.config\";\n    private static final String FILTER_ENCODING_PREFIX = \"spring.datasource.druid.filter.encoding\";\n    private static final String FILTER_SLF4J_PREFIX = \"spring.datasource.druid.filter.slf4j\";\n    private static final String FILTER_LOG4J_PREFIX = \"spring.datasource.druid.filter.log4j\";\n    private static final String FILTER_LOG4J2_PREFIX = \"spring.datasource.druid.filter.log4j2\";\n    private static final String FILTER_COMMONS_LOG_PREFIX = \"spring.datasource.druid.filter.commons-log\";\n    private static final String FILTER_WALL_PREFIX = \"spring.datasource.druid.filter.wall\";\n    private static final String FILTER_WALL_CONFIG_PREFIX = FILTER_WALL_PREFIX + \".config\";\n```\n\n然后我们根据上述配置中的规则配置我们想要的功能即可：\n\n```yml\nspring:\n  datasource:\n    url: jdbc:mysql://localhost:3306/db_account\n    username: root\n    password: 123456\n    driver-class-name: com.mysql.jdbc.Driver\n\n    druid:\n      aop-patterns: com.atguigu.admin.*  #监控的范围\n      filters: stat,wall,slf4j     # 底层开启功能，stat（sql监控），wall（防火墙），slf4j打印SQL日志\n\n      stat-view-servlet:   # 配置监控页功能\n        enabled: true\t#开启监控页，默认是false不开启，所以这里需要配置成true\n        login-username: admin\t#登录用户名\n        login-password: admin\t#登录密码\n        resetEnable: false\t#是否开启重置按钮\n\n      web-stat-filter:  # 监控web\n        enabled: true\t#默认不开启，所以需要配置成true\n        urlPattern: /*\t#匹配的URL\n        exclusions: '*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*'\t#不监控的URI\n\n\n      filter:\n        stat:    # 对上面filters里面的stat的详细配置\n          slow-sql-millis: 1000 #慢查询的阈值\n          logSlowSql: true #是否统计慢查询\n          enabled: true\t#是否开启这个功能\n        wall:\n          enabled: true\t#是否开启防火墙\n          config:\n            drop-table-allow: false\t#拦截哪些操作\n\n```\n\n### 整合MyBatis\n\n#### 完全配置方式\n\n整合框架前我们应当优先寻找这个框架对应的starter，导入这个starter依赖\n\n```xml\n        <dependency>\n            <groupId>org.mybatis.spring.boot</groupId>\n            <artifactId>mybatis-spring-boot-starter</artifactId>\n            <version>2.2.0</version>\n        </dependency>\n```\n\n查看源码的时候我们先查看它的META-INF中的spring.factories中指定了哪些自定配置类需要加载，然后查看这些自动配置类，然后再查看它引入的配置类绑定了哪些属性，这样就知道再配置文件中有哪些需要配置的属性\n\nMybatis的自动配置类：MybatisAutoConfiguration\n\n```java\n@org.springframework.context.annotation.Configuration\n//必须引入这些jar包\n@ConditionalOnClass({ SqlSessionFactory.class, SqlSessionFactoryBean.class })\n//容器中有且仅有一个数据源DataSource\n@ConditionalOnSingleCandidate(DataSource.class)\n//使用Mybatis配置绑定类\n@EnableConfigurationProperties(MybatisProperties.class)\n@AutoConfigureAfter({ DataSourceAutoConfiguration.class, MybatisLanguageDriverAutoConfiguration.class })\npublic class MybatisAutoConfiguration implements InitializingBean {\n```\n\n我们可以看到这个自动配置类需要使用MybatisProperties这个配置类，并且前缀是mybatis\n\n```java\n@ConfigurationProperties(prefix = MybatisProperties.MYBATIS_PREFIX)\npublic class MybatisProperties {\n\n  public static final String MYBATIS_PREFIX = \"mybatis\";\n\n```\n\n在自动配置类中自动帮我们配置好的SqlSessionFactory，也就是SQL会话工厂\n\n```java\n  @Bean\n  @ConditionalOnMissingBean\n  public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {\n```\n\n装配了sqlSessionTemplate，这个里面含有sqlSession\n\n```java\n  @Bean\n  @ConditionalOnMissingBean\n  public SqlSessionTemplate sqlSessionTemplate(SqlSessionFactory sqlSessionFactory) {\n    ExecutorType executorType = this.properties.getExecutorType();\n    if (executorType != null) {\n      return new SqlSessionTemplate(sqlSessionFactory, executorType);\n    } else {\n      return new SqlSessionTemplate(sqlSessionFactory);\n    }\n  }\n```\n\n@Import(AutoConfiguredMapperScannerRegistrar.class) 引入包的扫描规则\n\nMapper：只要我们写的mybatis接口标注了@Mapper注解就会会被自动扫描进来\n\nMybatis所需要的配置\n\n```yaml\nspring:\n  datasource:\n    username: root\n    password: 1234\n    url: jdbc:mysql://localhost:3306/my\n    driver-class-name: com.mysql.jdbc.Driver\n\n# 配置mybatis规则\nmybatis:\n  config-location: classpath:mybatis/mybatis-config.xml  #全局配置文件位置\n  mapper-locations: classpath:mybatis/*.xml  #Mapper接口的sql映射文件位置\n\n```\n\n对应这个包结构：\n\n![image-20220508232429677](pictures/6529dfcdabd63991f971352fc625b8b5.png)\n\n**mybatis-config.xml**:\n\n这里可以配置一些mybatis的额外功能，可以参照官方文档\n\nhttps://mybatis.org/mybatis-3/zh/configuration.html#settings\n\n例如配置命名规则\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n<!--    开启将下滑线命名法转换为驼峰命名法-->\n    <settings>\n        <setting name=\"mapUnderscoreToCamelCase\" value=\"true\"/>\n    </settings>\n</configuration>\n\n```\n\n**Mapper接口**：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<!-- 这里需要指定对应的接口 -->\n<mapper namespace=\"com.lun.boot.mapper.UserMapper\">\n\n    <select id=\"getUser\" resultType=\"com.lun.boot.bean.User\">\n        select * from user where id=#{id}\n    </select>\n</mapper>\n\n```\n\njava目录下的Mapper接口\n\n```java\nimport com.lun.boot.bean.User;\nimport org.apache.ibatis.annotations.Mapper;\n\n@Mapper\npublic interface UserMapper {\n    public User getUser(Integer id);\n}\n\n```\n\n注意这两个文件的文件名的前缀要相同，同时接口函数要加上@Mapper注解来申明这是Mybatis的Mapper层接口。\n\n如果使用@Repository注解，还需要在配置 类加上@MapperScan注解指定Mapper接口所在路径\n\n我们关于Mybatis的配置除了可以在xml里面配置外，也可以直接在yml里面配置\n\n```yml\nmybatis:\n#  config-location: classpath:mybatis/mybatis-config.xml  #全局配置文件位置\n  mapper-locations: classpath:mybatis/*.xml  #Mapper接口的sql映射文件位置\n  configuration: #指定Mybatis的全局配置\n    map-underscore-to-camel-case: true\n```\n\n但是注意config-location配置和configuration配置不能同时存在，要么我使用config-location指定xml配置文件的位置，然后在xml文件中配置，要么就直接在configuration下面配置\n\n使用步骤：\n\n1. 导入mybatis官方starter\n2. 编写mapper接口\n3. 编写sql映射文件并绑定mapper接口\n4. 在application.yml中指定配置文件的位置，以及指定全局配置文件的信息（建议直接在mybatis.configuration下面的配置）\n\n#### 完全注解方式\n\n```java\n@Mapper\npublic interface UserMapper2 {\n\n    @Select(\"select * from usert\")\n    List<User> getUsers();\n}\n```\n\n直接在注解上写上sql语句，即可完成对应的功能，这样就无需编写xml文件\n\n#### 混合使用\n\n上面两种方式可以同时使用，也就是一个接口中可以既有使用注解的方式，也可以有在xml文件中配置的方式\n\nxml中可以编写复杂的sql，而简单的sql直接使用注解即可\n\n```java\n@Mapper\npublic interface UserMapper {\n    public User getUser(Integer id);\n\n    @Select(\"select * from user where id=#{id}\")\n    public User getUser2(Integer id);\n\n    public void saveUser(User user);\n\n    @Insert(\"insert into user(`name`) values(#{name})\")\n    @Options(useGeneratedKeys = true, keyProperty = \"id\")\n    public void saveUser2(User user);\n}\n```\n\n得到自增的主键：\n\nxml：\n\n```xml\n    <insert id=\"saveUser\" useGeneratedKeys=\"true\" keyProperty=\"id\">\n        insert into user(`name`) values(#{name})\n    </insert>\n```\n\n注解：\n\n```java\n    @Insert(\"insert into user(`name`) values(#{name})\")\n    @Options(useGeneratedKeys = true, keyProperty = \"id\")\n    public void saveUser2(User user);\n```\n\nuseGeneratedKeys=\"true\"表示开启主键自增，keyProperty=\"id\"表示自增的主键是id\n\n开启这个后会把自增得到的主键放入User中的id字段中（面向对象，传入的User内部被修改后，外面显然还能拿到）\n\n### 整合Mybatis Plus\n\nMybatis可以帮我们生成代码，简化开发\n\n```xml\n        <dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>mybatis-plus-boot-starter</artifactId>\n            <version>3.4.1</version>\n        </dependency>\n```\n\n这个依赖帮我们引入了jdbc和基础的mybatis和一些扩展包，所以引入这个包后就不用再引入mybatis和jdbc\n\n- `MybatisPlusAutoConfiguration`配置类，`MybatisPlusProperties`配置项绑定，对应着mybatis-plus为前缀的配置项\n\n- `SqlSessionFactory`自动配置好，底层是容器中默认的数据源。\n\n- `mapperLocations`自动配置好的，有默认值`classpath*:/mapper/**/*.xml`，这表示mapper文件夹下任意路径下的所有xml都是sql映射文件。 建议以后sql映射文件放在 mapper下。\n- 容器中也自动配置好了`SqlSessionTemplate`。\n- `@Mapper` 标注的接口也会被自动扫描，也可以用MapperScan批量扫描\n\n使用方法：\n\n接口直接继承BaseMapper<User>，泛型是我们要操作的数据库的表\n\n```java\n@Mapper\npublic interface UserMapper extends BaseMapper<User> {\n\n}\n```\n\n表名必须和泛型的名称一致，数组库字段要和属性字段一致，并且出现的字段对应数据库中对应名称的字段，如果没有出现可以用加上@TableField(exist = false) 来表示这个字段不存在\n\n```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class User implements Serializable {\n\n    private Integer id;\n    private String name;\n    private String password;\n    private String email;\n    private Date birthday;\n    private Float money;\n\n    @TableField(exist = false)\n    private String uid;\n\n}\n```\n\n查询测试\n\n```java\n@SpringBootTest\nclass MydemoApplicationTests {\n\n    @Resource\n    UserMapper userMapper;\n    @Test\n    void contextLoads() {\n        System.out.println(userMapper.selectById(57));\n    }\n}\n```\n\n上述严格的对应关系会让开发变得有些麻烦，mybatis-plus提供了一些好用的注解来解决这些问题\n\n```\n@TableName(\"usert\") //设置对应的表名\n```\n\nMybatis Plus不仅提供了Mapper层的通用功能接口，也提供了Service层的通用实现接口\n\n```java\npublic interface UserService extends IService<User> {\n}\n```\n\n接口类继承IService<User> User是对应的实体类\n\n```java\n@Service\npublic class UserServiceImpl extends ServiceImpl<UserMapper,User> implements UserService {\n\n}\n```\n\n编写实现类，规范如下：\n\n```java\n@Service\npublic class UserServiceImpl extends ServiceImpl<UserMapper,User> implements UserService {\n\n}\n```\n\n需要继承ServiceImpl，传入两个泛型：\n\nUserMapper是我们继承了BaseMapper的接口\n\nUser是对应的实体类\n\nServiceImpl为我们实现了很多方法：\n\nlist()\t查询所有的数据\n\npage(Page,Wrapper) 分页查询\n\nremoveById() 根据主键删除\n\nPage：\n\ngetPages：查询总页数\n\ngetRecordes：获取查询的数据\n\n测试：\n\n```java\n@SpringBootTest\nclass MydemoApplicationTests {\n\n    @Resource\n    UserService userService;\n    @Test\n    void contextLoads() {\n        Page<User> page1 = userService.page(new Page<>(0,5),null);\n        page1.getRecords().forEach(System.out::println);\n    }\n}\n```\n\n但是此时，分页功能会失效，Mybatis会查到所有数据，需要加上一个配置插件才能开启分页功能：\n\n```java\n@Configuration\npublic class MyBatisConfig {\n    /**\n     * MybatisPlusInterceptor\n     */\n    @Bean\n    public MybatisPlusInterceptor paginationInterceptor() {\n        MybatisPlusInterceptor mybatisPlusInterceptor = new MybatisPlusInterceptor();\n        // 设置请求的页面大于最大页后操作， true调回到首页，false 继续请求  默认false\n        // paginationInterceptor.setOverflow(false);\n        // 设置最大单页限制数量，默认 500 条，-1 不受限制\n        // paginationInterceptor.setLimit(500);\n        // 开启 count 的 join 优化,只针对部分 left join\n\n        //设置一个分页拦截器\n        PaginationInnerInterceptor paginationInnerInterceptor = new PaginationInnerInterceptor();\n        paginationInnerInterceptor.setOverflow(true);\n        paginationInnerInterceptor.setMaxLimit(500L);\n        //添加拦截器\n        mybatisPlusInterceptor.addInnerInterceptor(paginationInnerInterceptor);\n\n        return mybatisPlusInterceptor;\n    }\n}\n```\n\n这样分页就能成功使用了：\n\n```java\n@SpringBootTest\nclass MydemoApplicationTests {\n\n    @Resource\n    UserService userService;\n    @Test\n    void contextLoads() {\n        Page<User> page1 = userService.page(new Page<>(2,5),null);\n        page1.getRecords().forEach(System.out::println);\n    }\n\n}\n```\n\n注意Spring的分页是从1开始的，0和1都会返回第一页\n\n分页前端表格示例：\n\n```html\n<table class=\"display table table-bordered table-striped\" id=\"dynamic-table\">\n    <thead>\n        <tr>\n            <th>#</th>\n            <th>name</th>\n            <th>age</th>\n            <th>email</th>\n            <th>操作</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr class=\"gradeX\" th:each=\"user: ${users.records}\">\n            <td th:text=\"${user.id}\"></td>\n            <td>[[${user.name}]]</td>\n            <td th:text=\"${user.age}\">Win 95+</td>\n            <td th:text=\"${user.email}\">4</td>\n            <td>\n                <a th:href=\"@{/user/delete/{id}(id=${user.id},pn=${users.current})}\" \n                   class=\"btn btn-danger btn-sm\" type=\"button\">删除</a>\n            </td>\n        </tr>\n    </tfoot>\n</table>\n\n<div class=\"row-fluid\">\n    <div class=\"span6\">\n        <div class=\"dataTables_info\" id=\"dynamic-table_info\">\n            当前第[[${users.current}]]页  总计 [[${users.pages}]]页  共[[${users.total}]]条记录\n        </div>\n    </div>\n    <div class=\"span6\">\n        <div class=\"dataTables_paginate paging_bootstrap pagination\">\n            <ul>\n                <li class=\"prev disabled\"><a href=\"#\">← 前一页</a></li>\n                <li th:class=\"${num == users.current?'active':''}\" \n                    th:each=\"num:${#numbers.sequence(1,users.pages)}\" >\n                    <a th:href=\"@{/dynamic_table(pn=${num})}\">[[${num}]]</a>\n                </li>\n                <li class=\"next disabled\"><a href=\"#\">下一页 → </a></li>\n            </ul>\n        </div>\n    </div>\n</div>\n```\n\n#### Mybatis-Plus使用手册\n\nhttps://blog.csdn.net/weixin_43811057/article/details/123449767\n\n实际上Mybatis-Plus用于处理基本的增删改成即可，复杂的业务逻辑我们使用xml文件即可，稍简单的逻辑我们可以使用注解来实现\n\n### 整合Redis\n\n引入依赖\n\n```xml\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n        </dependency>\n```\n\n我们先来看Redis的自动配置类RedisAutoConfiguration\n\n```java\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass(RedisOperations.class)\n@EnableConfigurationProperties(RedisProperties.class)\n@Import({ LettuceConnectionConfiguration.class, JedisConnectionConfiguration.class })\npublic class RedisAutoConfiguration {\n```\n\n这个自动配置类绑定了配置类：RedisProperties\n\n这个配置类绑定的配置是@ConfigurationProperties(prefix = \"spring.redis\")\n\n内部封装了jedis和letture\n\n也就是我们需要配置redis就在spring.redis下配置\n\n并且帮我们准备了两种客户端的连接配置：LettuceConnectionConfiguration，JedisConnectionConfiguration\n\n和两种操作redis的接口：redisTemplate，stringRedisTemplate\n\nredisTemplate<Object,Object>\n\nstringRedisTemplate，kv都是String\n\nRedisProperties中的默认配置：\n\n```java\n\t/**\n\t * Database index used by the connection factory.\n\t */\n\tprivate int database = 0;\n\n\t/**\n\t * Connection URL. Overrides host, port, and password. User is ignored. Example:\n\t * redis://user:password@example.com:6379\n\t */\n\tprivate String url;\n\n\t/**\n\t * Redis server host.\n\t */\n\tprivate String host = \"localhost\";\n\n\t/**\n\t * Login password of the redis server.\n\t */\n\tprivate String password;\n\n\t/**\n\t * Redis server port.\n\t */\n\tprivate int port = 6379;\n```\n\n在yml中配置Redis的相关信息：\n\n可以设置Redis的相关属性来连接（推荐）：\n\n```yml\nspring:\n  redis:\n    host: localhost\n    port: 6379\n    password: 123456\n```\n\n也可以直接设置url代替上述参数：\n\n```yml\nspring:\n  redis:\n    url: redis://root:123456@127.0.0.1:6379\n```\n\nRedisTemplate默认使用letture来操作redis，我们也可以切换客户端至jedis切换客户端\n\n导入jedis：\n\n```xml\n        <dependency>\n            <groupId>redis.clients</groupId>\n            <artifactId>jedis</artifactId>\n        </dependency>\n```\n\njedis也是可以直接使用的\n\n```java\nspring:\n  redis:\n#   url: redis://lfy:Lfy123456@r-bp1nc7reqesxisgxpipd.redis.rds.aliyuncs.com:6379\n    host: r-bp1nc7reqesxisgxpipd.redis.rds.aliyuncs.com\n    port: 6379\n    password: lfy:Lfy123456\n    client-type: jedis\n    jedis:\n      pool:\n        max-active: 10\n#   lettuce:# 另一个用来连接redis的java框架\n#      pool:\n#        max-active: 10\n#        min-idle: 5\n```\n\n小功能：\n\n编写一个拦截器类，这个类加上@Component申明为一个组件，这样就可以使用Spring容器中的组件的各种功能。\n\n```java\n@Component\npublic class UriInterceptor implements HandlerInterceptor {\n\n    @Resource\n    RedisTemplate redisTemplate;\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        redisTemplate.opsForValue().increment(request.getRequestURI());\n        return true;\n    }\n}\n```\n\n添加拦截器：\n\n拦截器要从Spring容器中拿才能实现我们想要的功能\n\n```java\n            @Resource\n            UriInterceptor uriInterceptor;\n            @Override\n            public void addInterceptors(InterceptorRegistry registry) {\n                registry.addInterceptor(new LoginIntercepter())\n                        .addPathPatterns(\"/**\")\n                        .excludePathPatterns(\"/login\",\"/\",\"/css/**\",\"/js/**\",\"/img/**\");\n                registry.addInterceptor(uriInterceptor)\n                        .addPathPatterns(\"/**\")\n                        .excludePathPatterns(\"/\",\"/css/**\",\"/js/**\",\"/img/**\");\n            }\n```\n\n过滤器和拦截器的区别（Filter和Interceptor的区别）\n\n1.过滤器Filter是Servlet的原生组件，脱离了Spring也能使用，并且被拦截后不能直接回到原来的方法中\n\n2.拦截器Interceptor是Spring处理请求的一个流程，可以使用Spring容器中的组件\n\n![image-20220509162643868](pictures/949df1adea40b3db10776a4d65c3bd53.png)\n\n## 单元测试\n\n### 依赖引入\n\nJunit4用@SpringbootTest+@RunWith(SpringTest.class)来进行单元测试\n\n**Spring Boot 2.2.0 版本开始引入 JUnit 5 作为单元测试默认库**\n\nSpringBoot 2.4 以上版本移除了默认对 Vintage 的依赖。如果需要兼容JUnit4需要自行引入（不能使用JUnit4的功能 @Test）\n\nJUnit 5’s Vintage已经从spring-boot-starter-test从移除。如果需要继续兼容Junit4需要自行引入Vintage依赖：\n\n```xml\n<dependency>\n    <groupId>org.junit.vintage</groupId>\n    <artifactId>junit-vintage-engine</artifactId>\n    <scope>test</scope>\n    <exclusions>\n        <exclusion>\n            <groupId>org.hamcrest</groupId>\n            <artifactId>hamcrest-core</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n\n```\n\n但是其实我们也没有必要兼容Junit4，直接使用Junit5的功能即可，以org.junit.jupiter开头的就是Junit5下面的框架\n\n单元测试其实之前我们也用过：\n\n```java\n@SpringBootTest\nclass MydemoApplicationTests {\n\n    @Resource\n    RedisTemplate redisTemplate;\n    @Autowired\n    RedisConnectionFactory redisConnectionFactory;\n\n    @Test\n    void contextLoads() {\n        redisTemplate.opsForValue().set(\"lth\",\"lth\");\n        System.out.println(redisTemplate.opsForValue().get(\"lth\"));\n        System.out.println(redisConnectionFactory.getClass());\n    }\n}\n```\n\n在Test目录下，人家以及自动帮我们配置了一个测试类，我们直接在这个里面测试即可，要引入什么框架也可以直接注入\n\n### 常见注解使用\n\n官方文档：\n\nhttps://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations\n\n- @Test：表示方法是测试方法。\n- @ParameterizedTest：表示方法是参数化测试。\n- @RepeatedTest：表示方法可重复执行，括号中可以写出重复次数。\n- @DisplayName：为测试类或者测试方法设置展示名称，展示的名称会在控制台显示出来。\n- @BeforeEach：表示在每个单元测试之前执行。\n- @AfterEach：表示在每个单元测试之后执行。\n- @BeforeAll：表示在所有单元测试之前执行，使用这个注解的方法必须是静态方法。\n- @AfterAll：表示在所有单元测试之后执行，使用这个注解的方法必须是静态方法。\n- @Tag：表示单元测试类别，类似于JUnit4中的@Categories。\n- @Disabled：表示测试类或测试方法不执行，整体测试时会忽略这个方法。\n- @Timeout：表示测试方法运行如果超过了指定时间将会返回错误，括号中可以设置超时时间和时间单位。\n- @ExtendWith：为测试类或测试方法提供扩展类引用，例如@ExtendWith(SpringExtension.class)申明是使用Spring提供的测试组件，申明这个后就可以进行依赖注入，可以使用@SpringBootTest代替。\n\n```java\nimport org.junit.jupiter.api.*;\n\n@DisplayName(\"junit5功能测试类\")\npublic class Junit5Test {\n\n\n    @DisplayName(\"测试displayname注解\")\n    @Test\n    void testDisplayName() {\n        System.out.println(1);\n        System.out.println(jdbcTemplate);\n    }\n    \n    @ParameterizedTest\n    @ValueSource(strings = { \"racecar\", \"radar\", \"able was I ere I saw elba\" })\n    void palindromes(String candidate) {\n        assertTrue(StringUtils.isPalindrome(candidate));\n    }\n    \n\n    @Disabled\n    @DisplayName(\"测试方法2\")\n    @Test\n    void test2() {\n        System.out.println(2);\n    }\n\n    @RepeatedTest(5)\n    @Test\n    void test3() {\n        System.out.println(5);\n    }\n\n    /**\n     * 规定方法超时时间。超出时间测试出异常\n     *\n     * @throws InterruptedException\n     */\n    @Timeout(value = 500, unit = TimeUnit.MILLISECONDS)\n    @Test\n    void testTimeout() throws InterruptedException {\n        Thread.sleep(600);\n    }\n\n\n    @BeforeEach\n    void testBeforeEach() {\n        System.out.println(\"测试就要开始了...\");\n    }\n\n    @AfterEach\n    void testAfterEach() {\n        System.out.println(\"测试结束了...\");\n    }\n\n    @BeforeAll\n    static void testBeforeAll() {\n        System.out.println(\"所有测试就要开始了...\");\n    }\n\n    @AfterAll\n    static void testAfterAll() {\n        System.out.println(\"所有测试以及结束了...\");\n\n    }\n\n}\n```\n\n### 断言\n\n如果满足我们给定的条件就无事发生，否则就会抛出异常，后面的代码都不会执行\n\n#### 简单断言\n\n方法\t说明\nassertEquals\t判断两个对象或两个原始类型是否相等（调用equal方法）\nassertNotEquals\t判断两个对象或两个原始类型是否不相等\nassertSame\t判断两个对象引用是否指向同一个对象（调用==）\nassertNotSame\t判断两个对象引用是否指向不同的对象\nassertTrue\t判断给定的布尔值是否为 true\nassertFalse\t判断给定的布尔值是否为 false\nassertNull\t判断给定的对象引用是否为 null\nassertNotNull\t判断给定的对象引用是否不为 null\n\n#### 数组断言\n\n通过 assertArrayEquals 方法来判断两个对象或原始类型的数组是否相等。\n\n```java\n@Test\n@DisplayName(\"array assertion\")\npublic void array() {\n\tassertArrayEquals(new int[]{1, 2}, new int[] {1, 2});\n}\n```\n\n#### 组合断言\n\n`assertAll()`方法接受多个 `org.junit.jupiter.api.Executable` 函数式接口的实例作为要验证的断言，可以通过 lambda 表达式很容易的提供这些断言。所有这些断言都通过了才算这个断言通过，有一个不通过就视为这个断言不通过。\n\n```java\n@Test\n@DisplayName(\"assert all\")\npublic void all() {\n assertAll(\"Math\",\n    () -> assertEquals(2, 1 + 1),\n    () -> assertTrue(1 > 0)\n );\n}\n```\n\n#### 异常断言\n\n如果不抛出指定异常则断言失败\n\n```java\n@Test\n@DisplayName(\"异常测试\")\npublic void exceptionTest() {\n    ArithmeticException exception = Assertions.assertThrows(\n           //扔出断言异常\n            ArithmeticException.class, () -> System.out.println(1 % 0));\n}\n\n```\n\n#### 超时断言\n\n```java\n@Test\n@DisplayName(\"超时测试\")\npublic void timeoutTest() {\n    //如果测试方法时间超过1s将会异常\n    Assertions.assertTimeout(Duration.ofMillis(1000), () -> Thread.sleep(500));\n}\n\n```\n\n#### 快速失败\n\n```java\n@Test\n@DisplayName(\"fail\")\npublic void shouldFail() {\n\tfail(\"This should fail\");\n}\n```\n\n我们使用maven的Test功能对测试类进行测试，测试完成后会生成一个汇总的报告\n\n#### 前置条件\n\n使用方法和断言一样，但是如果前置条件实现了，这个方法会显示被忽略而不是错误\n\n```java\n@DisplayName(\"前置条件\")\npublic class AssumptionsTest {\n    private final String environment = \"DEV\";\n\n    @Test\n    @DisplayName(\"simple\")\n    public void simpleAssume() {\n        assumeTrue(Objects.equals(this.environment, \"DEV\"));\n        assumeFalse(() -> Objects.equals(this.environment, \"PROD\"));\n    }\n\n    @Test\n    @DisplayName(\"assume then do\")\n    public void assumeThenDo() {\n        assumingThat(\n            Objects.equals(this.environment, \"DEV\"),\n            () -> System.out.println(\"In DEV\")\n        );\n    }\n}\n```\n\n### 嵌套测试\n\n使用@Nested注解可以在测试类的内部定义一个新的测试类，外层的测试类的@AfterEach等注解可以驱动内部的测试生效，而内部的这些注解不会驱动外部的测试类生效。\n\n```java\n@DisplayName(\"A stack\")\nclass TestingAStackDemo {\n\n    Stack<Object> stack;\n\n    @Test\n    @DisplayName(\"is instantiated with new Stack()\")\n    void isInstantiatedWithNew() {\n        new Stack<>();\n    }\n\n    @Nested\n    @DisplayName(\"when new\")\n    class WhenNew {\n\n        @BeforeEach\n        void createNewStack() {\n            stack = new Stack<>();\n        }\n\n        @Test\n        @DisplayName(\"is empty\")\n        void isEmpty() {\n            assertTrue(stack.isEmpty());\n        }\n\n        @Test\n        @DisplayName(\"throws EmptyStackException when popped\")\n        void throwsExceptionWhenPopped() {\n            assertThrows(EmptyStackException.class, stack::pop);\n        }\n\n        @Test\n        @DisplayName(\"throws EmptyStackException when peeked\")\n        void throwsExceptionWhenPeeked() {\n            assertThrows(EmptyStackException.class, stack::peek);\n        }\n\n        @Nested\n        @DisplayName(\"after pushing an element\")\n        class AfterPushing {\n\n            String anElement = \"an element\";\n\n            @BeforeEach\n            void pushAnElement() {\n                stack.push(anElement);\n            }\n\n            @Test\n            @DisplayName(\"it is no longer empty\")\n            void isNotEmpty() {\n                assertFalse(stack.isEmpty());\n            }\n\n            @Test\n            @DisplayName(\"returns the element when popped and is empty\")\n            void returnElementWhenPopped() {\n                assertEquals(anElement, stack.pop());\n                assertTrue(stack.isEmpty());\n            }\n\n            @Test\n            @DisplayName(\"returns the element when peeked but remains not empty\")\n            void returnElementWhenPeeked() {\n                assertEquals(anElement, stack.peek());\n                assertFalse(stack.isEmpty());\n            }\n        }\n    }\n}\n```\n\n### 指定参数来源\n\n```\n@ValueSource: 为参数化测试指定入参来源，支持八大基础类以及String类型,Class类型\n@NullSource: 表示为参数化测试提供一个null的入参\n@EnumSource: 表示为参数化测试提供一个枚举入参\n@CsvFileSource：表示读取指定CSV文件内容作为参数化测试入参\n@MethodSource：表示读取指定方法的返回值作为参数化测试入参(注意方法返回需要是一个流)\n```\n\n```java\n@ParameterizedTest\n@ValueSource(strings = {\"one\", \"two\", \"three\"})\n@DisplayName(\"参数化测试1\")\npublic void parameterizedTest1(String string) {\n    System.out.println(string);\n    Assertions.assertTrue(StringUtils.isNotBlank(string));\n}\n\n\n@ParameterizedTest\n@MethodSource(\"method\")    //指定方法名\n@DisplayName(\"方法来源参数\")\npublic void testWithExplicitLocalMethodSource(String name) {\n    System.out.println(name);\n    Assertions.assertNotNull(name);\n}\n\nstatic Stream<String> method() {\n    return Stream.of(\"apple\", \"banana\");\n}\n```\n\n## 指标监控\n\nSpringboot-actuator可以帮我们监控各个微服务的运行状态\n\n引入依赖：\n\n```xml\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-actuator</artifactId>\n        </dependency>\n```\n\n引入依赖后就可以直接通过http://localhost:8080/actuator来获取可以拿到的信息的列表\n\n```json\n{\n    \"_links\": {\n        \"self\": {\n            \"href\": \"http://localhost:8080/actuator\",\n            \"templated\": false\n        },\n        \"health-path\": {\n            \"href\": \"http://localhost:8080/actuator/health/{*path}\",\n            \"templated\": true\n        },\n        \"health\": {\n            \"href\": \"http://localhost:8080/actuator/health\",\n            \"templated\": false\n        },\n        \"info\": {\n            \"href\": \"http://localhost:8080/actuator/info\",\n            \"templated\": false\n        }\n    }\n}\n```\n\n然后再根据其中的网址获取我们想要的信息\n\nself代表当前访问的网址：\n\n```json\n    \"self\": {\n        \"href\": \"http://localhost:8080/actuator\",\n        \"templated\": false\n    }\n```\n\nhealth代表当前服务的运行状态：\n\n```json\n        \"health\": {\n            \"href\": \"http://localhost:8080/actuator/health\",\n            \"templated\": false\n        }\n```\n\n```\n{\n    \"status\": \"UP\"\n}\n```\n\nUP代表正在运行状态，DOWN代表宕机\n\ninfo代表当前服务的信息（默认没有信息）\n\n```json\n        \"info\": {\n            \"href\": \"http://localhost:8080/actuator/info\",\n            \"templated\": false\n        }\n```\n\nSpring默认给我密文提供了info和health两个监控端点（EndPoint），但其实还有很多我们可以监控的端点，需要我们手动开启\n\nhttps://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#production-ready\n\n以web的方式暴露所有端点\n\n```yml\nmanagement:\n  endpoints:\n    enabled-by-default: true #暴露所有端点信息\n    web:\n      exposure:\n        include: '*'  #以web方式暴露\n```\n\n查询信息的格式是：http://localhost:8080/actuator/{端点名称}/{具体的路径名称}\n\n会返回JSON格式的数据\n\n常用的端点信息：\n\nauditevents\t暴露当前应用程序的审核事件信息。需要一个AuditEventRepository组件。\nbeans\t显示应用程序中所有Spring Bean的完整列表。\ncaches\t暴露可用的缓存。\nconditions\t显示自动配置的所有条件信息，包括匹配或不匹配的原因。\nconfigprops\t显示所有@ConfigurationProperties。\nenv\t暴露Spring的属性ConfigurableEnvironment\nflyway\t显示已应用的所有Flyway数据库迁移。 需要一个或多个Flyway组件。\nhealth\t显示应用程序运行状况信息。\nhttptrace\t显示HTTP跟踪信息（默认情况下，最近100个HTTP请求-响应）。需要一个HttpTraceRepository组件。\ninfo\t显示应用程序信息。\nintegrationgraph\t显示Spring integrationgraph 。需要依赖spring-integration-core。\nloggers\t显示和修改应用程序中日志的配置。\nliquibase\t显示已应用的所有Liquibase数据库迁移。需要一个或多个Liquibase组件。\nmetrics\t显示当前应用程序的“指标”信息。\nmappings\t显示所有@RequestMapping路径列表。\nscheduledtasks\t显示应用程序中的计划任务。\nsessions\t允许从Spring Session支持的会话存储中检索和删除用户会话。需要使用Spring Session的基于Servlet的Web应用程序。\nshutdown\t使应用程序正常关闭。默认禁用。\nstartup\t显示由ApplicationStartup收集的启动步骤数据。需要使用SpringApplication进行配置BufferingApplicationStartup。\nthreaddump\t执行线程转储。\n\n- **Health：监控状况**\n- **Metrics：运行时指标**\n- **Loggers：日志记录**\n\n\n\n```yml\nmanagement:\n  endpoints:\n    enabled-by-default: true #暴露所有端点信息\n    web:\n      exposure:\n        include: '*'  #以web方式暴露\n  endpoint:\n    health: #对某个端点的具体配置\n      show-details: always #显示详细信息\n```\n\n我们也可以或者禁用所有的Endpoint然后手动开启指定的Endpoint：\n\n```yml\nmanagement:\n  endpoints:\n    enabled-by-default: false\n  endpoint:\n    beans:\n      enabled: true\n    health:\n      enabled: true\n```\n\n### 定制健康信息\n\n```java\n@Component\npublic class MyComHealthIndicator extends AbstractHealthIndicator {\n\n    /**\n     * 真实的检查方法\n     * @param builder\n     * @throws Exception\n     */\n    @Override\n    protected void doHealthCheck(Health.Builder builder) throws Exception {\n        //mongodb。  获取连接进行测试\n        Map<String,Object> map = new HashMap<>();\n        // 检查完成\n        if(1 == 2){\n//            builder.up(); //健康\n            builder.status(Status.UP);\n            map.put(\"count\",1);\n            map.put(\"ms\",100);\n        }else {\n//            builder.down();\n            builder.status(Status.OUT_OF_SERVICE);\n            map.put(\"err\",\"连接超时\");\n            map.put(\"ms\",3000);\n        }\n\n        builder.withDetail(\"code\",100)\n                .withDetails(map);\n\n    }\n}\n```\n\nbuilder.down() 表示不健康\n\nbuilde.up() 表示健康\n\n也可以用 builder.status(Status.UP);\n\n```java\n        builder.withDetail(\"code\",100)\n                .withDetails(map);\n```\n\n可以往detail中添加一些信息\n\n注意，这个组件的名字是根据类的名称来的，必须实现AbstractHealthIndicator，而且必须以HealthIndicator结尾，前面的就是组件的名称\n\n查询health：\n\n```json\n        \"myCom\": {\n            \"status\": \"OUT_OF_SERVICE\",\n            \"details\": {\n                \"code\": 100,\n                \"err\": \"连接超时\",\n                \"ms\": 3000\n            }\n        }\n```\n\n### 定值info信息\n\n可以在yml里定值，获取pom文件的值，可以使用@@来获取\n\n```yml\ninfo:\n  appName: boot-admin\n  version: 2.0.1\n  mavenProjectName: @project.artifactId@  #使用@@可以获取maven的pom文件值\n  mavenProjectVersion: @project.version@\n\n```\n\n可以定义一个Controller：\n\n```java\nimport java.util.Collections;\n\nimport org.springframework.boot.actuate.info.Info;\nimport org.springframework.boot.actuate.info.InfoContributor;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class ExampleInfoContributor implements InfoContributor {\n\n    @Override\n    public void contribute(Info.Builder builder) {\n        builder.withDetail(\"example\",\n                Collections.singletonMap(\"key\", \"value\"));\n    }\n\n}\n```\n\n这个controller的名字就没有限制了，只要继承InfoContributor并注入Spring容器中即可\n\n### 定制Metrics\n\n这样在Metrics端点就会有myservice.method.running.counter的相关信息\n\n```java\nclass MyService{\n    Counter counter;\n    public MyService(MeterRegistry meterRegistry){\n         counter = meterRegistry.counter(\"myservice.method.running.counter\");\n    }\n\n    public void hello() {\n        counter.increment();\n    }\n}\n```\n\n### 自定义Endpoint\n\n```java\n@Component\n//Endpoint叫container\n@Endpoint(id = \"container\")\npublic class DockerEndpoint {\n\n    //可读。不能有参数，显示的信息从这里获取\n    @ReadOperation\n    public Map getDockerInfo(){\n        return Collections.singletonMap(\"info\",\"docker started...\");\n    }\n\t可写\n    @WriteOperation\n    private void restartDocker(){\n        System.out.println(\"docker restarted....\");\n    }\n\n}\n```\n\n### 整合图形界面\n\n引入依赖：\n\n```xml\n        <dependency>\n            <groupId>de.codecentric</groupId>\n            <artifactId>spring-boot-admin-starter-server</artifactId>\n            <version>2.3.1</version>\n        </dependency>\n```\n\n在启动类加上@EnableAdminServer表示这是一个监控服务器\n\n```java\n@SpringBootApplication\n@EnableAdminServer\npublic class ActuatorApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ActuatorApplication.class, args);\n    }\n}\n```\n\n修改一下server.port确保端口不冲突，例如修改为8888\n\n然后访问localhost:8888，即可看到监控页面，但是此时还没有数据，因为监控服务器也不知道要监控什么服务器，所以我们需要配置需要监控的服务器（客户端）\n\n在客户端加上：\n\n```xml\n<dependency>\n    <groupId>de.codecentric</groupId>\n    <artifactId>spring-boot-admin-starter-client</artifactId>\n    <version>2.3.1</version>\n</dependency>\n```\n\n\n\n然后设置一下配置文件：\n\n```yml\nspring:\n  application:\n    name: mydemo\n  boot:\n    admin:\n      client:\n        url: http://localhost:8888\n        instance:\n          prefer-ip: true\n```\n\n和spring-cloud配置注册中心的过程很像\n\n点开配置文件如下：\n\n```java\n\t/**\n\t * Name to register with. Defaults to ${spring.application.name}\n\t */\n\t@Value(\"${spring.application.name:spring-boot-application}\")\n\tprivate String name = \"spring-boot-application\";\n\n\t/**\n\t * Should the registered urls be built with server.address or with hostname.\n\t */\n\tprivate boolean preferIp = false;\n\n\t/**\n\t * Metadata that should be associated with this application\n\t */\n\tprivate Map<String, String> metadata = new LinkedHashMap<>();\n```\n\n注意到配置：\n\n```java\n@Value(\"${spring.application.name:spring-boot-application}\")\n\tprivate String name = \"spring-boot-application\";\n```\n\n我们也发现可以使用@Value注解获取配置文件中的值\n\n@Value(\"${spring.application.name:spring-boot-application}\") 表示获取spring.application.name这个配置项的值，如果没有就叫spring-boot-application\n\n配置完成后可以有很好看的图形界面：\n\n![image-20220510213637957](pictures/1483bd50890ef67bc276ad0b239b61c0.png)\n\n## 原理解析\n\n### profile 配置文件切换\n\n我们一般情况测试开发环境所用的配置文件和上线部署后用的配置文件一般不同，比如测试环境中我们可以用localhost，但是上线部署的生产环境中就需要切换到部署环境，而我们直接修改配置文件有些麻烦，所以Spring给我们提供了profile配置文件切换功能。\n\n我们先编写两种配置文件，配置文件的名字必须是application-xxx.yml，xxx是配置文件的名称（测试环境的名称）：\n\n比如：\n\n测试环境所用的配置文件：applcation-test.yml\n\n```yml\nperson:\n  name: test\n```\n\n生产环境所用的配置文件：application-prod.yml\n\n```yml\nperson:\n  name: prod\n```\n\n然后我们在测试用手动controller中获取配置文件的值并输出\n\n```java\npackage com.demo.controller;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * @author 李天航\n */\n@RestController\npublic class TestController {\n\n    @Value(\"${person.name:default}\")\n    private String name;\n\n    @GetMapping(\"/\")\n    public Object test(){\n        return name;\n    }\n}\n```\n\n这样根据name的值就知道当前使用的是哪个配置文件\n\nname标注了@Value(\"${person.name:default}\")，从配置文件中获取值，如果配置文件没有相关的配置则值默认是default（上一节也提到过）\n\n然后设置默认配置文件application.properties：\n\n```\nperson.name=okk\nspring.profiles.active=test\n```\n\napplication.properties是一定会被加载的配置文件，其中spring.profiles.active自动用于设置当前使用哪个配置文件\n\nspring.profiles.active=test表示使用application-test.yml配置文件，得到结果test\n\nspring.profiles.active=prod表示使用application-prod.yml配置文件，得到结果prod\n\n如果application.properties和选择的yml配置文件中有同名的配置，则优先使用选择的yml中的配置，如果yml中没有配置（获取选择的配置文件不存在）则使用application.properties配置文件，如果application.properties中也没有相关的配置则使用设置的默认值（例如这里是default）\n\n打包后如果想要切换配置文件，可以在后面用--加上启动参数，启动参数的优先级最高，可以设置多个参数，参数名称和配置项的名称一致\n\n```\njava -jar demo2-0.0.1-SNAPSHOT.jar --spring.profiles.active=prod --server.port=8888\n```\n\n--spring.profiles.active=prod 使用prod配置文件\n\n--server.port=8888 切换端口至8888\n\n获取配置文件的信息除了可以用@Value注解，还可以使用@ConfigurationProperties注解，这个注解之前在阅读Spring源码的时候我们见过很多次，每一个自动配置类都需要一个配置类，而配置类就是使用@ConfigurationProperties注解获取到配置文件的信息\n\n例如配置文件中是这么写的：\n\n```yml\nperson:\n  name: test\n  age: 88\n```\n\n我们想要获取配置信息：\n\n```java\n@Component\n@ConfigurationProperties(\"person\")\n@Data\npublic class Person {\n    String name;\n    String age;\n}\n```\n\n用@ConfigurationProperties(\"person\")绑定要获取的配置项，然后根据属性名称将值装配进去，需要加上@Component注解\n\n（这个注解会让idea报错，但是运行没有问题）\n\n```java\n@RestController\npublic class TestController {\n    @Resource\n    Person person;\n\n    @GetMapping(\"/\")\n    public Object test(){\n        return person;\n    }\n}\n```\n\n经过测试成功得到返回值person的值\n\n![image-20220510232548151](pictures/da0266f5b88527d8c11b1e6a04cd825e.png)\n\n假如一个环境中包含多个配置文件，我们可以设置配置文件组：\n\n```properties\nspring.profiles.active=production\n\nspring.profiles.group.production[0]=proddb\nspring.profiles.group.production[1]=prodmq\n```\n\n假如有个生产环境叫production，这个生产环境包含两个配置文件：proddb，prodmq，可以通过下面这两行配置实现\n\n```properties\nspring.profiles.group.production[0]=proddb\nspring.profiles.group.production[1]=prodmq\n```\n\n然后选择生产环境的时候选择组即可：\n\n```properties\nspring.profiles.active=production\n```\n\n选择的组中的配置文件都会生效\n\n### Profile条件装配\n\n假如我们有一个类叫Person：\n\n```java\n@Data\npublic class Person {\n    protected String name;\n    protected String age;\n}\n```\n\n它有两个子类：\n\n```java\n@Data\n@Component\npublic class Boss extends Person{\n    String type=\"boss\";\n}\n```\n\n```java\n@Data\n@Component\npublic class Worker extends Person{\n    String type=\"worker\";\n}\n```\n\n测试类中是\n\n```java\n@RestController\npublic class TestController {\n    @Resource\n    Person person;\n\n    @GetMapping(\"/\")\n    public Object test(){\n        return person;\n    }\n}\n```\n\n我们想要在test环境下返回Worker对象，在prod环境下返回Boss对象，此时Spring容器中有两个Person对象，所以Spring不知道装配哪个对象所以会报错。所以这时候可以使用条件装配，在不同的环境下选择让一些类在特性的测试环境下生效。\n\n```java\n@Profile(\"prod\")\n@Component\n@ConfigurationProperties(\"person\")\n@Data\npublic class Boss extends Person{\n    String type=\"boss\";\n}\n```\n\n```java\n@Profile(\"test\")\n@Component\n@ConfigurationProperties(\"person\")\n@Data\npublic class Worker extends Person{\n    String type=\"worker\";\n}\n```\n\n@Profile(\"prod\")表示这个类只在运行环境为prod时才放入Spring容器中（并不影响编译）\n\n例如当前运行环境是test，即spring.profiles.active=test，则会返回Worker对象\n\n![image-20220510234810086](pictures/5a0e92a91297e1bc9d8c55826bf790e4.png)\n\n@Profile可以标注在带有@Bean注解的方法上来选择性在Spring容器中注册bean\n\n@Profile如果不设置value字段的值，则value字段的值默认是default，也就是默认环境下会使用的配置，不加@Profile则是在任何环境都会加载的bean。如果不激活任何环境也就是不设置spring.profiles.active的值（或者设置为default），这个值默认是default，默认会加载默认环境下的bean\n\n### 配置文件加载的优先级\n\n#### 配置信息的来源\n\nproperties文件，yml文件，环境变量，命令行参数（除了环境变量外我们都使用过，下面演示环境变量）\n\n获取环境变量，使用方法就和控制台中一样，${环境变量名}：\n\n```java\n@RestController\npublic class TestController {\n\n    @Value(\"${person.name:default}\")\n    private String name;\n\n    @Resource\n    Person person;\n\n    @Value(\"${JAVA_HOME}\")\n    private String JAVA_HOME;\n\n    @GetMapping(\"/\")\n    public Object test(){\n        System.out.println(JAVA_HOME);\n        return person;\n    }\n}\n```\n\nSpringboot在启动的时候也会获取当前机器的环境变量和各种属性值：\n\n```java\n@SpringBootApplication\npublic class Demo2Application {\n\n    public static void main(String[] args) {\n        ConfigurableApplicationContext run = SpringApplication.run(Demo2Application.class, args);\n        ConfigurableEnvironment environment = run.getEnvironment();\n        //获取环境变量\n        System.out.println(environment.getSystemEnvironment());\n        //获取各种JVM参数和操作系统等信息\n        System.out.println(environment.getPropertySources());\n    }\n}\n```\n\n其中命令行参数设置配置项的时候有一点要注意：\n\n```java\n@SpringBootApplication\npublic class DemoApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(DemoApplication.class, args);\n    }\n}\n```\n\n在启动类中SpringApplication.run(DemoApplication.class, args)一定要把args传进去，我们设置的命令行参数才能生效QWQ\n\n#### 配置文件的优先级\n\n1. Default properties (specified by setting SpringApplication.setDefaultProperties).\n2. @PropertySource annotations on your @Configuration classes. Please note that such property sources are not added to the Environment until the application context is being refreshed. This is too late to configure certain properties such as logging.* and spring.main.* which are read before refresh begins.\n3. Config data (such as application.properties files)\n4. A RandomValuePropertySource that has properties only in random.*.\n5. OS environment variables.\n6. Java System properties (System.getProperties()).\n7. JNDI attributes from java:comp/env.\n8. ServletContext init parameters.\n9. ServletConfig init parameters.\n10. Properties from SPRING_APPLICATION_JSON (inline JSON embedded in an environment variable or system property).\n11. Command line arguments.\n12. properties attribute on your tests. Available on @SpringBootTest and the test annotations for testing a particular slice of your application.\n13. @TestPropertySource annotations on your tests.\n14. Devtools global settings properties in the $HOME/.config/spring-boot directory when devtools is active.\n\n后面的会覆盖前面的同名配置项\n\n#### 配置文件的位置\n\n1. classpath 根路径（resource目录是classpath的根路径）。\n2. classpath 根路径下config目录。\n3. jar包当前目录。\n4. jar包当前目录的config目录。\n5. /config子目录的直接子目录。\n\n后面的优先级更高\n\n我们可以使用外部配置文件来修改配置，这样就不用重新打包编译文件也能修改配置\n\n#### 配置文件加载顺序\n\n1. 当前jar包内部的application.properties和application.yml。\n2. 当前jar包内部的application-{profile}.properties 和 application-{profile}.yml。\n3. 引用的外部jar包的application.properties和application.yml。\n4. 引用的外部jar包的application-{profile}.properties和application-{profile}.yml。\n\n后面的优先级更高\n\n（测试的时候不要使用idea直接运行，使用命令行来启动）\n\n### 自定义starter和自动配置类\n\n如果我们使用Spring-Initializer时，没有选择任何场景，则会自动帮我们导入\n\n```xml\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n```\n\n这个依赖抱哈Spring的基本功能（Spring容器和自动配置的的依赖）\n\n我们创建一个名为lth-spring-boot-starter的MAVEN项目，也就是我们自定义的starter，这这个starter中引入我们想要引入的依赖，然后其他项目想引入这些依赖时，直接引入这个starter即可\n\n这个starter没有业务逻辑，起到统合依赖的作用：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.lth</groupId>\n    <artifactId>lth-spring-boot-starter</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <dependencies>\n        <dependency>\n            <groupId>com.lth</groupId>\n            <artifactId>lth-spring-boot-starter-autoconfiguration</artifactId>\n            <version>0.0.1-SNAPSHOT</version>\n        </dependency>\n    </dependencies>\n\n</project>\n```\n\n这个starter引入了lth-spring-boot-starter-autoconfiguration，其他项目引入这个starter时也会自动引入autoconfiguration\n\n在lth-spring-boot-starter-autoconfiguration模块中编写一些具体的业务逻辑，比如我们想要根据配置文件设置打招呼的前缀和后缀\n\npom文件：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.6.7</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.lth</groupId>\n    <artifactId>lth-spring-boot-starter-autoconfiguration</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>lth-spring-boot-starter-autoconfiguration</name>\n    <description>lth-spring-boot-starter-autoconfiguration</description>\n    <properties>\n        <java.version>1.8</java.version>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n        </dependency>\n    </dependencies>\n\n</project>\n```\n\n引入依赖时是根据，这两个属性引入到项目中的\n\n```xml\n    <groupId>com.lth</groupId>\n    <artifactId>lth-spring-boot-starter-autoconfiguration</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n```\n\n我们设置一个配置类来绑定依赖：\n\n```java\npackage com.lth.bean;\n\nimport lombok.Data;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\n\n@ConfigurationProperties(\"lth.hello\")\n@Data\npublic class HelloProperties {\n    private String prefix;\n    private String suffix;\n}\n```\n\n然后编写一个业务类实现具体的业务逻辑：从Spring容器中获取helloProperties，然后利用这个配置项在名称前后加上前缀和后缀\n\n```java\npackage com.lth.bean;\n\nimport javax.annotation.Resource;\n\npublic class HelloService {\n    @Resource\n    HelloProperties helloProperties;\n    public String helloWorld(String name){\n        return helloProperties.getPrefix()+\" name \"+helloProperties.getSuffix();\n    }\n}\n```\n\n但是此时helloProperties并不在Spring容器中，HelloService也不在Spring容器中，我们可以通过编写自动配置类将这两个bean注入到Spring容器中：\n\n```java\n@Configuration\n//注入配置类\n@EnableConfigurationProperties(HelloProperties.class)\npublic class HelloAutoConfiguration {\n    //注入业务类\n    @Bean\n    public HelloService helloService(){\n        return new HelloService();\n    }\n}\n```\n\n@EnableConfigurationPropertie注解用于向Spring容器中添加配置类的bean（也就是向容器中添加一个带有@ConfigurationProperties注解的类的对象），等价于通过@Bean注解向Spring容器添加带有@ConfigurationProperties注解的bean，通过@EnableConfigurationPropertie，@Bean，@Component注解注入的bean都会经过Spring容器的自动装配，相关的注解都会生效。\n\n然后我们使用maven的lifecycle中clean，install将当前项目编译，然后安装到我们的项目中\n\n先安装自动配置类lth-spring-boot-starter-autoconfiguration，再安装我们的lth-spring-boot-starter，因为starter编译需要用到autoconfiguration的jar包，实际上我们需要将starter所引用的jar都编译好，再编译starter进行总体上的打包\n\n测试：\n\n```java\n@SpringBootTest\nclass DemoApplicationTests {\n\n    @Resource\n    HelloService helloService;\n\n    @Test\n    void contextLoads() {\n        System.out.println(helloService.helloWorld(\"LTH\"));\n    }\n}\n```\n\nproperties配置文件：\n\n```properties\nlth.hello.prefix=hello\nlth.hello.suffix=come on\n```\n\n输出hello name come on，代表成功\n\n## 补充：IOC容器的创建流程\n\n```java\n\t@Override\n\tpublic void refresh() throws BeansException, IllegalStateException {\n        //上锁\n\t\tsynchronized (this.startupShutdownMonitor) {\n            //通知监听器开始创建IOC容器\n\t\t\tStartupStep contextRefresh = this.applicationStartup.start(\"spring.context.refresh\");\n\n\t\t\t//创建容器前的预处理\n\t\t\tprepareRefresh();\n\n\t\t\t// Tell the subclass to refresh the internal bean factory.\n\t\t\tConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();\n\n\t\t\t// Prepare the bean factory for use in this context.\n\t\t\tprepareBeanFactory(beanFactory);\n\n\t\t\ttry {\n\t\t\t\t// Allows post-processing of the bean factory in context subclasses.\n\t\t\t\tpostProcessBeanFactory(beanFactory);\n\n\t\t\t\tStartupStep beanPostProcess = this.applicationStartup.start(\"spring.context.beans.post-process\");\n\t\t\t\t// Invoke factory processors registered as beans in the context.\n\t\t\t\tinvokeBeanFactoryPostProcessors(beanFactory);\n\n\t\t\t\t// Register bean processors that intercept bean creation.\n\t\t\t\tregisterBeanPostProcessors(beanFactory);\n\t\t\t\tbeanPostProcess.end();\n\n\t\t\t\t// Initialize message source for this context.\n\t\t\t\tinitMessageSource();\n\n\t\t\t\t// Initialize event multicaster for this context.\n\t\t\t\tinitApplicationEventMulticaster();\n\n\t\t\t\t// Initialize other special beans in specific context subclasses.\n\t\t\t\tonRefresh();\n\n\t\t\t\t// Check for listener beans and register them.\n\t\t\t\tregisterListeners();\n\n\t\t\t\t// Instantiate all remaining (non-lazy-init) singletons.\n\t\t\t\tfinishBeanFactoryInitialization(beanFactory);\n\n\t\t\t\t// Last step: publish corresponding event.\n\t\t\t\tfinishRefresh();\n\t\t\t}\n\n\t\t\tcatch (BeansException ex) {\n\t\t\t\tif (logger.isWarnEnabled()) {\n\t\t\t\t\tlogger.warn(\"Exception encountered during context initialization - \" +\n\t\t\t\t\t\t\t\"cancelling refresh attempt: \" + ex);\n\t\t\t\t}\n\n\t\t\t\t// Destroy already created singletons to avoid dangling resources.\n\t\t\t\tdestroyBeans();\n\n\t\t\t\t// Reset 'active' flag.\n\t\t\t\tcancelRefresh(ex);\n\n\t\t\t\t// Propagate exception to caller.\n\t\t\t\tthrow ex;\n\t\t\t}\n\n\t\t\tfinally {\n\t\t\t\t// Reset common introspection caches in Spring's core, since we\n\t\t\t\t// might not ever need metadata for singleton beans anymore...\n\t\t\t\tresetCommonCaches();\n\t\t\t\tcontextRefresh.end();\n\t\t\t}\n\t\t}\n\t}\n```\n\n### 1. 预处理前的初始化prepareRefresh()\n\n```java\n\tprotected void prepareRefresh() {\n\t\t//记录时间\n\t\tthis.startupDate = System.currentTimeMillis();\n        //设置状态，表示激活IOC容器\n\t\tthis.closed.set(false);\n\t\tthis.active.set(true);\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(\"Refreshing \" + this);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlogger.debug(\"Refreshing \" + getDisplayName());\n\t\t\t}\n\t\t}\n\n\t\t// Initialize any placeholder property sources in the context environment.\n        //初始化属性设置(默认为空，我们可以重写这个方法)\n\t\tinitPropertySources();\n\n\t\t//验证一些必须的属性是否合法\n\t\tgetEnvironment().validateRequiredProperties();\n\n\t\t//将早期事件监听器注册为监听器，并清空早期事件\n\t\tif (this.earlyApplicationListeners == null) {\n\t\t\tthis.earlyApplicationListeners = new LinkedHashSet<>(this.applicationListeners);\n\t\t}\n\t\telse {\n\t\t\t// Reset local application listeners to pre-refresh state.\n\t\t\tthis.applicationListeners.clear();\n\t\t\tthis.applicationListeners.addAll(this.earlyApplicationListeners);\n\t\t}\n\n\t\t// Allow for the collection of early ApplicationEvents,\n\t\t// to be published once the multicaster is available...\n\t\tthis.earlyApplicationEvents = new LinkedHashSet<>();\n\t}\n```\n\n### 2.创建bean工厂beanFactories\n\n### ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory()\n\n```java\n\tprotected ConfigurableListableBeanFactory obtainFreshBeanFactory() {\n\t\t//创建bean工厂\n\t\trefreshBeanFactory();\n        //获取刚才创建的bean工厂并返回\n\t\treturn getBeanFactory();\n\t}\n```\n\n创建的beanFactory的类型是DefaultListableBeanFactory，也就是默认bean工厂\n\n### 3.准备bean工厂prepareBeanFactory(beanFactory)\n\n在这个方法中，向bean工厂设置一些属性\n\n```java\n\tprotected void prepareBeanFactory(ConfigurableListableBeanFactory beanFactory) {\n\t\t// Tell the internal bean factory to use the context's class loader etc.\n        //设置类加载器\n\t\tbeanFactory.setBeanClassLoader(getClassLoader());\n        //设置表达式解析器\n\t\tbeanFactory.setBeanExpressionResolver(new StandardBeanExpressionResolver(beanFactory.getBeanClassLoader()));\n\t\tbeanFactory.addPropertyEditorRegistrar(new ResourceEditorRegistrar(this, getEnvironment()));\n\n\t\t// Configure the bean factory with context callbacks.\n\t\tbeanFactory.addBeanPostProcessor(new ApplicationContextAwareProcessor(this));\n\t\tbeanFactory.ignoreDependencyInterface(EnvironmentAware.class);\n\t\tbeanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class);\n\t\tbeanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);\n\t\tbeanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);\n\t\tbeanFactory.ignoreDependencyInterface(MessageSourceAware.class);\n\t\tbeanFactory.ignoreDependencyInterface(ApplicationContextAware.class);\n\n\t\t// BeanFactory interface not registered as resolvable type in a plain factory.\n\t\t// MessageSource registered (and found for autowiring) as a bean.\n\t\tbeanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);\n\t\tbeanFactory.registerResolvableDependency(ResourceLoader.class, this);\n\t\tbeanFactory.registerResolvableDependency(ApplicationEventPublisher.class, this);\n\t\tbeanFactory.registerResolvableDependency(ApplicationContext.class, this);\n\n\t\t// Register early post-processor for detecting inner beans as ApplicationListeners.\n\t\tbeanFactory.addBeanPostProcessor(new ApplicationListenerDetector(this));\n\n\t\t// Detect a LoadTimeWeaver and prepare for weaving, if found.\n\t\tif (beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) {\n\t\t\tbeanFactory.addBeanPostProcessor(new LoadTimeWeaverAwareProcessor(beanFactory));\n\t\t\t// Set a temporary ClassLoader for type matching.\n\t\t\tbeanFactory.setTempClassLoader(new ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));\n\t\t}\n\n\t\t// Register default environment beans.\n\t\tif (!beanFactory.containsLocalBean(ENVIRONMENT_BEAN_NAME)) {\n\t\t\tbeanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment());\n\t\t}\n\t\tif (!beanFactory.containsLocalBean(SYSTEM_PROPERTIES_BEAN_NAME)) {\n\t\t\tbeanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties());\n\t\t}\n\t\tif (!beanFactory.containsLocalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) {\n\t\t\tbeanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment());\n\t\t}\n\t}\n```\n\n#### 1.设置加载bean所需的工具类\n\n```java\n//类加载器\nbeanFactory.setBeanClassLoader(getClassLoader());\n//表达式解析器\n\t\tbeanFactory.setBeanExpressionResolver(new StandardBeanExpressionResolver(beanFactory.getBeanClassLoader()));\n//属性编辑器\n\t\tbeanFactory.addPropertyEditorRegistrar(new ResourceEditorRegistrar(this, getEnvironment()));\n```\n\n#### 2.设置一些回调方法\n\n```java\n\t\tbeanFactory.addBeanPostProcessor(new ApplicationContextAwareProcessor(this));\n\t\tbeanFactory.ignoreDependencyInterface(EnvironmentAware.class);\n\t\tbeanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class);\n\t\tbeanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);\n\t\tbeanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);\n\t\tbeanFactory.ignoreDependencyInterface(MessageSourceAware.class);\n\t\tbeanFactory.ignoreDependencyInterface(ApplicationContextAware.class);\n```\n\n放入ApplicationContextAwareProcessor（添加部分beanPostProcessor）\n\n忽略以这些接口创建的bean：EnvironmentAware，EmbeddedValueResolverAware，ResourceLoaderAware，ApplicationEventPublisherAware，MessageSourceAware，ApplicationContextAware\n\n#### 3.设置可以通过自动装配获取的bean（@Autowire，@Resource）\n\n```\n\t\tbeanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);\n\t\tbeanFactory.registerResolvableDependency(ResourceLoader.class, this);\n\t\tbeanFactory.registerResolvableDependency(ApplicationEventPublisher.class, this);\n\t\tbeanFactory.registerResolvableDependency(ApplicationContext.class, this);\n```\n\n可以通过自动装配拿到BeanFactory（bean工厂），ResourceLoader（资源加载器），ApplicationEventPublisher（事件推送器），ApplicationContext（IOC容器）\n\n#### 4.注册ApplicationListenerDetector\n\n```\n// Register early post-processor for detecting inner beans as ApplicationListeners.\nbeanFactory.addBeanPostProcessor(new ApplicationListenerDetector(this));\n```\n\n#### 5.添加AspectJ动态代理的支持\n\n#### 6.注册和环境（系统属性，环境变量）相关的组件\n\n### 4.进行bean工厂创建完成后的后置处理\n\npostProcessBeanFactory(beanFactory)\n\n这个方法默认为空，我们重写这个方法，在beanFactory加载完成后进行一些操作\n\n====================================通过以上方法完成了beanFactory的创建和预处理工作=========================\n\n### 5.执行所有的BeanFactoryPostProcessors\n\ninvokeBeanFactoryPostProcessors\n\n在beanFactory标准初始化完成后执行这个这个方法\n\n两个接口：\n\n```java\n\tprotected void invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory beanFactory) {\n        \n\t\tPostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());\n\n\t\t// Detect a LoadTimeWeaver and prepare for weaving, if found in the meantime\n\t\t// (e.g. through an @Bean method registered by ConfigurationClassPostProcessor)\n\t\tif (beanFactory.getTempClassLoader() == null && beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) {\n\t\t\tbeanFactory.addBeanPostProcessor(new LoadTimeWeaverAwareProcessor(beanFactory));\n\t\t\tbeanFactory.setTempClassLoader(new ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));\n\t\t}\n\t}\n```\n\n#### 1.执行所有BeanFactoryPostProcessors\n\n##### 1.获取所有的BeanFactoryPostProcessor\n\n##### 2.优先执行实现了PriorityOrdered接口的BeanDefinitionRegistryPostProcessor\n\n##### 3.然后执行实现了Order接口的BeanDefinitionRegistryPostProcessor\n\n##### 4.执行剩下的BeanDefinitionRegistryPostProcessor\n\n##### 5.获取所有的BeanFactoryPostProcessor\n\n##### 6.依次执行实现了PriorityOrdered，Order，没实现接口的BeanFactoryPostProcessor\n\n### 6.注册bean的后置处理器\n\nregisterBeanPostProcessors(beanFactory);\n\n也是依次注册实现了PriorityOrdered接口，实现了Order接口，没有实现任何接口的BeanFactoryPostProcessor\n\n然后注册MergedBeanDefinitionPostProcessor和ApplicationListenerDetector\n\n### 7.初始化消息（消息绑定，消息解析）\n\ninitMessageSource\n\n如果容器中有MessageSource，则赋值给MessageSource，如果没有则自己创建一个默认的对象\n\nMessageSource：取出某个key的值，安装区域获取值\n\n然后将MessageSource注册进Spring容器中，然后我们就能通过自动装配得到MessageSource\n\n### 8.初始化事件派发器\n\ninitApplicationEventMulticaster()\n\n1.获取BeanFactory\n\n2.从容器中获取applicationEventMulticaster，如果没有就创建一个SimpleApplicationEventMulticaster并注册进Spring容器\n\n### 9.刷新容器onRefresh()\n\nonRefresh()默认为空，留给我们来实现\n\n### 10.注册事件派发器\n\n获取所有的事件监听器，去重后将所有的监听器注册进事件派发器\n\n派发之前步骤产生的事件earlyApplicationEvents\n\n### 11.初始化所有所有单实例bean\n\n```\nfinishBeanFactoryInitialization\n```\n\n```java\n\tprotected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {\n\t\t// Initialize conversion service for this context.\n\t\tif (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &&\n\t\t\t\tbeanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) {\n\t\t\tbeanFactory.setConversionService(\n\t\t\t\t\tbeanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));\n\t\t}\n\n\t\t// Register a default embedded value resolver if no BeanFactoryPostProcessor\n\t\t// (such as a PropertySourcesPlaceholderConfigurer bean) registered any before:\n\t\t// at this point, primarily for resolution in annotation attribute values.\n\t\tif (!beanFactory.hasEmbeddedValueResolver()) {\n\t\t\tbeanFactory.addEmbeddedValueResolver(strVal -> getEnvironment().resolvePlaceholders(strVal));\n\t\t}\n\n\t\t// Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.\n\t\tString[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);\n\t\tfor (String weaverAwareName : weaverAwareNames) {\n\t\t\tgetBean(weaverAwareName);\n\t\t}\n\n\t\t// Stop using the temporary ClassLoader for type matching.\n\t\tbeanFactory.setTempClassLoader(null);\n\n\t\t// Allow for caching all bean definition metadata, not expecting further changes.\n\t\tbeanFactory.freezeConfiguration();\n\n\t\t// Instantiate all remaining (non-lazy-init) singletons.\n\t\tbeanFactory.preInstantiateSingletons();\n\t}\n```\n\n这个方法的核心语句是beanFactory.preInstantiateSingletons()，预加载单实例bean\n\n```java\n\t@Override\n\tpublic void preInstantiateSingletons() throws BeansException {\n\t\tif (logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"Pre-instantiating singletons in \" + this);\n\t\t}\n\n        //拿到所有bean的定义信息\n\t\tList<String> beanNames = new ArrayList<>(this.beanDefinitionNames);\n\n\t\t// Trigger initialization of all non-lazy singleton beans...\n\t\tfor (String beanName : beanNames) {\n\t\t\tRootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);\n\t\t\tif (!bd.isAbstract() && bd.isSingleton() && !bd.isLazyInit()) {\n\t\t\t\tif (isFactoryBean(beanName)) {\n\t\t\t\t\tObject bean = getBean(FACTORY_BEAN_PREFIX + beanName);\n\t\t\t\t\tif (bean instanceof FactoryBean) {\n\t\t\t\t\t\tFactoryBean<?> factory = (FactoryBean<?>) bean;\n\t\t\t\t\t\tboolean isEagerInit;\n\t\t\t\t\t\tif (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {\n\t\t\t\t\t\t\tisEagerInit = AccessController.doPrivileged(\n\t\t\t\t\t\t\t\t\t(PrivilegedAction<Boolean>) ((SmartFactoryBean<?>) factory)::isEagerInit,\n\t\t\t\t\t\t\t\t\tgetAccessControlContext());\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tisEagerInit = (factory instanceof SmartFactoryBean &&\n\t\t\t\t\t\t\t\t\t((SmartFactoryBean<?>) factory).isEagerInit());\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (isEagerInit) {\n\t\t\t\t\t\t\tgetBean(beanName);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tgetBean(beanName);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Trigger post-initialization callback for all applicable beans...\n\t\tfor (String beanName : beanNames) {\n\t\t\tObject singletonInstance = getSingleton(beanName);\n\t\t\tif (singletonInstance instanceof SmartInitializingSingleton) {\n\t\t\t\tSmartInitializingSingleton smartSingleton = (SmartInitializingSingleton) singletonInstance;\n\t\t\t\tif (System.getSecurityManager() != null) {\n\t\t\t\t\tAccessController.doPrivileged((PrivilegedAction<Object>) () -> {\n\t\t\t\t\t\tsmartSingleton.afterSingletonsInstantiated();\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}, getAccessControlContext());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tsmartSingleton.afterSingletonsInstantiated();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```\n\n#### 1.preInstantiateSingletons\n\n##### 1.拿到扫描路径下所有带有@Controller，@Service，@Repository，@Configuration，@Component等向Spring容器中注册组件的注解的类的信息\n\n![image-20220512223534964](pictures/189200b12b1d1c8ec72936c1539a4d80.png)\n\n如上图所示，包含Spring容器中默认加载的组件和我们自己编写的\n\n##### 2.遍历所有的bean的全限定名，创建和初始化对应的对象\n\n- 拿到一个类的全限定名beanName\n- 获取这个类的定义信息RootBeanDefinition\n\nRootBeanDefinition bd = getMergedLocalBeanDefinition(beanName)\n\n![image-20220512232616126](pictures/f0b2393a61b48e7f903b136fab5d1a19.png)\n\n- 如果这个bean不是抽象的，也不是单实例的，也不是懒加载的\n    - 然后判断是不是FactoryBean\n    - 如果是FactoryBean，则使用FactoryBean的getObect方法创建bean\n    - 如果不是FactoryBean，则使用getBean方法创建对象，getBean调用下面的doGetBean方法\n\n\n\n```java\nprotected <T> T doGetBean(\n      String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly)\n      throws BeansException {\n   //拿到bean的名称\n   String beanName = transformedBeanName(name);\n   Object bean;\n\n   //从缓存中获取单实例bean，如果能获取到说明已经被创建过了\n   Object sharedInstance = getSingleton(beanName);\n    //如果缓存中拿不到(不是调用了beanFactory创建bean了吗为什么拿不到，这里先伏笔一下)\n   if (sharedInstance != null && args == null) {\n      if (logger.isTraceEnabled()) {\n         if (isSingletonCurrentlyInCreation(beanName)) {\n            logger.trace(\"Returning eagerly cached instance of singleton bean '\" + beanName +\n                  \"' that is not fully initialized yet - a consequence of a circular reference\");\n         }\n         else {\n            logger.trace(\"Returning cached instance of singleton bean '\" + beanName + \"'\");\n         }\n      }\n      bean = getObjectForBeanInstance(sharedInstance, name, beanName, null);\n   }\n\n   else {\n      // Fail if we're already creating this bean instance:\n      // We're assumably within a circular reference.\n      if (isPrototypeCurrentlyInCreation(beanName)) {\n         throw new BeanCurrentlyInCreationException(beanName);\n      }\n\n      // Check if bean definition exists in this factory.\n      //拿到父工厂(如果有的话)\n      BeanFactory parentBeanFactory = getParentBeanFactory();\n      if (parentBeanFactory != null && !containsBeanDefinition(beanName)) {\n         // Not found -> check parent.\n         String nameToLookup = originalBeanName(name);\n         if (parentBeanFactory instanceof AbstractBeanFactory) {\n            return ((AbstractBeanFactory) parentBeanFactory).doGetBean(\n                  nameToLookup, requiredType, args, typeCheckOnly);\n         }\n         else if (args != null) {\n            // Delegation to parent with explicit args.\n            return (T) parentBeanFactory.getBean(nameToLookup, args);\n         }\n         else if (requiredType != null) {\n            // No args -> delegate to standard getBean method.\n            return parentBeanFactory.getBean(nameToLookup, requiredType);\n         }\n         else {\n            return (T) parentBeanFactory.getBean(nameToLookup);\n         }\n      }\n\n      if (!typeCheckOnly) {\n         //标记当前bean已经被创建了，防止多个线程创建bean\n         markBeanAsCreated(beanName);\n      }\n\n      try {\n         //获取bean的定义信息\n         RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);\n         checkMergedBeanDefinition(mbd, beanName, args);\n\n         // Guarantee initialization of beans that the current bean depends on.\n          //获取当前bean依赖的其他bean\n         String[] dependsOn = mbd.getDependsOn();\n         if (dependsOn != null) {\n            //如果当前有依赖的bean，则遍历所有依赖的bean,创建所有依赖的bean\n            for (String dep : dependsOn) {\n               if (isDependent(beanName, dep)) {\n                  throw new BeanCreationException(mbd.getResourceDescription(), beanName,\n                        \"Circular depends-on relationship between '\" + beanName + \"' and '\" + dep + \"'\");\n               }\n               registerDependentBean(dep, beanName);\n               try {\n                  //尝试获取或者创建所依赖的bean(这里发生了递归)\n                  getBean(dep);\n               }\n               catch (NoSuchBeanDefinitionException ex) {\n                  throw new BeanCreationException(mbd.getResourceDescription(), beanName,\n                        \"'\" + beanName + \"' depends on missing bean '\" + dep + \"'\", ex);\n               }\n            }\n         }\n\n         // Create bean instance.\n         //如果这是一个单实例bean，则采用单实例bean的创建方法\n         if (mbd.isSingleton()) {\n            //调用getSingleton方法(上面也调用这个方法)创建或者从一二级缓存中获取bean，这里的lamda表达式省略的是beanFactory的getObject方法\n            sharedInstance = getSingleton(beanName, () -> {\n               try {\n                   //调用createBean方法创建bean\n                  return createBean(beanName, mbd, args);\n               }\n               catch (BeansException ex) {\n                  // Explicitly remove instance from singleton cache: It might have been put there\n                  // eagerly by the creation process, to allow for circular reference resolution.\n                  // Also remove any beans that received a temporary reference to the bean.\n                  destroySingleton(beanName);\n                  throw ex;\n               }\n            });\n            bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);\n         }\n\n         else if (mbd.isPrototype()) {\n            // It's a prototype -> create a new instance.\n            Object prototypeInstance = null;\n            try {\n               beforePrototypeCreation(beanName);\n               prototypeInstance = createBean(beanName, mbd, args);\n            }\n            finally {\n               afterPrototypeCreation(beanName);\n            }\n            bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);\n         }\n\n         else {\n            String scopeName = mbd.getScope();\n            if (!StringUtils.hasLength(scopeName)) {\n               throw new IllegalStateException(\"No scope name defined for bean ´\" + beanName + \"'\");\n            }\n            Scope scope = this.scopes.get(scopeName);\n            if (scope == null) {\n               throw new IllegalStateException(\"No Scope registered for scope name '\" + scopeName + \"'\");\n            }\n            try {\n               Object scopedInstance = scope.get(beanName, () -> {\n                  beforePrototypeCreation(beanName);\n                  try {\n                     return createBean(beanName, mbd, args);\n                  }\n                  finally {\n                     afterPrototypeCreation(beanName);\n                  }\n               });\n               bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);\n            }\n            catch (IllegalStateException ex) {\n               throw new BeanCreationException(beanName,\n                     \"Scope '\" + scopeName + \"' is not active for the current thread; consider \" +\n                     \"defining a scoped proxy for this bean if you intend to refer to it from a singleton\",\n                     ex);\n            }\n         }\n      }\n      catch (BeansException ex) {\n         cleanupAfterBeanCreationFailure(beanName);\n         throw ex;\n      }\n   }\n\n   // Check if required type matches the type of the actual bean instance.\n   if (requiredType != null && !requiredType.isInstance(bean)) {\n      try {\n         T convertedBean = getTypeConverter().convertIfNecessary(bean, requiredType);\n         if (convertedBean == null) {\n            throw new BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());\n         }\n         return convertedBean;\n      }\n      catch (TypeMismatchException ex) {\n         if (logger.isTraceEnabled()) {\n            logger.trace(\"Failed to convert bean '\" + name + \"' to required type '\" +\n                  ClassUtils.getQualifiedName(requiredType) + \"'\", ex);\n         }\n         throw new BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());\n      }\n   }\n   return (T) bean;\n}\n```\n\n**核心方法doGetBean**\n\n1.从缓存中获取单实例bean，如果能获取到说明已经被创建过了\n\nObject sharedInstance = getSingleton(beanName)\n\n（单例设计模式）\n\n```java\n\t@Nullable\n\tprotected Object getSingleton(String beanName, boolean allowEarlyReference) {\n\t\t//尝试从一级缓存中拿到bean\n\t\tObject singletonObject = this.singletonObjects.get(beanName);\n        //如果没有拿到\n\t\tif (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {\n            //再尝试从二级缓存中找\n\t\t\tsingletonObject = this.earlySingletonObjects.get(beanName);\n            //如果二级缓存中也没有找到，并且允许提前创建bean\n\t\t\tif (singletonObject == null && allowEarlyReference) {\n                //锁住一级缓存(单例模式)\n\t\t\t\tsynchronized (this.singletonObjects) {\n\t\t\t\t\t//再尝试从一级缓存中找\n\t\t\t\t\tsingletonObject = this.singletonObjects.get(beanName);\n                    //如果一级缓存中没有找到\n\t\t\t\t\tif (singletonObject == null) {\n                        //从二级缓存中找\n\t\t\t\t\t\tsingletonObject = this.earlySingletonObjects.get(beanName);\n                        //如果二级缓存中没有找到\n\t\t\t\t\t\tif (singletonObject == null) {\n                            //从三级中找到对应的beanFactory，准备执行创建的bean的流程\n\t\t\t\t\t\t\tObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName);\n                            //如果找到了beanFactory\n\t\t\t\t\t\t\tif (singletonFactory != null) {\n                                //使用beanFactory创建bean\n\t\t\t\t\t\t\t\tsingletonObject = singletonFactory.getObject();\n                                //将这个bean放入二级缓存\n\t\t\t\t\t\t\t\tthis.earlySingletonObjects.put(beanName, singletonObject);\n                                //从三级缓存中移除beanFactory\n\t\t\t\t\t\t\t\tthis.singletonFactories.remove(beanName);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn singletonObject;\n\t}\n```\n\nsingletonObjects：一级缓存：单例池\n\n```\nprivate final Map<String, Object> singletonObjects = new ConcurrentHashMap<>(256);\n```\n\n其实就是一个线程安全的map的\n\nearlySingletonObjects：二级缓存，用于保存半成品的bean\n\n```\nprivate final Map<String, Object> earlySingletonObjects = new ConcurrentHashMap<>(16);\n```\n\n同样是一个线程安全的map\n\nsingletonFactories：三级缓存，用于保存bean工厂\n\n```\nprivate final Map<String, ObjectFactory<?>> singletonFactories = new HashMap<>(16);\n```\n\n同样是一个线程安全的map，但是保存的是 ObjectFactory<?>\n\n**核心方法createBean**\n\n```java\n\t@Override\n\tprotected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args)\n\t\t\tthrows BeanCreationException {\n\n\t\tif (logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"Creating instance of bean '\" + beanName + \"'\");\n\t\t}\n\t\tRootBeanDefinition mbdToUse = mbd;\n\n\t\t// Make sure bean class is actually resolved at this point, and\n\t\t// clone the bean definition in case of a dynamically resolved Class\n\t\t// which cannot be stored in the shared merged bean definition.\n\t\tClass<?> resolvedClass = resolveBeanClass(mbd, beanName);\n\t\tif (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {\n\t\t\tmbdToUse = new RootBeanDefinition(mbd);\n\t\t\tmbdToUse.setBeanClass(resolvedClass);\n\t\t}\n\n\t\t// Prepare method overrides.\n\t\ttry {\n\t\t\tmbdToUse.prepareMethodOverrides();\n\t\t}\n\t\tcatch (BeanDefinitionValidationException ex) {\n\t\t\tthrow new BeanDefinitionStoreException(mbdToUse.getResourceDescription(),\n\t\t\t\t\tbeanName, \"Validation of method overrides failed\", ex);\n\t\t}\n\n\t\ttry {\n\t\t\t// Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.\n            //给这个bean一个返回代理对象的机会\n\t\t\tObject bean = resolveBeforeInstantiation(beanName, mbdToUse);\n\t\t\tif (bean != null) {\n\t\t\t\treturn bean;\n\t\t\t}\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\tthrow new BeanCreationException(mbdToUse.getResourceDescription(), beanName,\n\t\t\t\t\t\"BeanPostProcessor before instantiation of bean failed\", ex);\n\t\t}\n\n\t\ttry {\n            //如果没有返回代理对象，则创建bean\n\t\t\tObject beanInstance = doCreateBean(beanName, mbdToUse, args);\n\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(\"Finished creating instance of bean '\" + beanName + \"'\");\n\t\t\t}\n\t\t\treturn beanInstance;\n\t\t}\n\t\tcatch (BeanCreationException | ImplicitlyAppearedSingletonException ex) {\n\t\t\t// A previously detected exception with proper bean creation context already,\n\t\t\t// or illegal singleton state to be communicated up to DefaultSingletonBeanRegistry.\n\t\t\tthrow ex;\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\tthrow new BeanCreationException(\n\t\t\t\t\tmbdToUse.getResourceDescription(), beanName, \"Unexpected exception during bean creation\", ex);\n\t\t}\n\t}\n```\n\n**创建bean：doCreateBean**\n\n```java\n\tprotected Object doCreateBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args)\n\t\t\tthrows BeanCreationException {\n\n\t\t// Instantiate the bean.\n\t\tBeanWrapper instanceWrapper = null;\n\t\tif (mbd.isSingleton()) {\n\t\t\tinstanceWrapper = this.factoryBeanInstanceCache.remove(beanName);\n\t\t}\n\t\tif (instanceWrapper == null) {\n            //创建bean实例\n\t\t\tinstanceWrapper = createBeanInstance(beanName, mbd, args);\n\t\t}\n\t\tObject bean = instanceWrapper.getWrappedInstance();\n\t\tClass<?> beanType = instanceWrapper.getWrappedClass();\n\t\tif (beanType != NullBean.class) {\n\t\t\tmbd.resolvedTargetType = beanType;\n\t\t}\n\n\t\t// Allow post-processors to modify the merged bean definition.\n        //加上锁，防止多次后置处理，确保只处理一次\n\t\tsynchronized (mbd.postProcessingLock) {\n            //如果没有被后置处理\n\t\t\tif (!mbd.postProcessed) {\n\t\t\t\ttry {\n                    //执行一些后置处理器\n\t\t\t\t\tapplyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);\n\t\t\t\t}\n\t\t\t\tcatch (Throwable ex) {\n\t\t\t\t\tthrow new BeanCreationException(mbd.getResourceDescription(), beanName,\n\t\t\t\t\t\t\t\"Post-processing of merged bean definition failed\", ex);\n\t\t\t\t}\n                //标志位已经被后置处理\n\t\t\t\tmbd.postProcessed = true;\n\t\t\t}\n\t\t}\n\n\t\t// Eagerly cache singletons to be able to resolve circular references\n\t\t// even when triggered by lifecycle interfaces like BeanFactoryAware.\n        //第二级缓存能处理循环依赖，及时有了生命周期的处理方法\n\t\tboolean earlySingletonExposure = (mbd.isSingleton() && this.allowCircularReferences &&\n\t\t\t\tisSingletonCurrentlyInCreation(beanName));\n\t\tif (earlySingletonExposure) {\n\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(\"Eagerly caching bean '\" + beanName +\n\t\t\t\t\t\t\"' to allow for resolving potential circular references\");\n\t\t\t}\n\t\t\taddSingletonFactory(beanName, () -> getEarlyBeanReference(beanName, mbd, bean));\n\t\t}\n\n\t\t// Initialize the bean instance.\n\t\tObject exposedObject = bean;\n\t\ttry {\n            //为bean赋值\n\t\t\tpopulateBean(beanName, mbd, instanceWrapper);\n\t\t\texposedObject = initializeBean(beanName, exposedObject, mbd);\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\tif (ex instanceof BeanCreationException && beanName.equals(((BeanCreationException) ex).getBeanName())) {\n\t\t\t\tthrow (BeanCreationException) ex;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new BeanCreationException(\n\t\t\t\t\t\tmbd.getResourceDescription(), beanName, \"Initialization of bean failed\", ex);\n\t\t\t}\n\t\t}\n\n\t\tif (earlySingletonExposure) {\n            //获取早期保留的bean的引用\n\t\t\tObject earlySingletonReference = getSingleton(beanName, false);\n\t\t\tif (earlySingletonReference != null) {\n\t\t\t\tif (exposedObject == bean) {\n\t\t\t\t\texposedObject = earlySingletonReference;\n\t\t\t\t}\n\t\t\t\telse if (!this.allowRawInjectionDespiteWrapping && hasDependentBean(beanName)) {\n\t\t\t\t\tString[] dependentBeans = getDependentBeans(beanName);\n\t\t\t\t\tSet<String> actualDependentBeans = new LinkedHashSet<>(dependentBeans.length);\n\t\t\t\t\tfor (String dependentBean : dependentBeans) {\n\t\t\t\t\t\tif (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) {\n\t\t\t\t\t\t\tactualDependentBeans.add(dependentBean);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!actualDependentBeans.isEmpty()) {\n\t\t\t\t\t\tthrow new BeanCurrentlyInCreationException(beanName,\n\t\t\t\t\t\t\t\t\"Bean with name '\" + beanName + \"' has been injected into other beans [\" +\n\t\t\t\t\t\t\t\tStringUtils.collectionToCommaDelimitedString(actualDependentBeans) +\n\t\t\t\t\t\t\t\t\"] in its raw version as part of a circular reference, but has eventually been \" +\n\t\t\t\t\t\t\t\t\"wrapped. This means that said other beans do not use the final version of the \" +\n\t\t\t\t\t\t\t\t\"bean. This is often the result of over-eager type matching - consider using \" +\n\t\t\t\t\t\t\t\t\"'getBeanNamesForType' with the 'allowEagerInit' flag turned off, for example.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Register bean as disposable.\n\t\ttry {\n            //注册bean的销毁\n\t\t\tregisterDisposableBeanIfNecessary(beanName, bean, mbd);\n\t\t}\n\t\tcatch (BeanDefinitionValidationException ex) {\n\t\t\tthrow new BeanCreationException(\n\t\t\t\t\tmbd.getResourceDescription(), beanName, \"Invalid destruction signature\", ex);\n\t\t}\n\t\t//返回创建好的bean\n\t\treturn exposedObject;\n\t}\n```\n\n创建对象实例 createBeanInstance\n\n```java\n\tprotected BeanWrapper createBeanInstance(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) {\n\t\t// Make sure bean class is actually resolved at this point.\n        //获取当前的bean是什么类型\n\t\tClass<?> beanClass = resolveBeanClass(mbd, beanName);\n\n\t\tif (beanClass != null && !Modifier.isPublic(beanClass.getModifiers()) && !mbd.isNonPublicAccessAllowed()) {\n\t\t\tthrow new BeanCreationException(mbd.getResourceDescription(), beanName,\n\t\t\t\t\t\"Bean class isn't public, and non-public access not allowed: \" + beanClass.getName());\n\t\t}\n\n\t\tSupplier<?> instanceSupplier = mbd.getInstanceSupplier();\n        //如果是实例bean(@Component)\n\t\tif (instanceSupplier != null) {\n\t\t\treturn obtainFromSupplier(instanceSupplier, beanName);\n\t\t}\n\t\t//如果是用@bean注解创建\n\t\tif (mbd.getFactoryMethodName() != null) {\n            //利用对象的构造器创建bean实例\n\t\t\treturn instantiateUsingFactoryMethod(beanName, mbd, args);\n\t\t}\n\n\t\t// Shortcut when re-creating the same bean...\n\t\tboolean resolved = false;\n\t\tboolean autowireNecessary = false;\n\t\tif (args == null) {\n\t\t\tsynchronized (mbd.constructorArgumentLock) {\n\t\t\t\tif (mbd.resolvedConstructorOrFactoryMethod != null) {\n\t\t\t\t\tresolved = true;\n\t\t\t\t\tautowireNecessary = mbd.constructorArgumentsResolved;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (resolved) {\n\t\t\tif (autowireNecessary) {\n\t\t\t\treturn autowireConstructor(beanName, mbd, null, null);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn instantiateBean(beanName, mbd);\n\t\t\t}\n\t\t}\n\n\t\t// Candidate constructors for autowiring?\n\t\tConstructor<?>[] ctors = determineConstructorsFromBeanPostProcessors(beanClass, beanName);\n\t\tif (ctors != null || mbd.getResolvedAutowireMode() == AUTOWIRE_CONSTRUCTOR ||\n\t\t\t\tmbd.hasConstructorArgumentValues() || !ObjectUtils.isEmpty(args)) {\n\t\t\treturn autowireConstructor(beanName, mbd, ctors, args);\n\t\t}\n\n\t\t// Preferred constructors for default construction?\n\t\tctors = mbd.getPreferredConstructors();\n\t\tif (ctors != null) {\n\t\t\treturn autowireConstructor(beanName, mbd, ctors, null);\n\t\t}\n\n\t\t// No special handling: simply use no-arg constructor.\n\t\treturn instantiateBean(beanName, mbd);\n\t}\n```\n\n属性赋值populateBean\n\n\n\n![image-20220513101910052](pictures/059bb96aa2f5fd724bcaea38a591f7c6.png)\n\n### 12.完成beanFactory的创建工作\n\n```java\n\tprotected void finishRefresh() {\n\t\t// Clear context-level resource caches (such as ASM metadata from scanning).\n\t\tclearResourceCaches();\n\n\t\t// Initialize lifecycle processor for this context.\n        //初始化\n\t\tinitLifecycleProcessor();\n\n\t\t// Propagate refresh to lifecycle processor first.\n\t\tgetLifecycleProcessor().onRefresh();\n\n\t\t// Publish the final event.\n\t\tpublishEvent(new ContextRefreshedEvent(this));\n\n\t\t// Participate in LiveBeansView MBean, if active.\n\t\tLiveBeansView.registerApplicationContext(this);\n\t}\n```\n\n#### 1.初始化LifecycleProcessor（需要我们来实现）\n\n#### 2.执行getLifecycleProcessor().onRefresh();\n\n#### 3.发布容器创建完成事件\n\npublishEvent(new ContextRefreshedEvent(this))","slug":"Springboot-下篇","published":1,"updated":"2022-11-30T11:01:46.162Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clb3jhenh00037swwhlqm4k8q","content":"<h1 id=\"Springboot底层原理（2）\"><a href=\"#Springboot底层原理（2）\" class=\"headerlink\" title=\"Springboot底层原理（2）\"></a>Springboot底层原理（2）</h1><p><a href=\"https://docs.spring.io/spring-framework/docs/5.3.x/reference/html/\">Spring Framework Documentation</a></p>\n<h2 id=\"使用原生的Servlet\"><a href=\"#使用原生的Servlet\" class=\"headerlink\" title=\"使用原生的Servlet\"></a>使用原生的Servlet</h2><h3 id=\"使用注解声明为Servlet组件\"><a href=\"#使用注解声明为Servlet组件\" class=\"headerlink\" title=\"使用注解声明为Servlet组件\"></a>使用注解声明为Servlet组件</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WebServlet(&quot;/my&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyServlet</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">HttpServlet</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">        resp.getWriter().write(<span class=\"string\">&quot;1212&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以在Spring中使用原生的Servlet组件，重写里面的doGet，doPost等方法实现具体的逻辑，并加上@WebServlet(“/my”)添加路由映射，但是只是这样还不能生效，因为它并不是Spring框架下的组件，所以需要在启动类上加上@ServletComponentScan(basePackages = “com.demo”)设置包扫描路径，用于扫描原生的Servlet组件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ServletComponentScan(basePackages = &quot;com.demo&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MydemoApplication</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(MydemoApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因为不是Spring框架下的组件，所以Spring注册的拦截器不会生效，想要进行拦截需要使用Servlet组件中的拦截器：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WebFilter(urlPatterns = &quot;/*&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyFilter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Filter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Spring容器启动的时候执行</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;Filter init&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//如果路由和设置的路由匹配，则先执行这个过滤器，然后再执行具体的业务逻辑</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doFilter</span><span class=\"params\">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class=\"keyword\">throws</span> IOException, ServletException &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;do Filter&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//Spring容器销毁（也就是Servlet销毁时）执行的方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">destroy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;destroy&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>@WebFilter(urlPatterns = “/*”) 注意路由的写法，Spring组件中的url是<code>/**</code> 而Servlet组件的写法是<code>/*</code></p>\n<p>监听器：</p>\n<p>在项目初始化完成，开始监听之前可以执行contextInitialized方法，项目关闭的时候会执行contextDestroyed方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WebListener</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyListener</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ServletContextListener</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">contextDestroyed</span><span class=\"params\">(ServletContextEvent sce)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;项目结束&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">contextInitialized</span><span class=\"params\">(ServletContextEvent sce)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;检测到初始化完成&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/pictures/4855e5cc40ab39b4cc76d71effdace90.png\" alt=\"image-20220507193721185\"></p>\n<h3 id=\"向Spring容器中添加Servlet组件\"><a href=\"#向Spring容器中添加Servlet组件\" class=\"headerlink\" title=\"向Spring容器中添加Servlet组件\"></a>向Spring容器中添加Servlet组件</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyServletConfiger</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//注册Servlet</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title function_\">myRegistrationBean</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServletRegistrationBean</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">MyServlet</span>(),<span class=\"string\">&quot;/my&quot;</span>,<span class=\"string\">&quot;/my1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//注册过滤器</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title function_\">filterRegistrationBean</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FilterRegistrationBean</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">MyFilter</span>(),myRegistrationBean());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//注册监听器</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ServletListenerRegistrationBean <span class=\"title function_\">listenerRegistrationBean</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServletListenerRegistrationBean</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">MyListener</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注册过滤器也可以使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title function_\">filterRegistrationBean</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">FilterRegistrationBean</span> <span class=\"variable\">filterRegistrationBean</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FilterRegistrationBean</span>();</span><br><span class=\"line\">    filterRegistrationBean.setFilter(<span class=\"keyword\">new</span> <span class=\"title class_\">MyFilter</span>());</span><br><span class=\"line\">    filterRegistrationBean.setUrlPatterns(Arrays.asList(<span class=\"string\">&quot;/*&quot;</span>,<span class=\"string\">&quot;/css/*&quot;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> filterRegistrationBean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意：</p>\n<p>这里的@Configuration注解不能将proxyBeanMethods 属性设置为 false，我们前面提到过，如果将这个属性设置为true，在调用里面带有@Bean的方法时，会在Spring容器中找有没有相同的bean，如果有就返回Spring容器中的bean，如果没有会创建一个bean。而设置为false后，会不会生产代理对象，因而会生成很多多余的bean。所以这里需要将proxyBeanMethods 设置为true，也就是它的默认值，来保证依赖的组件始终的单实例的。</p>\n<h3 id=\"原生的Servlet的作用原理\"><a href=\"#原生的Servlet的作用原理\" class=\"headerlink\" title=\"原生的Servlet的作用原理\"></a>原生的Servlet的作用原理</h3><p>前面提到使用原生的Servlet不会触发Spring的拦截器，下面解释这个的原因。</p>\n<p>Springboot Web处理请求的核心是DispatcherServlet类，而这个Servlet是在DispatcherServletAutoConfiguration这个自动配置类中注册进Spring容器中的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean(name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> DispatcherServlet <span class=\"title function_\">dispatcherServlet</span><span class=\"params\">(WebMvcProperties webMvcProperties)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">DispatcherServlet</span> <span class=\"variable\">dispatcherServlet</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DispatcherServlet</span>();</span><br><span class=\"line\">\tdispatcherServlet.setDispatchOptionsRequest(webMvcProperties.isDispatchOptionsRequest());</span><br><span class=\"line\">\tdispatcherServlet.setDispatchTraceRequest(webMvcProperties.isDispatchTraceRequest());</span><br><span class=\"line\">\tdispatcherServlet.setThrowExceptionIfNoHandlerFound(webMvcProperties.isThrowExceptionIfNoHandlerFound());</span><br><span class=\"line\">\tdispatcherServlet.setPublishEvents(webMvcProperties.isPublishRequestHandledEvents());</span><br><span class=\"line\">\tdispatcherServlet.setEnableLoggingRequestDetails(webMvcProperties.isLogRequestDetails());</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dispatcherServlet;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之前介绍介绍的很多组件，比如各种解析器都是在这个类中注册进Spring容器中的</p>\n<p>其中的参数：WebMvcProperties webMvcProperties，对应配置文件中spring.mvc下的配置项</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ConfigurationProperties(prefix = &quot;spring.mvc&quot;)</span><br><span class=\"line\">public class WebMvcProperties &#123;</span><br></pre></td></tr></table></figure>\n\n<p>然后通过dispatcherServletRegistration这个方法将DispatcherServlet注册进Servlet框架中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnBean(value = DispatcherServlet.class, name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> DispatcherServletRegistrationBean <span class=\"title function_\">dispatcherServletRegistration</span><span class=\"params\">(DispatcherServlet dispatcherServlet,</span></span><br><span class=\"line\"><span class=\"params\">\t\tWebMvcProperties webMvcProperties, ObjectProvider&lt;MultipartConfigElement&gt; multipartConfig)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">DispatcherServletRegistrationBean</span> <span class=\"variable\">registration</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DispatcherServletRegistrationBean</span>(dispatcherServlet,</span><br><span class=\"line\">\t\t\twebMvcProperties.getServlet().getPath());</span><br><span class=\"line\">\tregistration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);</span><br><span class=\"line\">\tregistration.setLoadOnStartup(webMvcProperties.getServlet().getLoadOnStartup());</span><br><span class=\"line\">\tmultipartConfig.ifAvailable(registration::setMultipartConfig);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> registration;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>既然是Servlet，就有需要由它来处理的URL</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">DispatcherServletRegistrationBean</span> <span class=\"variable\">registration</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DispatcherServletRegistrationBean</span>(dispatcherServlet,</span><br><span class=\"line\">\t\twebMvcProperties.getServlet().getPath());</span><br></pre></td></tr></table></figure>\n\n<p>通过这个方法向服务器中添加Servlet，而它的请求路径是webMvcProperties.getServlet().getPath())，而这个方法的 值就是我们配置的spring.mvc.servlet.path，这个值默认是<code>/</code>，也就默认情况下，所有请求都由dispatcherServlet来处理（也就是由Springboot的Web框架来处理）</p>\n<p>所以我们用Spring处理请求的时候，实际上用的是一个Servlet：DispatcherServlet，在这个Servlet中处理所有的请求。</p>\n<p>tomcat在一个请求有多个Servlet可以处理时，使用精确优先原则，它会在所有能处理的Servlet中，选择前缀匹配程度最长的Servlet进行处理。</p>\n<p>例如</p>\n<p>如果有两个Servlet，A对应路由<code>/my</code>，B对应路由<code>/my/1</code>，此时如果收到了<code>/my/1/2</code>的请求，则会交给B来处理，而如果收到<code>/my/2</code>的请求，则会由A来处理。</p>\n<p>我们自定义的原生Servlet组件和Spring的DispatcherServlet也是上述这种关系。DispatcherServlet默认处理的URL是<code>/</code>也就是所有的请求，而我们自定义的Servlet对应的URL是<code>/my/</code>，所以我们发送/my请求后，根据精确匹配原则会交付给我们自定义的MyServlet，由Tomcat直接来处理，而如果不是/my/开头的请求，就会和DispatcherServlet匹配，然后走Spring的流程后再交给Tomcat来处理。</p>\n<p><img src=\"/pictures/38456e2bfda4fea76779e78a77c816e1.png\" alt=\"image-20220507224859818\"></p>\n<p>所以我们发送的/my请求没有被Spring拦截的原因就是它是由我们定义的MyServlet处理的，而不是由Spring里的DispatcherServlet来处理，自然不会触发DispatcherServlet中定义的拦截器。</p>\n<h2 id=\"Spring嵌入式Servlet容器\"><a href=\"#Spring嵌入式Servlet容器\" class=\"headerlink\" title=\"Spring嵌入式Servlet容器\"></a>Spring嵌入式Servlet容器</h2><h3 id=\"底层原理\"><a href=\"#底层原理\" class=\"headerlink\" title=\"底层原理\"></a>底层原理</h3><p>Springboot如果发现当前是Web应用，就会自动导入Tomcat服务器所需的依赖，并且会创建一个Web类型的IOC容器ServletWebServerApplicationContext</p>\n<p>ServletWebServerApplicationContext 启动的时候需要用到 ServletWebServerFactory 来创建服务器（Servlet 的web服务器工厂——&gt;Servlet 的web服务器）。而SpringBoot底层默认有很多的WebServer工厂（ServletWebServerFactoryConfiguration内创建Bean），如：TomcatServletWebServerFactory，JettyServletWebServerFactory，UndertowServletWebServerFactory，对应三种不同的服务器（Tomcat，Jetty，Undertow）。这几个服务器工厂是在ServletWebServerFactoryAutoConfiguration这个自动配置类中放入Spring容器的，而这个自动配置需要使用使用ServletWebServerFactoryConfiguration这个配置类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ServletWebServerFactoryConfiguration</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\">    <span class=\"comment\">//需要tomcat依赖才会放入TomcatServletWebServerFactory</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnClass(&#123; Servlet.class, Tomcat.class, UpgradeProtocol.class &#125;)</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnMissingBean(value = ServletWebServerFactory.class, search = SearchStrategy.CURRENT)</span></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EmbeddedTomcat</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t\tTomcatServletWebServerFactory <span class=\"title function_\">tomcatServletWebServerFactory</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\tObjectProvider&lt;TomcatConnectorCustomizer&gt; connectorCustomizers,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\tObjectProvider&lt;TomcatContextCustomizer&gt; contextCustomizers,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\tObjectProvider&lt;TomcatProtocolHandlerCustomizer&lt;?&gt;&gt; protocolHandlerCustomizers)</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">TomcatServletWebServerFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TomcatServletWebServerFactory</span>();</span><br><span class=\"line\">\t\t\tfactory.getTomcatConnectorCustomizers()</span><br><span class=\"line\">\t\t\t\t\t.addAll(connectorCustomizers.orderedStream().collect(Collectors.toList()));</span><br><span class=\"line\">\t\t\tfactory.getTomcatContextCustomizers()</span><br><span class=\"line\">\t\t\t\t\t.addAll(contextCustomizers.orderedStream().collect(Collectors.toList()));</span><br><span class=\"line\">\t\t\tfactory.getTomcatProtocolHandlerCustomizers()</span><br><span class=\"line\">\t\t\t\t\t.addAll(protocolHandlerCustomizers.orderedStream().collect(Collectors.toList()));</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> factory;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Nested configuration if Jetty is being used.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnClass(&#123; Servlet.class, Server.class, Loader.class, WebAppContext.class &#125;)</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnMissingBean(value = ServletWebServerFactory.class, search = SearchStrategy.CURRENT)</span></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EmbeddedJetty</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t\tJettyServletWebServerFactory <span class=\"title function_\">JettyServletWebServerFactory</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\tObjectProvider&lt;JettyServerCustomizer&gt; serverCustomizers)</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">JettyServletWebServerFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JettyServletWebServerFactory</span>();</span><br><span class=\"line\">\t\t\tfactory.getServerCustomizers().addAll(serverCustomizers.orderedStream().collect(Collectors.toList()));</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> factory;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Nested configuration if Undertow is being used.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnClass(&#123; Servlet.class, Undertow.class, SslClientAuthMode.class &#125;)</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnMissingBean(value = ServletWebServerFactory.class, search = SearchStrategy.CURRENT)</span></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EmbeddedUndertow</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t\tUndertowServletWebServerFactory <span class=\"title function_\">undertowServletWebServerFactory</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\tObjectProvider&lt;UndertowDeploymentInfoCustomizer&gt; deploymentInfoCustomizers,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\tObjectProvider&lt;UndertowBuilderCustomizer&gt; builderCustomizers)</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">UndertowServletWebServerFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UndertowServletWebServerFactory</span>();</span><br><span class=\"line\">\t\t\tfactory.getDeploymentInfoCustomizers()</span><br><span class=\"line\">\t\t\t\t\t.addAll(deploymentInfoCustomizers.orderedStream().collect(Collectors.toList()));</span><br><span class=\"line\">\t\t\tfactory.getBuilderCustomizers().addAll(builderCustomizers.orderedStream().collect(Collectors.toList()));</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> factory;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t\tUndertowServletWebServerFactoryCustomizer <span class=\"title function_\">undertowServletWebServerFactoryCustomizer</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\tServerProperties serverProperties)</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UndertowServletWebServerFactoryCustomizer</span>(serverProperties);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到这个配置类用于向Spring容器中添加三种服务器工厂，利用条件装配判断放入哪些服务器工厂，只有在导入了所依赖的jar包后，相关的配置才能生效。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//导入tomcat依赖才会放入TomcatServletWebServerFactory</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(&#123; Servlet.class, Tomcat.class, UpgradeProtocol.class &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">//导入Jetty依赖才会引入JettyServletWebServerFactory</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(&#123; Servlet.class, Server.class, Loader.class, WebAppContext.class &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">//导入Undertow的依赖才会放入UndertowServletWebServerFactory</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(&#123; Servlet.class, Undertow.class, SslClientAuthMode.class &#125;)</span></span><br></pre></td></tr></table></figure>\n\n<p>而我们在pom文件导入的spring-boot-starter-web依赖会默认导入tomcat的依赖，所以默认会放入导入tomcat依赖才会放入TomcatServletWebServerFactory这个服务器工厂，得到Tomcat服务器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p>三种服务器工厂的都是ServletWebServerFactory的子类，在查找服务器工厂时会从Spring容器中拿到所有ServletWebServerFactory类型的bean，如果数量是0个或者多个都会抛出异常，因而Spring容器中只能有一个服务器工厂（默认是Tomcat）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> ServletWebServerFactory <span class=\"title function_\">getWebServerFactory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Use bean names so that we don&#x27;t consider the hierarchy</span></span><br><span class=\"line\">\tString[] beanNames = getBeanFactory().getBeanNamesForType(ServletWebServerFactory.class);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (beanNames.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ApplicationContextException</span>(<span class=\"string\">&quot;Unable to start ServletWebServerApplicationContext due to missing &quot;</span></span><br><span class=\"line\">\t\t\t\t+ <span class=\"string\">&quot;ServletWebServerFactory bean.&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (beanNames.length &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ApplicationContextException</span>(<span class=\"string\">&quot;Unable to start ServletWebServerApplicationContext due to multiple &quot;</span></span><br><span class=\"line\">\t\t\t\t+ <span class=\"string\">&quot;ServletWebServerFactory beans : &quot;</span> + StringUtils.arrayToCommaDelimitedString(beanNames));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> getBeanFactory().getBean(beanNames[<span class=\"number\">0</span>], ServletWebServerFactory.class);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Spring容器启动的时候会调用ServletWebServerApplicationContext类的onRefresh方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onRefresh</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">super</span>.onRefresh();</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tcreateWebServer();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ApplicationContextException</span>(<span class=\"string\">&quot;Unable to start web server&quot;</span>, ex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个方法中调用createWebServer()方法创建服务器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createWebServer</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">WebServer</span> <span class=\"variable\">webServer</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.webServer;</span><br><span class=\"line\">       <span class=\"comment\">//尝试获取IOC容器，默认是空</span></span><br><span class=\"line\">\t<span class=\"type\">ServletContext</span> <span class=\"variable\">servletContext</span> <span class=\"operator\">=</span> getServletContext();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (webServer == <span class=\"literal\">null</span> &amp;&amp; servletContext == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">           <span class=\"comment\">//从Spring容器中获取服务器工厂，如果有0个或者多个会抛出异常，默认是Tomcat</span></span><br><span class=\"line\">\t\t<span class=\"type\">ServletWebServerFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> getWebServerFactory();</span><br><span class=\"line\">           <span class=\"comment\">//使用服务器工厂创建服务器</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.webServer = factory.getWebServer(getSelfInitializer());</span><br><span class=\"line\">\t\tgetBeanFactory().registerSingleton(<span class=\"string\">&quot;webServerGracefulShutdown&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">WebServerGracefulShutdownLifecycle</span>(<span class=\"built_in\">this</span>.webServer));</span><br><span class=\"line\">\t\tgetBeanFactory().registerSingleton(<span class=\"string\">&quot;webServerStartStop&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">WebServerStartStopLifecycle</span>(<span class=\"built_in\">this</span>, <span class=\"built_in\">this</span>.webServer));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (servletContext != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tgetSelfInitializer().onStartup(servletContext);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (ServletException ex) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ApplicationContextException</span>(<span class=\"string\">&quot;Cannot initialize servlet context&quot;</span>, ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tinitPropertySources();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建服务器的方法getWebServer：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> WebServer <span class=\"title function_\">getWebServer</span><span class=\"params\">(ServletContextInitializer... initializers)</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.disableMBeanRegistry) &#123;</span><br><span class=\"line\">      Registry.disableRegistry();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//获取一个tomcat服务器对象</span></span><br><span class=\"line\">   <span class=\"type\">Tomcat</span> <span class=\"variable\">tomcat</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Tomcat</span>();</span><br><span class=\"line\">   <span class=\"comment\">//下面是配置tomcat的一些参数</span></span><br><span class=\"line\">   <span class=\"type\">File</span> <span class=\"variable\">baseDir</span> <span class=\"operator\">=</span> (<span class=\"built_in\">this</span>.baseDirectory != <span class=\"literal\">null</span>) ? <span class=\"built_in\">this</span>.baseDirectory : createTempDir(<span class=\"string\">&quot;tomcat&quot;</span>);</span><br><span class=\"line\">   tomcat.setBaseDir(baseDir.getAbsolutePath());</span><br><span class=\"line\">   <span class=\"type\">Connector</span> <span class=\"variable\">connector</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Connector</span>(<span class=\"built_in\">this</span>.protocol);</span><br><span class=\"line\">   connector.setThrowOnFailure(<span class=\"literal\">true</span>);</span><br><span class=\"line\">   tomcat.getService().addConnector(connector);</span><br><span class=\"line\">   customizeConnector(connector);</span><br><span class=\"line\">   tomcat.setConnector(connector);</span><br><span class=\"line\">   tomcat.getHost().setAutoDeploy(<span class=\"literal\">false</span>);</span><br><span class=\"line\">   configureEngine(tomcat.getEngine());</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (Connector additionalConnector : <span class=\"built_in\">this</span>.additionalTomcatConnectors) &#123;</span><br><span class=\"line\">      tomcat.getService().addConnector(additionalConnector);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   prepareContext(tomcat.getHost(), initializers);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> getTomcatWebServer(tomcat);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以实际上内嵌服务器就是调用封装好的服务器对象，以前启动Tomcat服务器的时候，是以服务器为顶层调用SpringMVC的逻辑，而在调用之前也会设置这些参数。而Springboot内嵌的Tomcat服务器则是以Springboot为顶层，调用Tomcat对象。如下图所示，tomcat对象中有main方法可以直接运行。</p>\n<p><img src=\"/pictures/7586ecf7941b2ea8d5e4867c9eeb1414.png\" alt=\"image-20220508004519983\"></p>\n<p>通过tomcat服务器对象会得到一个WebServer对象来操作Tomcat服务器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">WebServer</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//启动服务器</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">start</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> WebServerException;</span><br><span class=\"line\">\t<span class=\"comment\">//关闭服务器</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">stop</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> WebServerException;</span><br><span class=\"line\">\t<span class=\"comment\">//获得监听的端口</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"title function_\">getPort</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title function_\">shutDownGracefully</span><span class=\"params\">(GracefulShutdownCallback callback)</span> &#123;</span><br><span class=\"line\">\t\tcallback.shutdownComplete(GracefulShutdownResult.IMMEDIATE);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建TomcatWebServer时，会在构造器中调用initialize()方法，这个方法中会调用this.tomcat.start()来启动服务器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">TomcatWebServer</span><span class=\"params\">(Tomcat tomcat, <span class=\"type\">boolean</span> autoStart, Shutdown shutdown)</span> &#123;</span><br><span class=\"line\">\tAssert.notNull(tomcat, <span class=\"string\">&quot;Tomcat Server must not be null&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.tomcat = tomcat;</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.autoStart = autoStart;</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.gracefulShutdown = (shutdown == Shutdown.GRACEFUL) ? <span class=\"keyword\">new</span> <span class=\"title class_\">GracefulShutdown</span>(tomcat) : <span class=\"literal\">null</span>;</span><br><span class=\"line\">\tinitialize();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"切换服务器（一般使用Tomcat即可）\"><a href=\"#切换服务器（一般使用Tomcat即可）\" class=\"headerlink\" title=\"切换服务器（一般使用Tomcat即可）\"></a>切换服务器（一般使用Tomcat即可）</h3><p>如果想要切换服务器的类型，我们只需要将tomcat服务器的依赖排除，然后导入我们需要的服务器的依赖即可，然后根据上面所说的自动装配原理就会自动帮我们向Spring容器中添加对应的服务器工厂。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"comment\">&lt;!-- 排除tomcat依赖 --&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 引入undertow依赖 --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>根据我们之前的分析，Spring容器中只能有一个服务器工厂，所以需要排除tomcat依赖，防止Spring将tomcat的服务器工厂注册进Spring容器中</p>\n<h3 id=\"定制服务器\"><a href=\"#定制服务器\" class=\"headerlink\" title=\"定制服务器\"></a>定制服务器</h3><p>1.修改配置文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(ServletRequest.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(ServerProperties.class)</span></span><br><span class=\"line\"><span class=\"meta\">@Import(&#123; ServletWebServerFactoryAutoConfiguration.BeanPostProcessorsRegistrar.class,</span></span><br><span class=\"line\"><span class=\"meta\">\t\tServletWebServerFactoryConfiguration.EmbeddedTomcat.class,</span></span><br><span class=\"line\"><span class=\"meta\">\t\tServletWebServerFactoryConfiguration.EmbeddedJetty.class,</span></span><br><span class=\"line\"><span class=\"meta\">\t\tServletWebServerFactoryConfiguration.EmbeddedUndertow.class &#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ServletWebServerFactoryAutoConfiguration</span></span><br></pre></td></tr></table></figure>\n\n<p>ServletWebServerFactoryAutoConfiguration这个自动配置类需要使用ServerProperties这个类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ConfigurationProperties(prefix = &quot;server&quot;, ignoreUnknownFields = true)</span><br><span class=\"line\">public class ServerProperties </span><br></pre></td></tr></table></figure>\n\n<p>这个类和以server开头的配置项绑定在一起，所以配置项在server开头的配置项下</p>\n<p>2.直接向Spring容器中添加一个我们定制的服务器工厂</p>\n<p>3.可以实现一个定制化器：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.web.server.WebServerFactoryCustomizer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CustomizationBean</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">WebServerFactoryCustomizer</span>&lt;ConfigurableServletWebServerFactory&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">customize</span><span class=\"params\">(ConfigurableServletWebServerFactory server)</span> &#123;</span><br><span class=\"line\">        server.setPort(<span class=\"number\">9000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定制化原理\"><a href=\"#定制化原理\" class=\"headerlink\" title=\"定制化原理\"></a>定制化原理</h3><p>根据前面的总结，我们可以得到Spring配置的原理</p>\n<p>导入场景的starter包–&gt;相关的AutoConfigration自动配置生效–&gt;自动配置类会引入对应的Properties配置类–&gt;配置类会绑定配置文件的参数</p>\n<p>所以一般情况下，我们想要修改Springbooot的功能只需要导入对应场景的包，然后修改配置文件即可</p>\n<p>总结起来，常用的定制化方式有：</p>\n<p>1.修改配置文件</p>\n<p>2.@Confugration+@Bean注解根据Springboot的执行逻辑添加组件</p>\n<p>3.xxxCustomizer</p>\n<p>4.高级配置：修改Springboot的底层组件，比如RequestMappingHandlerMapping，可以通过以下方式来实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> WebMvcRegistrations <span class=\"title function_\">registrations</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WebMvcRegistrations</span>() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> RequestMappingHandlerMapping <span class=\"title function_\">getRequestMappingHandlerMapping</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> WebMvcRegistrations.<span class=\"built_in\">super</span>.getRequestMappingHandlerMapping();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5.高级配置：全面接管SpringMVC：@EnableWebMvc+WebMvcConfigurer,加上这个注解后，Springboot一些相关的自动配置就会失效，需要我们进行手动配置。</p>\n<p>如果我们不加@EnableWebMvc这个注解，则会在原先配置的基础上添加（修改）成我们需要的配置，如果我们注册了多个WebMvcConfigurer类型的组件，Springboot会让所有的WebMvcConfigurer生效，这个过程发生在DelegatingWebMvcConfiguration类中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired(required = false)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setConfigurers</span><span class=\"params\">(List&lt;WebMvcConfigurer&gt; configurers)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.configurers.addWebMvcConfigurers(configurers);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Tips：@Autowired作用在普通方法上，会在注入的时候调用一次该方法，如果方法中有实体参数，会对方法里面的参数进行装配，并调用一次该方法。这个可以用来在自动注入的时候做一些初始化操作。</p>\n<p>DelegatingWebMvcConfiguration这个类保证了SpringMVC最基本的使用（即使我们进行了全面接管，但是一些底层的一定要有的组件还是会放入Spring容器）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,</span></span><br><span class=\"line\"><span class=\"meta\">\t\tValidationAutoConfiguration.class &#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebMvcAutoConfiguration</span> &#123;</span><br></pre></td></tr></table></figure>\n\n<p>SpringMVC的自动装配原理集中在WebMvcAutoConfiguration这个配置类中，而这个配置类生效的条件之一是@ConditionalOnMissingBean(WebMvcConfigurationSupport.class) 也就是Spring容器中不能有WebMvcConfigurationSupport类型的组件，否则自动配置就不会生效。</p>\n<p>而@EnableWebMvc注解的定义如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.TYPE)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Import(DelegatingWebMvcConfiguration.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableWebMvc &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因而加上这个注解后会自动帮我们导入DelegatingWebMvcConfiguration这个类的一个组件，而这个类是WebMvcConfigurationSupport这个类的子类，所以会导致自动配置类失效（也同时提醒我们不要往Spring容器中添加功能时不要继承WebMvcConfigurationSupport，而应该用WebMvcConfigurer），所以DelegatingWebMvcConfiguration在WebMvcAutoConfiguration生效前，默认是不在Spring容器中的，会在我们全面接管SpringMvc的时候提供一些基础的功能，而在WebMvcAutoConfiguration里面继承了DelegatingWebMvcConfiguration实现了更多的功能，并保留了让所有WebMvcConfigurer生效的方法，所以无论是全面接管SpringMVC还是使用默认配置，容器启动的时候会让所有的WebMvcConfigurer生效</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration(proxyBeanMethods = false)</span><br><span class=\"line\">\tpublic static class EnableWebMvcConfiguration extends DelegatingWebMvcConfiguration implements ResourceLoaderAware &#123;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据操作\"><a href=\"#数据操作\" class=\"headerlink\" title=\"数据操作\"></a>数据操作</h2><h3 id=\"依赖引入\"><a href=\"#依赖引入\" class=\"headerlink\" title=\"依赖引入\"></a>依赖引入</h3><p>使用jdbc操作数据库：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/pictures/9d915490f9a0ab4ef17c92d2c88236bc.png\" alt=\"image-20220508140938283\"></p>\n<p>spring-boot-starter-data-jdbc中为我们整合了数据库连接池，jdbc编程和数据库事务，但是没有数据库连接驱动，这是因为Spring并不知道我们要使用哪种数据库，因而只导入了通用的依赖</p>\n<p>引入连接器依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.0.11<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Spring会帮我们进行版本仲裁，但是默认的版本是最新的数据库的版本，也就是8.0以上的版本。实际上这里的数据库连接器的配置应当与本地数据库的版本相匹配，如果本地数据库是5.x的数据库就不要用8.0.x的连接器，而应该用5.x的连接器</p>\n<p>修改版本方法：</p>\n<p>1.直接引入具体版本（maven的就近依赖原则，优先使用我们设置的版本）</p>\n<p>2.修改properties，也就修改了Spring默认配置的数据库版本（属性就近优先原则，优先使用我们配置的属性）</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mysql.version</span>&gt;</span>8.0.11<span class=\"tag\">&lt;/<span class=\"name\">mysql.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自动配置\"><a href=\"#自动配置\" class=\"headerlink\" title=\"自动配置\"></a>自动配置</h3><h4 id=\"DataSourceAutoConfiguration\"><a href=\"#DataSourceAutoConfiguration\" class=\"headerlink\" title=\"DataSourceAutoConfiguration\"></a>DataSourceAutoConfiguration</h4><p>自动配置数据源和连接池（默认使用HikariDataSource连接池）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(&#123; DataSource.class, EmbeddedDatabaseType.class &#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(type = &quot;io.r2dbc.spi.ConnectionFactory&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(DataSourceProperties.class)</span></span><br><span class=\"line\"><span class=\"meta\">@Import(&#123; DataSourcePoolMetadataProvidersConfiguration.class, DataSourceInitializationConfiguration.class &#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DataSourceAutoConfiguration</span> &#123;</span><br></pre></td></tr></table></figure>\n\n<p><code>@ConditionalOnMissingBean(type = &quot;io.r2dbc.spi.ConnectionFactory&quot;)</code> 如果没有使用响应式编程框架则自动配置这个类</p>\n<p><code>@EnableConfigurationProperties(DataSourceProperties.class)</code>绑定配置类DataSourceProperties</p>\n<p>DataSourceProperties绑定的配置为：spring.datasource下的所有配置</p>\n<p>例如数据库的账号，密码，URL等信息都会绑定到这个配置类中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span><br><span class=\"line\">public class DataSourceProperties implements BeanClassLoaderAware, InitializingBean &#123;</span><br></pre></td></tr></table></figure>\n\n<p>如果我们没有配置数据库连接池，Spring会帮我们配置一个数据库连接池：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\"><span class=\"meta\">@Conditional(PooledDataSourceCondition.class)</span></span><br><span class=\"line\"><span class=\"comment\">//如果没有配置数据库连接池，这个类才会生效</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(&#123; DataSource.class, XADataSource.class &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">//引入数据库连接池相关的依赖</span></span><br><span class=\"line\"><span class=\"meta\">@Import(&#123; DataSourceConfiguration.Hikari.class, DataSourceConfiguration.Tomcat.class,</span></span><br><span class=\"line\"><span class=\"meta\">\t\tDataSourceConfiguration.Dbcp2.class, DataSourceConfiguration.Generic.class,</span></span><br><span class=\"line\"><span class=\"meta\">\t\tDataSourceJmxConfiguration.class &#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PooledDataSourceConfiguration</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而数据库连接池是如何创建的，我们可以来到DataSourceConfiguration配置类：</p>\n<p>在有相关的依赖的时候这个类才会生效，然后才会创建HikariDataSource的数据源（其他的还有Tomcat数据源等，但是默认是HikariDataSource数据源）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(HikariDataSource.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(DataSource.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(name = &quot;spring.datasource.type&quot;, havingValue = &quot;com.zaxxer.hikari.HikariDataSource&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">\t\tmatchIfMissing = true)</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Hikari</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.datasource.hikari&quot;)</span></span><br><span class=\"line\">\tHikariDataSource <span class=\"title function_\">dataSource</span><span class=\"params\">(DataSourceProperties properties)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">HikariDataSource</span> <span class=\"variable\">dataSource</span> <span class=\"operator\">=</span> createDataSource(properties, HikariDataSource.class);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (StringUtils.hasText(properties.getName())) &#123;</span><br><span class=\"line\">\t\t\tdataSource.setPoolName(properties.getName());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> dataSource;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>数据源配置（Mysql8.0以上）：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">document</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/document?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;rewriteBatchedStatements=true&amp;useJDBCCompliantTimezoneShift=true</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"comment\">#    type: com.zaxxer.hikari.HikariDataSource #默认是HikariDataSource数据库连接池</span></span><br></pre></td></tr></table></figure>\n\n<p>数据源配置（Mysql5.x）：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/document</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"DataSourceTransactionManagerAutoConfiguration\"><a href=\"#DataSourceTransactionManagerAutoConfiguration\" class=\"headerlink\" title=\"DataSourceTransactionManagerAutoConfiguration\"></a>DataSourceTransactionManagerAutoConfiguration</h4><p>事务管理器自动配置</p>\n<h4 id=\"JdbcTemplateAutoConfiguration\"><a href=\"#JdbcTemplateAutoConfiguration\" class=\"headerlink\" title=\"JdbcTemplateAutoConfiguration\"></a>JdbcTemplateAutoConfiguration</h4><p>自动配置JdbcTemplate，可以用于增删改查</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(&#123; DataSource.class, JdbcTemplate.class &#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnSingleCandidate(DataSource.class)</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureAfter(DataSourceAutoConfiguration.class)</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(JdbcProperties.class)</span></span><br><span class=\"line\"><span class=\"meta\">@Import(&#123; JdbcTemplateConfiguration.class, NamedParameterJdbcTemplateConfiguration.class &#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JdbcTemplateAutoConfiguration</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中@EnableConfigurationProperties(JdbcProperties.class)代表与JdbcProperties类绑定，而这个类与@ConfigurationProperties(prefix = “spring.jdbc”)绑定，也就是可以通过修改spring.jdbc下面的配置来配置JdbcTemplate的功能</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">jdbc:</span></span><br><span class=\"line\">    <span class=\"attr\">template:</span></span><br><span class=\"line\">      <span class=\"attr\">query-timeout:</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h4><p>JndiDataSourceAutoConfiguration</p>\n<p>JDNI自动配置</p>\n<p>XADataSourceAutoConfiguration</p>\n<p>分布式事务自动配置</p>\n<h3 id=\"整合Druid数据源\"><a href=\"#整合Druid数据源\" class=\"headerlink\" title=\"整合Druid数据源\"></a>整合Druid数据源</h3><p>HikariDataSource是目前市面上性能最好的数据源，而Druid对性能监控，防止sql注入攻击有整套的解决方案</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;<span class=\"number\">1.1</span><span class=\"number\">.17</span>&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p>配置HikariDataSource的代码块：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(HikariDataSource.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(DataSource.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(name = &quot;spring.datasource.type&quot;, havingValue = &quot;com.zaxxer.hikari.HikariDataSource&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">\t\tmatchIfMissing = true)</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Hikari</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.datasource.hikari&quot;)</span></span><br><span class=\"line\">\tHikariDataSource <span class=\"title function_\">dataSource</span><span class=\"params\">(DataSourceProperties properties)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">HikariDataSource</span> <span class=\"variable\">dataSource</span> <span class=\"operator\">=</span> createDataSource(properties, HikariDataSource.class);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (StringUtils.hasText(properties.getName())) &#123;</span><br><span class=\"line\">\t\t\tdataSource.setPoolName(properties.getName());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> dataSource;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>@ConditionalOnMissingBean(DataSource.class)表示如果Spring容器中没有DataSource数据源来回帮我们配置HikariDataSource数据源，如果我们配置了DataSource就用我们自己的数据源。向Spring容器添加我们自己的数据源即可。</p>\n<p>方式一：用户名密码直接在配置类中设置用户名密码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DataSourceConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    DataSource <span class=\"title function_\">druidDataSource</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        DruidDataSource druidDataSource=<span class=\"keyword\">new</span> <span class=\"title class_\">DruidDataSource</span>();</span><br><span class=\"line\">        druidDataSource.setUrl();</span><br><span class=\"line\">        druidDataSource.setUsername();</span><br><span class=\"line\">        druidDataSource.setPassword();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> druidDataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是这样不方便修改，所以我们可以使用配置文件中配置的参数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DataSourceConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties(&quot;spring.datasource&quot;)</span></span><br><span class=\"line\">    DataSource <span class=\"title function_\">druidDataSource</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        DruidDataSource druidDataSource=<span class=\"keyword\">new</span> <span class=\"title class_\">DruidDataSource</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> druidDataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>@ConfigurationProperties(“spring.datasource”) 这个注解我们在研究源码的时候看了很多回了，用于将返回值中对应的名称的参数和配置文件中对应的名称的参数绑定在一起。</p>\n<p>Tips：Spring中的测试环节可以直接在Test目录下进行，这样就不用使用postman发请求了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MydemoApplicationTests</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    JdbcTemplate jdbcTemplate;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">contextLoads</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        List&lt;Usert&gt; userts = jdbcTemplate.query(<span class=\"string\">&quot;select * from usert&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">BeanPropertyRowMapper</span>&lt;&gt;(Usert.class));</span><br><span class=\"line\">        userts.forEach((System.out::println));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Druid数据监控\"><a href=\"#Druid数据监控\" class=\"headerlink\" title=\"Druid数据监控\"></a>Druid数据监控</h3><h4 id=\"监控SQL\"><a href=\"#监控SQL\" class=\"headerlink\" title=\"监控SQL\"></a>监控SQL</h4><p>整合Druid数据源后，我们就可以通过配置Druid监控页来监控数据库的状态</p>\n<p>想要达成监控功能就需要配置一个给Druid使用的Servlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title function_\">servletRegistrationBean</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServletRegistrationBean</span>&lt;&gt;(<span class=\"keyword\">new</span> <span class=\"title class_\">StatViewServlet</span>(),<span class=\"string\">&quot;/druid/*&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样/druid/*的请求就会交给Druid中的StatViewServlet来处理，而不会走Spring的流程，如下图所示，获得成功</p>\n<p><img src=\"/pictures/22fcaaf1be52e5d0800f4db8995570bf.png\" alt=\"image-20220508171446887\"></p>\n<p>但是这样只能显示界面，要统计SQL语句执行的各种信息还需要在配置数据源时加上druidDataSource.setFilters(“stat”);</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SneakyThrows</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(&quot;spring.datasource&quot;)</span></span><br><span class=\"line\">DataSource <span class=\"title function_\">druidDataSource</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    DruidDataSource druidDataSource=<span class=\"keyword\">new</span> <span class=\"title class_\">DruidDataSource</span>();</span><br><span class=\"line\">    druidDataSource.setFilters(<span class=\"string\">&quot;stat&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> druidDataSource;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"监控请求\"><a href=\"#监控请求\" class=\"headerlink\" title=\"监控请求\"></a>监控请求</h4><p>配置这个后监控页的URI请求就有数据来源</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title function_\">webStatFilter</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">WebStatFilter</span> <span class=\"variable\">webStatFilter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WebStatFilter</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    FilterRegistrationBean&lt;WebStatFilter&gt; filterRegistrationBean = <span class=\"keyword\">new</span> <span class=\"title class_\">FilterRegistrationBean</span>&lt;&gt;(webStatFilter);</span><br><span class=\"line\">    filterRegistrationBean.setUrlPatterns(Arrays.asList(<span class=\"string\">&quot;/*&quot;</span>));</span><br><span class=\"line\">    filterRegistrationBean.addInitParameter(<span class=\"string\">&quot;exclusions&quot;</span>,<span class=\"string\">&quot;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> filterRegistrationBean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/pictures/3be6aa060673577be3bf992760f16089.png\" alt=\"image-20220508175213844\"></p>\n<p><img src=\"/pictures/65a129f1a71eac87e2c80c5fce3facc1.png\" alt=\"image-20220508211828211\"></p>\n<h4 id=\"开启防火墙\"><a href=\"#开启防火墙\" class=\"headerlink\" title=\"开启防火墙\"></a>开启防火墙</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SneakyThrows</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(&quot;spring.datasource&quot;)</span></span><br><span class=\"line\">DataSource <span class=\"title function_\">druidDataSource</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    DruidDataSource druidDataSource=<span class=\"keyword\">new</span> <span class=\"title class_\">DruidDataSource</span>();</span><br><span class=\"line\">    druidDataSource.setFilters(<span class=\"string\">&quot;stat,wall&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> druidDataSource;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而我们上面也用到过，在@ConfigurationProperties(“spring.datasource”)注解下的方法中，使用set方法配置的属性，在配置文件中配置同样有效：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">datasource:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">document</span></span><br><span class=\"line\">  <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/document?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;rewriteBatchedStatements=true&amp;useJDBCCompliantTimezoneShift=true</span></span><br><span class=\"line\">  <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br><span class=\"line\">  <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">  <span class=\"attr\">Filters:</span> <span class=\"string\">stat,wall</span></span><br></pre></td></tr></table></figure>\n\n<p>stat代表状态监控</p>\n<p>wall代表防火墙</p>\n<p>不过Filters会变黄，因为这个并不是Spring的配置</p>\n<p>XML配置-&gt;配置类配置：看到bean标签就向Spring容器中通过@Bean注解添加一个bean，下面的其他标签就只是它的属性值</p>\n<p><a href=\"https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatViewServlet%E9%85%8D%E7%BD%AE\">https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatViewServlet%E9%85%8D%E7%BD%AE</a></p>\n<h4 id=\"设置访问的账号和密码\"><a href=\"#设置访问的账号和密码\" class=\"headerlink\" title=\"设置访问的账号和密码\"></a>设置访问的账号和密码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"comment\">//用于设置监控页的访问路径</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title function_\">servletRegistrationBean</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">       ServletRegistrationBean&lt;StatViewServlet&gt; registrationBean = <span class=\"keyword\">new</span> <span class=\"title class_\">ServletRegistrationBean</span>&lt;&gt;(<span class=\"keyword\">new</span> <span class=\"title class_\">StatViewServlet</span>(), <span class=\"string\">&quot;/druid/*&quot;</span>);</span><br><span class=\"line\">       <span class=\"comment\">//监控页账号密码：</span></span><br><span class=\"line\">       registrationBean.addInitParameter(<span class=\"string\">&quot;loginUsername&quot;</span>,<span class=\"string\">&quot;admin&quot;</span>);</span><br><span class=\"line\">       registrationBean.addInitParameter(<span class=\"string\">&quot;loginPassword&quot;</span>,<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> registrationBean;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>完整配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.demo.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.druid.support.http.StatViewServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.druid.support.http.WebStatFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.SneakyThrows;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 李天航</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DataSourceConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@SneakyThrows</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties(&quot;spring.datasource&quot;)</span></span><br><span class=\"line\">    DataSource <span class=\"title function_\">druidDataSource</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        DruidDataSource druidDataSource=<span class=\"keyword\">new</span> <span class=\"title class_\">DruidDataSource</span>();</span><br><span class=\"line\">        druidDataSource.setFilters(<span class=\"string\">&quot;stat,wall&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> druidDataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title function_\">servletRegistrationBean</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        ServletRegistrationBean&lt;StatViewServlet&gt; registrationBean = <span class=\"keyword\">new</span> <span class=\"title class_\">ServletRegistrationBean</span>&lt;&gt;(<span class=\"keyword\">new</span> <span class=\"title class_\">StatViewServlet</span>(), <span class=\"string\">&quot;/druid/*&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//监控页账号密码：</span></span><br><span class=\"line\">        registrationBean.addInitParameter(<span class=\"string\">&quot;loginUsername&quot;</span>,<span class=\"string\">&quot;admin&quot;</span>);</span><br><span class=\"line\">        registrationBean.addInitParameter(<span class=\"string\">&quot;loginPassword&quot;</span>,<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> registrationBean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title function_\">webStatFilter</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">WebStatFilter</span> <span class=\"variable\">webStatFilter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WebStatFilter</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        FilterRegistrationBean&lt;WebStatFilter&gt; filterRegistrationBean = <span class=\"keyword\">new</span> <span class=\"title class_\">FilterRegistrationBean</span>&lt;&gt;(webStatFilter);</span><br><span class=\"line\">        filterRegistrationBean.setUrlPatterns(Arrays.asList(<span class=\"string\">&quot;/*&quot;</span>));</span><br><span class=\"line\">        filterRegistrationBean.addInitParameter(<span class=\"string\">&quot;exclusions&quot;</span>,<span class=\"string\">&quot;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> filterRegistrationBean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Druid-Starter配置连接池\"><a href=\"#Druid-Starter配置连接池\" class=\"headerlink\" title=\"Druid Starter配置连接池\"></a>Druid Starter配置连接池</h3><p>上述的配置过程显得过去麻烦了，如果有一个自动配置类能像其他组件一样自动帮我们把上述组件配置好，然后用一个配置类绑定配置文件，然后我们直接修改配置文件就会方便很多，这个starter就是druid-spring-boot-starter</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.17<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们来看一下starter源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"comment\">//必须导入DruidDataSource的依赖</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(DruidDataSource.class)</span></span><br><span class=\"line\"><span class=\"comment\">//必须在DataSourceAutoConfiguration之前配置</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureBefore(DataSourceAutoConfiguration.class)</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(&#123;DruidStatProperties.class, DataSourceProperties.class&#125;)</span></span><br><span class=\"line\"><span class=\"comment\">//引入下面四种依赖</span></span><br><span class=\"line\"><span class=\"meta\">@Import(&#123;DruidSpringAopConfiguration.class,</span></span><br><span class=\"line\"><span class=\"meta\">    DruidStatViewServletConfiguration.class,</span></span><br><span class=\"line\"><span class=\"meta\">    DruidWebStatFilterConfiguration.class,</span></span><br><span class=\"line\"><span class=\"meta\">    DruidFilterConfiguration.class&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DruidDataSourceAutoConfigure</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Logger</span> <span class=\"variable\">LOGGER</span> <span class=\"operator\">=</span> LoggerFactory.getLogger(DruidDataSourceAutoConfigure.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean(initMethod = &quot;init&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DataSource <span class=\"title function_\">dataSource</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        LOGGER.info(<span class=\"string\">&quot;Init DruidDataSource&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DruidDataSourceWrapper</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以看到注解@AutoConfigureBefore(DataSourceAutoConfiguration.class) ，申明了要在DataSourceAutoConfiguration这个配置类生效之前，让当前这个配置类生效（因为如果DataSourceAutoConfiguration先生效就会像Spring容器放入HikariDataSource），这样我们想要的DruidDataSource就不会被放进去，所以必须要在DataSourceAutoConfiguration之前装配DruidDataSource）</p>\n<p>其中引入了四种依赖：</p>\n<p>DruidSpringAopConfiguration.class    用于监控各种指标</p>\n<p>对应的配置项是spring.datasource.druid.aop-patterns</p>\n<p>DruidStatViewServletConfiguration.class</p>\n<p>这个类用于向Spring中注册一个用于监控的Servlet，用于开启监控页（和我们前面自己的配置的大致一样，只是这里配置的参数更详细一些）</p>\n<p>对应的配置项是spring.datasource.druid.stat-view-servlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(name = &quot;spring.datasource.druid.stat-view-servlet.enabled&quot;, havingValue = &quot;true&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DruidStatViewServletConfiguration</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">DEFAULT_ALLOW_IP</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;127.0.0.1&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title function_\">statViewServletRegistrationBean</span><span class=\"params\">(DruidStatProperties properties)</span> &#123;</span><br><span class=\"line\">        DruidStatProperties.<span class=\"type\">StatViewServlet</span> <span class=\"variable\">config</span> <span class=\"operator\">=</span> properties.getStatViewServlet();</span><br><span class=\"line\">        <span class=\"type\">ServletRegistrationBean</span> <span class=\"variable\">registrationBean</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServletRegistrationBean</span>();</span><br><span class=\"line\">        registrationBean.setServlet(<span class=\"keyword\">new</span> <span class=\"title class_\">StatViewServlet</span>());</span><br><span class=\"line\">        registrationBean.addUrlMappings(config.getUrlPattern() != <span class=\"literal\">null</span> ? config.getUrlPattern() : <span class=\"string\">&quot;/druid/*&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (config.getAllow() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            registrationBean.addInitParameter(<span class=\"string\">&quot;allow&quot;</span>, config.getAllow());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            registrationBean.addInitParameter(<span class=\"string\">&quot;allow&quot;</span>, DEFAULT_ALLOW_IP);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (config.getDeny() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            registrationBean.addInitParameter(<span class=\"string\">&quot;deny&quot;</span>, config.getDeny());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (config.getLoginUsername() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            registrationBean.addInitParameter(<span class=\"string\">&quot;loginUsername&quot;</span>, config.getLoginUsername());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (config.getLoginPassword() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            registrationBean.addInitParameter(<span class=\"string\">&quot;loginPassword&quot;</span>, config.getLoginPassword());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (config.getResetEnable() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            registrationBean.addInitParameter(<span class=\"string\">&quot;resetEnable&quot;</span>, config.getResetEnable());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> registrationBean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>DruidWebStatFilterConfiguration.class</p>\n<p>这个类用于开启过滤器，统计各种请求的数据，这也是监控页的数据来源</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(name = &quot;spring.datasource.druid.web-stat-filter.enabled&quot;, havingValue = &quot;true&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DruidWebStatFilterConfiguration</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title function_\">webStatFilterRegistrationBean</span><span class=\"params\">(DruidStatProperties properties)</span> &#123;</span><br><span class=\"line\">        DruidStatProperties.<span class=\"type\">WebStatFilter</span> <span class=\"variable\">config</span> <span class=\"operator\">=</span> properties.getWebStatFilter();</span><br><span class=\"line\">        <span class=\"type\">FilterRegistrationBean</span> <span class=\"variable\">registrationBean</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FilterRegistrationBean</span>();</span><br><span class=\"line\">        <span class=\"type\">WebStatFilter</span> <span class=\"variable\">filter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WebStatFilter</span>();</span><br><span class=\"line\">        registrationBean.setFilter(filter);</span><br><span class=\"line\">        registrationBean.addUrlPatterns(config.getUrlPattern() != <span class=\"literal\">null</span> ? config.getUrlPattern() : <span class=\"string\">&quot;/*&quot;</span>);</span><br><span class=\"line\">        registrationBean.addInitParameter(<span class=\"string\">&quot;exclusions&quot;</span>, config.getExclusions() != <span class=\"literal\">null</span> ? config.getExclusions() : <span class=\"string\">&quot;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (config.getSessionStatEnable() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            registrationBean.addInitParameter(<span class=\"string\">&quot;sessionStatEnable&quot;</span>, config.getSessionStatEnable());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (config.getSessionStatMaxCount() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            registrationBean.addInitParameter(<span class=\"string\">&quot;sessionStatMaxCount&quot;</span>, config.getSessionStatMaxCount());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (config.getPrincipalSessionName() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            registrationBean.addInitParameter(<span class=\"string\">&quot;principalSessionName&quot;</span>, config.getPrincipalSessionName());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (config.getPrincipalCookieName() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            registrationBean.addInitParameter(<span class=\"string\">&quot;principalCookieName&quot;</span>, config.getPrincipalCookieName());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (config.getProfileEnable() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            registrationBean.addInitParameter(<span class=\"string\">&quot;profileEnable&quot;</span>, config.getProfileEnable());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> registrationBean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>DruidFilterConfiguration.class</p>\n<p>用于设置Druid自己的一些配置项，开启一些功能（比如stat：状态监控，wall防火墙）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">FILTER_STAT_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;spring.datasource.druid.filter.stat&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">FILTER_CONFIG_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;spring.datasource.druid.filter.config&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">FILTER_ENCODING_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;spring.datasource.druid.filter.encoding&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">FILTER_SLF4J_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;spring.datasource.druid.filter.slf4j&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">FILTER_LOG4J_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;spring.datasource.druid.filter.log4j&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">FILTER_LOG4J2_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;spring.datasource.druid.filter.log4j2&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">FILTER_COMMONS_LOG_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;spring.datasource.druid.filter.commons-log&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">FILTER_WALL_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;spring.datasource.druid.filter.wall&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">FILTER_WALL_CONFIG_PREFIX</span> <span class=\"operator\">=</span> FILTER_WALL_PREFIX + <span class=\"string\">&quot;.config&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>然后我们根据上述配置中的规则配置我们想要的功能即可：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/db_account</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">druid:</span></span><br><span class=\"line\">      <span class=\"attr\">aop-patterns:</span> <span class=\"string\">com.atguigu.admin.*</span>  <span class=\"comment\">#监控的范围</span></span><br><span class=\"line\">      <span class=\"attr\">filters:</span> <span class=\"string\">stat,wall,slf4j</span>     <span class=\"comment\"># 底层开启功能，stat（sql监控），wall（防火墙），slf4j打印SQL日志</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"attr\">stat-view-servlet:</span>   <span class=\"comment\"># 配置监控页功能</span></span><br><span class=\"line\">        <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span>\t<span class=\"comment\">#开启监控页，默认是false不开启，所以这里需要配置成true</span></span><br><span class=\"line\">        <span class=\"attr\">login-username:</span> <span class=\"string\">admin</span>\t<span class=\"comment\">#登录用户名</span></span><br><span class=\"line\">        <span class=\"attr\">login-password:</span> <span class=\"string\">admin</span>\t<span class=\"comment\">#登录密码</span></span><br><span class=\"line\">        <span class=\"attr\">resetEnable:</span> <span class=\"literal\">false</span>\t<span class=\"comment\">#是否开启重置按钮</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"attr\">web-stat-filter:</span>  <span class=\"comment\"># 监控web</span></span><br><span class=\"line\">        <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span>\t<span class=\"comment\">#默认不开启，所以需要配置成true</span></span><br><span class=\"line\">        <span class=\"attr\">urlPattern:</span> <span class=\"string\">/*</span>\t<span class=\"comment\">#匹配的URL</span></span><br><span class=\"line\">        <span class=\"attr\">exclusions:</span> <span class=\"string\">&#x27;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&#x27;</span>\t<span class=\"comment\">#不监控的URI</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"attr\">filter:</span></span><br><span class=\"line\">        <span class=\"attr\">stat:</span>    <span class=\"comment\"># 对上面filters里面的stat的详细配置</span></span><br><span class=\"line\">          <span class=\"attr\">slow-sql-millis:</span> <span class=\"number\">1000</span> <span class=\"comment\">#慢查询的阈值</span></span><br><span class=\"line\">          <span class=\"attr\">logSlowSql:</span> <span class=\"literal\">true</span> <span class=\"comment\">#是否统计慢查询</span></span><br><span class=\"line\">          <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span>\t<span class=\"comment\">#是否开启这个功能</span></span><br><span class=\"line\">        <span class=\"attr\">wall:</span></span><br><span class=\"line\">          <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span>\t<span class=\"comment\">#是否开启防火墙</span></span><br><span class=\"line\">          <span class=\"attr\">config:</span></span><br><span class=\"line\">            <span class=\"attr\">drop-table-allow:</span> <span class=\"literal\">false</span>\t<span class=\"comment\">#拦截哪些操作</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"整合MyBatis\"><a href=\"#整合MyBatis\" class=\"headerlink\" title=\"整合MyBatis\"></a>整合MyBatis</h3><h4 id=\"完全配置方式\"><a href=\"#完全配置方式\" class=\"headerlink\" title=\"完全配置方式\"></a>完全配置方式</h4><p>整合框架前我们应当优先寻找这个框架对应的starter，导入这个starter依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>查看源码的时候我们先查看它的META-INF中的spring.factories中指定了哪些自定配置类需要加载，然后查看这些自动配置类，然后再查看它引入的配置类绑定了哪些属性，这样就知道再配置文件中有哪些需要配置的属性</p>\n<p>Mybatis的自动配置类：MybatisAutoConfiguration</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@org</span>.springframework.context.annotation.Configuration</span><br><span class=\"line\"><span class=\"comment\">//必须引入这些jar包</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(&#123; SqlSessionFactory.class, SqlSessionFactoryBean.class &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">//容器中有且仅有一个数据源DataSource</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnSingleCandidate(DataSource.class)</span></span><br><span class=\"line\"><span class=\"comment\">//使用Mybatis配置绑定类</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(MybatisProperties.class)</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureAfter(&#123; DataSourceAutoConfiguration.class, MybatisLanguageDriverAutoConfiguration.class &#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MybatisAutoConfiguration</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InitializingBean</span> &#123;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以看到这个自动配置类需要使用MybatisProperties这个配置类，并且前缀是mybatis</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = MybatisProperties.MYBATIS_PREFIX)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MybatisProperties</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">MYBATIS_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;mybatis&quot;</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在自动配置类中自动帮我们配置好的SqlSessionFactory，也就是SQL会话工厂</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> SqlSessionFactory <span class=\"title function_\">sqlSessionFactory</span><span class=\"params\">(DataSource dataSource)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br></pre></td></tr></table></figure>\n\n<p>装配了sqlSessionTemplate，这个里面含有sqlSession</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> SqlSessionTemplate <span class=\"title function_\">sqlSessionTemplate</span><span class=\"params\">(SqlSessionFactory sqlSessionFactory)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">ExecutorType</span> <span class=\"variable\">executorType</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.properties.getExecutorType();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (executorType != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SqlSessionTemplate</span>(sqlSessionFactory, executorType);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SqlSessionTemplate</span>(sqlSessionFactory);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>@Import(AutoConfiguredMapperScannerRegistrar.class) 引入包的扫描规则</p>\n<p>Mapper：只要我们写的mybatis接口标注了@Mapper注解就会会被自动扫描进来</p>\n<p>Mybatis所需要的配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">1234</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/my</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置mybatis规则</span></span><br><span class=\"line\"><span class=\"attr\">mybatis:</span></span><br><span class=\"line\">  <span class=\"attr\">config-location:</span> <span class=\"string\">classpath:mybatis/mybatis-config.xml</span>  <span class=\"comment\">#全局配置文件位置</span></span><br><span class=\"line\">  <span class=\"attr\">mapper-locations:</span> <span class=\"string\">classpath:mybatis/*.xml</span>  <span class=\"comment\">#Mapper接口的sql映射文件位置</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>对应这个包结构：</p>\n<p><img src=\"/pictures/6529dfcdabd63991f971352fc625b8b5.png\" alt=\"image-20220508232429677\"></p>\n<p><strong>mybatis-config.xml</strong>:</p>\n<p>这里可以配置一些mybatis的额外功能，可以参照官方文档</p>\n<p><a href=\"https://mybatis.org/mybatis-3/zh/configuration.html#settings\">https://mybatis.org/mybatis-3/zh/configuration.html#settings</a></p>\n<p>例如配置命名规则</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">configuration</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"string\">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--    开启将下滑线命名法转换为驼峰命名法--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;mapUnderscoreToCamelCase&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>Mapper接口</strong>：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">mapper</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这里需要指定对应的接口 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.lun.boot.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getUser&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;com.lun.boot.bean.User&quot;</span>&gt;</span></span><br><span class=\"line\">        select * from user where id=#&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>java目录下的Mapper接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.lun.boot.bean.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserMapper</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> User <span class=\"title function_\">getUser</span><span class=\"params\">(Integer id)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>注意这两个文件的文件名的前缀要相同，同时接口函数要加上@Mapper注解来申明这是Mybatis的Mapper层接口。</p>\n<p>如果使用@Repository注解，还需要在配置 类加上@MapperScan注解指定Mapper接口所在路径</p>\n<p>我们关于Mybatis的配置除了可以在xml里面配置外，也可以直接在yml里面配置</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mybatis:</span></span><br><span class=\"line\"><span class=\"comment\">#  config-location: classpath:mybatis/mybatis-config.xml  #全局配置文件位置</span></span><br><span class=\"line\">  <span class=\"attr\">mapper-locations:</span> <span class=\"string\">classpath:mybatis/*.xml</span>  <span class=\"comment\">#Mapper接口的sql映射文件位置</span></span><br><span class=\"line\">  <span class=\"attr\">configuration:</span> <span class=\"comment\">#指定Mybatis的全局配置</span></span><br><span class=\"line\">    <span class=\"attr\">map-underscore-to-camel-case:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>但是注意config-location配置和configuration配置不能同时存在，要么我使用config-location指定xml配置文件的位置，然后在xml文件中配置，要么就直接在configuration下面配置</p>\n<p>使用步骤：</p>\n<ol>\n<li>导入mybatis官方starter</li>\n<li>编写mapper接口</li>\n<li>编写sql映射文件并绑定mapper接口</li>\n<li>在application.yml中指定配置文件的位置，以及指定全局配置文件的信息（建议直接在mybatis.configuration下面的配置）</li>\n</ol>\n<h4 id=\"完全注解方式\"><a href=\"#完全注解方式\" class=\"headerlink\" title=\"完全注解方式\"></a>完全注解方式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserMapper2</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Select(&quot;select * from usert&quot;)</span></span><br><span class=\"line\">    List&lt;User&gt; <span class=\"title function_\">getUsers</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>直接在注解上写上sql语句，即可完成对应的功能，这样就无需编写xml文件</p>\n<h4 id=\"混合使用\"><a href=\"#混合使用\" class=\"headerlink\" title=\"混合使用\"></a>混合使用</h4><p>上面两种方式可以同时使用，也就是一个接口中可以既有使用注解的方式，也可以有在xml文件中配置的方式</p>\n<p>xml中可以编写复杂的sql，而简单的sql直接使用注解即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserMapper</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> User <span class=\"title function_\">getUser</span><span class=\"params\">(Integer id)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Select(&quot;select * from user where id=#&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> User <span class=\"title function_\">getUser2</span><span class=\"params\">(Integer id)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveUser</span><span class=\"params\">(User user)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Insert(&quot;insert into user(`name`) values(#&#123;name&#125;)&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Options(useGeneratedKeys = true, keyProperty = &quot;id&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveUser2</span><span class=\"params\">(User user)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>得到自增的主键：</p>\n<p>xml：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;saveUser&quot;</span> <span class=\"attr\">useGeneratedKeys</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">keyProperty</span>=<span class=\"string\">&quot;id&quot;</span>&gt;</span></span><br><span class=\"line\">    insert into user(`name`) values(#&#123;name&#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>注解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Insert(&quot;insert into user(`name`) values(#&#123;name&#125;)&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Options(useGeneratedKeys = true, keyProperty = &quot;id&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveUser2</span><span class=\"params\">(User user)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>useGeneratedKeys=”true”表示开启主键自增，keyProperty=”id”表示自增的主键是id</p>\n<p>开启这个后会把自增得到的主键放入User中的id字段中（面向对象，传入的User内部被修改后，外面显然还能拿到）</p>\n<h3 id=\"整合Mybatis-Plus\"><a href=\"#整合Mybatis-Plus\" class=\"headerlink\" title=\"整合Mybatis Plus\"></a>整合Mybatis Plus</h3><p>Mybatis可以帮我们生成代码，简化开发</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.baomidou<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.4.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个依赖帮我们引入了jdbc和基础的mybatis和一些扩展包，所以引入这个包后就不用再引入mybatis和jdbc</p>\n<ul>\n<li><p><code>MybatisPlusAutoConfiguration</code>配置类，<code>MybatisPlusProperties</code>配置项绑定，对应着mybatis-plus为前缀的配置项</p>\n</li>\n<li><p><code>SqlSessionFactory</code>自动配置好，底层是容器中默认的数据源。</p>\n</li>\n<li><p><code>mapperLocations</code>自动配置好的，有默认值<code>classpath*:/mapper/**/*.xml</code>，这表示mapper文件夹下任意路径下的所有xml都是sql映射文件。 建议以后sql映射文件放在 mapper下。</p>\n</li>\n<li><p>容器中也自动配置好了<code>SqlSessionTemplate</code>。</p>\n</li>\n<li><p><code>@Mapper</code> 标注的接口也会被自动扫描，也可以用MapperScan批量扫描</p>\n</li>\n</ul>\n<p>使用方法：</p>\n<p>接口直接继承BaseMapper<User>，泛型是我们要操作的数据库的表</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserMapper</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>表名必须和泛型的名称一致，数组库字段要和属性字段一致，并且出现的字段对应数据库中对应名称的字段，如果没有出现可以用加上@TableField(exist = false) 来表示这个字段不存在</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date birthday;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Float money;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@TableField(exist = false)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String uid;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>查询测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MydemoApplicationTests</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    UserMapper userMapper;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">contextLoads</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(userMapper.selectById(<span class=\"number\">57</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述严格的对应关系会让开发变得有些麻烦，mybatis-plus提供了一些好用的注解来解决这些问题</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@TableName(&quot;usert&quot;) //设置对应的表名</span><br></pre></td></tr></table></figure>\n\n<p>Mybatis Plus不仅提供了Mapper层的通用功能接口，也提供了Service层的通用实现接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserService</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">IService</span>&lt;User&gt; &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接口类继承IService<User> User是对应的实体类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserServiceImpl</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ServiceImpl</span>&lt;UserMapper,User&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编写实现类，规范如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserServiceImpl</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ServiceImpl</span>&lt;UserMapper,User&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需要继承ServiceImpl，传入两个泛型：</p>\n<p>UserMapper是我们继承了BaseMapper的接口</p>\n<p>User是对应的实体类</p>\n<p>ServiceImpl为我们实现了很多方法：</p>\n<p>list()    查询所有的数据</p>\n<p>page(Page,Wrapper) 分页查询</p>\n<p>removeById() 根据主键删除</p>\n<p>Page：</p>\n<p>getPages：查询总页数</p>\n<p>getRecordes：获取查询的数据</p>\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MydemoApplicationTests</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    UserService userService;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">contextLoads</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        Page&lt;User&gt; page1 = userService.page(<span class=\"keyword\">new</span> <span class=\"title class_\">Page</span>&lt;&gt;(<span class=\"number\">0</span>,<span class=\"number\">5</span>),<span class=\"literal\">null</span>);</span><br><span class=\"line\">        page1.getRecords().forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是此时，分页功能会失效，Mybatis会查到所有数据，需要加上一个配置插件才能开启分页功能：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyBatisConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * MybatisPlusInterceptor</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> MybatisPlusInterceptor <span class=\"title function_\">paginationInterceptor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MybatisPlusInterceptor</span> <span class=\"variable\">mybatisPlusInterceptor</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MybatisPlusInterceptor</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 设置请求的页面大于最大页后操作， true调回到首页，false 继续请求  默认false</span></span><br><span class=\"line\">        <span class=\"comment\">// paginationInterceptor.setOverflow(false);</span></span><br><span class=\"line\">        <span class=\"comment\">// 设置最大单页限制数量，默认 500 条，-1 不受限制</span></span><br><span class=\"line\">        <span class=\"comment\">// paginationInterceptor.setLimit(500);</span></span><br><span class=\"line\">        <span class=\"comment\">// 开启 count 的 join 优化,只针对部分 left join</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//设置一个分页拦截器</span></span><br><span class=\"line\">        <span class=\"type\">PaginationInnerInterceptor</span> <span class=\"variable\">paginationInnerInterceptor</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PaginationInnerInterceptor</span>();</span><br><span class=\"line\">        paginationInnerInterceptor.setOverflow(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        paginationInnerInterceptor.setMaxLimit(<span class=\"number\">500L</span>);</span><br><span class=\"line\">        <span class=\"comment\">//添加拦截器</span></span><br><span class=\"line\">        mybatisPlusInterceptor.addInnerInterceptor(paginationInnerInterceptor);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> mybatisPlusInterceptor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样分页就能成功使用了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MydemoApplicationTests</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    UserService userService;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">contextLoads</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        Page&lt;User&gt; page1 = userService.page(<span class=\"keyword\">new</span> <span class=\"title class_\">Page</span>&lt;&gt;(<span class=\"number\">2</span>,<span class=\"number\">5</span>),<span class=\"literal\">null</span>);</span><br><span class=\"line\">        page1.getRecords().forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意Spring的分页是从1开始的，0和1都会返回第一页</p>\n<p>分页前端表格示例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;display table table-bordered table-striped&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dynamic-table&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>#<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>age<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>email<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>操作<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;gradeX&quot;</span> <span class=\"attr\">th:each</span>=<span class=\"string\">&quot;user: $&#123;users.records&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>[[$&#123;user.name&#125;]]<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;user.age&#125;&quot;</span>&gt;</span>Win 95+<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;user.email&#125;&quot;</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/user/delete/&#123;id&#125;(id=$&#123;user.id&#125;,pn=$&#123;users.current&#125;)&#125;&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">                   <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-danger btn-sm&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tfoot</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row-fluid&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;span6&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dataTables_info&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dynamic-table_info&quot;</span>&gt;</span></span><br><span class=\"line\">            当前第[[$&#123;users.current&#125;]]页  总计 [[$&#123;users.pages&#125;]]页  共[[$&#123;users.total&#125;]]条记录</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;span6&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dataTables_paginate paging_bootstrap pagination&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;prev disabled&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span>&gt;</span>← 前一页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">th:class</span>=<span class=\"string\">&quot;$&#123;num == users.current?&#x27;active&#x27;:&#x27;&#x27;&#125;&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">th:each</span>=<span class=\"string\">&quot;num:$&#123;#numbers.sequence(1,users.pages)&#125;&quot;</span> &gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/dynamic_table(pn=$&#123;num&#125;)&#125;&quot;</span>&gt;</span>[[$&#123;num&#125;]]<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;next disabled&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span>&gt;</span>下一页 → <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Mybatis-Plus使用手册\"><a href=\"#Mybatis-Plus使用手册\" class=\"headerlink\" title=\"Mybatis-Plus使用手册\"></a>Mybatis-Plus使用手册</h4><p><a href=\"https://blog.csdn.net/weixin_43811057/article/details/123449767\">https://blog.csdn.net/weixin_43811057/article/details/123449767</a></p>\n<p>实际上Mybatis-Plus用于处理基本的增删改成即可，复杂的业务逻辑我们使用xml文件即可，稍简单的逻辑我们可以使用注解来实现</p>\n<h3 id=\"整合Redis\"><a href=\"#整合Redis\" class=\"headerlink\" title=\"整合Redis\"></a>整合Redis</h3><p>引入依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们先来看Redis的自动配置类RedisAutoConfiguration</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(RedisOperations.class)</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(RedisProperties.class)</span></span><br><span class=\"line\"><span class=\"meta\">@Import(&#123; LettuceConnectionConfiguration.class, JedisConnectionConfiguration.class &#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisAutoConfiguration</span> &#123;</span><br></pre></td></tr></table></figure>\n\n<p>这个自动配置类绑定了配置类：RedisProperties</p>\n<p>这个配置类绑定的配置是@ConfigurationProperties(prefix = “spring.redis”)</p>\n<p>内部封装了jedis和letture</p>\n<p>也就是我们需要配置redis就在spring.redis下配置</p>\n<p>并且帮我们准备了两种客户端的连接配置：LettuceConnectionConfiguration，JedisConnectionConfiguration</p>\n<p>和两种操作redis的接口：redisTemplate，stringRedisTemplate</p>\n<p>redisTemplate&lt;Object,Object&gt;</p>\n<p>stringRedisTemplate，kv都是String</p>\n<p>RedisProperties中的默认配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Database index used by the connection factory.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">database</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Connection URL. Overrides host, port, and password. User is ignored. Example:</span></span><br><span class=\"line\"><span class=\"comment\"> * redis://user:password@example.com:6379</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String url;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Redis server host.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">host</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;localhost&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Login password of the redis server.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Redis server port.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">port</span> <span class=\"operator\">=</span> <span class=\"number\">6379</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在yml中配置Redis的相关信息：</p>\n<p>可以设置Redis的相关属性来连接（推荐）：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"attr\">host:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br></pre></td></tr></table></figure>\n\n<p>也可以直接设置url代替上述参数：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">redis://root:123456@127.0.0.1:6379</span></span><br></pre></td></tr></table></figure>\n\n<p>RedisTemplate默认使用letture来操作redis，我们也可以切换客户端至jedis切换客户端</p>\n<p>导入jedis：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>redis.clients<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jedis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>jedis也是可以直接使用的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  redis:</span><br><span class=\"line\">#   url: redis:<span class=\"comment\">//lfy:Lfy123456@r-bp1nc7reqesxisgxpipd.redis.rds.aliyuncs.com:6379</span></span><br><span class=\"line\">    host: r-bp1nc7reqesxisgxpipd.redis.rds.aliyuncs.com</span><br><span class=\"line\">    port: <span class=\"number\">6379</span></span><br><span class=\"line\">    password: lfy:Lfy123456</span><br><span class=\"line\">    client-type: jedis</span><br><span class=\"line\">    jedis:</span><br><span class=\"line\">      pool:</span><br><span class=\"line\">        max-active: <span class=\"number\">10</span></span><br><span class=\"line\">#   lettuce:# 另一个用来连接redis的java框架</span><br><span class=\"line\">#      pool:</span><br><span class=\"line\">#        max-active: <span class=\"number\">10</span></span><br><span class=\"line\">#        min-idle: <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n\n<p>小功能：</p>\n<p>编写一个拦截器类，这个类加上@Component申明为一个组件，这样就可以使用Spring容器中的组件的各种功能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UriInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HandlerInterceptor</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    RedisTemplate redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        redisTemplate.opsForValue().increment(request.getRequestURI());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>添加拦截器：</p>\n<p>拦截器要从Spring容器中拿才能实现我们想要的功能</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Resource</span></span><br><span class=\"line\">UriInterceptor uriInterceptor;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> &#123;</span><br><span class=\"line\">    registry.addInterceptor(<span class=\"keyword\">new</span> <span class=\"title class_\">LoginIntercepter</span>())</span><br><span class=\"line\">            .addPathPatterns(<span class=\"string\">&quot;/**&quot;</span>)</span><br><span class=\"line\">            .excludePathPatterns(<span class=\"string\">&quot;/login&quot;</span>,<span class=\"string\">&quot;/&quot;</span>,<span class=\"string\">&quot;/css/**&quot;</span>,<span class=\"string\">&quot;/js/**&quot;</span>,<span class=\"string\">&quot;/img/**&quot;</span>);</span><br><span class=\"line\">    registry.addInterceptor(uriInterceptor)</span><br><span class=\"line\">            .addPathPatterns(<span class=\"string\">&quot;/**&quot;</span>)</span><br><span class=\"line\">            .excludePathPatterns(<span class=\"string\">&quot;/&quot;</span>,<span class=\"string\">&quot;/css/**&quot;</span>,<span class=\"string\">&quot;/js/**&quot;</span>,<span class=\"string\">&quot;/img/**&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>过滤器和拦截器的区别（Filter和Interceptor的区别）</p>\n<p>1.过滤器Filter是Servlet的原生组件，脱离了Spring也能使用，并且被拦截后不能直接回到原来的方法中</p>\n<p>2.拦截器Interceptor是Spring处理请求的一个流程，可以使用Spring容器中的组件</p>\n<p><img src=\"/pictures/949df1adea40b3db10776a4d65c3bd53.png\" alt=\"image-20220509162643868\"></p>\n<h2 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h2><h3 id=\"依赖引入-1\"><a href=\"#依赖引入-1\" class=\"headerlink\" title=\"依赖引入\"></a>依赖引入</h3><p>Junit4用@SpringbootTest+@RunWith(SpringTest.class)来进行单元测试</p>\n<p><strong>Spring Boot 2.2.0 版本开始引入 JUnit 5 作为单元测试默认库</strong></p>\n<p>SpringBoot 2.4 以上版本移除了默认对 Vintage 的依赖。如果需要兼容JUnit4需要自行引入（不能使用JUnit4的功能 @Test）</p>\n<p>JUnit 5’s Vintage已经从spring-boot-starter-test从移除。如果需要继续兼容Junit4需要自行引入Vintage依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.junit.vintage<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit-vintage-engine<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.hamcrest<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hamcrest-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>但是其实我们也没有必要兼容Junit4，直接使用Junit5的功能即可，以org.junit.jupiter开头的就是Junit5下面的框架</p>\n<p>单元测试其实之前我们也用过：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MydemoApplicationTests</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    RedisTemplate redisTemplate;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    RedisConnectionFactory redisConnectionFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">contextLoads</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        redisTemplate.opsForValue().set(<span class=\"string\">&quot;lth&quot;</span>,<span class=\"string\">&quot;lth&quot;</span>);</span><br><span class=\"line\">        System.out.println(redisTemplate.opsForValue().get(<span class=\"string\">&quot;lth&quot;</span>));</span><br><span class=\"line\">        System.out.println(redisConnectionFactory.getClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在Test目录下，人家以及自动帮我们配置了一个测试类，我们直接在这个里面测试即可，要引入什么框架也可以直接注入</p>\n<h3 id=\"常见注解使用\"><a href=\"#常见注解使用\" class=\"headerlink\" title=\"常见注解使用\"></a>常见注解使用</h3><p>官方文档：</p>\n<p><a href=\"https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations\">https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations</a></p>\n<ul>\n<li>@Test：表示方法是测试方法。</li>\n<li>@ParameterizedTest：表示方法是参数化测试。</li>\n<li>@RepeatedTest：表示方法可重复执行，括号中可以写出重复次数。</li>\n<li>@DisplayName：为测试类或者测试方法设置展示名称，展示的名称会在控制台显示出来。</li>\n<li>@BeforeEach：表示在每个单元测试之前执行。</li>\n<li>@AfterEach：表示在每个单元测试之后执行。</li>\n<li>@BeforeAll：表示在所有单元测试之前执行，使用这个注解的方法必须是静态方法。</li>\n<li>@AfterAll：表示在所有单元测试之后执行，使用这个注解的方法必须是静态方法。</li>\n<li>@Tag：表示单元测试类别，类似于JUnit4中的@Categories。</li>\n<li>@Disabled：表示测试类或测试方法不执行，整体测试时会忽略这个方法。</li>\n<li>@Timeout：表示测试方法运行如果超过了指定时间将会返回错误，括号中可以设置超时时间和时间单位。</li>\n<li>@ExtendWith：为测试类或测试方法提供扩展类引用，例如@ExtendWith(SpringExtension.class)申明是使用Spring提供的测试组件，申明这个后就可以进行依赖注入，可以使用@SpringBootTest代替。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@DisplayName(&quot;junit5功能测试类&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Junit5Test</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@DisplayName(&quot;测试displayname注解&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testDisplayName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(jdbcTemplate);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@ParameterizedTest</span></span><br><span class=\"line\">    <span class=\"meta\">@ValueSource(strings = &#123; &quot;racecar&quot;, &quot;radar&quot;, &quot;able was I ere I saw elba&quot; &#125;)</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">palindromes</span><span class=\"params\">(String candidate)</span> &#123;</span><br><span class=\"line\">        assertTrue(StringUtils.isPalindrome(candidate));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Disabled</span></span><br><span class=\"line\">    <span class=\"meta\">@DisplayName(&quot;测试方法2&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">test2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RepeatedTest(5)</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">test3</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 规定方法超时时间。超出时间测试出异常</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> InterruptedException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Timeout(value = 500, unit = TimeUnit.MILLISECONDS)</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testTimeout</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">600</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@BeforeEach</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testBeforeEach</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;测试就要开始了...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@AfterEach</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testAfterEach</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;测试结束了...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@BeforeAll</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testBeforeAll</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;所有测试就要开始了...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@AfterAll</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testAfterAll</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;所有测试以及结束了...&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"断言\"><a href=\"#断言\" class=\"headerlink\" title=\"断言\"></a>断言</h3><p>如果满足我们给定的条件就无事发生，否则就会抛出异常，后面的代码都不会执行</p>\n<h4 id=\"简单断言\"><a href=\"#简单断言\" class=\"headerlink\" title=\"简单断言\"></a>简单断言</h4><p>方法    说明<br>assertEquals    判断两个对象或两个原始类型是否相等（调用equal方法）<br>assertNotEquals    判断两个对象或两个原始类型是否不相等<br>assertSame    判断两个对象引用是否指向同一个对象（调用==）<br>assertNotSame    判断两个对象引用是否指向不同的对象<br>assertTrue    判断给定的布尔值是否为 true<br>assertFalse    判断给定的布尔值是否为 false<br>assertNull    判断给定的对象引用是否为 null<br>assertNotNull    判断给定的对象引用是否不为 null</p>\n<h4 id=\"数组断言\"><a href=\"#数组断言\" class=\"headerlink\" title=\"数组断言\"></a>数组断言</h4><p>通过 assertArrayEquals 方法来判断两个对象或原始类型的数组是否相等。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"meta\">@DisplayName(&quot;array assertion&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">array</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tassertArrayEquals(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;, <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[] &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"组合断言\"><a href=\"#组合断言\" class=\"headerlink\" title=\"组合断言\"></a>组合断言</h4><p><code>assertAll()</code>方法接受多个 <code>org.junit.jupiter.api.Executable</code> 函数式接口的实例作为要验证的断言，可以通过 lambda 表达式很容易的提供这些断言。所有这些断言都通过了才算这个断言通过，有一个不通过就视为这个断言不通过。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"meta\">@DisplayName(&quot;assert all&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">all</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"> assertAll(<span class=\"string\">&quot;Math&quot;</span>,</span><br><span class=\"line\">    () -&gt; assertEquals(<span class=\"number\">2</span>, <span class=\"number\">1</span> + <span class=\"number\">1</span>),</span><br><span class=\"line\">    () -&gt; assertTrue(<span class=\"number\">1</span> &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\"> );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"异常断言\"><a href=\"#异常断言\" class=\"headerlink\" title=\"异常断言\"></a>异常断言</h4><p>如果不抛出指定异常则断言失败</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"meta\">@DisplayName(&quot;异常测试&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">exceptionTest</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">ArithmeticException</span> <span class=\"variable\">exception</span> <span class=\"operator\">=</span> Assertions.assertThrows(</span><br><span class=\"line\">           <span class=\"comment\">//扔出断言异常</span></span><br><span class=\"line\">            ArithmeticException.class, () -&gt; System.out.println(<span class=\"number\">1</span> % <span class=\"number\">0</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"超时断言\"><a href=\"#超时断言\" class=\"headerlink\" title=\"超时断言\"></a>超时断言</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"meta\">@DisplayName(&quot;超时测试&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">timeoutTest</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果测试方法时间超过1s将会异常</span></span><br><span class=\"line\">    Assertions.assertTimeout(Duration.ofMillis(<span class=\"number\">1000</span>), () -&gt; Thread.sleep(<span class=\"number\">500</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"快速失败\"><a href=\"#快速失败\" class=\"headerlink\" title=\"快速失败\"></a>快速失败</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"meta\">@DisplayName(&quot;fail&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">shouldFail</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tfail(<span class=\"string\">&quot;This should fail&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们使用maven的Test功能对测试类进行测试，测试完成后会生成一个汇总的报告</p>\n<h4 id=\"前置条件\"><a href=\"#前置条件\" class=\"headerlink\" title=\"前置条件\"></a>前置条件</h4><p>使用方法和断言一样，但是如果前置条件实现了，这个方法会显示被忽略而不是错误</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@DisplayName(&quot;前置条件&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AssumptionsTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">environment</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;DEV&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"meta\">@DisplayName(&quot;simple&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">simpleAssume</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        assumeTrue(Objects.equals(<span class=\"built_in\">this</span>.environment, <span class=\"string\">&quot;DEV&quot;</span>));</span><br><span class=\"line\">        assumeFalse(() -&gt; Objects.equals(<span class=\"built_in\">this</span>.environment, <span class=\"string\">&quot;PROD&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"meta\">@DisplayName(&quot;assume then do&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">assumeThenDo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        assumingThat(</span><br><span class=\"line\">            Objects.equals(<span class=\"built_in\">this</span>.environment, <span class=\"string\">&quot;DEV&quot;</span>),</span><br><span class=\"line\">            () -&gt; System.out.println(<span class=\"string\">&quot;In DEV&quot;</span>)</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"嵌套测试\"><a href=\"#嵌套测试\" class=\"headerlink\" title=\"嵌套测试\"></a>嵌套测试</h3><p>使用@Nested注解可以在测试类的内部定义一个新的测试类，外层的测试类的@AfterEach等注解可以驱动内部的测试生效，而内部的这些注解不会驱动外部的测试类生效。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@DisplayName(&quot;A stack&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestingAStackDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Stack&lt;Object&gt; stack;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"meta\">@DisplayName(&quot;is instantiated with new Stack()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">isInstantiatedWithNew</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Nested</span></span><br><span class=\"line\">    <span class=\"meta\">@DisplayName(&quot;when new&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">WhenNew</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@BeforeEach</span></span><br><span class=\"line\">        <span class=\"keyword\">void</span> <span class=\"title function_\">createNewStack</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            stack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Test</span></span><br><span class=\"line\">        <span class=\"meta\">@DisplayName(&quot;is empty&quot;)</span></span><br><span class=\"line\">        <span class=\"keyword\">void</span> <span class=\"title function_\">isEmpty</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            assertTrue(stack.isEmpty());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Test</span></span><br><span class=\"line\">        <span class=\"meta\">@DisplayName(&quot;throws EmptyStackException when popped&quot;)</span></span><br><span class=\"line\">        <span class=\"keyword\">void</span> <span class=\"title function_\">throwsExceptionWhenPopped</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            assertThrows(EmptyStackException.class, stack::pop);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Test</span></span><br><span class=\"line\">        <span class=\"meta\">@DisplayName(&quot;throws EmptyStackException when peeked&quot;)</span></span><br><span class=\"line\">        <span class=\"keyword\">void</span> <span class=\"title function_\">throwsExceptionWhenPeeked</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            assertThrows(EmptyStackException.class, stack::peek);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Nested</span></span><br><span class=\"line\">        <span class=\"meta\">@DisplayName(&quot;after pushing an element&quot;)</span></span><br><span class=\"line\">        <span class=\"keyword\">class</span> <span class=\"title class_\">AfterPushing</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">anElement</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;an element&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@BeforeEach</span></span><br><span class=\"line\">            <span class=\"keyword\">void</span> <span class=\"title function_\">pushAnElement</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                stack.push(anElement);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Test</span></span><br><span class=\"line\">            <span class=\"meta\">@DisplayName(&quot;it is no longer empty&quot;)</span></span><br><span class=\"line\">            <span class=\"keyword\">void</span> <span class=\"title function_\">isNotEmpty</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                assertFalse(stack.isEmpty());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Test</span></span><br><span class=\"line\">            <span class=\"meta\">@DisplayName(&quot;returns the element when popped and is empty&quot;)</span></span><br><span class=\"line\">            <span class=\"keyword\">void</span> <span class=\"title function_\">returnElementWhenPopped</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                assertEquals(anElement, stack.pop());</span><br><span class=\"line\">                assertTrue(stack.isEmpty());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Test</span></span><br><span class=\"line\">            <span class=\"meta\">@DisplayName(&quot;returns the element when peeked but remains not empty&quot;)</span></span><br><span class=\"line\">            <span class=\"keyword\">void</span> <span class=\"title function_\">returnElementWhenPeeked</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                assertEquals(anElement, stack.peek());</span><br><span class=\"line\">                assertFalse(stack.isEmpty());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"指定参数来源\"><a href=\"#指定参数来源\" class=\"headerlink\" title=\"指定参数来源\"></a>指定参数来源</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ValueSource: 为参数化测试指定入参来源，支持八大基础类以及String类型,Class类型</span><br><span class=\"line\">@NullSource: 表示为参数化测试提供一个null的入参</span><br><span class=\"line\">@EnumSource: 表示为参数化测试提供一个枚举入参</span><br><span class=\"line\">@CsvFileSource：表示读取指定CSV文件内容作为参数化测试入参</span><br><span class=\"line\">@MethodSource：表示读取指定方法的返回值作为参数化测试入参(注意方法返回需要是一个流)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ParameterizedTest</span></span><br><span class=\"line\"><span class=\"meta\">@ValueSource(strings = &#123;&quot;one&quot;, &quot;two&quot;, &quot;three&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@DisplayName(&quot;参数化测试1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">parameterizedTest1</span><span class=\"params\">(String string)</span> &#123;</span><br><span class=\"line\">    System.out.println(string);</span><br><span class=\"line\">    Assertions.assertTrue(StringUtils.isNotBlank(string));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@ParameterizedTest</span></span><br><span class=\"line\"><span class=\"meta\">@MethodSource(&quot;method&quot;)</span>    <span class=\"comment\">//指定方法名</span></span><br><span class=\"line\"><span class=\"meta\">@DisplayName(&quot;方法来源参数&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testWithExplicitLocalMethodSource</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">    System.out.println(name);</span><br><span class=\"line\">    Assertions.assertNotNull(name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> Stream&lt;String&gt; <span class=\"title function_\">method</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Stream.of(<span class=\"string\">&quot;apple&quot;</span>, <span class=\"string\">&quot;banana&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"指标监控\"><a href=\"#指标监控\" class=\"headerlink\" title=\"指标监控\"></a>指标监控</h2><p>Springboot-actuator可以帮我们监控各个微服务的运行状态</p>\n<p>引入依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>引入依赖后就可以直接通过<a href=\"http://localhost:8080/actuator%E6%9D%A5%E8%8E%B7%E5%8F%96%E5%8F%AF%E4%BB%A5%E6%8B%BF%E5%88%B0%E7%9A%84%E4%BF%A1%E6%81%AF%E7%9A%84%E5%88%97%E8%A1%A8\">http://localhost:8080/actuator来获取可以拿到的信息的列表</a></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;_links&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;self&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;href&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://localhost:8080/actuator&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;templated&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;health-path&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;href&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://localhost:8080/actuator/health/&#123;*path&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;templated&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;health&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;href&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://localhost:8080/actuator/health&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;templated&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;info&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;href&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://localhost:8080/actuator/info&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;templated&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后再根据其中的网址获取我们想要的信息</p>\n<p>self代表当前访问的网址：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;self&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;href&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://localhost:8080/actuator&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;templated&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>health代表当前服务的运行状态：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;health&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;href&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://localhost:8080/actuator/health&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;templated&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;status&quot;: &quot;UP&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>UP代表正在运行状态，DOWN代表宕机</p>\n<p>info代表当前服务的信息（默认没有信息）</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;info&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;href&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://localhost:8080/actuator/info&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;templated&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>Spring默认给我密文提供了info和health两个监控端点（EndPoint），但其实还有很多我们可以监控的端点，需要我们手动开启</p>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#production-ready\">https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#production-ready</a></p>\n<p>以web的方式暴露所有端点</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\">  <span class=\"attr\">endpoints:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled-by-default:</span> <span class=\"literal\">true</span> <span class=\"comment\">#暴露所有端点信息</span></span><br><span class=\"line\">    <span class=\"attr\">web:</span></span><br><span class=\"line\">      <span class=\"attr\">exposure:</span></span><br><span class=\"line\">        <span class=\"attr\">include:</span> <span class=\"string\">&#x27;*&#x27;</span>  <span class=\"comment\">#以web方式暴露</span></span><br></pre></td></tr></table></figure>\n\n<p>查询信息的格式是：<a href=\"http://localhost:8080/actuator/%7B%E7%AB%AF%E7%82%B9%E5%90%8D%E7%A7%B0%7D/%7B%E5%85%B7%E4%BD%93%E7%9A%84%E8%B7%AF%E5%BE%84%E5%90%8D%E7%A7%B0%7D\">http://localhost:8080/actuator/{端点名称}/{具体的路径名称}</a></p>\n<p>会返回JSON格式的数据</p>\n<p>常用的端点信息：</p>\n<p>auditevents    暴露当前应用程序的审核事件信息。需要一个AuditEventRepository组件。<br>beans    显示应用程序中所有Spring Bean的完整列表。<br>caches    暴露可用的缓存。<br>conditions    显示自动配置的所有条件信息，包括匹配或不匹配的原因。<br>configprops    显示所有@ConfigurationProperties。<br>env    暴露Spring的属性ConfigurableEnvironment<br>flyway    显示已应用的所有Flyway数据库迁移。 需要一个或多个Flyway组件。<br>health    显示应用程序运行状况信息。<br>httptrace    显示HTTP跟踪信息（默认情况下，最近100个HTTP请求-响应）。需要一个HttpTraceRepository组件。<br>info    显示应用程序信息。<br>integrationgraph    显示Spring integrationgraph 。需要依赖spring-integration-core。<br>loggers    显示和修改应用程序中日志的配置。<br>liquibase    显示已应用的所有Liquibase数据库迁移。需要一个或多个Liquibase组件。<br>metrics    显示当前应用程序的“指标”信息。<br>mappings    显示所有@RequestMapping路径列表。<br>scheduledtasks    显示应用程序中的计划任务。<br>sessions    允许从Spring Session支持的会话存储中检索和删除用户会话。需要使用Spring Session的基于Servlet的Web应用程序。<br>shutdown    使应用程序正常关闭。默认禁用。<br>startup    显示由ApplicationStartup收集的启动步骤数据。需要使用SpringApplication进行配置BufferingApplicationStartup。<br>threaddump    执行线程转储。</p>\n<ul>\n<li><strong>Health：监控状况</strong></li>\n<li><strong>Metrics：运行时指标</strong></li>\n<li><strong>Loggers：日志记录</strong></li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\">  <span class=\"attr\">endpoints:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled-by-default:</span> <span class=\"literal\">true</span> <span class=\"comment\">#暴露所有端点信息</span></span><br><span class=\"line\">    <span class=\"attr\">web:</span></span><br><span class=\"line\">      <span class=\"attr\">exposure:</span></span><br><span class=\"line\">        <span class=\"attr\">include:</span> <span class=\"string\">&#x27;*&#x27;</span>  <span class=\"comment\">#以web方式暴露</span></span><br><span class=\"line\">  <span class=\"attr\">endpoint:</span></span><br><span class=\"line\">    <span class=\"attr\">health:</span> <span class=\"comment\">#对某个端点的具体配置</span></span><br><span class=\"line\">      <span class=\"attr\">show-details:</span> <span class=\"string\">always</span> <span class=\"comment\">#显示详细信息</span></span><br></pre></td></tr></table></figure>\n\n<p>我们也可以或者禁用所有的Endpoint然后手动开启指定的Endpoint：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\">  <span class=\"attr\">endpoints:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled-by-default:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">endpoint:</span></span><br><span class=\"line\">    <span class=\"attr\">beans:</span></span><br><span class=\"line\">      <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">health:</span></span><br><span class=\"line\">      <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定制健康信息\"><a href=\"#定制健康信息\" class=\"headerlink\" title=\"定制健康信息\"></a>定制健康信息</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyComHealthIndicator</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractHealthIndicator</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 真实的检查方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> builder</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doHealthCheck</span><span class=\"params\">(Health.Builder builder)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">//mongodb。  获取连接进行测试</span></span><br><span class=\"line\">        Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 检查完成</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"number\">1</span> == <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\"><span class=\"comment\">//            builder.up(); //健康</span></span><br><span class=\"line\">            builder.status(Status.UP);</span><br><span class=\"line\">            map.put(<span class=\"string\">&quot;count&quot;</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">            map.put(<span class=\"string\">&quot;ms&quot;</span>,<span class=\"number\">100</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//            builder.down();</span></span><br><span class=\"line\">            builder.status(Status.OUT_OF_SERVICE);</span><br><span class=\"line\">            map.put(<span class=\"string\">&quot;err&quot;</span>,<span class=\"string\">&quot;连接超时&quot;</span>);</span><br><span class=\"line\">            map.put(<span class=\"string\">&quot;ms&quot;</span>,<span class=\"number\">3000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        builder.withDetail(<span class=\"string\">&quot;code&quot;</span>,<span class=\"number\">100</span>)</span><br><span class=\"line\">                .withDetails(map);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>builder.down() 表示不健康</p>\n<p>builde.up() 表示健康</p>\n<p>也可以用 builder.status(Status.UP);</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">builder.withDetail(<span class=\"string\">&quot;code&quot;</span>,<span class=\"number\">100</span>)</span><br><span class=\"line\">        .withDetails(map);</span><br></pre></td></tr></table></figure>\n\n<p>可以往detail中添加一些信息</p>\n<p>注意，这个组件的名字是根据类的名称来的，必须实现AbstractHealthIndicator，而且必须以HealthIndicator结尾，前面的就是组件的名称</p>\n<p>查询health：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;myCom&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;status&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;OUT_OF_SERVICE&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;details&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;code&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">100</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;err&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;连接超时&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;ms&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">3000</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定值info信息\"><a href=\"#定值info信息\" class=\"headerlink\" title=\"定值info信息\"></a>定值info信息</h3><p>可以在yml里定值，获取pom文件的值，可以使用@@来获取</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">info:</span></span><br><span class=\"line\">  <span class=\"attr\">appName:</span> <span class=\"string\">boot-admin</span></span><br><span class=\"line\">  <span class=\"attr\">version:</span> <span class=\"number\">2.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">  <span class=\"attr\">mavenProjectName:</span> <span class=\"string\">@project.artifactId@</span>  <span class=\"comment\">#使用@@可以获取maven的pom文件值</span></span><br><span class=\"line\">  <span class=\"attr\">mavenProjectVersion:</span> <span class=\"string\">@project.version@</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>可以定义一个Controller：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.actuate.info.Info;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.actuate.info.InfoContributor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExampleInfoContributor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InfoContributor</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">contribute</span><span class=\"params\">(Info.Builder builder)</span> &#123;</span><br><span class=\"line\">        builder.withDetail(<span class=\"string\">&quot;example&quot;</span>,</span><br><span class=\"line\">                Collections.singletonMap(<span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;value&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个controller的名字就没有限制了，只要继承InfoContributor并注入Spring容器中即可</p>\n<h3 id=\"定制Metrics\"><a href=\"#定制Metrics\" class=\"headerlink\" title=\"定制Metrics\"></a>定制Metrics</h3><p>这样在Metrics端点就会有myservice.method.running.counter的相关信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyService</span>&#123;</span><br><span class=\"line\">    Counter counter;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyService</span><span class=\"params\">(MeterRegistry meterRegistry)</span>&#123;</span><br><span class=\"line\">         counter = meterRegistry.counter(<span class=\"string\">&quot;myservice.method.running.counter&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">hello</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        counter.increment();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义Endpoint\"><a href=\"#自定义Endpoint\" class=\"headerlink\" title=\"自定义Endpoint\"></a>自定义Endpoint</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"comment\">//Endpoint叫container</span></span><br><span class=\"line\"><span class=\"meta\">@Endpoint(id = &quot;container&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DockerEndpoint</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//可读。不能有参数，显示的信息从这里获取</span></span><br><span class=\"line\">    <span class=\"meta\">@ReadOperation</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map <span class=\"title function_\">getDockerInfo</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Collections.singletonMap(<span class=\"string\">&quot;info&quot;</span>,<span class=\"string\">&quot;docker started...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t可写</span><br><span class=\"line\">    <span class=\"meta\">@WriteOperation</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">restartDocker</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;docker restarted....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"整合图形界面\"><a href=\"#整合图形界面\" class=\"headerlink\" title=\"整合图形界面\"></a>整合图形界面</h3><p>引入依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>de.codecentric<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在启动类加上@EnableAdminServer表示这是一个监控服务器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAdminServer</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ActuatorApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(ActuatorApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改一下server.port确保端口不冲突，例如修改为8888</p>\n<p>然后访问localhost:8888，即可看到监控页面，但是此时还没有数据，因为监控服务器也不知道要监控什么服务器，所以我们需要配置需要监控的服务器（客户端）</p>\n<p>在客户端加上：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>de.codecentric<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后设置一下配置文件：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">mydemo</span></span><br><span class=\"line\">  <span class=\"attr\">boot:</span></span><br><span class=\"line\">    <span class=\"attr\">admin:</span></span><br><span class=\"line\">      <span class=\"attr\">client:</span></span><br><span class=\"line\">        <span class=\"attr\">url:</span> <span class=\"string\">http://localhost:8888</span></span><br><span class=\"line\">        <span class=\"attr\">instance:</span></span><br><span class=\"line\">          <span class=\"attr\">prefer-ip:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>和spring-cloud配置注册中心的过程很像</p>\n<p>点开配置文件如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Name to register with. Defaults to $&#123;spring.application.name&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Value(&quot;$&#123;spring.application.name:spring-boot-application&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;spring-boot-application&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Should the registered urls be built with server.address or with hostname.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"variable\">preferIp</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Metadata that should be associated with this application</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Map&lt;String, String&gt; metadata = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedHashMap</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>\n\n<p>注意到配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Value(&quot;$&#123;spring.application.name:spring-boot-application&#125;&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;spring-boot-application&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>我们也发现可以使用@Value注解获取配置文件中的值</p>\n<p>@Value(“${spring.application.name:spring-boot-application}”) 表示获取spring.application.name这个配置项的值，如果没有就叫spring-boot-application</p>\n<p>配置完成后可以有很好看的图形界面：</p>\n<p><img src=\"/pictures/1483bd50890ef67bc276ad0b239b61c0.png\" alt=\"image-20220510213637957\"></p>\n<h2 id=\"原理解析\"><a href=\"#原理解析\" class=\"headerlink\" title=\"原理解析\"></a>原理解析</h2><h3 id=\"profile-配置文件切换\"><a href=\"#profile-配置文件切换\" class=\"headerlink\" title=\"profile 配置文件切换\"></a>profile 配置文件切换</h3><p>我们一般情况测试开发环境所用的配置文件和上线部署后用的配置文件一般不同，比如测试环境中我们可以用localhost，但是上线部署的生产环境中就需要切换到部署环境，而我们直接修改配置文件有些麻烦，所以Spring给我们提供了profile配置文件切换功能。</p>\n<p>我们先编写两种配置文件，配置文件的名字必须是application-xxx.yml，xxx是配置文件的名称（测试环境的名称）：</p>\n<p>比如：</p>\n<p>测试环境所用的配置文件：applcation-test.yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">person:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">test</span></span><br></pre></td></tr></table></figure>\n\n<p>生产环境所用的配置文件：application-prod.yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">person:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">prod</span></span><br></pre></td></tr></table></figure>\n\n<p>然后我们在测试用手动controller中获取配置文件的值并输出</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.demo.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 李天航</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;person.name:default&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样根据name的值就知道当前使用的是哪个配置文件</p>\n<p>name标注了@Value(“${person.name:default}”)，从配置文件中获取值，如果配置文件没有相关的配置则值默认是default（上一节也提到过）</p>\n<p>然后设置默认配置文件application.properties：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person.name=okk</span><br><span class=\"line\">spring.profiles.active=test</span><br></pre></td></tr></table></figure>\n\n<p>application.properties是一定会被加载的配置文件，其中spring.profiles.active自动用于设置当前使用哪个配置文件</p>\n<p>spring.profiles.active=test表示使用application-test.yml配置文件，得到结果test</p>\n<p>spring.profiles.active=prod表示使用application-prod.yml配置文件，得到结果prod</p>\n<p>如果application.properties和选择的yml配置文件中有同名的配置，则优先使用选择的yml中的配置，如果yml中没有配置（获取选择的配置文件不存在）则使用application.properties配置文件，如果application.properties中也没有相关的配置则使用设置的默认值（例如这里是default）</p>\n<p>打包后如果想要切换配置文件，可以在后面用–加上启动参数，启动参数的优先级最高，可以设置多个参数，参数名称和配置项的名称一致</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar demo2-0.0.1-SNAPSHOT.jar --spring.profiles.active=prod --server.port=8888</span><br></pre></td></tr></table></figure>\n\n<p>–spring.profiles.active=prod 使用prod配置文件</p>\n<p>–server.port=8888 切换端口至8888</p>\n<p>获取配置文件的信息除了可以用@Value注解，还可以使用@ConfigurationProperties注解，这个注解之前在阅读Spring源码的时候我们见过很多次，每一个自动配置类都需要一个配置类，而配置类就是使用@ConfigurationProperties注解获取到配置文件的信息</p>\n<p>例如配置文件中是这么写的：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">person:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">age:</span> <span class=\"number\">88</span></span><br></pre></td></tr></table></figure>\n\n<p>我们想要获取配置信息：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(&quot;person&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    String age;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用@ConfigurationProperties(“person”)绑定要获取的配置项，然后根据属性名称将值装配进去，需要加上@Component注解</p>\n<p>（这个注解会让idea报错，但是运行没有问题）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    Person person;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> person;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>经过测试成功得到返回值person的值</p>\n<p><img src=\"/pictures/da0266f5b88527d8c11b1e6a04cd825e.png\" alt=\"image-20220510232548151\"></p>\n<p>假如一个环境中包含多个配置文件，我们可以设置配置文件组：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring.profiles.active</span>=<span class=\"string\">production</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring.profiles.group.production[0]</span>=<span class=\"string\">proddb</span></span><br><span class=\"line\"><span class=\"attr\">spring.profiles.group.production[1]</span>=<span class=\"string\">prodmq</span></span><br></pre></td></tr></table></figure>\n\n<p>假如有个生产环境叫production，这个生产环境包含两个配置文件：proddb，prodmq，可以通过下面这两行配置实现</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring.profiles.group.production[0]</span>=<span class=\"string\">proddb</span></span><br><span class=\"line\"><span class=\"attr\">spring.profiles.group.production[1]</span>=<span class=\"string\">prodmq</span></span><br></pre></td></tr></table></figure>\n\n<p>然后选择生产环境的时候选择组即可：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring.profiles.active</span>=<span class=\"string\">production</span></span><br></pre></td></tr></table></figure>\n\n<p>选择的组中的配置文件都会生效</p>\n<h3 id=\"Profile条件装配\"><a href=\"#Profile条件装配\" class=\"headerlink\" title=\"Profile条件装配\"></a>Profile条件装配</h3><p>假如我们有一个类叫Person：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> String age;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>它有两个子类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Boss</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">    String type=<span class=\"string\">&quot;boss&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Worker</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">    String type=<span class=\"string\">&quot;worker&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试类中是</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    Person person;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> person;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们想要在test环境下返回Worker对象，在prod环境下返回Boss对象，此时Spring容器中有两个Person对象，所以Spring不知道装配哪个对象所以会报错。所以这时候可以使用条件装配，在不同的环境下选择让一些类在特性的测试环境下生效。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Profile(&quot;prod&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(&quot;person&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Boss</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">    String type=<span class=\"string\">&quot;boss&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Profile(&quot;test&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(&quot;person&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Worker</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">    String type=<span class=\"string\">&quot;worker&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>@Profile(“prod”)表示这个类只在运行环境为prod时才放入Spring容器中（并不影响编译）</p>\n<p>例如当前运行环境是test，即spring.profiles.active=test，则会返回Worker对象</p>\n<p><img src=\"/pictures/5a0e92a91297e1bc9d8c55826bf790e4.png\" alt=\"image-20220510234810086\"></p>\n<p>@Profile可以标注在带有@Bean注解的方法上来选择性在Spring容器中注册bean</p>\n<p>@Profile如果不设置value字段的值，则value字段的值默认是default，也就是默认环境下会使用的配置，不加@Profile则是在任何环境都会加载的bean。如果不激活任何环境也就是不设置spring.profiles.active的值（或者设置为default），这个值默认是default，默认会加载默认环境下的bean</p>\n<h3 id=\"配置文件加载的优先级\"><a href=\"#配置文件加载的优先级\" class=\"headerlink\" title=\"配置文件加载的优先级\"></a>配置文件加载的优先级</h3><h4 id=\"配置信息的来源\"><a href=\"#配置信息的来源\" class=\"headerlink\" title=\"配置信息的来源\"></a>配置信息的来源</h4><p>properties文件，yml文件，环境变量，命令行参数（除了环境变量外我们都使用过，下面演示环境变量）</p>\n<p>获取环境变量，使用方法就和控制台中一样，${环境变量名}：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;person.name:default&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    Person person;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;JAVA_HOME&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String JAVA_HOME;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(JAVA_HOME);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> person;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Springboot在启动的时候也会获取当前机器的环境变量和各种属性值：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo2Application</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ConfigurableApplicationContext</span> <span class=\"variable\">run</span> <span class=\"operator\">=</span> SpringApplication.run(Demo2Application.class, args);</span><br><span class=\"line\">        <span class=\"type\">ConfigurableEnvironment</span> <span class=\"variable\">environment</span> <span class=\"operator\">=</span> run.getEnvironment();</span><br><span class=\"line\">        <span class=\"comment\">//获取环境变量</span></span><br><span class=\"line\">        System.out.println(environment.getSystemEnvironment());</span><br><span class=\"line\">        <span class=\"comment\">//获取各种JVM参数和操作系统等信息</span></span><br><span class=\"line\">        System.out.println(environment.getPropertySources());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中命令行参数设置配置项的时候有一点要注意：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoApplication</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(DemoApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在启动类中SpringApplication.run(DemoApplication.class, args)一定要把args传进去，我们设置的命令行参数才能生效QWQ</p>\n<h4 id=\"配置文件的优先级\"><a href=\"#配置文件的优先级\" class=\"headerlink\" title=\"配置文件的优先级\"></a>配置文件的优先级</h4><ol>\n<li>Default properties (specified by setting SpringApplication.setDefaultProperties).</li>\n<li>@PropertySource annotations on your @Configuration classes. Please note that such property sources are not added to the Environment until the application context is being refreshed. This is too late to configure certain properties such as logging.* and spring.main.* which are read before refresh begins.</li>\n<li>Config data (such as application.properties files)</li>\n<li>A RandomValuePropertySource that has properties only in random.*.</li>\n<li>OS environment variables.</li>\n<li>Java System properties (System.getProperties()).</li>\n<li>JNDI attributes from java:comp/env.</li>\n<li>ServletContext init parameters.</li>\n<li>ServletConfig init parameters.</li>\n<li>Properties from SPRING_APPLICATION_JSON (inline JSON embedded in an environment variable or system property).</li>\n<li>Command line arguments.</li>\n<li>properties attribute on your tests. Available on @SpringBootTest and the test annotations for testing a particular slice of your application.</li>\n<li>@TestPropertySource annotations on your tests.</li>\n<li>Devtools global settings properties in the $HOME/.config/spring-boot directory when devtools is active.</li>\n</ol>\n<p>后面的会覆盖前面的同名配置项</p>\n<h4 id=\"配置文件的位置\"><a href=\"#配置文件的位置\" class=\"headerlink\" title=\"配置文件的位置\"></a>配置文件的位置</h4><ol>\n<li>classpath 根路径（resource目录是classpath的根路径）。</li>\n<li>classpath 根路径下config目录。</li>\n<li>jar包当前目录。</li>\n<li>jar包当前目录的config目录。</li>\n<li>/config子目录的直接子目录。</li>\n</ol>\n<p>后面的优先级更高</p>\n<p>我们可以使用外部配置文件来修改配置，这样就不用重新打包编译文件也能修改配置</p>\n<h4 id=\"配置文件加载顺序\"><a href=\"#配置文件加载顺序\" class=\"headerlink\" title=\"配置文件加载顺序\"></a>配置文件加载顺序</h4><ol>\n<li>当前jar包内部的application.properties和application.yml。</li>\n<li>当前jar包内部的application-{profile}.properties 和 application-{profile}.yml。</li>\n<li>引用的外部jar包的application.properties和application.yml。</li>\n<li>引用的外部jar包的application-{profile}.properties和application-{profile}.yml。</li>\n</ol>\n<p>后面的优先级更高</p>\n<p>（测试的时候不要使用idea直接运行，使用命令行来启动）</p>\n<h3 id=\"自定义starter和自动配置类\"><a href=\"#自定义starter和自动配置类\" class=\"headerlink\" title=\"自定义starter和自动配置类\"></a>自定义starter和自动配置类</h3><p>如果我们使用Spring-Initializer时，没有选择任何场景，则会自动帮我们导入</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个依赖抱哈Spring的基本功能（Spring容器和自动配置的的依赖）</p>\n<p>我们创建一个名为lth-spring-boot-starter的MAVEN项目，也就是我们自定义的starter，这这个starter中引入我们想要引入的依赖，然后其他项目想引入这些依赖时，直接引入这个starter即可</p>\n<p>这个starter没有业务逻辑，起到统合依赖的作用：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.lth<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lth-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.lth<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lth-spring-boot-starter-autoconfiguration<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个starter引入了lth-spring-boot-starter-autoconfiguration，其他项目引入这个starter时也会自动引入autoconfiguration</p>\n<p>在lth-spring-boot-starter-autoconfiguration模块中编写一些具体的业务逻辑，比如我们想要根据配置文件设置打招呼的前缀和后缀</p>\n<p>pom文件：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.lth<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lth-spring-boot-starter-autoconfiguration<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>lth-spring-boot-starter-autoconfiguration<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>lth-spring-boot-starter-autoconfiguration<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>引入依赖时是根据，这两个属性引入到项目中的</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.lth<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lth-spring-boot-starter-autoconfiguration<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们设置一个配置类来绑定依赖：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lth.bean;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(&quot;lth.hello&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloProperties</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String prefix;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String suffix;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后编写一个业务类实现具体的业务逻辑：从Spring容器中获取helloProperties，然后利用这个配置项在名称前后加上前缀和后缀</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lth.bean;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    HelloProperties helloProperties;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">helloWorld</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> helloProperties.getPrefix()+<span class=\"string\">&quot; name &quot;</span>+helloProperties.getSuffix();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是此时helloProperties并不在Spring容器中，HelloService也不在Spring容器中，我们可以通过编写自动配置类将这两个bean注入到Spring容器中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"comment\">//注入配置类</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(HelloProperties.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloAutoConfiguration</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//注入业务类</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> HelloService <span class=\"title function_\">helloService</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HelloService</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>@EnableConfigurationPropertie注解用于向Spring容器中添加配置类的bean（也就是向容器中添加一个带有@ConfigurationProperties注解的类的对象），等价于通过@Bean注解向Spring容器添加带有@ConfigurationProperties注解的bean，通过@EnableConfigurationPropertie，@Bean，@Component注解注入的bean都会经过Spring容器的自动装配，相关的注解都会生效。</p>\n<p>然后我们使用maven的lifecycle中clean，install将当前项目编译，然后安装到我们的项目中</p>\n<p>先安装自动配置类lth-spring-boot-starter-autoconfiguration，再安装我们的lth-spring-boot-starter，因为starter编译需要用到autoconfiguration的jar包，实际上我们需要将starter所引用的jar都编译好，再编译starter进行总体上的打包</p>\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DemoApplicationTests</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    HelloService helloService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">contextLoads</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(helloService.helloWorld(<span class=\"string\">&quot;LTH&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>properties配置文件：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">lth.hello.prefix</span>=<span class=\"string\">hello</span></span><br><span class=\"line\"><span class=\"attr\">lth.hello.suffix</span>=<span class=\"string\">come on</span></span><br></pre></td></tr></table></figure>\n\n<p>输出hello name come on，代表成功</p>\n<h2 id=\"补充：IOC容器的创建流程\"><a href=\"#补充：IOC容器的创建流程\" class=\"headerlink\" title=\"补充：IOC容器的创建流程\"></a>补充：IOC容器的创建流程</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">refresh</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> BeansException, IllegalStateException &#123;</span><br><span class=\"line\">       <span class=\"comment\">//上锁</span></span><br><span class=\"line\">\t<span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>.startupShutdownMonitor) &#123;</span><br><span class=\"line\">           <span class=\"comment\">//通知监听器开始创建IOC容器</span></span><br><span class=\"line\">\t\t<span class=\"type\">StartupStep</span> <span class=\"variable\">contextRefresh</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.applicationStartup.start(<span class=\"string\">&quot;spring.context.refresh&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//创建容器前的预处理</span></span><br><span class=\"line\">\t\tprepareRefresh();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class=\"line\">\t\t<span class=\"type\">ConfigurableListableBeanFactory</span> <span class=\"variable\">beanFactory</span> <span class=\"operator\">=</span> obtainFreshBeanFactory();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Prepare the bean factory for use in this context.</span></span><br><span class=\"line\">\t\tprepareBeanFactory(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class=\"line\">\t\t\tpostProcessBeanFactory(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"type\">StartupStep</span> <span class=\"variable\">beanPostProcess</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.applicationStartup.start(<span class=\"string\">&quot;spring.context.beans.post-process&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Invoke factory processors registered as beans in the context.</span></span><br><span class=\"line\">\t\t\tinvokeBeanFactoryPostProcessors(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Register bean processors that intercept bean creation.</span></span><br><span class=\"line\">\t\t\tregisterBeanPostProcessors(beanFactory);</span><br><span class=\"line\">\t\t\tbeanPostProcess.end();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Initialize message source for this context.</span></span><br><span class=\"line\">\t\t\tinitMessageSource();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Initialize event multicaster for this context.</span></span><br><span class=\"line\">\t\t\tinitApplicationEventMulticaster();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Initialize other special beans in specific context subclasses.</span></span><br><span class=\"line\">\t\t\tonRefresh();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Check for listener beans and register them.</span></span><br><span class=\"line\">\t\t\tregisterListeners();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class=\"line\">\t\t\tfinishBeanFactoryInitialization(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Last step: publish corresponding event.</span></span><br><span class=\"line\">\t\t\tfinishRefresh();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (BeansException ex) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.warn(<span class=\"string\">&quot;Exception encountered during context initialization - &quot;</span> +</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"string\">&quot;cancelling refresh attempt: &quot;</span> + ex);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class=\"line\">\t\t\tdestroyBeans();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Reset &#x27;active&#x27; flag.</span></span><br><span class=\"line\">\t\t\tcancelRefresh(ex);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Propagate exception to caller.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Reset common introspection caches in Spring&#x27;s core, since we</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// might not ever need metadata for singleton beans anymore...</span></span><br><span class=\"line\">\t\t\tresetCommonCaches();</span><br><span class=\"line\">\t\t\tcontextRefresh.end();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-预处理前的初始化prepareRefresh\"><a href=\"#1-预处理前的初始化prepareRefresh\" class=\"headerlink\" title=\"1. 预处理前的初始化prepareRefresh()\"></a>1. 预处理前的初始化prepareRefresh()</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">prepareRefresh</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//记录时间</span></span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.startupDate = System.currentTimeMillis();</span><br><span class=\"line\">       <span class=\"comment\">//设置状态，表示激活IOC容器</span></span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.closed.set(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.active.set(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.trace(<span class=\"string\">&quot;Refreshing &quot;</span> + <span class=\"built_in\">this</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tlogger.debug(<span class=\"string\">&quot;Refreshing &quot;</span> + getDisplayName());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Initialize any placeholder property sources in the context environment.</span></span><br><span class=\"line\">       <span class=\"comment\">//初始化属性设置(默认为空，我们可以重写这个方法)</span></span><br><span class=\"line\">\tinitPropertySources();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//验证一些必须的属性是否合法</span></span><br><span class=\"line\">\tgetEnvironment().validateRequiredProperties();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//将早期事件监听器注册为监听器，并清空早期事件</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.earlyApplicationListeners == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.earlyApplicationListeners = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedHashSet</span>&lt;&gt;(<span class=\"built_in\">this</span>.applicationListeners);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Reset local application listeners to pre-refresh state.</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.applicationListeners.clear();</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.applicationListeners.addAll(<span class=\"built_in\">this</span>.earlyApplicationListeners);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Allow for the collection of early ApplicationEvents,</span></span><br><span class=\"line\">\t<span class=\"comment\">// to be published once the multicaster is available...</span></span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.earlyApplicationEvents = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedHashSet</span>&lt;&gt;();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-创建bean工厂beanFactories\"><a href=\"#2-创建bean工厂beanFactories\" class=\"headerlink\" title=\"2.创建bean工厂beanFactories\"></a>2.创建bean工厂beanFactories</h3><h3 id=\"ConfigurableListableBeanFactory-beanFactory-obtainFreshBeanFactory\"><a href=\"#ConfigurableListableBeanFactory-beanFactory-obtainFreshBeanFactory\" class=\"headerlink\" title=\"ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory()\"></a>ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory()</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> ConfigurableListableBeanFactory <span class=\"title function_\">obtainFreshBeanFactory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//创建bean工厂</span></span><br><span class=\"line\">\trefreshBeanFactory();</span><br><span class=\"line\">       <span class=\"comment\">//获取刚才创建的bean工厂并返回</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> getBeanFactory();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建的beanFactory的类型是DefaultListableBeanFactory，也就是默认bean工厂</p>\n<h3 id=\"3-准备bean工厂prepareBeanFactory-beanFactory\"><a href=\"#3-准备bean工厂prepareBeanFactory-beanFactory\" class=\"headerlink\" title=\"3.准备bean工厂prepareBeanFactory(beanFactory)\"></a>3.准备bean工厂prepareBeanFactory(beanFactory)</h3><p>在这个方法中，向bean工厂设置一些属性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">prepareBeanFactory</span><span class=\"params\">(ConfigurableListableBeanFactory beanFactory)</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Tell the internal bean factory to use the context&#x27;s class loader etc.</span></span><br><span class=\"line\">       <span class=\"comment\">//设置类加载器</span></span><br><span class=\"line\">\tbeanFactory.setBeanClassLoader(getClassLoader());</span><br><span class=\"line\">       <span class=\"comment\">//设置表达式解析器</span></span><br><span class=\"line\">\tbeanFactory.setBeanExpressionResolver(<span class=\"keyword\">new</span> <span class=\"title class_\">StandardBeanExpressionResolver</span>(beanFactory.getBeanClassLoader()));</span><br><span class=\"line\">\tbeanFactory.addPropertyEditorRegistrar(<span class=\"keyword\">new</span> <span class=\"title class_\">ResourceEditorRegistrar</span>(<span class=\"built_in\">this</span>, getEnvironment()));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Configure the bean factory with context callbacks.</span></span><br><span class=\"line\">\tbeanFactory.addBeanPostProcessor(<span class=\"keyword\">new</span> <span class=\"title class_\">ApplicationContextAwareProcessor</span>(<span class=\"built_in\">this</span>));</span><br><span class=\"line\">\tbeanFactory.ignoreDependencyInterface(EnvironmentAware.class);</span><br><span class=\"line\">\tbeanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class);</span><br><span class=\"line\">\tbeanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);</span><br><span class=\"line\">\tbeanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);</span><br><span class=\"line\">\tbeanFactory.ignoreDependencyInterface(MessageSourceAware.class);</span><br><span class=\"line\">\tbeanFactory.ignoreDependencyInterface(ApplicationContextAware.class);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// BeanFactory interface not registered as resolvable type in a plain factory.</span></span><br><span class=\"line\">\t<span class=\"comment\">// MessageSource registered (and found for autowiring) as a bean.</span></span><br><span class=\"line\">\tbeanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);</span><br><span class=\"line\">\tbeanFactory.registerResolvableDependency(ResourceLoader.class, <span class=\"built_in\">this</span>);</span><br><span class=\"line\">\tbeanFactory.registerResolvableDependency(ApplicationEventPublisher.class, <span class=\"built_in\">this</span>);</span><br><span class=\"line\">\tbeanFactory.registerResolvableDependency(ApplicationContext.class, <span class=\"built_in\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Register early post-processor for detecting inner beans as ApplicationListeners.</span></span><br><span class=\"line\">\tbeanFactory.addBeanPostProcessor(<span class=\"keyword\">new</span> <span class=\"title class_\">ApplicationListenerDetector</span>(<span class=\"built_in\">this</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Detect a LoadTimeWeaver and prepare for weaving, if found.</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;</span><br><span class=\"line\">\t\tbeanFactory.addBeanPostProcessor(<span class=\"keyword\">new</span> <span class=\"title class_\">LoadTimeWeaverAwareProcessor</span>(beanFactory));</span><br><span class=\"line\">\t\t<span class=\"comment\">// Set a temporary ClassLoader for type matching.</span></span><br><span class=\"line\">\t\tbeanFactory.setTempClassLoader(<span class=\"keyword\">new</span> <span class=\"title class_\">ContextTypeMatchClassLoader</span>(beanFactory.getBeanClassLoader()));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Register default environment beans.</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!beanFactory.containsLocalBean(ENVIRONMENT_BEAN_NAME)) &#123;</span><br><span class=\"line\">\t\tbeanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!beanFactory.containsLocalBean(SYSTEM_PROPERTIES_BEAN_NAME)) &#123;</span><br><span class=\"line\">\t\tbeanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!beanFactory.containsLocalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) &#123;</span><br><span class=\"line\">\t\tbeanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-设置加载bean所需的工具类\"><a href=\"#1-设置加载bean所需的工具类\" class=\"headerlink\" title=\"1.设置加载bean所需的工具类\"></a>1.设置加载bean所需的工具类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//类加载器</span></span><br><span class=\"line\">beanFactory.setBeanClassLoader(getClassLoader());</span><br><span class=\"line\"><span class=\"comment\">//表达式解析器</span></span><br><span class=\"line\">\t\tbeanFactory.setBeanExpressionResolver(<span class=\"keyword\">new</span> <span class=\"title class_\">StandardBeanExpressionResolver</span>(beanFactory.getBeanClassLoader()));</span><br><span class=\"line\"><span class=\"comment\">//属性编辑器</span></span><br><span class=\"line\">\t\tbeanFactory.addPropertyEditorRegistrar(<span class=\"keyword\">new</span> <span class=\"title class_\">ResourceEditorRegistrar</span>(<span class=\"built_in\">this</span>, getEnvironment()));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-设置一些回调方法\"><a href=\"#2-设置一些回调方法\" class=\"headerlink\" title=\"2.设置一些回调方法\"></a>2.设置一些回调方法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beanFactory.addBeanPostProcessor(<span class=\"keyword\">new</span> <span class=\"title class_\">ApplicationContextAwareProcessor</span>(<span class=\"built_in\">this</span>));</span><br><span class=\"line\">beanFactory.ignoreDependencyInterface(EnvironmentAware.class);</span><br><span class=\"line\">beanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class);</span><br><span class=\"line\">beanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);</span><br><span class=\"line\">beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);</span><br><span class=\"line\">beanFactory.ignoreDependencyInterface(MessageSourceAware.class);</span><br><span class=\"line\">beanFactory.ignoreDependencyInterface(ApplicationContextAware.class);</span><br></pre></td></tr></table></figure>\n\n<p>放入ApplicationContextAwareProcessor（添加部分beanPostProcessor）</p>\n<p>忽略以这些接口创建的bean：EnvironmentAware，EmbeddedValueResolverAware，ResourceLoaderAware，ApplicationEventPublisherAware，MessageSourceAware，ApplicationContextAware</p>\n<h4 id=\"3-设置可以通过自动装配获取的bean（-Autowire，-Resource）\"><a href=\"#3-设置可以通过自动装配获取的bean（-Autowire，-Resource）\" class=\"headerlink\" title=\"3.设置可以通过自动装配获取的bean（@Autowire，@Resource）\"></a>3.设置可以通过自动装配获取的bean（@Autowire，@Resource）</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);</span><br><span class=\"line\">beanFactory.registerResolvableDependency(ResourceLoader.class, this);</span><br><span class=\"line\">beanFactory.registerResolvableDependency(ApplicationEventPublisher.class, this);</span><br><span class=\"line\">beanFactory.registerResolvableDependency(ApplicationContext.class, this);</span><br></pre></td></tr></table></figure>\n\n<p>可以通过自动装配拿到BeanFactory（bean工厂），ResourceLoader（资源加载器），ApplicationEventPublisher（事件推送器），ApplicationContext（IOC容器）</p>\n<h4 id=\"4-注册ApplicationListenerDetector\"><a href=\"#4-注册ApplicationListenerDetector\" class=\"headerlink\" title=\"4.注册ApplicationListenerDetector\"></a>4.注册ApplicationListenerDetector</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Register early post-processor for detecting inner beans as ApplicationListeners.</span><br><span class=\"line\">beanFactory.addBeanPostProcessor(new ApplicationListenerDetector(this));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-添加AspectJ动态代理的支持\"><a href=\"#5-添加AspectJ动态代理的支持\" class=\"headerlink\" title=\"5.添加AspectJ动态代理的支持\"></a>5.添加AspectJ动态代理的支持</h4><h4 id=\"6-注册和环境（系统属性，环境变量）相关的组件\"><a href=\"#6-注册和环境（系统属性，环境变量）相关的组件\" class=\"headerlink\" title=\"6.注册和环境（系统属性，环境变量）相关的组件\"></a>6.注册和环境（系统属性，环境变量）相关的组件</h4><h3 id=\"4-进行bean工厂创建完成后的后置处理\"><a href=\"#4-进行bean工厂创建完成后的后置处理\" class=\"headerlink\" title=\"4.进行bean工厂创建完成后的后置处理\"></a>4.进行bean工厂创建完成后的后置处理</h3><p>postProcessBeanFactory(beanFactory)</p>\n<p>这个方法默认为空，我们重写这个方法，在beanFactory加载完成后进行一些操作</p>\n<p>====================================通过以上方法完成了beanFactory的创建和预处理工作=========================</p>\n<h3 id=\"5-执行所有的BeanFactoryPostProcessors\"><a href=\"#5-执行所有的BeanFactoryPostProcessors\" class=\"headerlink\" title=\"5.执行所有的BeanFactoryPostProcessors\"></a>5.执行所有的BeanFactoryPostProcessors</h3><p>invokeBeanFactoryPostProcessors</p>\n<p>在beanFactory标准初始化完成后执行这个这个方法</p>\n<p>两个接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">invokeBeanFactoryPostProcessors</span><span class=\"params\">(ConfigurableListableBeanFactory beanFactory)</span> &#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">\tPostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Detect a LoadTimeWeaver and prepare for weaving, if found in the meantime</span></span><br><span class=\"line\">\t<span class=\"comment\">// (e.g. through an @Bean method registered by ConfigurationClassPostProcessor)</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (beanFactory.getTempClassLoader() == <span class=\"literal\">null</span> &amp;&amp; beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;</span><br><span class=\"line\">\t\tbeanFactory.addBeanPostProcessor(<span class=\"keyword\">new</span> <span class=\"title class_\">LoadTimeWeaverAwareProcessor</span>(beanFactory));</span><br><span class=\"line\">\t\tbeanFactory.setTempClassLoader(<span class=\"keyword\">new</span> <span class=\"title class_\">ContextTypeMatchClassLoader</span>(beanFactory.getBeanClassLoader()));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-执行所有BeanFactoryPostProcessors\"><a href=\"#1-执行所有BeanFactoryPostProcessors\" class=\"headerlink\" title=\"1.执行所有BeanFactoryPostProcessors\"></a>1.执行所有BeanFactoryPostProcessors</h4><h5 id=\"1-获取所有的BeanFactoryPostProcessor\"><a href=\"#1-获取所有的BeanFactoryPostProcessor\" class=\"headerlink\" title=\"1.获取所有的BeanFactoryPostProcessor\"></a>1.获取所有的BeanFactoryPostProcessor</h5><h5 id=\"2-优先执行实现了PriorityOrdered接口的BeanDefinitionRegistryPostProcessor\"><a href=\"#2-优先执行实现了PriorityOrdered接口的BeanDefinitionRegistryPostProcessor\" class=\"headerlink\" title=\"2.优先执行实现了PriorityOrdered接口的BeanDefinitionRegistryPostProcessor\"></a>2.优先执行实现了PriorityOrdered接口的BeanDefinitionRegistryPostProcessor</h5><h5 id=\"3-然后执行实现了Order接口的BeanDefinitionRegistryPostProcessor\"><a href=\"#3-然后执行实现了Order接口的BeanDefinitionRegistryPostProcessor\" class=\"headerlink\" title=\"3.然后执行实现了Order接口的BeanDefinitionRegistryPostProcessor\"></a>3.然后执行实现了Order接口的BeanDefinitionRegistryPostProcessor</h5><h5 id=\"4-执行剩下的BeanDefinitionRegistryPostProcessor\"><a href=\"#4-执行剩下的BeanDefinitionRegistryPostProcessor\" class=\"headerlink\" title=\"4.执行剩下的BeanDefinitionRegistryPostProcessor\"></a>4.执行剩下的BeanDefinitionRegistryPostProcessor</h5><h5 id=\"5-获取所有的BeanFactoryPostProcessor\"><a href=\"#5-获取所有的BeanFactoryPostProcessor\" class=\"headerlink\" title=\"5.获取所有的BeanFactoryPostProcessor\"></a>5.获取所有的BeanFactoryPostProcessor</h5><h5 id=\"6-依次执行实现了PriorityOrdered，Order，没实现接口的BeanFactoryPostProcessor\"><a href=\"#6-依次执行实现了PriorityOrdered，Order，没实现接口的BeanFactoryPostProcessor\" class=\"headerlink\" title=\"6.依次执行实现了PriorityOrdered，Order，没实现接口的BeanFactoryPostProcessor\"></a>6.依次执行实现了PriorityOrdered，Order，没实现接口的BeanFactoryPostProcessor</h5><h3 id=\"6-注册bean的后置处理器\"><a href=\"#6-注册bean的后置处理器\" class=\"headerlink\" title=\"6.注册bean的后置处理器\"></a>6.注册bean的后置处理器</h3><p>registerBeanPostProcessors(beanFactory);</p>\n<p>也是依次注册实现了PriorityOrdered接口，实现了Order接口，没有实现任何接口的BeanFactoryPostProcessor</p>\n<p>然后注册MergedBeanDefinitionPostProcessor和ApplicationListenerDetector</p>\n<h3 id=\"7-初始化消息（消息绑定，消息解析）\"><a href=\"#7-初始化消息（消息绑定，消息解析）\" class=\"headerlink\" title=\"7.初始化消息（消息绑定，消息解析）\"></a>7.初始化消息（消息绑定，消息解析）</h3><p>initMessageSource</p>\n<p>如果容器中有MessageSource，则赋值给MessageSource，如果没有则自己创建一个默认的对象</p>\n<p>MessageSource：取出某个key的值，安装区域获取值</p>\n<p>然后将MessageSource注册进Spring容器中，然后我们就能通过自动装配得到MessageSource</p>\n<h3 id=\"8-初始化事件派发器\"><a href=\"#8-初始化事件派发器\" class=\"headerlink\" title=\"8.初始化事件派发器\"></a>8.初始化事件派发器</h3><p>initApplicationEventMulticaster()</p>\n<p>1.获取BeanFactory</p>\n<p>2.从容器中获取applicationEventMulticaster，如果没有就创建一个SimpleApplicationEventMulticaster并注册进Spring容器</p>\n<h3 id=\"9-刷新容器onRefresh\"><a href=\"#9-刷新容器onRefresh\" class=\"headerlink\" title=\"9.刷新容器onRefresh()\"></a>9.刷新容器onRefresh()</h3><p>onRefresh()默认为空，留给我们来实现</p>\n<h3 id=\"10-注册事件派发器\"><a href=\"#10-注册事件派发器\" class=\"headerlink\" title=\"10.注册事件派发器\"></a>10.注册事件派发器</h3><p>获取所有的事件监听器，去重后将所有的监听器注册进事件派发器</p>\n<p>派发之前步骤产生的事件earlyApplicationEvents</p>\n<h3 id=\"11-初始化所有所有单实例bean\"><a href=\"#11-初始化所有所有单实例bean\" class=\"headerlink\" title=\"11.初始化所有所有单实例bean\"></a>11.初始化所有所有单实例bean</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">finishBeanFactoryInitialization</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">finishBeanFactoryInitialization</span><span class=\"params\">(ConfigurableListableBeanFactory beanFactory)</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Initialize conversion service for this context.</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &amp;&amp;</span><br><span class=\"line\">\t\t\tbeanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) &#123;</span><br><span class=\"line\">\t\tbeanFactory.setConversionService(</span><br><span class=\"line\">\t\t\t\tbeanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Register a default embedded value resolver if no BeanFactoryPostProcessor</span></span><br><span class=\"line\">\t<span class=\"comment\">// (such as a PropertySourcesPlaceholderConfigurer bean) registered any before:</span></span><br><span class=\"line\">\t<span class=\"comment\">// at this point, primarily for resolution in annotation attribute values.</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!beanFactory.hasEmbeddedValueResolver()) &#123;</span><br><span class=\"line\">\t\tbeanFactory.addEmbeddedValueResolver(strVal -&gt; getEnvironment().resolvePlaceholders(strVal));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.</span></span><br><span class=\"line\">\tString[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (String weaverAwareName : weaverAwareNames) &#123;</span><br><span class=\"line\">\t\tgetBean(weaverAwareName);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Stop using the temporary ClassLoader for type matching.</span></span><br><span class=\"line\">\tbeanFactory.setTempClassLoader(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Allow for caching all bean definition metadata, not expecting further changes.</span></span><br><span class=\"line\">\tbeanFactory.freezeConfiguration();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class=\"line\">\tbeanFactory.preInstantiateSingletons();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法的核心语句是beanFactory.preInstantiateSingletons()，预加载单实例bean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">preInstantiateSingletons</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> BeansException &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\tlogger.trace(<span class=\"string\">&quot;Pre-instantiating singletons in &quot;</span> + <span class=\"built_in\">this</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//拿到所有bean的定义信息</span></span><br><span class=\"line\">\tList&lt;String&gt; beanNames = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(<span class=\"built_in\">this</span>.beanDefinitionNames);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Trigger initialization of all non-lazy singleton beans...</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (String beanName : beanNames) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">RootBeanDefinition</span> <span class=\"variable\">bd</span> <span class=\"operator\">=</span> getMergedLocalBeanDefinition(beanName);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!bd.isAbstract() &amp;&amp; bd.isSingleton() &amp;&amp; !bd.isLazyInit()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isFactoryBean(beanName)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">Object</span> <span class=\"variable\">bean</span> <span class=\"operator\">=</span> getBean(FACTORY_BEAN_PREFIX + beanName);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> FactoryBean) &#123;</span><br><span class=\"line\">\t\t\t\t\tFactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) bean;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"type\">boolean</span> isEagerInit;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (System.getSecurityManager() != <span class=\"literal\">null</span> &amp;&amp; factory <span class=\"keyword\">instanceof</span> SmartFactoryBean) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tisEagerInit = AccessController.doPrivileged(</span><br><span class=\"line\">\t\t\t\t\t\t\t\t(PrivilegedAction&lt;Boolean&gt;) ((SmartFactoryBean&lt;?&gt;) factory)::isEagerInit,</span><br><span class=\"line\">\t\t\t\t\t\t\t\tgetAccessControlContext());</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\tisEagerInit = (factory <span class=\"keyword\">instanceof</span> SmartFactoryBean &amp;&amp;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t((SmartFactoryBean&lt;?&gt;) factory).isEagerInit());</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (isEagerInit) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tgetBean(beanName);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tgetBean(beanName);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Trigger post-initialization callback for all applicable beans...</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (String beanName : beanNames) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Object</span> <span class=\"variable\">singletonInstance</span> <span class=\"operator\">=</span> getSingleton(beanName);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (singletonInstance <span class=\"keyword\">instanceof</span> SmartInitializingSingleton) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">SmartInitializingSingleton</span> <span class=\"variable\">smartSingleton</span> <span class=\"operator\">=</span> (SmartInitializingSingleton) singletonInstance;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (System.getSecurityManager() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tAccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class=\"line\">\t\t\t\t\tsmartSingleton.afterSingletonsInstantiated();</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t\t\t&#125;, getAccessControlContext());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tsmartSingleton.afterSingletonsInstantiated();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-preInstantiateSingletons\"><a href=\"#1-preInstantiateSingletons\" class=\"headerlink\" title=\"1.preInstantiateSingletons\"></a>1.preInstantiateSingletons</h4><h5 id=\"1-拿到扫描路径下所有带有-Controller，-Service，-Repository，-Configuration，-Component等向Spring容器中注册组件的注解的类的信息\"><a href=\"#1-拿到扫描路径下所有带有-Controller，-Service，-Repository，-Configuration，-Component等向Spring容器中注册组件的注解的类的信息\" class=\"headerlink\" title=\"1.拿到扫描路径下所有带有@Controller，@Service，@Repository，@Configuration，@Component等向Spring容器中注册组件的注解的类的信息\"></a>1.拿到扫描路径下所有带有@Controller，@Service，@Repository，@Configuration，@Component等向Spring容器中注册组件的注解的类的信息</h5><p><img src=\"/pictures/189200b12b1d1c8ec72936c1539a4d80.png\" alt=\"image-20220512223534964\"></p>\n<p>如上图所示，包含Spring容器中默认加载的组件和我们自己编写的</p>\n<h5 id=\"2-遍历所有的bean的全限定名，创建和初始化对应的对象\"><a href=\"#2-遍历所有的bean的全限定名，创建和初始化对应的对象\" class=\"headerlink\" title=\"2.遍历所有的bean的全限定名，创建和初始化对应的对象\"></a>2.遍历所有的bean的全限定名，创建和初始化对应的对象</h5><ul>\n<li>拿到一个类的全限定名beanName</li>\n<li>获取这个类的定义信息RootBeanDefinition</li>\n</ul>\n<p>RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName)</p>\n<p><img src=\"/pictures/f0b2393a61b48e7f903b136fab5d1a19.png\" alt=\"image-20220512232616126\"></p>\n<ul>\n<li>如果这个bean不是抽象的，也不是单实例的，也不是懒加载的<ul>\n<li>然后判断是不是FactoryBean</li>\n<li>如果是FactoryBean，则使用FactoryBean的getObect方法创建bean</li>\n<li>如果不是FactoryBean，则使用getBean方法创建对象，getBean调用下面的doGetBean方法</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> &lt;T&gt; T <span class=\"title function_\">doGetBean</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">      String name, <span class=\"meta\">@Nullable</span> Class&lt;T&gt; requiredType, <span class=\"meta\">@Nullable</span> Object[] args, <span class=\"type\">boolean</span> typeCheckOnly)</span></span><br><span class=\"line\">      <span class=\"keyword\">throws</span> BeansException &#123;</span><br><span class=\"line\">   <span class=\"comment\">//拿到bean的名称</span></span><br><span class=\"line\">   <span class=\"type\">String</span> <span class=\"variable\">beanName</span> <span class=\"operator\">=</span> transformedBeanName(name);</span><br><span class=\"line\">   Object bean;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//从缓存中获取单实例bean，如果能获取到说明已经被创建过了</span></span><br><span class=\"line\">   <span class=\"type\">Object</span> <span class=\"variable\">sharedInstance</span> <span class=\"operator\">=</span> getSingleton(beanName);</span><br><span class=\"line\">    <span class=\"comment\">//如果缓存中拿不到(不是调用了beanFactory创建bean了吗为什么拿不到，这里先伏笔一下)</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (sharedInstance != <span class=\"literal\">null</span> &amp;&amp; args == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class=\"line\">            logger.trace(<span class=\"string\">&quot;Returning eagerly cached instance of singleton bean &#x27;&quot;</span> + beanName +</span><br><span class=\"line\">                  <span class=\"string\">&quot;&#x27; that is not fully initialized yet - a consequence of a circular reference&quot;</span>);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            logger.trace(<span class=\"string\">&quot;Returning cached instance of singleton bean &#x27;&quot;</span> + beanName + <span class=\"string\">&quot;&#x27;&quot;</span>);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      bean = getObjectForBeanInstance(sharedInstance, name, beanName, <span class=\"literal\">null</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Fail if we&#x27;re already creating this bean instance:</span></span><br><span class=\"line\">      <span class=\"comment\">// We&#x27;re assumably within a circular reference.</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isPrototypeCurrentlyInCreation(beanName)) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BeanCurrentlyInCreationException</span>(beanName);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Check if bean definition exists in this factory.</span></span><br><span class=\"line\">      <span class=\"comment\">//拿到父工厂(如果有的话)</span></span><br><span class=\"line\">      <span class=\"type\">BeanFactory</span> <span class=\"variable\">parentBeanFactory</span> <span class=\"operator\">=</span> getParentBeanFactory();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (parentBeanFactory != <span class=\"literal\">null</span> &amp;&amp; !containsBeanDefinition(beanName)) &#123;</span><br><span class=\"line\">         <span class=\"comment\">// Not found -&gt; check parent.</span></span><br><span class=\"line\">         <span class=\"type\">String</span> <span class=\"variable\">nameToLookup</span> <span class=\"operator\">=</span> originalBeanName(name);</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (parentBeanFactory <span class=\"keyword\">instanceof</span> AbstractBeanFactory) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ((AbstractBeanFactory) parentBeanFactory).doGetBean(</span><br><span class=\"line\">                  nameToLookup, requiredType, args, typeCheckOnly);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (args != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Delegation to parent with explicit args.</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> (T) parentBeanFactory.getBean(nameToLookup, args);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (requiredType != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// No args -&gt; delegate to standard getBean method.</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> parentBeanFactory.getBean(nameToLookup, requiredType);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (T) parentBeanFactory.getBean(nameToLookup);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!typeCheckOnly) &#123;</span><br><span class=\"line\">         <span class=\"comment\">//标记当前bean已经被创建了，防止多个线程创建bean</span></span><br><span class=\"line\">         markBeanAsCreated(beanName);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">         <span class=\"comment\">//获取bean的定义信息</span></span><br><span class=\"line\">         <span class=\"type\">RootBeanDefinition</span> <span class=\"variable\">mbd</span> <span class=\"operator\">=</span> getMergedLocalBeanDefinition(beanName);</span><br><span class=\"line\">         checkMergedBeanDefinition(mbd, beanName, args);</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Guarantee initialization of beans that the current bean depends on.</span></span><br><span class=\"line\">          <span class=\"comment\">//获取当前bean依赖的其他bean</span></span><br><span class=\"line\">         String[] dependsOn = mbd.getDependsOn();</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (dependsOn != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果当前有依赖的bean，则遍历所有依赖的bean,创建所有依赖的bean</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String dep : dependsOn) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (isDependent(beanName, dep)) &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BeanCreationException</span>(mbd.getResourceDescription(), beanName,</span><br><span class=\"line\">                        <span class=\"string\">&quot;Circular depends-on relationship between &#x27;&quot;</span> + beanName + <span class=\"string\">&quot;&#x27; and &#x27;&quot;</span> + dep + <span class=\"string\">&quot;&#x27;&quot;</span>);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               registerDependentBean(dep, beanName);</span><br><span class=\"line\">               <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                  <span class=\"comment\">//尝试获取或者创建所依赖的bean(这里发生了递归)</span></span><br><span class=\"line\">                  getBean(dep);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BeanCreationException</span>(mbd.getResourceDescription(), beanName,</span><br><span class=\"line\">                        <span class=\"string\">&quot;&#x27;&quot;</span> + beanName + <span class=\"string\">&quot;&#x27; depends on missing bean &#x27;&quot;</span> + dep + <span class=\"string\">&quot;&#x27;&quot;</span>, ex);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Create bean instance.</span></span><br><span class=\"line\">         <span class=\"comment\">//如果这是一个单实例bean，则采用单实例bean的创建方法</span></span><br><span class=\"line\">         <span class=\"keyword\">if</span> (mbd.isSingleton()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//调用getSingleton方法(上面也调用这个方法)创建或者从一二级缓存中获取bean，这里的lamda表达式省略的是beanFactory的getObject方法</span></span><br><span class=\"line\">            sharedInstance = getSingleton(beanName, () -&gt; &#123;</span><br><span class=\"line\">               <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                   <span class=\"comment\">//调用createBean方法创建bean</span></span><br><span class=\"line\">                  <span class=\"keyword\">return</span> createBean(beanName, mbd, args);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">catch</span> (BeansException ex) &#123;</span><br><span class=\"line\">                  <span class=\"comment\">// Explicitly remove instance from singleton cache: It might have been put there</span></span><br><span class=\"line\">                  <span class=\"comment\">// eagerly by the creation process, to allow for circular reference resolution.</span></span><br><span class=\"line\">                  <span class=\"comment\">// Also remove any beans that received a temporary reference to the bean.</span></span><br><span class=\"line\">                  destroySingleton(beanName);</span><br><span class=\"line\">                  <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mbd.isPrototype()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// It&#x27;s a prototype -&gt; create a new instance.</span></span><br><span class=\"line\">            <span class=\"type\">Object</span> <span class=\"variable\">prototypeInstance</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">               beforePrototypeCreation(beanName);</span><br><span class=\"line\">               prototypeInstance = createBean(beanName, mbd, args);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">               afterPrototypeCreation(beanName);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">scopeName</span> <span class=\"operator\">=</span> mbd.getScope();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!StringUtils.hasLength(scopeName)) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalStateException</span>(<span class=\"string\">&quot;No scope name defined for bean ´&quot;</span> + beanName + <span class=\"string\">&quot;&#x27;&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">Scope</span> <span class=\"variable\">scope</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.scopes.get(scopeName);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (scope == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalStateException</span>(<span class=\"string\">&quot;No Scope registered for scope name &#x27;&quot;</span> + scopeName + <span class=\"string\">&quot;&#x27;&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">               <span class=\"type\">Object</span> <span class=\"variable\">scopedInstance</span> <span class=\"operator\">=</span> scope.get(beanName, () -&gt; &#123;</span><br><span class=\"line\">                  beforePrototypeCreation(beanName);</span><br><span class=\"line\">                  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                     <span class=\"keyword\">return</span> createBean(beanName, mbd, args);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                  <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                     afterPrototypeCreation(beanName);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">               &#125;);</span><br><span class=\"line\">               bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> (IllegalStateException ex) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BeanCreationException</span>(beanName,</span><br><span class=\"line\">                     <span class=\"string\">&quot;Scope &#x27;&quot;</span> + scopeName + <span class=\"string\">&quot;&#x27; is not active for the current thread; consider &quot;</span> +</span><br><span class=\"line\">                     <span class=\"string\">&quot;defining a scoped proxy for this bean if you intend to refer to it from a singleton&quot;</span>,</span><br><span class=\"line\">                     ex);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">catch</span> (BeansException ex) &#123;</span><br><span class=\"line\">         cleanupAfterBeanCreationFailure(beanName);</span><br><span class=\"line\">         <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Check if required type matches the type of the actual bean instance.</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (requiredType != <span class=\"literal\">null</span> &amp;&amp; !requiredType.isInstance(bean)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">         <span class=\"type\">T</span> <span class=\"variable\">convertedBean</span> <span class=\"operator\">=</span> getTypeConverter().convertIfNecessary(bean, requiredType);</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (convertedBean == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BeanNotOfRequiredTypeException</span>(name, requiredType, bean.getClass());</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> convertedBean;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">catch</span> (TypeMismatchException ex) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">            logger.trace(<span class=\"string\">&quot;Failed to convert bean &#x27;&quot;</span> + name + <span class=\"string\">&quot;&#x27; to required type &#x27;&quot;</span> +</span><br><span class=\"line\">                  ClassUtils.getQualifiedName(requiredType) + <span class=\"string\">&quot;&#x27;&quot;</span>, ex);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BeanNotOfRequiredTypeException</span>(name, requiredType, bean.getClass());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> (T) bean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>核心方法doGetBean</strong></p>\n<p>1.从缓存中获取单实例bean，如果能获取到说明已经被创建过了</p>\n<p>Object sharedInstance = getSingleton(beanName)</p>\n<p>（单例设计模式）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> Object <span class=\"title function_\">getSingleton</span><span class=\"params\">(String beanName, <span class=\"type\">boolean</span> allowEarlyReference)</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//尝试从一级缓存中拿到bean</span></span><br><span class=\"line\">\t<span class=\"type\">Object</span> <span class=\"variable\">singletonObject</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.singletonObjects.get(beanName);</span><br><span class=\"line\">       <span class=\"comment\">//如果没有拿到</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (singletonObject == <span class=\"literal\">null</span> &amp;&amp; isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class=\"line\">           <span class=\"comment\">//再尝试从二级缓存中找</span></span><br><span class=\"line\">\t\tsingletonObject = <span class=\"built_in\">this</span>.earlySingletonObjects.get(beanName);</span><br><span class=\"line\">           <span class=\"comment\">//如果二级缓存中也没有找到，并且允许提前创建bean</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (singletonObject == <span class=\"literal\">null</span> &amp;&amp; allowEarlyReference) &#123;</span><br><span class=\"line\">               <span class=\"comment\">//锁住一级缓存(单例模式)</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>.singletonObjects) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//再尝试从一级缓存中找</span></span><br><span class=\"line\">\t\t\t\tsingletonObject = <span class=\"built_in\">this</span>.singletonObjects.get(beanName);</span><br><span class=\"line\">                   <span class=\"comment\">//如果一级缓存中没有找到</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (singletonObject == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                       <span class=\"comment\">//从二级缓存中找</span></span><br><span class=\"line\">\t\t\t\t\tsingletonObject = <span class=\"built_in\">this</span>.earlySingletonObjects.get(beanName);</span><br><span class=\"line\">                       <span class=\"comment\">//如果二级缓存中没有找到</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (singletonObject == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                           <span class=\"comment\">//从三级中找到对应的beanFactory，准备执行创建的bean的流程</span></span><br><span class=\"line\">\t\t\t\t\t\tObjectFactory&lt;?&gt; singletonFactory = <span class=\"built_in\">this</span>.singletonFactories.get(beanName);</span><br><span class=\"line\">                           <span class=\"comment\">//如果找到了beanFactory</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (singletonFactory != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                               <span class=\"comment\">//使用beanFactory创建bean</span></span><br><span class=\"line\">\t\t\t\t\t\t\tsingletonObject = singletonFactory.getObject();</span><br><span class=\"line\">                               <span class=\"comment\">//将这个bean放入二级缓存</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"built_in\">this</span>.earlySingletonObjects.put(beanName, singletonObject);</span><br><span class=\"line\">                               <span class=\"comment\">//从三级缓存中移除beanFactory</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"built_in\">this</span>.singletonFactories.remove(beanName);</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> singletonObject;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>singletonObjects：一级缓存：单例池</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final Map&lt;String, Object&gt; singletonObjects = new ConcurrentHashMap&lt;&gt;(256);</span><br></pre></td></tr></table></figure>\n\n<p>其实就是一个线程安全的map的</p>\n<p>earlySingletonObjects：二级缓存，用于保存半成品的bean</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final Map&lt;String, Object&gt; earlySingletonObjects = new ConcurrentHashMap&lt;&gt;(16);</span><br></pre></td></tr></table></figure>\n\n<p>同样是一个线程安全的map</p>\n<p>singletonFactories：三级缓存，用于保存bean工厂</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final Map&lt;String, ObjectFactory&lt;?&gt;&gt; singletonFactories = new HashMap&lt;&gt;(16);</span><br></pre></td></tr></table></figure>\n\n<p>同样是一个线程安全的map，但是保存的是 ObjectFactory&lt;?&gt;</p>\n<p><strong>核心方法createBean</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> Object <span class=\"title function_\">createBean</span><span class=\"params\">(String beanName, RootBeanDefinition mbd, <span class=\"meta\">@Nullable</span> Object[] args)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throws</span> BeanCreationException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\tlogger.trace(<span class=\"string\">&quot;Creating instance of bean &#x27;&quot;</span> + beanName + <span class=\"string\">&quot;&#x27;&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">RootBeanDefinition</span> <span class=\"variable\">mbdToUse</span> <span class=\"operator\">=</span> mbd;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Make sure bean class is actually resolved at this point, and</span></span><br><span class=\"line\">\t<span class=\"comment\">// clone the bean definition in case of a dynamically resolved Class</span></span><br><span class=\"line\">\t<span class=\"comment\">// which cannot be stored in the shared merged bean definition.</span></span><br><span class=\"line\">\tClass&lt;?&gt; resolvedClass = resolveBeanClass(mbd, beanName);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (resolvedClass != <span class=\"literal\">null</span> &amp;&amp; !mbd.hasBeanClass() &amp;&amp; mbd.getBeanClassName() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\tmbdToUse = <span class=\"keyword\">new</span> <span class=\"title class_\">RootBeanDefinition</span>(mbd);</span><br><span class=\"line\">\t\tmbdToUse.setBeanClass(resolvedClass);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Prepare method overrides.</span></span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tmbdToUse.prepareMethodOverrides();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BeanDefinitionStoreException</span>(mbdToUse.getResourceDescription(),</span><br><span class=\"line\">\t\t\t\tbeanName, <span class=\"string\">&quot;Validation of method overrides failed&quot;</span>, ex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.</span></span><br><span class=\"line\">           <span class=\"comment\">//给这个bean一个返回代理对象的机会</span></span><br><span class=\"line\">\t\t<span class=\"type\">Object</span> <span class=\"variable\">bean</span> <span class=\"operator\">=</span> resolveBeforeInstantiation(beanName, mbdToUse);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (bean != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BeanCreationException</span>(mbdToUse.getResourceDescription(), beanName,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;BeanPostProcessor before instantiation of bean failed&quot;</span>, ex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           <span class=\"comment\">//如果没有返回代理对象，则创建bean</span></span><br><span class=\"line\">\t\t<span class=\"type\">Object</span> <span class=\"variable\">beanInstance</span> <span class=\"operator\">=</span> doCreateBean(beanName, mbdToUse, args);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.trace(<span class=\"string\">&quot;Finished creating instance of bean &#x27;&quot;</span> + beanName + <span class=\"string\">&quot;&#x27;&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> beanInstance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (BeanCreationException | ImplicitlyAppearedSingletonException ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// A previously detected exception with proper bean creation context already,</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// or illegal singleton state to be communicated up to DefaultSingletonBeanRegistry.</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BeanCreationException</span>(</span><br><span class=\"line\">\t\t\t\tmbdToUse.getResourceDescription(), beanName, <span class=\"string\">&quot;Unexpected exception during bean creation&quot;</span>, ex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>创建bean：doCreateBean</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> Object <span class=\"title function_\">doCreateBean</span><span class=\"params\">(String beanName, RootBeanDefinition mbd, <span class=\"meta\">@Nullable</span> Object[] args)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throws</span> BeanCreationException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Instantiate the bean.</span></span><br><span class=\"line\">\t<span class=\"type\">BeanWrapper</span> <span class=\"variable\">instanceWrapper</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (mbd.isSingleton()) &#123;</span><br><span class=\"line\">\t\tinstanceWrapper = <span class=\"built_in\">this</span>.factoryBeanInstanceCache.remove(beanName);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (instanceWrapper == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">           <span class=\"comment\">//创建bean实例</span></span><br><span class=\"line\">\t\tinstanceWrapper = createBeanInstance(beanName, mbd, args);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">Object</span> <span class=\"variable\">bean</span> <span class=\"operator\">=</span> instanceWrapper.getWrappedInstance();</span><br><span class=\"line\">\tClass&lt;?&gt; beanType = instanceWrapper.getWrappedClass();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (beanType != NullBean.class) &#123;</span><br><span class=\"line\">\t\tmbd.resolvedTargetType = beanType;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Allow post-processors to modify the merged bean definition.</span></span><br><span class=\"line\">       <span class=\"comment\">//加上锁，防止多次后置处理，确保只处理一次</span></span><br><span class=\"line\">\t<span class=\"keyword\">synchronized</span> (mbd.postProcessingLock) &#123;</span><br><span class=\"line\">           <span class=\"comment\">//如果没有被后置处理</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!mbd.postProcessed) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                   <span class=\"comment\">//执行一些后置处理器</span></span><br><span class=\"line\">\t\t\t\tapplyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BeanCreationException</span>(mbd.getResourceDescription(), beanName,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"string\">&quot;Post-processing of merged bean definition failed&quot;</span>, ex);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">               <span class=\"comment\">//标志位已经被后置处理</span></span><br><span class=\"line\">\t\t\tmbd.postProcessed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Eagerly cache singletons to be able to resolve circular references</span></span><br><span class=\"line\">\t<span class=\"comment\">// even when triggered by lifecycle interfaces like BeanFactoryAware.</span></span><br><span class=\"line\">       <span class=\"comment\">//第二级缓存能处理循环依赖，及时有了生命周期的处理方法</span></span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"variable\">earlySingletonExposure</span> <span class=\"operator\">=</span> (mbd.isSingleton() &amp;&amp; <span class=\"built_in\">this</span>.allowCircularReferences &amp;&amp;</span><br><span class=\"line\">\t\t\tisSingletonCurrentlyInCreation(beanName));</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (earlySingletonExposure) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.trace(<span class=\"string\">&quot;Eagerly caching bean &#x27;&quot;</span> + beanName +</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">&quot;&#x27; to allow for resolving potential circular references&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\taddSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, mbd, bean));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Initialize the bean instance.</span></span><br><span class=\"line\">\t<span class=\"type\">Object</span> <span class=\"variable\">exposedObject</span> <span class=\"operator\">=</span> bean;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           <span class=\"comment\">//为bean赋值</span></span><br><span class=\"line\">\t\tpopulateBean(beanName, mbd, instanceWrapper);</span><br><span class=\"line\">\t\texposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (ex <span class=\"keyword\">instanceof</span> BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException) ex).getBeanName())) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> (BeanCreationException) ex;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BeanCreationException</span>(</span><br><span class=\"line\">\t\t\t\t\tmbd.getResourceDescription(), beanName, <span class=\"string\">&quot;Initialization of bean failed&quot;</span>, ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (earlySingletonExposure) &#123;</span><br><span class=\"line\">           <span class=\"comment\">//获取早期保留的bean的引用</span></span><br><span class=\"line\">\t\t<span class=\"type\">Object</span> <span class=\"variable\">earlySingletonReference</span> <span class=\"operator\">=</span> getSingleton(beanName, <span class=\"literal\">false</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (earlySingletonReference != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (exposedObject == bean) &#123;</span><br><span class=\"line\">\t\t\t\texposedObject = earlySingletonReference;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!<span class=\"built_in\">this</span>.allowRawInjectionDespiteWrapping &amp;&amp; hasDependentBean(beanName)) &#123;</span><br><span class=\"line\">\t\t\t\tString[] dependentBeans = getDependentBeans(beanName);</span><br><span class=\"line\">\t\t\t\tSet&lt;String&gt; actualDependentBeans = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedHashSet</span>&lt;&gt;(dependentBeans.length);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (String dependentBean : dependentBeans) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tactualDependentBeans.add(dependentBean);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!actualDependentBeans.isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BeanCurrentlyInCreationException</span>(beanName,</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"string\">&quot;Bean with name &#x27;&quot;</span> + beanName + <span class=\"string\">&quot;&#x27; has been injected into other beans [&quot;</span> +</span><br><span class=\"line\">\t\t\t\t\t\t\tStringUtils.collectionToCommaDelimitedString(actualDependentBeans) +</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"string\">&quot;] in its raw version as part of a circular reference, but has eventually been &quot;</span> +</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"string\">&quot;wrapped. This means that said other beans do not use the final version of the &quot;</span> +</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"string\">&quot;bean. This is often the result of over-eager type matching - consider using &quot;</span> +</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"string\">&quot;&#x27;getBeanNamesForType&#x27; with the &#x27;allowEagerInit&#x27; flag turned off, for example.&quot;</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Register bean as disposable.</span></span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           <span class=\"comment\">//注册bean的销毁</span></span><br><span class=\"line\">\t\tregisterDisposableBeanIfNecessary(beanName, bean, mbd);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BeanCreationException</span>(</span><br><span class=\"line\">\t\t\t\tmbd.getResourceDescription(), beanName, <span class=\"string\">&quot;Invalid destruction signature&quot;</span>, ex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//返回创建好的bean</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> exposedObject;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建对象实例 createBeanInstance</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> BeanWrapper <span class=\"title function_\">createBeanInstance</span><span class=\"params\">(String beanName, RootBeanDefinition mbd, <span class=\"meta\">@Nullable</span> Object[] args)</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Make sure bean class is actually resolved at this point.</span></span><br><span class=\"line\">       <span class=\"comment\">//获取当前的bean是什么类型</span></span><br><span class=\"line\">\tClass&lt;?&gt; beanClass = resolveBeanClass(mbd, beanName);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (beanClass != <span class=\"literal\">null</span> &amp;&amp; !Modifier.isPublic(beanClass.getModifiers()) &amp;&amp; !mbd.isNonPublicAccessAllowed()) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BeanCreationException</span>(mbd.getResourceDescription(), beanName,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;Bean class isn&#x27;t public, and non-public access not allowed: &quot;</span> + beanClass.getName());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tSupplier&lt;?&gt; instanceSupplier = mbd.getInstanceSupplier();</span><br><span class=\"line\">       <span class=\"comment\">//如果是实例bean(@Component)</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (instanceSupplier != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> obtainFromSupplier(instanceSupplier, beanName);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//如果是用@bean注解创建</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (mbd.getFactoryMethodName() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">           <span class=\"comment\">//利用对象的构造器创建bean实例</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> instantiateUsingFactoryMethod(beanName, mbd, args);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Shortcut when re-creating the same bean...</span></span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"variable\">resolved</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"variable\">autowireNecessary</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (args == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (mbd.constructorArgumentLock) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (mbd.resolvedConstructorOrFactoryMethod != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tresolved = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\tautowireNecessary = mbd.constructorArgumentsResolved;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (resolved) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (autowireNecessary) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> autowireConstructor(beanName, mbd, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> instantiateBean(beanName, mbd);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Candidate constructors for autowiring?</span></span><br><span class=\"line\">\tConstructor&lt;?&gt;[] ctors = determineConstructorsFromBeanPostProcessors(beanClass, beanName);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ctors != <span class=\"literal\">null</span> || mbd.getResolvedAutowireMode() == AUTOWIRE_CONSTRUCTOR ||</span><br><span class=\"line\">\t\t\tmbd.hasConstructorArgumentValues() || !ObjectUtils.isEmpty(args)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> autowireConstructor(beanName, mbd, ctors, args);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Preferred constructors for default construction?</span></span><br><span class=\"line\">\tctors = mbd.getPreferredConstructors();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ctors != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> autowireConstructor(beanName, mbd, ctors, <span class=\"literal\">null</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// No special handling: simply use no-arg constructor.</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> instantiateBean(beanName, mbd);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>属性赋值populateBean</p>\n<p><img src=\"/pictures/059bb96aa2f5fd724bcaea38a591f7c6.png\" alt=\"image-20220513101910052\"></p>\n<h3 id=\"12-完成beanFactory的创建工作\"><a href=\"#12-完成beanFactory的创建工作\" class=\"headerlink\" title=\"12.完成beanFactory的创建工作\"></a>12.完成beanFactory的创建工作</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">finishRefresh</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Clear context-level resource caches (such as ASM metadata from scanning).</span></span><br><span class=\"line\">\tclearResourceCaches();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Initialize lifecycle processor for this context.</span></span><br><span class=\"line\">       <span class=\"comment\">//初始化</span></span><br><span class=\"line\">\tinitLifecycleProcessor();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Propagate refresh to lifecycle processor first.</span></span><br><span class=\"line\">\tgetLifecycleProcessor().onRefresh();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Publish the final event.</span></span><br><span class=\"line\">\tpublishEvent(<span class=\"keyword\">new</span> <span class=\"title class_\">ContextRefreshedEvent</span>(<span class=\"built_in\">this</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Participate in LiveBeansView MBean, if active.</span></span><br><span class=\"line\">\tLiveBeansView.registerApplicationContext(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-初始化LifecycleProcessor（需要我们来实现）\"><a href=\"#1-初始化LifecycleProcessor（需要我们来实现）\" class=\"headerlink\" title=\"1.初始化LifecycleProcessor（需要我们来实现）\"></a>1.初始化LifecycleProcessor（需要我们来实现）</h4><h4 id=\"2-执行getLifecycleProcessor-onRefresh\"><a href=\"#2-执行getLifecycleProcessor-onRefresh\" class=\"headerlink\" title=\"2.执行getLifecycleProcessor().onRefresh();\"></a>2.执行getLifecycleProcessor().onRefresh();</h4><h4 id=\"3-发布容器创建完成事件\"><a href=\"#3-发布容器创建完成事件\" class=\"headerlink\" title=\"3.发布容器创建完成事件\"></a>3.发布容器创建完成事件</h4><p>publishEvent(new ContextRefreshedEvent(this))</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Springboot底层原理（2）\"><a href=\"#Springboot底层原理（2）\" class=\"headerlink\" title=\"Springboot底层原理（2）\"></a>Springboot底层原理（2）</h1><p><a href=\"https://docs.spring.io/spring-framework/docs/5.3.x/reference/html/\">Spring Framework Documentation</a></p>\n<h2 id=\"使用原生的Servlet\"><a href=\"#使用原生的Servlet\" class=\"headerlink\" title=\"使用原生的Servlet\"></a>使用原生的Servlet</h2><h3 id=\"使用注解声明为Servlet组件\"><a href=\"#使用注解声明为Servlet组件\" class=\"headerlink\" title=\"使用注解声明为Servlet组件\"></a>使用注解声明为Servlet组件</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WebServlet(&quot;/my&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyServlet</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">HttpServlet</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException &#123;</span><br><span class=\"line\">        resp.getWriter().write(<span class=\"string\">&quot;1212&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以在Spring中使用原生的Servlet组件，重写里面的doGet，doPost等方法实现具体的逻辑，并加上@WebServlet(“/my”)添加路由映射，但是只是这样还不能生效，因为它并不是Spring框架下的组件，所以需要在启动类上加上@ServletComponentScan(basePackages = “com.demo”)设置包扫描路径，用于扫描原生的Servlet组件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ServletComponentScan(basePackages = &quot;com.demo&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MydemoApplication</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(MydemoApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因为不是Spring框架下的组件，所以Spring注册的拦截器不会生效，想要进行拦截需要使用Servlet组件中的拦截器：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WebFilter(urlPatterns = &quot;/*&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyFilter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Filter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Spring容器启动的时候执行</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;Filter init&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//如果路由和设置的路由匹配，则先执行这个过滤器，然后再执行具体的业务逻辑</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doFilter</span><span class=\"params\">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class=\"keyword\">throws</span> IOException, ServletException &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;do Filter&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//Spring容器销毁（也就是Servlet销毁时）执行的方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">destroy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;destroy&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>@WebFilter(urlPatterns = “/*”) 注意路由的写法，Spring组件中的url是<code>/**</code> 而Servlet组件的写法是<code>/*</code></p>\n<p>监听器：</p>\n<p>在项目初始化完成，开始监听之前可以执行contextInitialized方法，项目关闭的时候会执行contextDestroyed方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WebListener</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyListener</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ServletContextListener</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">contextDestroyed</span><span class=\"params\">(ServletContextEvent sce)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;项目结束&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">contextInitialized</span><span class=\"params\">(ServletContextEvent sce)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;检测到初始化完成&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/pictures/4855e5cc40ab39b4cc76d71effdace90.png\" alt=\"image-20220507193721185\"></p>\n<h3 id=\"向Spring容器中添加Servlet组件\"><a href=\"#向Spring容器中添加Servlet组件\" class=\"headerlink\" title=\"向Spring容器中添加Servlet组件\"></a>向Spring容器中添加Servlet组件</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyServletConfiger</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//注册Servlet</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title function_\">myRegistrationBean</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServletRegistrationBean</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">MyServlet</span>(),<span class=\"string\">&quot;/my&quot;</span>,<span class=\"string\">&quot;/my1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//注册过滤器</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title function_\">filterRegistrationBean</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FilterRegistrationBean</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">MyFilter</span>(),myRegistrationBean());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//注册监听器</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ServletListenerRegistrationBean <span class=\"title function_\">listenerRegistrationBean</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServletListenerRegistrationBean</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">MyListener</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注册过滤器也可以使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title function_\">filterRegistrationBean</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">FilterRegistrationBean</span> <span class=\"variable\">filterRegistrationBean</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FilterRegistrationBean</span>();</span><br><span class=\"line\">    filterRegistrationBean.setFilter(<span class=\"keyword\">new</span> <span class=\"title class_\">MyFilter</span>());</span><br><span class=\"line\">    filterRegistrationBean.setUrlPatterns(Arrays.asList(<span class=\"string\">&quot;/*&quot;</span>,<span class=\"string\">&quot;/css/*&quot;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> filterRegistrationBean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意：</p>\n<p>这里的@Configuration注解不能将proxyBeanMethods 属性设置为 false，我们前面提到过，如果将这个属性设置为true，在调用里面带有@Bean的方法时，会在Spring容器中找有没有相同的bean，如果有就返回Spring容器中的bean，如果没有会创建一个bean。而设置为false后，会不会生产代理对象，因而会生成很多多余的bean。所以这里需要将proxyBeanMethods 设置为true，也就是它的默认值，来保证依赖的组件始终的单实例的。</p>\n<h3 id=\"原生的Servlet的作用原理\"><a href=\"#原生的Servlet的作用原理\" class=\"headerlink\" title=\"原生的Servlet的作用原理\"></a>原生的Servlet的作用原理</h3><p>前面提到使用原生的Servlet不会触发Spring的拦截器，下面解释这个的原因。</p>\n<p>Springboot Web处理请求的核心是DispatcherServlet类，而这个Servlet是在DispatcherServletAutoConfiguration这个自动配置类中注册进Spring容器中的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean(name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> DispatcherServlet <span class=\"title function_\">dispatcherServlet</span><span class=\"params\">(WebMvcProperties webMvcProperties)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">DispatcherServlet</span> <span class=\"variable\">dispatcherServlet</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DispatcherServlet</span>();</span><br><span class=\"line\">\tdispatcherServlet.setDispatchOptionsRequest(webMvcProperties.isDispatchOptionsRequest());</span><br><span class=\"line\">\tdispatcherServlet.setDispatchTraceRequest(webMvcProperties.isDispatchTraceRequest());</span><br><span class=\"line\">\tdispatcherServlet.setThrowExceptionIfNoHandlerFound(webMvcProperties.isThrowExceptionIfNoHandlerFound());</span><br><span class=\"line\">\tdispatcherServlet.setPublishEvents(webMvcProperties.isPublishRequestHandledEvents());</span><br><span class=\"line\">\tdispatcherServlet.setEnableLoggingRequestDetails(webMvcProperties.isLogRequestDetails());</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dispatcherServlet;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>之前介绍介绍的很多组件，比如各种解析器都是在这个类中注册进Spring容器中的</p>\n<p>其中的参数：WebMvcProperties webMvcProperties，对应配置文件中spring.mvc下的配置项</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ConfigurationProperties(prefix = &quot;spring.mvc&quot;)</span><br><span class=\"line\">public class WebMvcProperties &#123;</span><br></pre></td></tr></table></figure>\n\n<p>然后通过dispatcherServletRegistration这个方法将DispatcherServlet注册进Servlet框架中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnBean(value = DispatcherServlet.class, name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> DispatcherServletRegistrationBean <span class=\"title function_\">dispatcherServletRegistration</span><span class=\"params\">(DispatcherServlet dispatcherServlet,</span></span><br><span class=\"line\"><span class=\"params\">\t\tWebMvcProperties webMvcProperties, ObjectProvider&lt;MultipartConfigElement&gt; multipartConfig)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">DispatcherServletRegistrationBean</span> <span class=\"variable\">registration</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DispatcherServletRegistrationBean</span>(dispatcherServlet,</span><br><span class=\"line\">\t\t\twebMvcProperties.getServlet().getPath());</span><br><span class=\"line\">\tregistration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);</span><br><span class=\"line\">\tregistration.setLoadOnStartup(webMvcProperties.getServlet().getLoadOnStartup());</span><br><span class=\"line\">\tmultipartConfig.ifAvailable(registration::setMultipartConfig);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> registration;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>既然是Servlet，就有需要由它来处理的URL</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">DispatcherServletRegistrationBean</span> <span class=\"variable\">registration</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DispatcherServletRegistrationBean</span>(dispatcherServlet,</span><br><span class=\"line\">\t\twebMvcProperties.getServlet().getPath());</span><br></pre></td></tr></table></figure>\n\n<p>通过这个方法向服务器中添加Servlet，而它的请求路径是webMvcProperties.getServlet().getPath())，而这个方法的 值就是我们配置的spring.mvc.servlet.path，这个值默认是<code>/</code>，也就默认情况下，所有请求都由dispatcherServlet来处理（也就是由Springboot的Web框架来处理）</p>\n<p>所以我们用Spring处理请求的时候，实际上用的是一个Servlet：DispatcherServlet，在这个Servlet中处理所有的请求。</p>\n<p>tomcat在一个请求有多个Servlet可以处理时，使用精确优先原则，它会在所有能处理的Servlet中，选择前缀匹配程度最长的Servlet进行处理。</p>\n<p>例如</p>\n<p>如果有两个Servlet，A对应路由<code>/my</code>，B对应路由<code>/my/1</code>，此时如果收到了<code>/my/1/2</code>的请求，则会交给B来处理，而如果收到<code>/my/2</code>的请求，则会由A来处理。</p>\n<p>我们自定义的原生Servlet组件和Spring的DispatcherServlet也是上述这种关系。DispatcherServlet默认处理的URL是<code>/</code>也就是所有的请求，而我们自定义的Servlet对应的URL是<code>/my/</code>，所以我们发送/my请求后，根据精确匹配原则会交付给我们自定义的MyServlet，由Tomcat直接来处理，而如果不是/my/开头的请求，就会和DispatcherServlet匹配，然后走Spring的流程后再交给Tomcat来处理。</p>\n<p><img src=\"/pictures/38456e2bfda4fea76779e78a77c816e1.png\" alt=\"image-20220507224859818\"></p>\n<p>所以我们发送的/my请求没有被Spring拦截的原因就是它是由我们定义的MyServlet处理的，而不是由Spring里的DispatcherServlet来处理，自然不会触发DispatcherServlet中定义的拦截器。</p>\n<h2 id=\"Spring嵌入式Servlet容器\"><a href=\"#Spring嵌入式Servlet容器\" class=\"headerlink\" title=\"Spring嵌入式Servlet容器\"></a>Spring嵌入式Servlet容器</h2><h3 id=\"底层原理\"><a href=\"#底层原理\" class=\"headerlink\" title=\"底层原理\"></a>底层原理</h3><p>Springboot如果发现当前是Web应用，就会自动导入Tomcat服务器所需的依赖，并且会创建一个Web类型的IOC容器ServletWebServerApplicationContext</p>\n<p>ServletWebServerApplicationContext 启动的时候需要用到 ServletWebServerFactory 来创建服务器（Servlet 的web服务器工厂——&gt;Servlet 的web服务器）。而SpringBoot底层默认有很多的WebServer工厂（ServletWebServerFactoryConfiguration内创建Bean），如：TomcatServletWebServerFactory，JettyServletWebServerFactory，UndertowServletWebServerFactory，对应三种不同的服务器（Tomcat，Jetty，Undertow）。这几个服务器工厂是在ServletWebServerFactoryAutoConfiguration这个自动配置类中放入Spring容器的，而这个自动配置需要使用使用ServletWebServerFactoryConfiguration这个配置类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ServletWebServerFactoryConfiguration</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\">    <span class=\"comment\">//需要tomcat依赖才会放入TomcatServletWebServerFactory</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnClass(&#123; Servlet.class, Tomcat.class, UpgradeProtocol.class &#125;)</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnMissingBean(value = ServletWebServerFactory.class, search = SearchStrategy.CURRENT)</span></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EmbeddedTomcat</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t\tTomcatServletWebServerFactory <span class=\"title function_\">tomcatServletWebServerFactory</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\tObjectProvider&lt;TomcatConnectorCustomizer&gt; connectorCustomizers,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\tObjectProvider&lt;TomcatContextCustomizer&gt; contextCustomizers,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\tObjectProvider&lt;TomcatProtocolHandlerCustomizer&lt;?&gt;&gt; protocolHandlerCustomizers)</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">TomcatServletWebServerFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TomcatServletWebServerFactory</span>();</span><br><span class=\"line\">\t\t\tfactory.getTomcatConnectorCustomizers()</span><br><span class=\"line\">\t\t\t\t\t.addAll(connectorCustomizers.orderedStream().collect(Collectors.toList()));</span><br><span class=\"line\">\t\t\tfactory.getTomcatContextCustomizers()</span><br><span class=\"line\">\t\t\t\t\t.addAll(contextCustomizers.orderedStream().collect(Collectors.toList()));</span><br><span class=\"line\">\t\t\tfactory.getTomcatProtocolHandlerCustomizers()</span><br><span class=\"line\">\t\t\t\t\t.addAll(protocolHandlerCustomizers.orderedStream().collect(Collectors.toList()));</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> factory;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Nested configuration if Jetty is being used.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnClass(&#123; Servlet.class, Server.class, Loader.class, WebAppContext.class &#125;)</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnMissingBean(value = ServletWebServerFactory.class, search = SearchStrategy.CURRENT)</span></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EmbeddedJetty</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t\tJettyServletWebServerFactory <span class=\"title function_\">JettyServletWebServerFactory</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\tObjectProvider&lt;JettyServerCustomizer&gt; serverCustomizers)</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">JettyServletWebServerFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JettyServletWebServerFactory</span>();</span><br><span class=\"line\">\t\t\tfactory.getServerCustomizers().addAll(serverCustomizers.orderedStream().collect(Collectors.toList()));</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> factory;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Nested configuration if Undertow is being used.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnClass(&#123; Servlet.class, Undertow.class, SslClientAuthMode.class &#125;)</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnMissingBean(value = ServletWebServerFactory.class, search = SearchStrategy.CURRENT)</span></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EmbeddedUndertow</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t\tUndertowServletWebServerFactory <span class=\"title function_\">undertowServletWebServerFactory</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\tObjectProvider&lt;UndertowDeploymentInfoCustomizer&gt; deploymentInfoCustomizers,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\tObjectProvider&lt;UndertowBuilderCustomizer&gt; builderCustomizers)</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">UndertowServletWebServerFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UndertowServletWebServerFactory</span>();</span><br><span class=\"line\">\t\t\tfactory.getDeploymentInfoCustomizers()</span><br><span class=\"line\">\t\t\t\t\t.addAll(deploymentInfoCustomizers.orderedStream().collect(Collectors.toList()));</span><br><span class=\"line\">\t\t\tfactory.getBuilderCustomizers().addAll(builderCustomizers.orderedStream().collect(Collectors.toList()));</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> factory;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t\tUndertowServletWebServerFactoryCustomizer <span class=\"title function_\">undertowServletWebServerFactoryCustomizer</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t\tServerProperties serverProperties)</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UndertowServletWebServerFactoryCustomizer</span>(serverProperties);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到这个配置类用于向Spring容器中添加三种服务器工厂，利用条件装配判断放入哪些服务器工厂，只有在导入了所依赖的jar包后，相关的配置才能生效。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//导入tomcat依赖才会放入TomcatServletWebServerFactory</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(&#123; Servlet.class, Tomcat.class, UpgradeProtocol.class &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">//导入Jetty依赖才会引入JettyServletWebServerFactory</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(&#123; Servlet.class, Server.class, Loader.class, WebAppContext.class &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">//导入Undertow的依赖才会放入UndertowServletWebServerFactory</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(&#123; Servlet.class, Undertow.class, SslClientAuthMode.class &#125;)</span></span><br></pre></td></tr></table></figure>\n\n<p>而我们在pom文件导入的spring-boot-starter-web依赖会默认导入tomcat的依赖，所以默认会放入导入tomcat依赖才会放入TomcatServletWebServerFactory这个服务器工厂，得到Tomcat服务器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p>三种服务器工厂的都是ServletWebServerFactory的子类，在查找服务器工厂时会从Spring容器中拿到所有ServletWebServerFactory类型的bean，如果数量是0个或者多个都会抛出异常，因而Spring容器中只能有一个服务器工厂（默认是Tomcat）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> ServletWebServerFactory <span class=\"title function_\">getWebServerFactory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Use bean names so that we don&#x27;t consider the hierarchy</span></span><br><span class=\"line\">\tString[] beanNames = getBeanFactory().getBeanNamesForType(ServletWebServerFactory.class);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (beanNames.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ApplicationContextException</span>(<span class=\"string\">&quot;Unable to start ServletWebServerApplicationContext due to missing &quot;</span></span><br><span class=\"line\">\t\t\t\t+ <span class=\"string\">&quot;ServletWebServerFactory bean.&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (beanNames.length &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ApplicationContextException</span>(<span class=\"string\">&quot;Unable to start ServletWebServerApplicationContext due to multiple &quot;</span></span><br><span class=\"line\">\t\t\t\t+ <span class=\"string\">&quot;ServletWebServerFactory beans : &quot;</span> + StringUtils.arrayToCommaDelimitedString(beanNames));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> getBeanFactory().getBean(beanNames[<span class=\"number\">0</span>], ServletWebServerFactory.class);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Spring容器启动的时候会调用ServletWebServerApplicationContext类的onRefresh方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onRefresh</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">super</span>.onRefresh();</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tcreateWebServer();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ApplicationContextException</span>(<span class=\"string\">&quot;Unable to start web server&quot;</span>, ex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在这个方法中调用createWebServer()方法创建服务器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createWebServer</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">WebServer</span> <span class=\"variable\">webServer</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.webServer;</span><br><span class=\"line\">       <span class=\"comment\">//尝试获取IOC容器，默认是空</span></span><br><span class=\"line\">\t<span class=\"type\">ServletContext</span> <span class=\"variable\">servletContext</span> <span class=\"operator\">=</span> getServletContext();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (webServer == <span class=\"literal\">null</span> &amp;&amp; servletContext == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">           <span class=\"comment\">//从Spring容器中获取服务器工厂，如果有0个或者多个会抛出异常，默认是Tomcat</span></span><br><span class=\"line\">\t\t<span class=\"type\">ServletWebServerFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> getWebServerFactory();</span><br><span class=\"line\">           <span class=\"comment\">//使用服务器工厂创建服务器</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.webServer = factory.getWebServer(getSelfInitializer());</span><br><span class=\"line\">\t\tgetBeanFactory().registerSingleton(<span class=\"string\">&quot;webServerGracefulShutdown&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">WebServerGracefulShutdownLifecycle</span>(<span class=\"built_in\">this</span>.webServer));</span><br><span class=\"line\">\t\tgetBeanFactory().registerSingleton(<span class=\"string\">&quot;webServerStartStop&quot;</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">WebServerStartStopLifecycle</span>(<span class=\"built_in\">this</span>, <span class=\"built_in\">this</span>.webServer));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (servletContext != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tgetSelfInitializer().onStartup(servletContext);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (ServletException ex) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ApplicationContextException</span>(<span class=\"string\">&quot;Cannot initialize servlet context&quot;</span>, ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tinitPropertySources();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建服务器的方法getWebServer：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> WebServer <span class=\"title function_\">getWebServer</span><span class=\"params\">(ServletContextInitializer... initializers)</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.disableMBeanRegistry) &#123;</span><br><span class=\"line\">      Registry.disableRegistry();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//获取一个tomcat服务器对象</span></span><br><span class=\"line\">   <span class=\"type\">Tomcat</span> <span class=\"variable\">tomcat</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Tomcat</span>();</span><br><span class=\"line\">   <span class=\"comment\">//下面是配置tomcat的一些参数</span></span><br><span class=\"line\">   <span class=\"type\">File</span> <span class=\"variable\">baseDir</span> <span class=\"operator\">=</span> (<span class=\"built_in\">this</span>.baseDirectory != <span class=\"literal\">null</span>) ? <span class=\"built_in\">this</span>.baseDirectory : createTempDir(<span class=\"string\">&quot;tomcat&quot;</span>);</span><br><span class=\"line\">   tomcat.setBaseDir(baseDir.getAbsolutePath());</span><br><span class=\"line\">   <span class=\"type\">Connector</span> <span class=\"variable\">connector</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Connector</span>(<span class=\"built_in\">this</span>.protocol);</span><br><span class=\"line\">   connector.setThrowOnFailure(<span class=\"literal\">true</span>);</span><br><span class=\"line\">   tomcat.getService().addConnector(connector);</span><br><span class=\"line\">   customizeConnector(connector);</span><br><span class=\"line\">   tomcat.setConnector(connector);</span><br><span class=\"line\">   tomcat.getHost().setAutoDeploy(<span class=\"literal\">false</span>);</span><br><span class=\"line\">   configureEngine(tomcat.getEngine());</span><br><span class=\"line\">   <span class=\"keyword\">for</span> (Connector additionalConnector : <span class=\"built_in\">this</span>.additionalTomcatConnectors) &#123;</span><br><span class=\"line\">      tomcat.getService().addConnector(additionalConnector);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   prepareContext(tomcat.getHost(), initializers);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> getTomcatWebServer(tomcat);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以实际上内嵌服务器就是调用封装好的服务器对象，以前启动Tomcat服务器的时候，是以服务器为顶层调用SpringMVC的逻辑，而在调用之前也会设置这些参数。而Springboot内嵌的Tomcat服务器则是以Springboot为顶层，调用Tomcat对象。如下图所示，tomcat对象中有main方法可以直接运行。</p>\n<p><img src=\"/pictures/7586ecf7941b2ea8d5e4867c9eeb1414.png\" alt=\"image-20220508004519983\"></p>\n<p>通过tomcat服务器对象会得到一个WebServer对象来操作Tomcat服务器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">WebServer</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//启动服务器</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">start</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> WebServerException;</span><br><span class=\"line\">\t<span class=\"comment\">//关闭服务器</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">stop</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> WebServerException;</span><br><span class=\"line\">\t<span class=\"comment\">//获得监听的端口</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"title function_\">getPort</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title function_\">shutDownGracefully</span><span class=\"params\">(GracefulShutdownCallback callback)</span> &#123;</span><br><span class=\"line\">\t\tcallback.shutdownComplete(GracefulShutdownResult.IMMEDIATE);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建TomcatWebServer时，会在构造器中调用initialize()方法，这个方法中会调用this.tomcat.start()来启动服务器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">TomcatWebServer</span><span class=\"params\">(Tomcat tomcat, <span class=\"type\">boolean</span> autoStart, Shutdown shutdown)</span> &#123;</span><br><span class=\"line\">\tAssert.notNull(tomcat, <span class=\"string\">&quot;Tomcat Server must not be null&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.tomcat = tomcat;</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.autoStart = autoStart;</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.gracefulShutdown = (shutdown == Shutdown.GRACEFUL) ? <span class=\"keyword\">new</span> <span class=\"title class_\">GracefulShutdown</span>(tomcat) : <span class=\"literal\">null</span>;</span><br><span class=\"line\">\tinitialize();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"切换服务器（一般使用Tomcat即可）\"><a href=\"#切换服务器（一般使用Tomcat即可）\" class=\"headerlink\" title=\"切换服务器（一般使用Tomcat即可）\"></a>切换服务器（一般使用Tomcat即可）</h3><p>如果想要切换服务器的类型，我们只需要将tomcat服务器的依赖排除，然后导入我们需要的服务器的依赖即可，然后根据上面所说的自动装配原理就会自动帮我们向Spring容器中添加对应的服务器工厂。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"comment\">&lt;!-- 排除tomcat依赖 --&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 引入undertow依赖 --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>根据我们之前的分析，Spring容器中只能有一个服务器工厂，所以需要排除tomcat依赖，防止Spring将tomcat的服务器工厂注册进Spring容器中</p>\n<h3 id=\"定制服务器\"><a href=\"#定制服务器\" class=\"headerlink\" title=\"定制服务器\"></a>定制服务器</h3><p>1.修改配置文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(ServletRequest.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(ServerProperties.class)</span></span><br><span class=\"line\"><span class=\"meta\">@Import(&#123; ServletWebServerFactoryAutoConfiguration.BeanPostProcessorsRegistrar.class,</span></span><br><span class=\"line\"><span class=\"meta\">\t\tServletWebServerFactoryConfiguration.EmbeddedTomcat.class,</span></span><br><span class=\"line\"><span class=\"meta\">\t\tServletWebServerFactoryConfiguration.EmbeddedJetty.class,</span></span><br><span class=\"line\"><span class=\"meta\">\t\tServletWebServerFactoryConfiguration.EmbeddedUndertow.class &#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ServletWebServerFactoryAutoConfiguration</span></span><br></pre></td></tr></table></figure>\n\n<p>ServletWebServerFactoryAutoConfiguration这个自动配置类需要使用ServerProperties这个类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ConfigurationProperties(prefix = &quot;server&quot;, ignoreUnknownFields = true)</span><br><span class=\"line\">public class ServerProperties </span><br></pre></td></tr></table></figure>\n\n<p>这个类和以server开头的配置项绑定在一起，所以配置项在server开头的配置项下</p>\n<p>2.直接向Spring容器中添加一个我们定制的服务器工厂</p>\n<p>3.可以实现一个定制化器：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.web.server.WebServerFactoryCustomizer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CustomizationBean</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">WebServerFactoryCustomizer</span>&lt;ConfigurableServletWebServerFactory&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">customize</span><span class=\"params\">(ConfigurableServletWebServerFactory server)</span> &#123;</span><br><span class=\"line\">        server.setPort(<span class=\"number\">9000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定制化原理\"><a href=\"#定制化原理\" class=\"headerlink\" title=\"定制化原理\"></a>定制化原理</h3><p>根据前面的总结，我们可以得到Spring配置的原理</p>\n<p>导入场景的starter包–&gt;相关的AutoConfigration自动配置生效–&gt;自动配置类会引入对应的Properties配置类–&gt;配置类会绑定配置文件的参数</p>\n<p>所以一般情况下，我们想要修改Springbooot的功能只需要导入对应场景的包，然后修改配置文件即可</p>\n<p>总结起来，常用的定制化方式有：</p>\n<p>1.修改配置文件</p>\n<p>2.@Confugration+@Bean注解根据Springboot的执行逻辑添加组件</p>\n<p>3.xxxCustomizer</p>\n<p>4.高级配置：修改Springboot的底层组件，比如RequestMappingHandlerMapping，可以通过以下方式来实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> WebMvcRegistrations <span class=\"title function_\">registrations</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WebMvcRegistrations</span>() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> RequestMappingHandlerMapping <span class=\"title function_\">getRequestMappingHandlerMapping</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> WebMvcRegistrations.<span class=\"built_in\">super</span>.getRequestMappingHandlerMapping();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5.高级配置：全面接管SpringMVC：@EnableWebMvc+WebMvcConfigurer,加上这个注解后，Springboot一些相关的自动配置就会失效，需要我们进行手动配置。</p>\n<p>如果我们不加@EnableWebMvc这个注解，则会在原先配置的基础上添加（修改）成我们需要的配置，如果我们注册了多个WebMvcConfigurer类型的组件，Springboot会让所有的WebMvcConfigurer生效，这个过程发生在DelegatingWebMvcConfiguration类中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired(required = false)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setConfigurers</span><span class=\"params\">(List&lt;WebMvcConfigurer&gt; configurers)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.configurers.addWebMvcConfigurers(configurers);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Tips：@Autowired作用在普通方法上，会在注入的时候调用一次该方法，如果方法中有实体参数，会对方法里面的参数进行装配，并调用一次该方法。这个可以用来在自动注入的时候做一些初始化操作。</p>\n<p>DelegatingWebMvcConfiguration这个类保证了SpringMVC最基本的使用（即使我们进行了全面接管，但是一些底层的一定要有的组件还是会放入Spring容器）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,</span></span><br><span class=\"line\"><span class=\"meta\">\t\tValidationAutoConfiguration.class &#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebMvcAutoConfiguration</span> &#123;</span><br></pre></td></tr></table></figure>\n\n<p>SpringMVC的自动装配原理集中在WebMvcAutoConfiguration这个配置类中，而这个配置类生效的条件之一是@ConditionalOnMissingBean(WebMvcConfigurationSupport.class) 也就是Spring容器中不能有WebMvcConfigurationSupport类型的组件，否则自动配置就不会生效。</p>\n<p>而@EnableWebMvc注解的定义如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.TYPE)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Import(DelegatingWebMvcConfiguration.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableWebMvc &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因而加上这个注解后会自动帮我们导入DelegatingWebMvcConfiguration这个类的一个组件，而这个类是WebMvcConfigurationSupport这个类的子类，所以会导致自动配置类失效（也同时提醒我们不要往Spring容器中添加功能时不要继承WebMvcConfigurationSupport，而应该用WebMvcConfigurer），所以DelegatingWebMvcConfiguration在WebMvcAutoConfiguration生效前，默认是不在Spring容器中的，会在我们全面接管SpringMvc的时候提供一些基础的功能，而在WebMvcAutoConfiguration里面继承了DelegatingWebMvcConfiguration实现了更多的功能，并保留了让所有WebMvcConfigurer生效的方法，所以无论是全面接管SpringMVC还是使用默认配置，容器启动的时候会让所有的WebMvcConfigurer生效</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration(proxyBeanMethods = false)</span><br><span class=\"line\">\tpublic static class EnableWebMvcConfiguration extends DelegatingWebMvcConfiguration implements ResourceLoaderAware &#123;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据操作\"><a href=\"#数据操作\" class=\"headerlink\" title=\"数据操作\"></a>数据操作</h2><h3 id=\"依赖引入\"><a href=\"#依赖引入\" class=\"headerlink\" title=\"依赖引入\"></a>依赖引入</h3><p>使用jdbc操作数据库：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/pictures/9d915490f9a0ab4ef17c92d2c88236bc.png\" alt=\"image-20220508140938283\"></p>\n<p>spring-boot-starter-data-jdbc中为我们整合了数据库连接池，jdbc编程和数据库事务，但是没有数据库连接驱动，这是因为Spring并不知道我们要使用哪种数据库，因而只导入了通用的依赖</p>\n<p>引入连接器依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.0.11<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Spring会帮我们进行版本仲裁，但是默认的版本是最新的数据库的版本，也就是8.0以上的版本。实际上这里的数据库连接器的配置应当与本地数据库的版本相匹配，如果本地数据库是5.x的数据库就不要用8.0.x的连接器，而应该用5.x的连接器</p>\n<p>修改版本方法：</p>\n<p>1.直接引入具体版本（maven的就近依赖原则，优先使用我们设置的版本）</p>\n<p>2.修改properties，也就修改了Spring默认配置的数据库版本（属性就近优先原则，优先使用我们配置的属性）</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mysql.version</span>&gt;</span>8.0.11<span class=\"tag\">&lt;/<span class=\"name\">mysql.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自动配置\"><a href=\"#自动配置\" class=\"headerlink\" title=\"自动配置\"></a>自动配置</h3><h4 id=\"DataSourceAutoConfiguration\"><a href=\"#DataSourceAutoConfiguration\" class=\"headerlink\" title=\"DataSourceAutoConfiguration\"></a>DataSourceAutoConfiguration</h4><p>自动配置数据源和连接池（默认使用HikariDataSource连接池）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(&#123; DataSource.class, EmbeddedDatabaseType.class &#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(type = &quot;io.r2dbc.spi.ConnectionFactory&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(DataSourceProperties.class)</span></span><br><span class=\"line\"><span class=\"meta\">@Import(&#123; DataSourcePoolMetadataProvidersConfiguration.class, DataSourceInitializationConfiguration.class &#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DataSourceAutoConfiguration</span> &#123;</span><br></pre></td></tr></table></figure>\n\n<p><code>@ConditionalOnMissingBean(type = &quot;io.r2dbc.spi.ConnectionFactory&quot;)</code> 如果没有使用响应式编程框架则自动配置这个类</p>\n<p><code>@EnableConfigurationProperties(DataSourceProperties.class)</code>绑定配置类DataSourceProperties</p>\n<p>DataSourceProperties绑定的配置为：spring.datasource下的所有配置</p>\n<p>例如数据库的账号，密码，URL等信息都会绑定到这个配置类中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span><br><span class=\"line\">public class DataSourceProperties implements BeanClassLoaderAware, InitializingBean &#123;</span><br></pre></td></tr></table></figure>\n\n<p>如果我们没有配置数据库连接池，Spring会帮我们配置一个数据库连接池：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\"><span class=\"meta\">@Conditional(PooledDataSourceCondition.class)</span></span><br><span class=\"line\"><span class=\"comment\">//如果没有配置数据库连接池，这个类才会生效</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(&#123; DataSource.class, XADataSource.class &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">//引入数据库连接池相关的依赖</span></span><br><span class=\"line\"><span class=\"meta\">@Import(&#123; DataSourceConfiguration.Hikari.class, DataSourceConfiguration.Tomcat.class,</span></span><br><span class=\"line\"><span class=\"meta\">\t\tDataSourceConfiguration.Dbcp2.class, DataSourceConfiguration.Generic.class,</span></span><br><span class=\"line\"><span class=\"meta\">\t\tDataSourceJmxConfiguration.class &#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PooledDataSourceConfiguration</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而数据库连接池是如何创建的，我们可以来到DataSourceConfiguration配置类：</p>\n<p>在有相关的依赖的时候这个类才会生效，然后才会创建HikariDataSource的数据源（其他的还有Tomcat数据源等，但是默认是HikariDataSource数据源）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(HikariDataSource.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(DataSource.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(name = &quot;spring.datasource.type&quot;, havingValue = &quot;com.zaxxer.hikari.HikariDataSource&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">\t\tmatchIfMissing = true)</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Hikari</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.datasource.hikari&quot;)</span></span><br><span class=\"line\">\tHikariDataSource <span class=\"title function_\">dataSource</span><span class=\"params\">(DataSourceProperties properties)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">HikariDataSource</span> <span class=\"variable\">dataSource</span> <span class=\"operator\">=</span> createDataSource(properties, HikariDataSource.class);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (StringUtils.hasText(properties.getName())) &#123;</span><br><span class=\"line\">\t\t\tdataSource.setPoolName(properties.getName());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> dataSource;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>数据源配置（Mysql8.0以上）：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">document</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/document?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;rewriteBatchedStatements=true&amp;useJDBCCompliantTimezoneShift=true</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"comment\">#    type: com.zaxxer.hikari.HikariDataSource #默认是HikariDataSource数据库连接池</span></span><br></pre></td></tr></table></figure>\n\n<p>数据源配置（Mysql5.x）：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/document</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"DataSourceTransactionManagerAutoConfiguration\"><a href=\"#DataSourceTransactionManagerAutoConfiguration\" class=\"headerlink\" title=\"DataSourceTransactionManagerAutoConfiguration\"></a>DataSourceTransactionManagerAutoConfiguration</h4><p>事务管理器自动配置</p>\n<h4 id=\"JdbcTemplateAutoConfiguration\"><a href=\"#JdbcTemplateAutoConfiguration\" class=\"headerlink\" title=\"JdbcTemplateAutoConfiguration\"></a>JdbcTemplateAutoConfiguration</h4><p>自动配置JdbcTemplate，可以用于增删改查</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(&#123; DataSource.class, JdbcTemplate.class &#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnSingleCandidate(DataSource.class)</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureAfter(DataSourceAutoConfiguration.class)</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(JdbcProperties.class)</span></span><br><span class=\"line\"><span class=\"meta\">@Import(&#123; JdbcTemplateConfiguration.class, NamedParameterJdbcTemplateConfiguration.class &#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JdbcTemplateAutoConfiguration</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中@EnableConfigurationProperties(JdbcProperties.class)代表与JdbcProperties类绑定，而这个类与@ConfigurationProperties(prefix = “spring.jdbc”)绑定，也就是可以通过修改spring.jdbc下面的配置来配置JdbcTemplate的功能</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">jdbc:</span></span><br><span class=\"line\">    <span class=\"attr\">template:</span></span><br><span class=\"line\">      <span class=\"attr\">query-timeout:</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h4><p>JndiDataSourceAutoConfiguration</p>\n<p>JDNI自动配置</p>\n<p>XADataSourceAutoConfiguration</p>\n<p>分布式事务自动配置</p>\n<h3 id=\"整合Druid数据源\"><a href=\"#整合Druid数据源\" class=\"headerlink\" title=\"整合Druid数据源\"></a>整合Druid数据源</h3><p>HikariDataSource是目前市面上性能最好的数据源，而Druid对性能监控，防止sql注入攻击有整套的解决方案</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;<span class=\"number\">1.1</span><span class=\"number\">.17</span>&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p>配置HikariDataSource的代码块：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(HikariDataSource.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(DataSource.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(name = &quot;spring.datasource.type&quot;, havingValue = &quot;com.zaxxer.hikari.HikariDataSource&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">\t\tmatchIfMissing = true)</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Hikari</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.datasource.hikari&quot;)</span></span><br><span class=\"line\">\tHikariDataSource <span class=\"title function_\">dataSource</span><span class=\"params\">(DataSourceProperties properties)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">HikariDataSource</span> <span class=\"variable\">dataSource</span> <span class=\"operator\">=</span> createDataSource(properties, HikariDataSource.class);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (StringUtils.hasText(properties.getName())) &#123;</span><br><span class=\"line\">\t\t\tdataSource.setPoolName(properties.getName());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> dataSource;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>@ConditionalOnMissingBean(DataSource.class)表示如果Spring容器中没有DataSource数据源来回帮我们配置HikariDataSource数据源，如果我们配置了DataSource就用我们自己的数据源。向Spring容器添加我们自己的数据源即可。</p>\n<p>方式一：用户名密码直接在配置类中设置用户名密码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DataSourceConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    DataSource <span class=\"title function_\">druidDataSource</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        DruidDataSource druidDataSource=<span class=\"keyword\">new</span> <span class=\"title class_\">DruidDataSource</span>();</span><br><span class=\"line\">        druidDataSource.setUrl();</span><br><span class=\"line\">        druidDataSource.setUsername();</span><br><span class=\"line\">        druidDataSource.setPassword();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> druidDataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是这样不方便修改，所以我们可以使用配置文件中配置的参数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DataSourceConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties(&quot;spring.datasource&quot;)</span></span><br><span class=\"line\">    DataSource <span class=\"title function_\">druidDataSource</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        DruidDataSource druidDataSource=<span class=\"keyword\">new</span> <span class=\"title class_\">DruidDataSource</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> druidDataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>@ConfigurationProperties(“spring.datasource”) 这个注解我们在研究源码的时候看了很多回了，用于将返回值中对应的名称的参数和配置文件中对应的名称的参数绑定在一起。</p>\n<p>Tips：Spring中的测试环节可以直接在Test目录下进行，这样就不用使用postman发请求了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MydemoApplicationTests</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    JdbcTemplate jdbcTemplate;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">contextLoads</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        List&lt;Usert&gt; userts = jdbcTemplate.query(<span class=\"string\">&quot;select * from usert&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">BeanPropertyRowMapper</span>&lt;&gt;(Usert.class));</span><br><span class=\"line\">        userts.forEach((System.out::println));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Druid数据监控\"><a href=\"#Druid数据监控\" class=\"headerlink\" title=\"Druid数据监控\"></a>Druid数据监控</h3><h4 id=\"监控SQL\"><a href=\"#监控SQL\" class=\"headerlink\" title=\"监控SQL\"></a>监控SQL</h4><p>整合Druid数据源后，我们就可以通过配置Druid监控页来监控数据库的状态</p>\n<p>想要达成监控功能就需要配置一个给Druid使用的Servlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title function_\">servletRegistrationBean</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServletRegistrationBean</span>&lt;&gt;(<span class=\"keyword\">new</span> <span class=\"title class_\">StatViewServlet</span>(),<span class=\"string\">&quot;/druid/*&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样/druid/*的请求就会交给Druid中的StatViewServlet来处理，而不会走Spring的流程，如下图所示，获得成功</p>\n<p><img src=\"/pictures/22fcaaf1be52e5d0800f4db8995570bf.png\" alt=\"image-20220508171446887\"></p>\n<p>但是这样只能显示界面，要统计SQL语句执行的各种信息还需要在配置数据源时加上druidDataSource.setFilters(“stat”);</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SneakyThrows</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(&quot;spring.datasource&quot;)</span></span><br><span class=\"line\">DataSource <span class=\"title function_\">druidDataSource</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    DruidDataSource druidDataSource=<span class=\"keyword\">new</span> <span class=\"title class_\">DruidDataSource</span>();</span><br><span class=\"line\">    druidDataSource.setFilters(<span class=\"string\">&quot;stat&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> druidDataSource;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"监控请求\"><a href=\"#监控请求\" class=\"headerlink\" title=\"监控请求\"></a>监控请求</h4><p>配置这个后监控页的URI请求就有数据来源</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title function_\">webStatFilter</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">WebStatFilter</span> <span class=\"variable\">webStatFilter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WebStatFilter</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    FilterRegistrationBean&lt;WebStatFilter&gt; filterRegistrationBean = <span class=\"keyword\">new</span> <span class=\"title class_\">FilterRegistrationBean</span>&lt;&gt;(webStatFilter);</span><br><span class=\"line\">    filterRegistrationBean.setUrlPatterns(Arrays.asList(<span class=\"string\">&quot;/*&quot;</span>));</span><br><span class=\"line\">    filterRegistrationBean.addInitParameter(<span class=\"string\">&quot;exclusions&quot;</span>,<span class=\"string\">&quot;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> filterRegistrationBean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/pictures/3be6aa060673577be3bf992760f16089.png\" alt=\"image-20220508175213844\"></p>\n<p><img src=\"/pictures/65a129f1a71eac87e2c80c5fce3facc1.png\" alt=\"image-20220508211828211\"></p>\n<h4 id=\"开启防火墙\"><a href=\"#开启防火墙\" class=\"headerlink\" title=\"开启防火墙\"></a>开启防火墙</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SneakyThrows</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(&quot;spring.datasource&quot;)</span></span><br><span class=\"line\">DataSource <span class=\"title function_\">druidDataSource</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    DruidDataSource druidDataSource=<span class=\"keyword\">new</span> <span class=\"title class_\">DruidDataSource</span>();</span><br><span class=\"line\">    druidDataSource.setFilters(<span class=\"string\">&quot;stat,wall&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> druidDataSource;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而我们上面也用到过，在@ConfigurationProperties(“spring.datasource”)注解下的方法中，使用set方法配置的属性，在配置文件中配置同样有效：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">datasource:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">document</span></span><br><span class=\"line\">  <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/document?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;rewriteBatchedStatements=true&amp;useJDBCCompliantTimezoneShift=true</span></span><br><span class=\"line\">  <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br><span class=\"line\">  <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">  <span class=\"attr\">Filters:</span> <span class=\"string\">stat,wall</span></span><br></pre></td></tr></table></figure>\n\n<p>stat代表状态监控</p>\n<p>wall代表防火墙</p>\n<p>不过Filters会变黄，因为这个并不是Spring的配置</p>\n<p>XML配置-&gt;配置类配置：看到bean标签就向Spring容器中通过@Bean注解添加一个bean，下面的其他标签就只是它的属性值</p>\n<p><a href=\"https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatViewServlet%E9%85%8D%E7%BD%AE\">https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE_StatViewServlet%E9%85%8D%E7%BD%AE</a></p>\n<h4 id=\"设置访问的账号和密码\"><a href=\"#设置访问的账号和密码\" class=\"headerlink\" title=\"设置访问的账号和密码\"></a>设置访问的账号和密码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"comment\">//用于设置监控页的访问路径</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title function_\">servletRegistrationBean</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">       ServletRegistrationBean&lt;StatViewServlet&gt; registrationBean = <span class=\"keyword\">new</span> <span class=\"title class_\">ServletRegistrationBean</span>&lt;&gt;(<span class=\"keyword\">new</span> <span class=\"title class_\">StatViewServlet</span>(), <span class=\"string\">&quot;/druid/*&quot;</span>);</span><br><span class=\"line\">       <span class=\"comment\">//监控页账号密码：</span></span><br><span class=\"line\">       registrationBean.addInitParameter(<span class=\"string\">&quot;loginUsername&quot;</span>,<span class=\"string\">&quot;admin&quot;</span>);</span><br><span class=\"line\">       registrationBean.addInitParameter(<span class=\"string\">&quot;loginPassword&quot;</span>,<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> registrationBean;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>完整配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.demo.config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.druid.support.http.StatViewServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.druid.support.http.WebStatFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.SneakyThrows;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 李天航</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DataSourceConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@SneakyThrows</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties(&quot;spring.datasource&quot;)</span></span><br><span class=\"line\">    DataSource <span class=\"title function_\">druidDataSource</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        DruidDataSource druidDataSource=<span class=\"keyword\">new</span> <span class=\"title class_\">DruidDataSource</span>();</span><br><span class=\"line\">        druidDataSource.setFilters(<span class=\"string\">&quot;stat,wall&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> druidDataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title function_\">servletRegistrationBean</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        ServletRegistrationBean&lt;StatViewServlet&gt; registrationBean = <span class=\"keyword\">new</span> <span class=\"title class_\">ServletRegistrationBean</span>&lt;&gt;(<span class=\"keyword\">new</span> <span class=\"title class_\">StatViewServlet</span>(), <span class=\"string\">&quot;/druid/*&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//监控页账号密码：</span></span><br><span class=\"line\">        registrationBean.addInitParameter(<span class=\"string\">&quot;loginUsername&quot;</span>,<span class=\"string\">&quot;admin&quot;</span>);</span><br><span class=\"line\">        registrationBean.addInitParameter(<span class=\"string\">&quot;loginPassword&quot;</span>,<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> registrationBean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title function_\">webStatFilter</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">WebStatFilter</span> <span class=\"variable\">webStatFilter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WebStatFilter</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        FilterRegistrationBean&lt;WebStatFilter&gt; filterRegistrationBean = <span class=\"keyword\">new</span> <span class=\"title class_\">FilterRegistrationBean</span>&lt;&gt;(webStatFilter);</span><br><span class=\"line\">        filterRegistrationBean.setUrlPatterns(Arrays.asList(<span class=\"string\">&quot;/*&quot;</span>));</span><br><span class=\"line\">        filterRegistrationBean.addInitParameter(<span class=\"string\">&quot;exclusions&quot;</span>,<span class=\"string\">&quot;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> filterRegistrationBean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Druid-Starter配置连接池\"><a href=\"#Druid-Starter配置连接池\" class=\"headerlink\" title=\"Druid Starter配置连接池\"></a>Druid Starter配置连接池</h3><p>上述的配置过程显得过去麻烦了，如果有一个自动配置类能像其他组件一样自动帮我们把上述组件配置好，然后用一个配置类绑定配置文件，然后我们直接修改配置文件就会方便很多，这个starter就是druid-spring-boot-starter</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.17<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们来看一下starter源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"comment\">//必须导入DruidDataSource的依赖</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(DruidDataSource.class)</span></span><br><span class=\"line\"><span class=\"comment\">//必须在DataSourceAutoConfiguration之前配置</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureBefore(DataSourceAutoConfiguration.class)</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(&#123;DruidStatProperties.class, DataSourceProperties.class&#125;)</span></span><br><span class=\"line\"><span class=\"comment\">//引入下面四种依赖</span></span><br><span class=\"line\"><span class=\"meta\">@Import(&#123;DruidSpringAopConfiguration.class,</span></span><br><span class=\"line\"><span class=\"meta\">    DruidStatViewServletConfiguration.class,</span></span><br><span class=\"line\"><span class=\"meta\">    DruidWebStatFilterConfiguration.class,</span></span><br><span class=\"line\"><span class=\"meta\">    DruidFilterConfiguration.class&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DruidDataSourceAutoConfigure</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Logger</span> <span class=\"variable\">LOGGER</span> <span class=\"operator\">=</span> LoggerFactory.getLogger(DruidDataSourceAutoConfigure.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean(initMethod = &quot;init&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DataSource <span class=\"title function_\">dataSource</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        LOGGER.info(<span class=\"string\">&quot;Init DruidDataSource&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DruidDataSourceWrapper</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以看到注解@AutoConfigureBefore(DataSourceAutoConfiguration.class) ，申明了要在DataSourceAutoConfiguration这个配置类生效之前，让当前这个配置类生效（因为如果DataSourceAutoConfiguration先生效就会像Spring容器放入HikariDataSource），这样我们想要的DruidDataSource就不会被放进去，所以必须要在DataSourceAutoConfiguration之前装配DruidDataSource）</p>\n<p>其中引入了四种依赖：</p>\n<p>DruidSpringAopConfiguration.class    用于监控各种指标</p>\n<p>对应的配置项是spring.datasource.druid.aop-patterns</p>\n<p>DruidStatViewServletConfiguration.class</p>\n<p>这个类用于向Spring中注册一个用于监控的Servlet，用于开启监控页（和我们前面自己的配置的大致一样，只是这里配置的参数更详细一些）</p>\n<p>对应的配置项是spring.datasource.druid.stat-view-servlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(name = &quot;spring.datasource.druid.stat-view-servlet.enabled&quot;, havingValue = &quot;true&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DruidStatViewServletConfiguration</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">DEFAULT_ALLOW_IP</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;127.0.0.1&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title function_\">statViewServletRegistrationBean</span><span class=\"params\">(DruidStatProperties properties)</span> &#123;</span><br><span class=\"line\">        DruidStatProperties.<span class=\"type\">StatViewServlet</span> <span class=\"variable\">config</span> <span class=\"operator\">=</span> properties.getStatViewServlet();</span><br><span class=\"line\">        <span class=\"type\">ServletRegistrationBean</span> <span class=\"variable\">registrationBean</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServletRegistrationBean</span>();</span><br><span class=\"line\">        registrationBean.setServlet(<span class=\"keyword\">new</span> <span class=\"title class_\">StatViewServlet</span>());</span><br><span class=\"line\">        registrationBean.addUrlMappings(config.getUrlPattern() != <span class=\"literal\">null</span> ? config.getUrlPattern() : <span class=\"string\">&quot;/druid/*&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (config.getAllow() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            registrationBean.addInitParameter(<span class=\"string\">&quot;allow&quot;</span>, config.getAllow());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            registrationBean.addInitParameter(<span class=\"string\">&quot;allow&quot;</span>, DEFAULT_ALLOW_IP);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (config.getDeny() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            registrationBean.addInitParameter(<span class=\"string\">&quot;deny&quot;</span>, config.getDeny());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (config.getLoginUsername() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            registrationBean.addInitParameter(<span class=\"string\">&quot;loginUsername&quot;</span>, config.getLoginUsername());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (config.getLoginPassword() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            registrationBean.addInitParameter(<span class=\"string\">&quot;loginPassword&quot;</span>, config.getLoginPassword());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (config.getResetEnable() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            registrationBean.addInitParameter(<span class=\"string\">&quot;resetEnable&quot;</span>, config.getResetEnable());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> registrationBean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>DruidWebStatFilterConfiguration.class</p>\n<p>这个类用于开启过滤器，统计各种请求的数据，这也是监控页的数据来源</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(name = &quot;spring.datasource.druid.web-stat-filter.enabled&quot;, havingValue = &quot;true&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DruidWebStatFilterConfiguration</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title function_\">webStatFilterRegistrationBean</span><span class=\"params\">(DruidStatProperties properties)</span> &#123;</span><br><span class=\"line\">        DruidStatProperties.<span class=\"type\">WebStatFilter</span> <span class=\"variable\">config</span> <span class=\"operator\">=</span> properties.getWebStatFilter();</span><br><span class=\"line\">        <span class=\"type\">FilterRegistrationBean</span> <span class=\"variable\">registrationBean</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FilterRegistrationBean</span>();</span><br><span class=\"line\">        <span class=\"type\">WebStatFilter</span> <span class=\"variable\">filter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WebStatFilter</span>();</span><br><span class=\"line\">        registrationBean.setFilter(filter);</span><br><span class=\"line\">        registrationBean.addUrlPatterns(config.getUrlPattern() != <span class=\"literal\">null</span> ? config.getUrlPattern() : <span class=\"string\">&quot;/*&quot;</span>);</span><br><span class=\"line\">        registrationBean.addInitParameter(<span class=\"string\">&quot;exclusions&quot;</span>, config.getExclusions() != <span class=\"literal\">null</span> ? config.getExclusions() : <span class=\"string\">&quot;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (config.getSessionStatEnable() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            registrationBean.addInitParameter(<span class=\"string\">&quot;sessionStatEnable&quot;</span>, config.getSessionStatEnable());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (config.getSessionStatMaxCount() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            registrationBean.addInitParameter(<span class=\"string\">&quot;sessionStatMaxCount&quot;</span>, config.getSessionStatMaxCount());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (config.getPrincipalSessionName() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            registrationBean.addInitParameter(<span class=\"string\">&quot;principalSessionName&quot;</span>, config.getPrincipalSessionName());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (config.getPrincipalCookieName() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            registrationBean.addInitParameter(<span class=\"string\">&quot;principalCookieName&quot;</span>, config.getPrincipalCookieName());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (config.getProfileEnable() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            registrationBean.addInitParameter(<span class=\"string\">&quot;profileEnable&quot;</span>, config.getProfileEnable());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> registrationBean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>DruidFilterConfiguration.class</p>\n<p>用于设置Druid自己的一些配置项，开启一些功能（比如stat：状态监控，wall防火墙）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">FILTER_STAT_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;spring.datasource.druid.filter.stat&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">FILTER_CONFIG_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;spring.datasource.druid.filter.config&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">FILTER_ENCODING_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;spring.datasource.druid.filter.encoding&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">FILTER_SLF4J_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;spring.datasource.druid.filter.slf4j&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">FILTER_LOG4J_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;spring.datasource.druid.filter.log4j&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">FILTER_LOG4J2_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;spring.datasource.druid.filter.log4j2&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">FILTER_COMMONS_LOG_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;spring.datasource.druid.filter.commons-log&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">FILTER_WALL_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;spring.datasource.druid.filter.wall&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">FILTER_WALL_CONFIG_PREFIX</span> <span class=\"operator\">=</span> FILTER_WALL_PREFIX + <span class=\"string\">&quot;.config&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>然后我们根据上述配置中的规则配置我们想要的功能即可：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/db_account</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">druid:</span></span><br><span class=\"line\">      <span class=\"attr\">aop-patterns:</span> <span class=\"string\">com.atguigu.admin.*</span>  <span class=\"comment\">#监控的范围</span></span><br><span class=\"line\">      <span class=\"attr\">filters:</span> <span class=\"string\">stat,wall,slf4j</span>     <span class=\"comment\"># 底层开启功能，stat（sql监控），wall（防火墙），slf4j打印SQL日志</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"attr\">stat-view-servlet:</span>   <span class=\"comment\"># 配置监控页功能</span></span><br><span class=\"line\">        <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span>\t<span class=\"comment\">#开启监控页，默认是false不开启，所以这里需要配置成true</span></span><br><span class=\"line\">        <span class=\"attr\">login-username:</span> <span class=\"string\">admin</span>\t<span class=\"comment\">#登录用户名</span></span><br><span class=\"line\">        <span class=\"attr\">login-password:</span> <span class=\"string\">admin</span>\t<span class=\"comment\">#登录密码</span></span><br><span class=\"line\">        <span class=\"attr\">resetEnable:</span> <span class=\"literal\">false</span>\t<span class=\"comment\">#是否开启重置按钮</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"attr\">web-stat-filter:</span>  <span class=\"comment\"># 监控web</span></span><br><span class=\"line\">        <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span>\t<span class=\"comment\">#默认不开启，所以需要配置成true</span></span><br><span class=\"line\">        <span class=\"attr\">urlPattern:</span> <span class=\"string\">/*</span>\t<span class=\"comment\">#匹配的URL</span></span><br><span class=\"line\">        <span class=\"attr\">exclusions:</span> <span class=\"string\">&#x27;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&#x27;</span>\t<span class=\"comment\">#不监控的URI</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"attr\">filter:</span></span><br><span class=\"line\">        <span class=\"attr\">stat:</span>    <span class=\"comment\"># 对上面filters里面的stat的详细配置</span></span><br><span class=\"line\">          <span class=\"attr\">slow-sql-millis:</span> <span class=\"number\">1000</span> <span class=\"comment\">#慢查询的阈值</span></span><br><span class=\"line\">          <span class=\"attr\">logSlowSql:</span> <span class=\"literal\">true</span> <span class=\"comment\">#是否统计慢查询</span></span><br><span class=\"line\">          <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span>\t<span class=\"comment\">#是否开启这个功能</span></span><br><span class=\"line\">        <span class=\"attr\">wall:</span></span><br><span class=\"line\">          <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span>\t<span class=\"comment\">#是否开启防火墙</span></span><br><span class=\"line\">          <span class=\"attr\">config:</span></span><br><span class=\"line\">            <span class=\"attr\">drop-table-allow:</span> <span class=\"literal\">false</span>\t<span class=\"comment\">#拦截哪些操作</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"整合MyBatis\"><a href=\"#整合MyBatis\" class=\"headerlink\" title=\"整合MyBatis\"></a>整合MyBatis</h3><h4 id=\"完全配置方式\"><a href=\"#完全配置方式\" class=\"headerlink\" title=\"完全配置方式\"></a>完全配置方式</h4><p>整合框架前我们应当优先寻找这个框架对应的starter，导入这个starter依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>查看源码的时候我们先查看它的META-INF中的spring.factories中指定了哪些自定配置类需要加载，然后查看这些自动配置类，然后再查看它引入的配置类绑定了哪些属性，这样就知道再配置文件中有哪些需要配置的属性</p>\n<p>Mybatis的自动配置类：MybatisAutoConfiguration</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@org</span>.springframework.context.annotation.Configuration</span><br><span class=\"line\"><span class=\"comment\">//必须引入这些jar包</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(&#123; SqlSessionFactory.class, SqlSessionFactoryBean.class &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">//容器中有且仅有一个数据源DataSource</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnSingleCandidate(DataSource.class)</span></span><br><span class=\"line\"><span class=\"comment\">//使用Mybatis配置绑定类</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(MybatisProperties.class)</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureAfter(&#123; DataSourceAutoConfiguration.class, MybatisLanguageDriverAutoConfiguration.class &#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MybatisAutoConfiguration</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InitializingBean</span> &#123;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以看到这个自动配置类需要使用MybatisProperties这个配置类，并且前缀是mybatis</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = MybatisProperties.MYBATIS_PREFIX)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MybatisProperties</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">MYBATIS_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;mybatis&quot;</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在自动配置类中自动帮我们配置好的SqlSessionFactory，也就是SQL会话工厂</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> SqlSessionFactory <span class=\"title function_\">sqlSessionFactory</span><span class=\"params\">(DataSource dataSource)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br></pre></td></tr></table></figure>\n\n<p>装配了sqlSessionTemplate，这个里面含有sqlSession</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> SqlSessionTemplate <span class=\"title function_\">sqlSessionTemplate</span><span class=\"params\">(SqlSessionFactory sqlSessionFactory)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">ExecutorType</span> <span class=\"variable\">executorType</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.properties.getExecutorType();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (executorType != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SqlSessionTemplate</span>(sqlSessionFactory, executorType);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SqlSessionTemplate</span>(sqlSessionFactory);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>@Import(AutoConfiguredMapperScannerRegistrar.class) 引入包的扫描规则</p>\n<p>Mapper：只要我们写的mybatis接口标注了@Mapper注解就会会被自动扫描进来</p>\n<p>Mybatis所需要的配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">1234</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/my</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置mybatis规则</span></span><br><span class=\"line\"><span class=\"attr\">mybatis:</span></span><br><span class=\"line\">  <span class=\"attr\">config-location:</span> <span class=\"string\">classpath:mybatis/mybatis-config.xml</span>  <span class=\"comment\">#全局配置文件位置</span></span><br><span class=\"line\">  <span class=\"attr\">mapper-locations:</span> <span class=\"string\">classpath:mybatis/*.xml</span>  <span class=\"comment\">#Mapper接口的sql映射文件位置</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>对应这个包结构：</p>\n<p><img src=\"/pictures/6529dfcdabd63991f971352fc625b8b5.png\" alt=\"image-20220508232429677\"></p>\n<p><strong>mybatis-config.xml</strong>:</p>\n<p>这里可以配置一些mybatis的额外功能，可以参照官方文档</p>\n<p><a href=\"https://mybatis.org/mybatis-3/zh/configuration.html#settings\">https://mybatis.org/mybatis-3/zh/configuration.html#settings</a></p>\n<p>例如配置命名规则</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">configuration</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"string\">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--    开启将下滑线命名法转换为驼峰命名法--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;mapUnderscoreToCamelCase&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>Mapper接口</strong>：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">mapper</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这里需要指定对应的接口 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.lun.boot.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getUser&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;com.lun.boot.bean.User&quot;</span>&gt;</span></span><br><span class=\"line\">        select * from user where id=#&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>java目录下的Mapper接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.lun.boot.bean.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserMapper</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> User <span class=\"title function_\">getUser</span><span class=\"params\">(Integer id)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>注意这两个文件的文件名的前缀要相同，同时接口函数要加上@Mapper注解来申明这是Mybatis的Mapper层接口。</p>\n<p>如果使用@Repository注解，还需要在配置 类加上@MapperScan注解指定Mapper接口所在路径</p>\n<p>我们关于Mybatis的配置除了可以在xml里面配置外，也可以直接在yml里面配置</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mybatis:</span></span><br><span class=\"line\"><span class=\"comment\">#  config-location: classpath:mybatis/mybatis-config.xml  #全局配置文件位置</span></span><br><span class=\"line\">  <span class=\"attr\">mapper-locations:</span> <span class=\"string\">classpath:mybatis/*.xml</span>  <span class=\"comment\">#Mapper接口的sql映射文件位置</span></span><br><span class=\"line\">  <span class=\"attr\">configuration:</span> <span class=\"comment\">#指定Mybatis的全局配置</span></span><br><span class=\"line\">    <span class=\"attr\">map-underscore-to-camel-case:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>但是注意config-location配置和configuration配置不能同时存在，要么我使用config-location指定xml配置文件的位置，然后在xml文件中配置，要么就直接在configuration下面配置</p>\n<p>使用步骤：</p>\n<ol>\n<li>导入mybatis官方starter</li>\n<li>编写mapper接口</li>\n<li>编写sql映射文件并绑定mapper接口</li>\n<li>在application.yml中指定配置文件的位置，以及指定全局配置文件的信息（建议直接在mybatis.configuration下面的配置）</li>\n</ol>\n<h4 id=\"完全注解方式\"><a href=\"#完全注解方式\" class=\"headerlink\" title=\"完全注解方式\"></a>完全注解方式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserMapper2</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Select(&quot;select * from usert&quot;)</span></span><br><span class=\"line\">    List&lt;User&gt; <span class=\"title function_\">getUsers</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>直接在注解上写上sql语句，即可完成对应的功能，这样就无需编写xml文件</p>\n<h4 id=\"混合使用\"><a href=\"#混合使用\" class=\"headerlink\" title=\"混合使用\"></a>混合使用</h4><p>上面两种方式可以同时使用，也就是一个接口中可以既有使用注解的方式，也可以有在xml文件中配置的方式</p>\n<p>xml中可以编写复杂的sql，而简单的sql直接使用注解即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserMapper</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> User <span class=\"title function_\">getUser</span><span class=\"params\">(Integer id)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Select(&quot;select * from user where id=#&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> User <span class=\"title function_\">getUser2</span><span class=\"params\">(Integer id)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveUser</span><span class=\"params\">(User user)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Insert(&quot;insert into user(`name`) values(#&#123;name&#125;)&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Options(useGeneratedKeys = true, keyProperty = &quot;id&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveUser2</span><span class=\"params\">(User user)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>得到自增的主键：</p>\n<p>xml：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;saveUser&quot;</span> <span class=\"attr\">useGeneratedKeys</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">keyProperty</span>=<span class=\"string\">&quot;id&quot;</span>&gt;</span></span><br><span class=\"line\">    insert into user(`name`) values(#&#123;name&#125;)</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>注解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Insert(&quot;insert into user(`name`) values(#&#123;name&#125;)&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Options(useGeneratedKeys = true, keyProperty = &quot;id&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveUser2</span><span class=\"params\">(User user)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>useGeneratedKeys=”true”表示开启主键自增，keyProperty=”id”表示自增的主键是id</p>\n<p>开启这个后会把自增得到的主键放入User中的id字段中（面向对象，传入的User内部被修改后，外面显然还能拿到）</p>\n<h3 id=\"整合Mybatis-Plus\"><a href=\"#整合Mybatis-Plus\" class=\"headerlink\" title=\"整合Mybatis Plus\"></a>整合Mybatis Plus</h3><p>Mybatis可以帮我们生成代码，简化开发</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.baomidou<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.4.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个依赖帮我们引入了jdbc和基础的mybatis和一些扩展包，所以引入这个包后就不用再引入mybatis和jdbc</p>\n<ul>\n<li><p><code>MybatisPlusAutoConfiguration</code>配置类，<code>MybatisPlusProperties</code>配置项绑定，对应着mybatis-plus为前缀的配置项</p>\n</li>\n<li><p><code>SqlSessionFactory</code>自动配置好，底层是容器中默认的数据源。</p>\n</li>\n<li><p><code>mapperLocations</code>自动配置好的，有默认值<code>classpath*:/mapper/**/*.xml</code>，这表示mapper文件夹下任意路径下的所有xml都是sql映射文件。 建议以后sql映射文件放在 mapper下。</p>\n</li>\n<li><p>容器中也自动配置好了<code>SqlSessionTemplate</code>。</p>\n</li>\n<li><p><code>@Mapper</code> 标注的接口也会被自动扫描，也可以用MapperScan批量扫描</p>\n</li>\n</ul>\n<p>使用方法：</p>\n<p>接口直接继承BaseMapper<User>，泛型是我们要操作的数据库的表</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserMapper</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>表名必须和泛型的名称一致，数组库字段要和属性字段一致，并且出现的字段对应数据库中对应名称的字段，如果没有出现可以用加上@TableField(exist = false) 来表示这个字段不存在</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date birthday;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Float money;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@TableField(exist = false)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String uid;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>查询测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MydemoApplicationTests</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    UserMapper userMapper;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">contextLoads</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(userMapper.selectById(<span class=\"number\">57</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述严格的对应关系会让开发变得有些麻烦，mybatis-plus提供了一些好用的注解来解决这些问题</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@TableName(&quot;usert&quot;) //设置对应的表名</span><br></pre></td></tr></table></figure>\n\n<p>Mybatis Plus不仅提供了Mapper层的通用功能接口，也提供了Service层的通用实现接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserService</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">IService</span>&lt;User&gt; &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接口类继承IService<User> User是对应的实体类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserServiceImpl</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ServiceImpl</span>&lt;UserMapper,User&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编写实现类，规范如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserServiceImpl</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ServiceImpl</span>&lt;UserMapper,User&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需要继承ServiceImpl，传入两个泛型：</p>\n<p>UserMapper是我们继承了BaseMapper的接口</p>\n<p>User是对应的实体类</p>\n<p>ServiceImpl为我们实现了很多方法：</p>\n<p>list()    查询所有的数据</p>\n<p>page(Page,Wrapper) 分页查询</p>\n<p>removeById() 根据主键删除</p>\n<p>Page：</p>\n<p>getPages：查询总页数</p>\n<p>getRecordes：获取查询的数据</p>\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MydemoApplicationTests</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    UserService userService;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">contextLoads</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        Page&lt;User&gt; page1 = userService.page(<span class=\"keyword\">new</span> <span class=\"title class_\">Page</span>&lt;&gt;(<span class=\"number\">0</span>,<span class=\"number\">5</span>),<span class=\"literal\">null</span>);</span><br><span class=\"line\">        page1.getRecords().forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是此时，分页功能会失效，Mybatis会查到所有数据，需要加上一个配置插件才能开启分页功能：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyBatisConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * MybatisPlusInterceptor</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> MybatisPlusInterceptor <span class=\"title function_\">paginationInterceptor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MybatisPlusInterceptor</span> <span class=\"variable\">mybatisPlusInterceptor</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MybatisPlusInterceptor</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 设置请求的页面大于最大页后操作， true调回到首页，false 继续请求  默认false</span></span><br><span class=\"line\">        <span class=\"comment\">// paginationInterceptor.setOverflow(false);</span></span><br><span class=\"line\">        <span class=\"comment\">// 设置最大单页限制数量，默认 500 条，-1 不受限制</span></span><br><span class=\"line\">        <span class=\"comment\">// paginationInterceptor.setLimit(500);</span></span><br><span class=\"line\">        <span class=\"comment\">// 开启 count 的 join 优化,只针对部分 left join</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//设置一个分页拦截器</span></span><br><span class=\"line\">        <span class=\"type\">PaginationInnerInterceptor</span> <span class=\"variable\">paginationInnerInterceptor</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PaginationInnerInterceptor</span>();</span><br><span class=\"line\">        paginationInnerInterceptor.setOverflow(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        paginationInnerInterceptor.setMaxLimit(<span class=\"number\">500L</span>);</span><br><span class=\"line\">        <span class=\"comment\">//添加拦截器</span></span><br><span class=\"line\">        mybatisPlusInterceptor.addInnerInterceptor(paginationInnerInterceptor);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> mybatisPlusInterceptor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样分页就能成功使用了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MydemoApplicationTests</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    UserService userService;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">contextLoads</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        Page&lt;User&gt; page1 = userService.page(<span class=\"keyword\">new</span> <span class=\"title class_\">Page</span>&lt;&gt;(<span class=\"number\">2</span>,<span class=\"number\">5</span>),<span class=\"literal\">null</span>);</span><br><span class=\"line\">        page1.getRecords().forEach(System.out::println);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意Spring的分页是从1开始的，0和1都会返回第一页</p>\n<p>分页前端表格示例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;display table table-bordered table-striped&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dynamic-table&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>#<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>age<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>email<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>操作<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;gradeX&quot;</span> <span class=\"attr\">th:each</span>=<span class=\"string\">&quot;user: $&#123;users.records&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>[[$&#123;user.name&#125;]]<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;user.age&#125;&quot;</span>&gt;</span>Win 95+<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;user.email&#125;&quot;</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/user/delete/&#123;id&#125;(id=$&#123;user.id&#125;,pn=$&#123;users.current&#125;)&#125;&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">                   <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-danger btn-sm&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tfoot</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row-fluid&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;span6&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dataTables_info&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dynamic-table_info&quot;</span>&gt;</span></span><br><span class=\"line\">            当前第[[$&#123;users.current&#125;]]页  总计 [[$&#123;users.pages&#125;]]页  共[[$&#123;users.total&#125;]]条记录</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;span6&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;dataTables_paginate paging_bootstrap pagination&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;prev disabled&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span>&gt;</span>← 前一页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">th:class</span>=<span class=\"string\">&quot;$&#123;num == users.current?&#x27;active&#x27;:&#x27;&#x27;&#125;&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">th:each</span>=<span class=\"string\">&quot;num:$&#123;#numbers.sequence(1,users.pages)&#125;&quot;</span> &gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/dynamic_table(pn=$&#123;num&#125;)&#125;&quot;</span>&gt;</span>[[$&#123;num&#125;]]<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;next disabled&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span>&gt;</span>下一页 → <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Mybatis-Plus使用手册\"><a href=\"#Mybatis-Plus使用手册\" class=\"headerlink\" title=\"Mybatis-Plus使用手册\"></a>Mybatis-Plus使用手册</h4><p><a href=\"https://blog.csdn.net/weixin_43811057/article/details/123449767\">https://blog.csdn.net/weixin_43811057/article/details/123449767</a></p>\n<p>实际上Mybatis-Plus用于处理基本的增删改成即可，复杂的业务逻辑我们使用xml文件即可，稍简单的逻辑我们可以使用注解来实现</p>\n<h3 id=\"整合Redis\"><a href=\"#整合Redis\" class=\"headerlink\" title=\"整合Redis\"></a>整合Redis</h3><p>引入依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们先来看Redis的自动配置类RedisAutoConfiguration</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(RedisOperations.class)</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(RedisProperties.class)</span></span><br><span class=\"line\"><span class=\"meta\">@Import(&#123; LettuceConnectionConfiguration.class, JedisConnectionConfiguration.class &#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisAutoConfiguration</span> &#123;</span><br></pre></td></tr></table></figure>\n\n<p>这个自动配置类绑定了配置类：RedisProperties</p>\n<p>这个配置类绑定的配置是@ConfigurationProperties(prefix = “spring.redis”)</p>\n<p>内部封装了jedis和letture</p>\n<p>也就是我们需要配置redis就在spring.redis下配置</p>\n<p>并且帮我们准备了两种客户端的连接配置：LettuceConnectionConfiguration，JedisConnectionConfiguration</p>\n<p>和两种操作redis的接口：redisTemplate，stringRedisTemplate</p>\n<p>redisTemplate&lt;Object,Object&gt;</p>\n<p>stringRedisTemplate，kv都是String</p>\n<p>RedisProperties中的默认配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Database index used by the connection factory.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">database</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Connection URL. Overrides host, port, and password. User is ignored. Example:</span></span><br><span class=\"line\"><span class=\"comment\"> * redis://user:password@example.com:6379</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String url;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Redis server host.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">host</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;localhost&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Login password of the redis server.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Redis server port.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">port</span> <span class=\"operator\">=</span> <span class=\"number\">6379</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在yml中配置Redis的相关信息：</p>\n<p>可以设置Redis的相关属性来连接（推荐）：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"attr\">host:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br></pre></td></tr></table></figure>\n\n<p>也可以直接设置url代替上述参数：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">redis://root:123456@127.0.0.1:6379</span></span><br></pre></td></tr></table></figure>\n\n<p>RedisTemplate默认使用letture来操作redis，我们也可以切换客户端至jedis切换客户端</p>\n<p>导入jedis：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>redis.clients<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jedis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>jedis也是可以直接使用的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  redis:</span><br><span class=\"line\">#   url: redis:<span class=\"comment\">//lfy:Lfy123456@r-bp1nc7reqesxisgxpipd.redis.rds.aliyuncs.com:6379</span></span><br><span class=\"line\">    host: r-bp1nc7reqesxisgxpipd.redis.rds.aliyuncs.com</span><br><span class=\"line\">    port: <span class=\"number\">6379</span></span><br><span class=\"line\">    password: lfy:Lfy123456</span><br><span class=\"line\">    client-type: jedis</span><br><span class=\"line\">    jedis:</span><br><span class=\"line\">      pool:</span><br><span class=\"line\">        max-active: <span class=\"number\">10</span></span><br><span class=\"line\">#   lettuce:# 另一个用来连接redis的java框架</span><br><span class=\"line\">#      pool:</span><br><span class=\"line\">#        max-active: <span class=\"number\">10</span></span><br><span class=\"line\">#        min-idle: <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n\n<p>小功能：</p>\n<p>编写一个拦截器类，这个类加上@Component申明为一个组件，这样就可以使用Spring容器中的组件的各种功能。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UriInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HandlerInterceptor</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    RedisTemplate redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        redisTemplate.opsForValue().increment(request.getRequestURI());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>添加拦截器：</p>\n<p>拦截器要从Spring容器中拿才能实现我们想要的功能</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Resource</span></span><br><span class=\"line\">UriInterceptor uriInterceptor;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> &#123;</span><br><span class=\"line\">    registry.addInterceptor(<span class=\"keyword\">new</span> <span class=\"title class_\">LoginIntercepter</span>())</span><br><span class=\"line\">            .addPathPatterns(<span class=\"string\">&quot;/**&quot;</span>)</span><br><span class=\"line\">            .excludePathPatterns(<span class=\"string\">&quot;/login&quot;</span>,<span class=\"string\">&quot;/&quot;</span>,<span class=\"string\">&quot;/css/**&quot;</span>,<span class=\"string\">&quot;/js/**&quot;</span>,<span class=\"string\">&quot;/img/**&quot;</span>);</span><br><span class=\"line\">    registry.addInterceptor(uriInterceptor)</span><br><span class=\"line\">            .addPathPatterns(<span class=\"string\">&quot;/**&quot;</span>)</span><br><span class=\"line\">            .excludePathPatterns(<span class=\"string\">&quot;/&quot;</span>,<span class=\"string\">&quot;/css/**&quot;</span>,<span class=\"string\">&quot;/js/**&quot;</span>,<span class=\"string\">&quot;/img/**&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>过滤器和拦截器的区别（Filter和Interceptor的区别）</p>\n<p>1.过滤器Filter是Servlet的原生组件，脱离了Spring也能使用，并且被拦截后不能直接回到原来的方法中</p>\n<p>2.拦截器Interceptor是Spring处理请求的一个流程，可以使用Spring容器中的组件</p>\n<p><img src=\"/pictures/949df1adea40b3db10776a4d65c3bd53.png\" alt=\"image-20220509162643868\"></p>\n<h2 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h2><h3 id=\"依赖引入-1\"><a href=\"#依赖引入-1\" class=\"headerlink\" title=\"依赖引入\"></a>依赖引入</h3><p>Junit4用@SpringbootTest+@RunWith(SpringTest.class)来进行单元测试</p>\n<p><strong>Spring Boot 2.2.0 版本开始引入 JUnit 5 作为单元测试默认库</strong></p>\n<p>SpringBoot 2.4 以上版本移除了默认对 Vintage 的依赖。如果需要兼容JUnit4需要自行引入（不能使用JUnit4的功能 @Test）</p>\n<p>JUnit 5’s Vintage已经从spring-boot-starter-test从移除。如果需要继续兼容Junit4需要自行引入Vintage依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.junit.vintage<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit-vintage-engine<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.hamcrest<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hamcrest-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>但是其实我们也没有必要兼容Junit4，直接使用Junit5的功能即可，以org.junit.jupiter开头的就是Junit5下面的框架</p>\n<p>单元测试其实之前我们也用过：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MydemoApplicationTests</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    RedisTemplate redisTemplate;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    RedisConnectionFactory redisConnectionFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">contextLoads</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        redisTemplate.opsForValue().set(<span class=\"string\">&quot;lth&quot;</span>,<span class=\"string\">&quot;lth&quot;</span>);</span><br><span class=\"line\">        System.out.println(redisTemplate.opsForValue().get(<span class=\"string\">&quot;lth&quot;</span>));</span><br><span class=\"line\">        System.out.println(redisConnectionFactory.getClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在Test目录下，人家以及自动帮我们配置了一个测试类，我们直接在这个里面测试即可，要引入什么框架也可以直接注入</p>\n<h3 id=\"常见注解使用\"><a href=\"#常见注解使用\" class=\"headerlink\" title=\"常见注解使用\"></a>常见注解使用</h3><p>官方文档：</p>\n<p><a href=\"https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations\">https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations</a></p>\n<ul>\n<li>@Test：表示方法是测试方法。</li>\n<li>@ParameterizedTest：表示方法是参数化测试。</li>\n<li>@RepeatedTest：表示方法可重复执行，括号中可以写出重复次数。</li>\n<li>@DisplayName：为测试类或者测试方法设置展示名称，展示的名称会在控制台显示出来。</li>\n<li>@BeforeEach：表示在每个单元测试之前执行。</li>\n<li>@AfterEach：表示在每个单元测试之后执行。</li>\n<li>@BeforeAll：表示在所有单元测试之前执行，使用这个注解的方法必须是静态方法。</li>\n<li>@AfterAll：表示在所有单元测试之后执行，使用这个注解的方法必须是静态方法。</li>\n<li>@Tag：表示单元测试类别，类似于JUnit4中的@Categories。</li>\n<li>@Disabled：表示测试类或测试方法不执行，整体测试时会忽略这个方法。</li>\n<li>@Timeout：表示测试方法运行如果超过了指定时间将会返回错误，括号中可以设置超时时间和时间单位。</li>\n<li>@ExtendWith：为测试类或测试方法提供扩展类引用，例如@ExtendWith(SpringExtension.class)申明是使用Spring提供的测试组件，申明这个后就可以进行依赖注入，可以使用@SpringBootTest代替。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@DisplayName(&quot;junit5功能测试类&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Junit5Test</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@DisplayName(&quot;测试displayname注解&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testDisplayName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(jdbcTemplate);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@ParameterizedTest</span></span><br><span class=\"line\">    <span class=\"meta\">@ValueSource(strings = &#123; &quot;racecar&quot;, &quot;radar&quot;, &quot;able was I ere I saw elba&quot; &#125;)</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">palindromes</span><span class=\"params\">(String candidate)</span> &#123;</span><br><span class=\"line\">        assertTrue(StringUtils.isPalindrome(candidate));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Disabled</span></span><br><span class=\"line\">    <span class=\"meta\">@DisplayName(&quot;测试方法2&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">test2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RepeatedTest(5)</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">test3</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 规定方法超时时间。超出时间测试出异常</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> InterruptedException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Timeout(value = 500, unit = TimeUnit.MILLISECONDS)</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testTimeout</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">600</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@BeforeEach</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testBeforeEach</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;测试就要开始了...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@AfterEach</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testAfterEach</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;测试结束了...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@BeforeAll</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testBeforeAll</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;所有测试就要开始了...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@AfterAll</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testAfterAll</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;所有测试以及结束了...&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"断言\"><a href=\"#断言\" class=\"headerlink\" title=\"断言\"></a>断言</h3><p>如果满足我们给定的条件就无事发生，否则就会抛出异常，后面的代码都不会执行</p>\n<h4 id=\"简单断言\"><a href=\"#简单断言\" class=\"headerlink\" title=\"简单断言\"></a>简单断言</h4><p>方法    说明<br>assertEquals    判断两个对象或两个原始类型是否相等（调用equal方法）<br>assertNotEquals    判断两个对象或两个原始类型是否不相等<br>assertSame    判断两个对象引用是否指向同一个对象（调用==）<br>assertNotSame    判断两个对象引用是否指向不同的对象<br>assertTrue    判断给定的布尔值是否为 true<br>assertFalse    判断给定的布尔值是否为 false<br>assertNull    判断给定的对象引用是否为 null<br>assertNotNull    判断给定的对象引用是否不为 null</p>\n<h4 id=\"数组断言\"><a href=\"#数组断言\" class=\"headerlink\" title=\"数组断言\"></a>数组断言</h4><p>通过 assertArrayEquals 方法来判断两个对象或原始类型的数组是否相等。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"meta\">@DisplayName(&quot;array assertion&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">array</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tassertArrayEquals(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;, <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[] &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"组合断言\"><a href=\"#组合断言\" class=\"headerlink\" title=\"组合断言\"></a>组合断言</h4><p><code>assertAll()</code>方法接受多个 <code>org.junit.jupiter.api.Executable</code> 函数式接口的实例作为要验证的断言，可以通过 lambda 表达式很容易的提供这些断言。所有这些断言都通过了才算这个断言通过，有一个不通过就视为这个断言不通过。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"meta\">@DisplayName(&quot;assert all&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">all</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"> assertAll(<span class=\"string\">&quot;Math&quot;</span>,</span><br><span class=\"line\">    () -&gt; assertEquals(<span class=\"number\">2</span>, <span class=\"number\">1</span> + <span class=\"number\">1</span>),</span><br><span class=\"line\">    () -&gt; assertTrue(<span class=\"number\">1</span> &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\"> );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"异常断言\"><a href=\"#异常断言\" class=\"headerlink\" title=\"异常断言\"></a>异常断言</h4><p>如果不抛出指定异常则断言失败</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"meta\">@DisplayName(&quot;异常测试&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">exceptionTest</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">ArithmeticException</span> <span class=\"variable\">exception</span> <span class=\"operator\">=</span> Assertions.assertThrows(</span><br><span class=\"line\">           <span class=\"comment\">//扔出断言异常</span></span><br><span class=\"line\">            ArithmeticException.class, () -&gt; System.out.println(<span class=\"number\">1</span> % <span class=\"number\">0</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"超时断言\"><a href=\"#超时断言\" class=\"headerlink\" title=\"超时断言\"></a>超时断言</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"meta\">@DisplayName(&quot;超时测试&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">timeoutTest</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果测试方法时间超过1s将会异常</span></span><br><span class=\"line\">    Assertions.assertTimeout(Duration.ofMillis(<span class=\"number\">1000</span>), () -&gt; Thread.sleep(<span class=\"number\">500</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"快速失败\"><a href=\"#快速失败\" class=\"headerlink\" title=\"快速失败\"></a>快速失败</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"meta\">@DisplayName(&quot;fail&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">shouldFail</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tfail(<span class=\"string\">&quot;This should fail&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们使用maven的Test功能对测试类进行测试，测试完成后会生成一个汇总的报告</p>\n<h4 id=\"前置条件\"><a href=\"#前置条件\" class=\"headerlink\" title=\"前置条件\"></a>前置条件</h4><p>使用方法和断言一样，但是如果前置条件实现了，这个方法会显示被忽略而不是错误</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@DisplayName(&quot;前置条件&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AssumptionsTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">environment</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;DEV&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"meta\">@DisplayName(&quot;simple&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">simpleAssume</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        assumeTrue(Objects.equals(<span class=\"built_in\">this</span>.environment, <span class=\"string\">&quot;DEV&quot;</span>));</span><br><span class=\"line\">        assumeFalse(() -&gt; Objects.equals(<span class=\"built_in\">this</span>.environment, <span class=\"string\">&quot;PROD&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"meta\">@DisplayName(&quot;assume then do&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">assumeThenDo</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        assumingThat(</span><br><span class=\"line\">            Objects.equals(<span class=\"built_in\">this</span>.environment, <span class=\"string\">&quot;DEV&quot;</span>),</span><br><span class=\"line\">            () -&gt; System.out.println(<span class=\"string\">&quot;In DEV&quot;</span>)</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"嵌套测试\"><a href=\"#嵌套测试\" class=\"headerlink\" title=\"嵌套测试\"></a>嵌套测试</h3><p>使用@Nested注解可以在测试类的内部定义一个新的测试类，外层的测试类的@AfterEach等注解可以驱动内部的测试生效，而内部的这些注解不会驱动外部的测试类生效。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@DisplayName(&quot;A stack&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestingAStackDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Stack&lt;Object&gt; stack;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"meta\">@DisplayName(&quot;is instantiated with new Stack()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">isInstantiatedWithNew</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Nested</span></span><br><span class=\"line\">    <span class=\"meta\">@DisplayName(&quot;when new&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">WhenNew</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@BeforeEach</span></span><br><span class=\"line\">        <span class=\"keyword\">void</span> <span class=\"title function_\">createNewStack</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            stack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Test</span></span><br><span class=\"line\">        <span class=\"meta\">@DisplayName(&quot;is empty&quot;)</span></span><br><span class=\"line\">        <span class=\"keyword\">void</span> <span class=\"title function_\">isEmpty</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            assertTrue(stack.isEmpty());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Test</span></span><br><span class=\"line\">        <span class=\"meta\">@DisplayName(&quot;throws EmptyStackException when popped&quot;)</span></span><br><span class=\"line\">        <span class=\"keyword\">void</span> <span class=\"title function_\">throwsExceptionWhenPopped</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            assertThrows(EmptyStackException.class, stack::pop);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Test</span></span><br><span class=\"line\">        <span class=\"meta\">@DisplayName(&quot;throws EmptyStackException when peeked&quot;)</span></span><br><span class=\"line\">        <span class=\"keyword\">void</span> <span class=\"title function_\">throwsExceptionWhenPeeked</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            assertThrows(EmptyStackException.class, stack::peek);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Nested</span></span><br><span class=\"line\">        <span class=\"meta\">@DisplayName(&quot;after pushing an element&quot;)</span></span><br><span class=\"line\">        <span class=\"keyword\">class</span> <span class=\"title class_\">AfterPushing</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">anElement</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;an element&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@BeforeEach</span></span><br><span class=\"line\">            <span class=\"keyword\">void</span> <span class=\"title function_\">pushAnElement</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                stack.push(anElement);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Test</span></span><br><span class=\"line\">            <span class=\"meta\">@DisplayName(&quot;it is no longer empty&quot;)</span></span><br><span class=\"line\">            <span class=\"keyword\">void</span> <span class=\"title function_\">isNotEmpty</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                assertFalse(stack.isEmpty());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Test</span></span><br><span class=\"line\">            <span class=\"meta\">@DisplayName(&quot;returns the element when popped and is empty&quot;)</span></span><br><span class=\"line\">            <span class=\"keyword\">void</span> <span class=\"title function_\">returnElementWhenPopped</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                assertEquals(anElement, stack.pop());</span><br><span class=\"line\">                assertTrue(stack.isEmpty());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Test</span></span><br><span class=\"line\">            <span class=\"meta\">@DisplayName(&quot;returns the element when peeked but remains not empty&quot;)</span></span><br><span class=\"line\">            <span class=\"keyword\">void</span> <span class=\"title function_\">returnElementWhenPeeked</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                assertEquals(anElement, stack.peek());</span><br><span class=\"line\">                assertFalse(stack.isEmpty());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"指定参数来源\"><a href=\"#指定参数来源\" class=\"headerlink\" title=\"指定参数来源\"></a>指定参数来源</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ValueSource: 为参数化测试指定入参来源，支持八大基础类以及String类型,Class类型</span><br><span class=\"line\">@NullSource: 表示为参数化测试提供一个null的入参</span><br><span class=\"line\">@EnumSource: 表示为参数化测试提供一个枚举入参</span><br><span class=\"line\">@CsvFileSource：表示读取指定CSV文件内容作为参数化测试入参</span><br><span class=\"line\">@MethodSource：表示读取指定方法的返回值作为参数化测试入参(注意方法返回需要是一个流)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ParameterizedTest</span></span><br><span class=\"line\"><span class=\"meta\">@ValueSource(strings = &#123;&quot;one&quot;, &quot;two&quot;, &quot;three&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@DisplayName(&quot;参数化测试1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">parameterizedTest1</span><span class=\"params\">(String string)</span> &#123;</span><br><span class=\"line\">    System.out.println(string);</span><br><span class=\"line\">    Assertions.assertTrue(StringUtils.isNotBlank(string));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@ParameterizedTest</span></span><br><span class=\"line\"><span class=\"meta\">@MethodSource(&quot;method&quot;)</span>    <span class=\"comment\">//指定方法名</span></span><br><span class=\"line\"><span class=\"meta\">@DisplayName(&quot;方法来源参数&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testWithExplicitLocalMethodSource</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">    System.out.println(name);</span><br><span class=\"line\">    Assertions.assertNotNull(name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> Stream&lt;String&gt; <span class=\"title function_\">method</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Stream.of(<span class=\"string\">&quot;apple&quot;</span>, <span class=\"string\">&quot;banana&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"指标监控\"><a href=\"#指标监控\" class=\"headerlink\" title=\"指标监控\"></a>指标监控</h2><p>Springboot-actuator可以帮我们监控各个微服务的运行状态</p>\n<p>引入依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>引入依赖后就可以直接通过<a href=\"http://localhost:8080/actuator%E6%9D%A5%E8%8E%B7%E5%8F%96%E5%8F%AF%E4%BB%A5%E6%8B%BF%E5%88%B0%E7%9A%84%E4%BF%A1%E6%81%AF%E7%9A%84%E5%88%97%E8%A1%A8\">http://localhost:8080/actuator来获取可以拿到的信息的列表</a></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;_links&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;self&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;href&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://localhost:8080/actuator&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;templated&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;health-path&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;href&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://localhost:8080/actuator/health/&#123;*path&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;templated&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;health&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;href&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://localhost:8080/actuator/health&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;templated&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;info&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;href&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://localhost:8080/actuator/info&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;templated&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后再根据其中的网址获取我们想要的信息</p>\n<p>self代表当前访问的网址：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;self&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;href&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://localhost:8080/actuator&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;templated&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>health代表当前服务的运行状态：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;health&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;href&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://localhost:8080/actuator/health&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;templated&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;status&quot;: &quot;UP&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>UP代表正在运行状态，DOWN代表宕机</p>\n<p>info代表当前服务的信息（默认没有信息）</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;info&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;href&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://localhost:8080/actuator/info&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;templated&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>Spring默认给我密文提供了info和health两个监控端点（EndPoint），但其实还有很多我们可以监控的端点，需要我们手动开启</p>\n<p><a href=\"https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#production-ready\">https://docs.spring.io/spring-boot/docs/2.4.2/reference/htmlsingle/#production-ready</a></p>\n<p>以web的方式暴露所有端点</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\">  <span class=\"attr\">endpoints:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled-by-default:</span> <span class=\"literal\">true</span> <span class=\"comment\">#暴露所有端点信息</span></span><br><span class=\"line\">    <span class=\"attr\">web:</span></span><br><span class=\"line\">      <span class=\"attr\">exposure:</span></span><br><span class=\"line\">        <span class=\"attr\">include:</span> <span class=\"string\">&#x27;*&#x27;</span>  <span class=\"comment\">#以web方式暴露</span></span><br></pre></td></tr></table></figure>\n\n<p>查询信息的格式是：<a href=\"http://localhost:8080/actuator/%7B%E7%AB%AF%E7%82%B9%E5%90%8D%E7%A7%B0%7D/%7B%E5%85%B7%E4%BD%93%E7%9A%84%E8%B7%AF%E5%BE%84%E5%90%8D%E7%A7%B0%7D\">http://localhost:8080/actuator/{端点名称}/{具体的路径名称}</a></p>\n<p>会返回JSON格式的数据</p>\n<p>常用的端点信息：</p>\n<p>auditevents    暴露当前应用程序的审核事件信息。需要一个AuditEventRepository组件。<br>beans    显示应用程序中所有Spring Bean的完整列表。<br>caches    暴露可用的缓存。<br>conditions    显示自动配置的所有条件信息，包括匹配或不匹配的原因。<br>configprops    显示所有@ConfigurationProperties。<br>env    暴露Spring的属性ConfigurableEnvironment<br>flyway    显示已应用的所有Flyway数据库迁移。 需要一个或多个Flyway组件。<br>health    显示应用程序运行状况信息。<br>httptrace    显示HTTP跟踪信息（默认情况下，最近100个HTTP请求-响应）。需要一个HttpTraceRepository组件。<br>info    显示应用程序信息。<br>integrationgraph    显示Spring integrationgraph 。需要依赖spring-integration-core。<br>loggers    显示和修改应用程序中日志的配置。<br>liquibase    显示已应用的所有Liquibase数据库迁移。需要一个或多个Liquibase组件。<br>metrics    显示当前应用程序的“指标”信息。<br>mappings    显示所有@RequestMapping路径列表。<br>scheduledtasks    显示应用程序中的计划任务。<br>sessions    允许从Spring Session支持的会话存储中检索和删除用户会话。需要使用Spring Session的基于Servlet的Web应用程序。<br>shutdown    使应用程序正常关闭。默认禁用。<br>startup    显示由ApplicationStartup收集的启动步骤数据。需要使用SpringApplication进行配置BufferingApplicationStartup。<br>threaddump    执行线程转储。</p>\n<ul>\n<li><strong>Health：监控状况</strong></li>\n<li><strong>Metrics：运行时指标</strong></li>\n<li><strong>Loggers：日志记录</strong></li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\">  <span class=\"attr\">endpoints:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled-by-default:</span> <span class=\"literal\">true</span> <span class=\"comment\">#暴露所有端点信息</span></span><br><span class=\"line\">    <span class=\"attr\">web:</span></span><br><span class=\"line\">      <span class=\"attr\">exposure:</span></span><br><span class=\"line\">        <span class=\"attr\">include:</span> <span class=\"string\">&#x27;*&#x27;</span>  <span class=\"comment\">#以web方式暴露</span></span><br><span class=\"line\">  <span class=\"attr\">endpoint:</span></span><br><span class=\"line\">    <span class=\"attr\">health:</span> <span class=\"comment\">#对某个端点的具体配置</span></span><br><span class=\"line\">      <span class=\"attr\">show-details:</span> <span class=\"string\">always</span> <span class=\"comment\">#显示详细信息</span></span><br></pre></td></tr></table></figure>\n\n<p>我们也可以或者禁用所有的Endpoint然后手动开启指定的Endpoint：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\">  <span class=\"attr\">endpoints:</span></span><br><span class=\"line\">    <span class=\"attr\">enabled-by-default:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">endpoint:</span></span><br><span class=\"line\">    <span class=\"attr\">beans:</span></span><br><span class=\"line\">      <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">health:</span></span><br><span class=\"line\">      <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定制健康信息\"><a href=\"#定制健康信息\" class=\"headerlink\" title=\"定制健康信息\"></a>定制健康信息</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyComHealthIndicator</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractHealthIndicator</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 真实的检查方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> builder</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doHealthCheck</span><span class=\"params\">(Health.Builder builder)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">//mongodb。  获取连接进行测试</span></span><br><span class=\"line\">        Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 检查完成</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"number\">1</span> == <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\"><span class=\"comment\">//            builder.up(); //健康</span></span><br><span class=\"line\">            builder.status(Status.UP);</span><br><span class=\"line\">            map.put(<span class=\"string\">&quot;count&quot;</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">            map.put(<span class=\"string\">&quot;ms&quot;</span>,<span class=\"number\">100</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//            builder.down();</span></span><br><span class=\"line\">            builder.status(Status.OUT_OF_SERVICE);</span><br><span class=\"line\">            map.put(<span class=\"string\">&quot;err&quot;</span>,<span class=\"string\">&quot;连接超时&quot;</span>);</span><br><span class=\"line\">            map.put(<span class=\"string\">&quot;ms&quot;</span>,<span class=\"number\">3000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        builder.withDetail(<span class=\"string\">&quot;code&quot;</span>,<span class=\"number\">100</span>)</span><br><span class=\"line\">                .withDetails(map);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>builder.down() 表示不健康</p>\n<p>builde.up() 表示健康</p>\n<p>也可以用 builder.status(Status.UP);</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">builder.withDetail(<span class=\"string\">&quot;code&quot;</span>,<span class=\"number\">100</span>)</span><br><span class=\"line\">        .withDetails(map);</span><br></pre></td></tr></table></figure>\n\n<p>可以往detail中添加一些信息</p>\n<p>注意，这个组件的名字是根据类的名称来的，必须实现AbstractHealthIndicator，而且必须以HealthIndicator结尾，前面的就是组件的名称</p>\n<p>查询health：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;myCom&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;status&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;OUT_OF_SERVICE&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;details&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;code&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">100</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;err&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;连接超时&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;ms&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">3000</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定值info信息\"><a href=\"#定值info信息\" class=\"headerlink\" title=\"定值info信息\"></a>定值info信息</h3><p>可以在yml里定值，获取pom文件的值，可以使用@@来获取</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">info:</span></span><br><span class=\"line\">  <span class=\"attr\">appName:</span> <span class=\"string\">boot-admin</span></span><br><span class=\"line\">  <span class=\"attr\">version:</span> <span class=\"number\">2.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">  <span class=\"attr\">mavenProjectName:</span> <span class=\"string\">@project.artifactId@</span>  <span class=\"comment\">#使用@@可以获取maven的pom文件值</span></span><br><span class=\"line\">  <span class=\"attr\">mavenProjectVersion:</span> <span class=\"string\">@project.version@</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>可以定义一个Controller：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.actuate.info.Info;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.actuate.info.InfoContributor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExampleInfoContributor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InfoContributor</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">contribute</span><span class=\"params\">(Info.Builder builder)</span> &#123;</span><br><span class=\"line\">        builder.withDetail(<span class=\"string\">&quot;example&quot;</span>,</span><br><span class=\"line\">                Collections.singletonMap(<span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;value&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个controller的名字就没有限制了，只要继承InfoContributor并注入Spring容器中即可</p>\n<h3 id=\"定制Metrics\"><a href=\"#定制Metrics\" class=\"headerlink\" title=\"定制Metrics\"></a>定制Metrics</h3><p>这样在Metrics端点就会有myservice.method.running.counter的相关信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyService</span>&#123;</span><br><span class=\"line\">    Counter counter;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyService</span><span class=\"params\">(MeterRegistry meterRegistry)</span>&#123;</span><br><span class=\"line\">         counter = meterRegistry.counter(<span class=\"string\">&quot;myservice.method.running.counter&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">hello</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        counter.increment();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义Endpoint\"><a href=\"#自定义Endpoint\" class=\"headerlink\" title=\"自定义Endpoint\"></a>自定义Endpoint</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"comment\">//Endpoint叫container</span></span><br><span class=\"line\"><span class=\"meta\">@Endpoint(id = &quot;container&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DockerEndpoint</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//可读。不能有参数，显示的信息从这里获取</span></span><br><span class=\"line\">    <span class=\"meta\">@ReadOperation</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map <span class=\"title function_\">getDockerInfo</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Collections.singletonMap(<span class=\"string\">&quot;info&quot;</span>,<span class=\"string\">&quot;docker started...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t可写</span><br><span class=\"line\">    <span class=\"meta\">@WriteOperation</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">restartDocker</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;docker restarted....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"整合图形界面\"><a href=\"#整合图形界面\" class=\"headerlink\" title=\"整合图形界面\"></a>整合图形界面</h3><p>引入依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>de.codecentric<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在启动类加上@EnableAdminServer表示这是一个监控服务器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAdminServer</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ActuatorApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(ActuatorApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改一下server.port确保端口不冲突，例如修改为8888</p>\n<p>然后访问localhost:8888，即可看到监控页面，但是此时还没有数据，因为监控服务器也不知道要监控什么服务器，所以我们需要配置需要监控的服务器（客户端）</p>\n<p>在客户端加上：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>de.codecentric<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后设置一下配置文件：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">mydemo</span></span><br><span class=\"line\">  <span class=\"attr\">boot:</span></span><br><span class=\"line\">    <span class=\"attr\">admin:</span></span><br><span class=\"line\">      <span class=\"attr\">client:</span></span><br><span class=\"line\">        <span class=\"attr\">url:</span> <span class=\"string\">http://localhost:8888</span></span><br><span class=\"line\">        <span class=\"attr\">instance:</span></span><br><span class=\"line\">          <span class=\"attr\">prefer-ip:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>和spring-cloud配置注册中心的过程很像</p>\n<p>点开配置文件如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Name to register with. Defaults to $&#123;spring.application.name&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Value(&quot;$&#123;spring.application.name:spring-boot-application&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;spring-boot-application&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Should the registered urls be built with server.address or with hostname.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"variable\">preferIp</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Metadata that should be associated with this application</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Map&lt;String, String&gt; metadata = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedHashMap</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>\n\n<p>注意到配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Value(&quot;$&#123;spring.application.name:spring-boot-application&#125;&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;spring-boot-application&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>我们也发现可以使用@Value注解获取配置文件中的值</p>\n<p>@Value(“${spring.application.name:spring-boot-application}”) 表示获取spring.application.name这个配置项的值，如果没有就叫spring-boot-application</p>\n<p>配置完成后可以有很好看的图形界面：</p>\n<p><img src=\"/pictures/1483bd50890ef67bc276ad0b239b61c0.png\" alt=\"image-20220510213637957\"></p>\n<h2 id=\"原理解析\"><a href=\"#原理解析\" class=\"headerlink\" title=\"原理解析\"></a>原理解析</h2><h3 id=\"profile-配置文件切换\"><a href=\"#profile-配置文件切换\" class=\"headerlink\" title=\"profile 配置文件切换\"></a>profile 配置文件切换</h3><p>我们一般情况测试开发环境所用的配置文件和上线部署后用的配置文件一般不同，比如测试环境中我们可以用localhost，但是上线部署的生产环境中就需要切换到部署环境，而我们直接修改配置文件有些麻烦，所以Spring给我们提供了profile配置文件切换功能。</p>\n<p>我们先编写两种配置文件，配置文件的名字必须是application-xxx.yml，xxx是配置文件的名称（测试环境的名称）：</p>\n<p>比如：</p>\n<p>测试环境所用的配置文件：applcation-test.yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">person:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">test</span></span><br></pre></td></tr></table></figure>\n\n<p>生产环境所用的配置文件：application-prod.yml</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">person:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">prod</span></span><br></pre></td></tr></table></figure>\n\n<p>然后我们在测试用手动controller中获取配置文件的值并输出</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.demo.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 李天航</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;person.name:default&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样根据name的值就知道当前使用的是哪个配置文件</p>\n<p>name标注了@Value(“${person.name:default}”)，从配置文件中获取值，如果配置文件没有相关的配置则值默认是default（上一节也提到过）</p>\n<p>然后设置默认配置文件application.properties：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person.name=okk</span><br><span class=\"line\">spring.profiles.active=test</span><br></pre></td></tr></table></figure>\n\n<p>application.properties是一定会被加载的配置文件，其中spring.profiles.active自动用于设置当前使用哪个配置文件</p>\n<p>spring.profiles.active=test表示使用application-test.yml配置文件，得到结果test</p>\n<p>spring.profiles.active=prod表示使用application-prod.yml配置文件，得到结果prod</p>\n<p>如果application.properties和选择的yml配置文件中有同名的配置，则优先使用选择的yml中的配置，如果yml中没有配置（获取选择的配置文件不存在）则使用application.properties配置文件，如果application.properties中也没有相关的配置则使用设置的默认值（例如这里是default）</p>\n<p>打包后如果想要切换配置文件，可以在后面用–加上启动参数，启动参数的优先级最高，可以设置多个参数，参数名称和配置项的名称一致</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar demo2-0.0.1-SNAPSHOT.jar --spring.profiles.active=prod --server.port=8888</span><br></pre></td></tr></table></figure>\n\n<p>–spring.profiles.active=prod 使用prod配置文件</p>\n<p>–server.port=8888 切换端口至8888</p>\n<p>获取配置文件的信息除了可以用@Value注解，还可以使用@ConfigurationProperties注解，这个注解之前在阅读Spring源码的时候我们见过很多次，每一个自动配置类都需要一个配置类，而配置类就是使用@ConfigurationProperties注解获取到配置文件的信息</p>\n<p>例如配置文件中是这么写的：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">person:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">age:</span> <span class=\"number\">88</span></span><br></pre></td></tr></table></figure>\n\n<p>我们想要获取配置信息：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(&quot;person&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    String age;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用@ConfigurationProperties(“person”)绑定要获取的配置项，然后根据属性名称将值装配进去，需要加上@Component注解</p>\n<p>（这个注解会让idea报错，但是运行没有问题）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    Person person;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> person;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>经过测试成功得到返回值person的值</p>\n<p><img src=\"/pictures/da0266f5b88527d8c11b1e6a04cd825e.png\" alt=\"image-20220510232548151\"></p>\n<p>假如一个环境中包含多个配置文件，我们可以设置配置文件组：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring.profiles.active</span>=<span class=\"string\">production</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring.profiles.group.production[0]</span>=<span class=\"string\">proddb</span></span><br><span class=\"line\"><span class=\"attr\">spring.profiles.group.production[1]</span>=<span class=\"string\">prodmq</span></span><br></pre></td></tr></table></figure>\n\n<p>假如有个生产环境叫production，这个生产环境包含两个配置文件：proddb，prodmq，可以通过下面这两行配置实现</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring.profiles.group.production[0]</span>=<span class=\"string\">proddb</span></span><br><span class=\"line\"><span class=\"attr\">spring.profiles.group.production[1]</span>=<span class=\"string\">prodmq</span></span><br></pre></td></tr></table></figure>\n\n<p>然后选择生产环境的时候选择组即可：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring.profiles.active</span>=<span class=\"string\">production</span></span><br></pre></td></tr></table></figure>\n\n<p>选择的组中的配置文件都会生效</p>\n<h3 id=\"Profile条件装配\"><a href=\"#Profile条件装配\" class=\"headerlink\" title=\"Profile条件装配\"></a>Profile条件装配</h3><p>假如我们有一个类叫Person：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> String age;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>它有两个子类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Boss</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">    String type=<span class=\"string\">&quot;boss&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Worker</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">    String type=<span class=\"string\">&quot;worker&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试类中是</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    Person person;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> person;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们想要在test环境下返回Worker对象，在prod环境下返回Boss对象，此时Spring容器中有两个Person对象，所以Spring不知道装配哪个对象所以会报错。所以这时候可以使用条件装配，在不同的环境下选择让一些类在特性的测试环境下生效。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Profile(&quot;prod&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(&quot;person&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Boss</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">    String type=<span class=\"string\">&quot;boss&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Profile(&quot;test&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(&quot;person&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Worker</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">    String type=<span class=\"string\">&quot;worker&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>@Profile(“prod”)表示这个类只在运行环境为prod时才放入Spring容器中（并不影响编译）</p>\n<p>例如当前运行环境是test，即spring.profiles.active=test，则会返回Worker对象</p>\n<p><img src=\"/pictures/5a0e92a91297e1bc9d8c55826bf790e4.png\" alt=\"image-20220510234810086\"></p>\n<p>@Profile可以标注在带有@Bean注解的方法上来选择性在Spring容器中注册bean</p>\n<p>@Profile如果不设置value字段的值，则value字段的值默认是default，也就是默认环境下会使用的配置，不加@Profile则是在任何环境都会加载的bean。如果不激活任何环境也就是不设置spring.profiles.active的值（或者设置为default），这个值默认是default，默认会加载默认环境下的bean</p>\n<h3 id=\"配置文件加载的优先级\"><a href=\"#配置文件加载的优先级\" class=\"headerlink\" title=\"配置文件加载的优先级\"></a>配置文件加载的优先级</h3><h4 id=\"配置信息的来源\"><a href=\"#配置信息的来源\" class=\"headerlink\" title=\"配置信息的来源\"></a>配置信息的来源</h4><p>properties文件，yml文件，环境变量，命令行参数（除了环境变量外我们都使用过，下面演示环境变量）</p>\n<p>获取环境变量，使用方法就和控制台中一样，${环境变量名}：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;person.name:default&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    Person person;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;JAVA_HOME&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String JAVA_HOME;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(JAVA_HOME);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> person;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Springboot在启动的时候也会获取当前机器的环境变量和各种属性值：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo2Application</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ConfigurableApplicationContext</span> <span class=\"variable\">run</span> <span class=\"operator\">=</span> SpringApplication.run(Demo2Application.class, args);</span><br><span class=\"line\">        <span class=\"type\">ConfigurableEnvironment</span> <span class=\"variable\">environment</span> <span class=\"operator\">=</span> run.getEnvironment();</span><br><span class=\"line\">        <span class=\"comment\">//获取环境变量</span></span><br><span class=\"line\">        System.out.println(environment.getSystemEnvironment());</span><br><span class=\"line\">        <span class=\"comment\">//获取各种JVM参数和操作系统等信息</span></span><br><span class=\"line\">        System.out.println(environment.getPropertySources());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中命令行参数设置配置项的时候有一点要注意：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoApplication</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(DemoApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在启动类中SpringApplication.run(DemoApplication.class, args)一定要把args传进去，我们设置的命令行参数才能生效QWQ</p>\n<h4 id=\"配置文件的优先级\"><a href=\"#配置文件的优先级\" class=\"headerlink\" title=\"配置文件的优先级\"></a>配置文件的优先级</h4><ol>\n<li>Default properties (specified by setting SpringApplication.setDefaultProperties).</li>\n<li>@PropertySource annotations on your @Configuration classes. Please note that such property sources are not added to the Environment until the application context is being refreshed. This is too late to configure certain properties such as logging.* and spring.main.* which are read before refresh begins.</li>\n<li>Config data (such as application.properties files)</li>\n<li>A RandomValuePropertySource that has properties only in random.*.</li>\n<li>OS environment variables.</li>\n<li>Java System properties (System.getProperties()).</li>\n<li>JNDI attributes from java:comp/env.</li>\n<li>ServletContext init parameters.</li>\n<li>ServletConfig init parameters.</li>\n<li>Properties from SPRING_APPLICATION_JSON (inline JSON embedded in an environment variable or system property).</li>\n<li>Command line arguments.</li>\n<li>properties attribute on your tests. Available on @SpringBootTest and the test annotations for testing a particular slice of your application.</li>\n<li>@TestPropertySource annotations on your tests.</li>\n<li>Devtools global settings properties in the $HOME/.config/spring-boot directory when devtools is active.</li>\n</ol>\n<p>后面的会覆盖前面的同名配置项</p>\n<h4 id=\"配置文件的位置\"><a href=\"#配置文件的位置\" class=\"headerlink\" title=\"配置文件的位置\"></a>配置文件的位置</h4><ol>\n<li>classpath 根路径（resource目录是classpath的根路径）。</li>\n<li>classpath 根路径下config目录。</li>\n<li>jar包当前目录。</li>\n<li>jar包当前目录的config目录。</li>\n<li>/config子目录的直接子目录。</li>\n</ol>\n<p>后面的优先级更高</p>\n<p>我们可以使用外部配置文件来修改配置，这样就不用重新打包编译文件也能修改配置</p>\n<h4 id=\"配置文件加载顺序\"><a href=\"#配置文件加载顺序\" class=\"headerlink\" title=\"配置文件加载顺序\"></a>配置文件加载顺序</h4><ol>\n<li>当前jar包内部的application.properties和application.yml。</li>\n<li>当前jar包内部的application-{profile}.properties 和 application-{profile}.yml。</li>\n<li>引用的外部jar包的application.properties和application.yml。</li>\n<li>引用的外部jar包的application-{profile}.properties和application-{profile}.yml。</li>\n</ol>\n<p>后面的优先级更高</p>\n<p>（测试的时候不要使用idea直接运行，使用命令行来启动）</p>\n<h3 id=\"自定义starter和自动配置类\"><a href=\"#自定义starter和自动配置类\" class=\"headerlink\" title=\"自定义starter和自动配置类\"></a>自定义starter和自动配置类</h3><p>如果我们使用Spring-Initializer时，没有选择任何场景，则会自动帮我们导入</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个依赖抱哈Spring的基本功能（Spring容器和自动配置的的依赖）</p>\n<p>我们创建一个名为lth-spring-boot-starter的MAVEN项目，也就是我们自定义的starter，这这个starter中引入我们想要引入的依赖，然后其他项目想引入这些依赖时，直接引入这个starter即可</p>\n<p>这个starter没有业务逻辑，起到统合依赖的作用：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.lth<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lth-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.lth<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lth-spring-boot-starter-autoconfiguration<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个starter引入了lth-spring-boot-starter-autoconfiguration，其他项目引入这个starter时也会自动引入autoconfiguration</p>\n<p>在lth-spring-boot-starter-autoconfiguration模块中编写一些具体的业务逻辑，比如我们想要根据配置文件设置打招呼的前缀和后缀</p>\n<p>pom文件：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.lth<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lth-spring-boot-starter-autoconfiguration<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>lth-spring-boot-starter-autoconfiguration<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>lth-spring-boot-starter-autoconfiguration<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>引入依赖时是根据，这两个属性引入到项目中的</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.lth<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lth-spring-boot-starter-autoconfiguration<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们设置一个配置类来绑定依赖：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lth.bean;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(&quot;lth.hello&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloProperties</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String prefix;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String suffix;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后编写一个业务类实现具体的业务逻辑：从Spring容器中获取helloProperties，然后利用这个配置项在名称前后加上前缀和后缀</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lth.bean;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    HelloProperties helloProperties;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">helloWorld</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> helloProperties.getPrefix()+<span class=\"string\">&quot; name &quot;</span>+helloProperties.getSuffix();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是此时helloProperties并不在Spring容器中，HelloService也不在Spring容器中，我们可以通过编写自动配置类将这两个bean注入到Spring容器中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"comment\">//注入配置类</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(HelloProperties.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloAutoConfiguration</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//注入业务类</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> HelloService <span class=\"title function_\">helloService</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HelloService</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>@EnableConfigurationPropertie注解用于向Spring容器中添加配置类的bean（也就是向容器中添加一个带有@ConfigurationProperties注解的类的对象），等价于通过@Bean注解向Spring容器添加带有@ConfigurationProperties注解的bean，通过@EnableConfigurationPropertie，@Bean，@Component注解注入的bean都会经过Spring容器的自动装配，相关的注解都会生效。</p>\n<p>然后我们使用maven的lifecycle中clean，install将当前项目编译，然后安装到我们的项目中</p>\n<p>先安装自动配置类lth-spring-boot-starter-autoconfiguration，再安装我们的lth-spring-boot-starter，因为starter编译需要用到autoconfiguration的jar包，实际上我们需要将starter所引用的jar都编译好，再编译starter进行总体上的打包</p>\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DemoApplicationTests</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    HelloService helloService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">contextLoads</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(helloService.helloWorld(<span class=\"string\">&quot;LTH&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>properties配置文件：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">lth.hello.prefix</span>=<span class=\"string\">hello</span></span><br><span class=\"line\"><span class=\"attr\">lth.hello.suffix</span>=<span class=\"string\">come on</span></span><br></pre></td></tr></table></figure>\n\n<p>输出hello name come on，代表成功</p>\n<h2 id=\"补充：IOC容器的创建流程\"><a href=\"#补充：IOC容器的创建流程\" class=\"headerlink\" title=\"补充：IOC容器的创建流程\"></a>补充：IOC容器的创建流程</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">refresh</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> BeansException, IllegalStateException &#123;</span><br><span class=\"line\">       <span class=\"comment\">//上锁</span></span><br><span class=\"line\">\t<span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>.startupShutdownMonitor) &#123;</span><br><span class=\"line\">           <span class=\"comment\">//通知监听器开始创建IOC容器</span></span><br><span class=\"line\">\t\t<span class=\"type\">StartupStep</span> <span class=\"variable\">contextRefresh</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.applicationStartup.start(<span class=\"string\">&quot;spring.context.refresh&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//创建容器前的预处理</span></span><br><span class=\"line\">\t\tprepareRefresh();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class=\"line\">\t\t<span class=\"type\">ConfigurableListableBeanFactory</span> <span class=\"variable\">beanFactory</span> <span class=\"operator\">=</span> obtainFreshBeanFactory();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Prepare the bean factory for use in this context.</span></span><br><span class=\"line\">\t\tprepareBeanFactory(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class=\"line\">\t\t\tpostProcessBeanFactory(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"type\">StartupStep</span> <span class=\"variable\">beanPostProcess</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.applicationStartup.start(<span class=\"string\">&quot;spring.context.beans.post-process&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Invoke factory processors registered as beans in the context.</span></span><br><span class=\"line\">\t\t\tinvokeBeanFactoryPostProcessors(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Register bean processors that intercept bean creation.</span></span><br><span class=\"line\">\t\t\tregisterBeanPostProcessors(beanFactory);</span><br><span class=\"line\">\t\t\tbeanPostProcess.end();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Initialize message source for this context.</span></span><br><span class=\"line\">\t\t\tinitMessageSource();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Initialize event multicaster for this context.</span></span><br><span class=\"line\">\t\t\tinitApplicationEventMulticaster();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Initialize other special beans in specific context subclasses.</span></span><br><span class=\"line\">\t\t\tonRefresh();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Check for listener beans and register them.</span></span><br><span class=\"line\">\t\t\tregisterListeners();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class=\"line\">\t\t\tfinishBeanFactoryInitialization(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Last step: publish corresponding event.</span></span><br><span class=\"line\">\t\t\tfinishRefresh();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (BeansException ex) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.warn(<span class=\"string\">&quot;Exception encountered during context initialization - &quot;</span> +</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"string\">&quot;cancelling refresh attempt: &quot;</span> + ex);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class=\"line\">\t\t\tdestroyBeans();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Reset &#x27;active&#x27; flag.</span></span><br><span class=\"line\">\t\t\tcancelRefresh(ex);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Propagate exception to caller.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Reset common introspection caches in Spring&#x27;s core, since we</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// might not ever need metadata for singleton beans anymore...</span></span><br><span class=\"line\">\t\t\tresetCommonCaches();</span><br><span class=\"line\">\t\t\tcontextRefresh.end();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-预处理前的初始化prepareRefresh\"><a href=\"#1-预处理前的初始化prepareRefresh\" class=\"headerlink\" title=\"1. 预处理前的初始化prepareRefresh()\"></a>1. 预处理前的初始化prepareRefresh()</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">prepareRefresh</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//记录时间</span></span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.startupDate = System.currentTimeMillis();</span><br><span class=\"line\">       <span class=\"comment\">//设置状态，表示激活IOC容器</span></span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.closed.set(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.active.set(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.trace(<span class=\"string\">&quot;Refreshing &quot;</span> + <span class=\"built_in\">this</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tlogger.debug(<span class=\"string\">&quot;Refreshing &quot;</span> + getDisplayName());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Initialize any placeholder property sources in the context environment.</span></span><br><span class=\"line\">       <span class=\"comment\">//初始化属性设置(默认为空，我们可以重写这个方法)</span></span><br><span class=\"line\">\tinitPropertySources();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//验证一些必须的属性是否合法</span></span><br><span class=\"line\">\tgetEnvironment().validateRequiredProperties();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//将早期事件监听器注册为监听器，并清空早期事件</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.earlyApplicationListeners == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.earlyApplicationListeners = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedHashSet</span>&lt;&gt;(<span class=\"built_in\">this</span>.applicationListeners);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Reset local application listeners to pre-refresh state.</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.applicationListeners.clear();</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.applicationListeners.addAll(<span class=\"built_in\">this</span>.earlyApplicationListeners);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Allow for the collection of early ApplicationEvents,</span></span><br><span class=\"line\">\t<span class=\"comment\">// to be published once the multicaster is available...</span></span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.earlyApplicationEvents = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedHashSet</span>&lt;&gt;();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-创建bean工厂beanFactories\"><a href=\"#2-创建bean工厂beanFactories\" class=\"headerlink\" title=\"2.创建bean工厂beanFactories\"></a>2.创建bean工厂beanFactories</h3><h3 id=\"ConfigurableListableBeanFactory-beanFactory-obtainFreshBeanFactory\"><a href=\"#ConfigurableListableBeanFactory-beanFactory-obtainFreshBeanFactory\" class=\"headerlink\" title=\"ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory()\"></a>ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory()</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> ConfigurableListableBeanFactory <span class=\"title function_\">obtainFreshBeanFactory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//创建bean工厂</span></span><br><span class=\"line\">\trefreshBeanFactory();</span><br><span class=\"line\">       <span class=\"comment\">//获取刚才创建的bean工厂并返回</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> getBeanFactory();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建的beanFactory的类型是DefaultListableBeanFactory，也就是默认bean工厂</p>\n<h3 id=\"3-准备bean工厂prepareBeanFactory-beanFactory\"><a href=\"#3-准备bean工厂prepareBeanFactory-beanFactory\" class=\"headerlink\" title=\"3.准备bean工厂prepareBeanFactory(beanFactory)\"></a>3.准备bean工厂prepareBeanFactory(beanFactory)</h3><p>在这个方法中，向bean工厂设置一些属性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">prepareBeanFactory</span><span class=\"params\">(ConfigurableListableBeanFactory beanFactory)</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Tell the internal bean factory to use the context&#x27;s class loader etc.</span></span><br><span class=\"line\">       <span class=\"comment\">//设置类加载器</span></span><br><span class=\"line\">\tbeanFactory.setBeanClassLoader(getClassLoader());</span><br><span class=\"line\">       <span class=\"comment\">//设置表达式解析器</span></span><br><span class=\"line\">\tbeanFactory.setBeanExpressionResolver(<span class=\"keyword\">new</span> <span class=\"title class_\">StandardBeanExpressionResolver</span>(beanFactory.getBeanClassLoader()));</span><br><span class=\"line\">\tbeanFactory.addPropertyEditorRegistrar(<span class=\"keyword\">new</span> <span class=\"title class_\">ResourceEditorRegistrar</span>(<span class=\"built_in\">this</span>, getEnvironment()));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Configure the bean factory with context callbacks.</span></span><br><span class=\"line\">\tbeanFactory.addBeanPostProcessor(<span class=\"keyword\">new</span> <span class=\"title class_\">ApplicationContextAwareProcessor</span>(<span class=\"built_in\">this</span>));</span><br><span class=\"line\">\tbeanFactory.ignoreDependencyInterface(EnvironmentAware.class);</span><br><span class=\"line\">\tbeanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class);</span><br><span class=\"line\">\tbeanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);</span><br><span class=\"line\">\tbeanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);</span><br><span class=\"line\">\tbeanFactory.ignoreDependencyInterface(MessageSourceAware.class);</span><br><span class=\"line\">\tbeanFactory.ignoreDependencyInterface(ApplicationContextAware.class);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// BeanFactory interface not registered as resolvable type in a plain factory.</span></span><br><span class=\"line\">\t<span class=\"comment\">// MessageSource registered (and found for autowiring) as a bean.</span></span><br><span class=\"line\">\tbeanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);</span><br><span class=\"line\">\tbeanFactory.registerResolvableDependency(ResourceLoader.class, <span class=\"built_in\">this</span>);</span><br><span class=\"line\">\tbeanFactory.registerResolvableDependency(ApplicationEventPublisher.class, <span class=\"built_in\">this</span>);</span><br><span class=\"line\">\tbeanFactory.registerResolvableDependency(ApplicationContext.class, <span class=\"built_in\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Register early post-processor for detecting inner beans as ApplicationListeners.</span></span><br><span class=\"line\">\tbeanFactory.addBeanPostProcessor(<span class=\"keyword\">new</span> <span class=\"title class_\">ApplicationListenerDetector</span>(<span class=\"built_in\">this</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Detect a LoadTimeWeaver and prepare for weaving, if found.</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;</span><br><span class=\"line\">\t\tbeanFactory.addBeanPostProcessor(<span class=\"keyword\">new</span> <span class=\"title class_\">LoadTimeWeaverAwareProcessor</span>(beanFactory));</span><br><span class=\"line\">\t\t<span class=\"comment\">// Set a temporary ClassLoader for type matching.</span></span><br><span class=\"line\">\t\tbeanFactory.setTempClassLoader(<span class=\"keyword\">new</span> <span class=\"title class_\">ContextTypeMatchClassLoader</span>(beanFactory.getBeanClassLoader()));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Register default environment beans.</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!beanFactory.containsLocalBean(ENVIRONMENT_BEAN_NAME)) &#123;</span><br><span class=\"line\">\t\tbeanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!beanFactory.containsLocalBean(SYSTEM_PROPERTIES_BEAN_NAME)) &#123;</span><br><span class=\"line\">\t\tbeanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!beanFactory.containsLocalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) &#123;</span><br><span class=\"line\">\t\tbeanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-设置加载bean所需的工具类\"><a href=\"#1-设置加载bean所需的工具类\" class=\"headerlink\" title=\"1.设置加载bean所需的工具类\"></a>1.设置加载bean所需的工具类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//类加载器</span></span><br><span class=\"line\">beanFactory.setBeanClassLoader(getClassLoader());</span><br><span class=\"line\"><span class=\"comment\">//表达式解析器</span></span><br><span class=\"line\">\t\tbeanFactory.setBeanExpressionResolver(<span class=\"keyword\">new</span> <span class=\"title class_\">StandardBeanExpressionResolver</span>(beanFactory.getBeanClassLoader()));</span><br><span class=\"line\"><span class=\"comment\">//属性编辑器</span></span><br><span class=\"line\">\t\tbeanFactory.addPropertyEditorRegistrar(<span class=\"keyword\">new</span> <span class=\"title class_\">ResourceEditorRegistrar</span>(<span class=\"built_in\">this</span>, getEnvironment()));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-设置一些回调方法\"><a href=\"#2-设置一些回调方法\" class=\"headerlink\" title=\"2.设置一些回调方法\"></a>2.设置一些回调方法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beanFactory.addBeanPostProcessor(<span class=\"keyword\">new</span> <span class=\"title class_\">ApplicationContextAwareProcessor</span>(<span class=\"built_in\">this</span>));</span><br><span class=\"line\">beanFactory.ignoreDependencyInterface(EnvironmentAware.class);</span><br><span class=\"line\">beanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class);</span><br><span class=\"line\">beanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);</span><br><span class=\"line\">beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);</span><br><span class=\"line\">beanFactory.ignoreDependencyInterface(MessageSourceAware.class);</span><br><span class=\"line\">beanFactory.ignoreDependencyInterface(ApplicationContextAware.class);</span><br></pre></td></tr></table></figure>\n\n<p>放入ApplicationContextAwareProcessor（添加部分beanPostProcessor）</p>\n<p>忽略以这些接口创建的bean：EnvironmentAware，EmbeddedValueResolverAware，ResourceLoaderAware，ApplicationEventPublisherAware，MessageSourceAware，ApplicationContextAware</p>\n<h4 id=\"3-设置可以通过自动装配获取的bean（-Autowire，-Resource）\"><a href=\"#3-设置可以通过自动装配获取的bean（-Autowire，-Resource）\" class=\"headerlink\" title=\"3.设置可以通过自动装配获取的bean（@Autowire，@Resource）\"></a>3.设置可以通过自动装配获取的bean（@Autowire，@Resource）</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);</span><br><span class=\"line\">beanFactory.registerResolvableDependency(ResourceLoader.class, this);</span><br><span class=\"line\">beanFactory.registerResolvableDependency(ApplicationEventPublisher.class, this);</span><br><span class=\"line\">beanFactory.registerResolvableDependency(ApplicationContext.class, this);</span><br></pre></td></tr></table></figure>\n\n<p>可以通过自动装配拿到BeanFactory（bean工厂），ResourceLoader（资源加载器），ApplicationEventPublisher（事件推送器），ApplicationContext（IOC容器）</p>\n<h4 id=\"4-注册ApplicationListenerDetector\"><a href=\"#4-注册ApplicationListenerDetector\" class=\"headerlink\" title=\"4.注册ApplicationListenerDetector\"></a>4.注册ApplicationListenerDetector</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Register early post-processor for detecting inner beans as ApplicationListeners.</span><br><span class=\"line\">beanFactory.addBeanPostProcessor(new ApplicationListenerDetector(this));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-添加AspectJ动态代理的支持\"><a href=\"#5-添加AspectJ动态代理的支持\" class=\"headerlink\" title=\"5.添加AspectJ动态代理的支持\"></a>5.添加AspectJ动态代理的支持</h4><h4 id=\"6-注册和环境（系统属性，环境变量）相关的组件\"><a href=\"#6-注册和环境（系统属性，环境变量）相关的组件\" class=\"headerlink\" title=\"6.注册和环境（系统属性，环境变量）相关的组件\"></a>6.注册和环境（系统属性，环境变量）相关的组件</h4><h3 id=\"4-进行bean工厂创建完成后的后置处理\"><a href=\"#4-进行bean工厂创建完成后的后置处理\" class=\"headerlink\" title=\"4.进行bean工厂创建完成后的后置处理\"></a>4.进行bean工厂创建完成后的后置处理</h3><p>postProcessBeanFactory(beanFactory)</p>\n<p>这个方法默认为空，我们重写这个方法，在beanFactory加载完成后进行一些操作</p>\n<p>====================================通过以上方法完成了beanFactory的创建和预处理工作=========================</p>\n<h3 id=\"5-执行所有的BeanFactoryPostProcessors\"><a href=\"#5-执行所有的BeanFactoryPostProcessors\" class=\"headerlink\" title=\"5.执行所有的BeanFactoryPostProcessors\"></a>5.执行所有的BeanFactoryPostProcessors</h3><p>invokeBeanFactoryPostProcessors</p>\n<p>在beanFactory标准初始化完成后执行这个这个方法</p>\n<p>两个接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">invokeBeanFactoryPostProcessors</span><span class=\"params\">(ConfigurableListableBeanFactory beanFactory)</span> &#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">\tPostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Detect a LoadTimeWeaver and prepare for weaving, if found in the meantime</span></span><br><span class=\"line\">\t<span class=\"comment\">// (e.g. through an @Bean method registered by ConfigurationClassPostProcessor)</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (beanFactory.getTempClassLoader() == <span class=\"literal\">null</span> &amp;&amp; beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;</span><br><span class=\"line\">\t\tbeanFactory.addBeanPostProcessor(<span class=\"keyword\">new</span> <span class=\"title class_\">LoadTimeWeaverAwareProcessor</span>(beanFactory));</span><br><span class=\"line\">\t\tbeanFactory.setTempClassLoader(<span class=\"keyword\">new</span> <span class=\"title class_\">ContextTypeMatchClassLoader</span>(beanFactory.getBeanClassLoader()));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-执行所有BeanFactoryPostProcessors\"><a href=\"#1-执行所有BeanFactoryPostProcessors\" class=\"headerlink\" title=\"1.执行所有BeanFactoryPostProcessors\"></a>1.执行所有BeanFactoryPostProcessors</h4><h5 id=\"1-获取所有的BeanFactoryPostProcessor\"><a href=\"#1-获取所有的BeanFactoryPostProcessor\" class=\"headerlink\" title=\"1.获取所有的BeanFactoryPostProcessor\"></a>1.获取所有的BeanFactoryPostProcessor</h5><h5 id=\"2-优先执行实现了PriorityOrdered接口的BeanDefinitionRegistryPostProcessor\"><a href=\"#2-优先执行实现了PriorityOrdered接口的BeanDefinitionRegistryPostProcessor\" class=\"headerlink\" title=\"2.优先执行实现了PriorityOrdered接口的BeanDefinitionRegistryPostProcessor\"></a>2.优先执行实现了PriorityOrdered接口的BeanDefinitionRegistryPostProcessor</h5><h5 id=\"3-然后执行实现了Order接口的BeanDefinitionRegistryPostProcessor\"><a href=\"#3-然后执行实现了Order接口的BeanDefinitionRegistryPostProcessor\" class=\"headerlink\" title=\"3.然后执行实现了Order接口的BeanDefinitionRegistryPostProcessor\"></a>3.然后执行实现了Order接口的BeanDefinitionRegistryPostProcessor</h5><h5 id=\"4-执行剩下的BeanDefinitionRegistryPostProcessor\"><a href=\"#4-执行剩下的BeanDefinitionRegistryPostProcessor\" class=\"headerlink\" title=\"4.执行剩下的BeanDefinitionRegistryPostProcessor\"></a>4.执行剩下的BeanDefinitionRegistryPostProcessor</h5><h5 id=\"5-获取所有的BeanFactoryPostProcessor\"><a href=\"#5-获取所有的BeanFactoryPostProcessor\" class=\"headerlink\" title=\"5.获取所有的BeanFactoryPostProcessor\"></a>5.获取所有的BeanFactoryPostProcessor</h5><h5 id=\"6-依次执行实现了PriorityOrdered，Order，没实现接口的BeanFactoryPostProcessor\"><a href=\"#6-依次执行实现了PriorityOrdered，Order，没实现接口的BeanFactoryPostProcessor\" class=\"headerlink\" title=\"6.依次执行实现了PriorityOrdered，Order，没实现接口的BeanFactoryPostProcessor\"></a>6.依次执行实现了PriorityOrdered，Order，没实现接口的BeanFactoryPostProcessor</h5><h3 id=\"6-注册bean的后置处理器\"><a href=\"#6-注册bean的后置处理器\" class=\"headerlink\" title=\"6.注册bean的后置处理器\"></a>6.注册bean的后置处理器</h3><p>registerBeanPostProcessors(beanFactory);</p>\n<p>也是依次注册实现了PriorityOrdered接口，实现了Order接口，没有实现任何接口的BeanFactoryPostProcessor</p>\n<p>然后注册MergedBeanDefinitionPostProcessor和ApplicationListenerDetector</p>\n<h3 id=\"7-初始化消息（消息绑定，消息解析）\"><a href=\"#7-初始化消息（消息绑定，消息解析）\" class=\"headerlink\" title=\"7.初始化消息（消息绑定，消息解析）\"></a>7.初始化消息（消息绑定，消息解析）</h3><p>initMessageSource</p>\n<p>如果容器中有MessageSource，则赋值给MessageSource，如果没有则自己创建一个默认的对象</p>\n<p>MessageSource：取出某个key的值，安装区域获取值</p>\n<p>然后将MessageSource注册进Spring容器中，然后我们就能通过自动装配得到MessageSource</p>\n<h3 id=\"8-初始化事件派发器\"><a href=\"#8-初始化事件派发器\" class=\"headerlink\" title=\"8.初始化事件派发器\"></a>8.初始化事件派发器</h3><p>initApplicationEventMulticaster()</p>\n<p>1.获取BeanFactory</p>\n<p>2.从容器中获取applicationEventMulticaster，如果没有就创建一个SimpleApplicationEventMulticaster并注册进Spring容器</p>\n<h3 id=\"9-刷新容器onRefresh\"><a href=\"#9-刷新容器onRefresh\" class=\"headerlink\" title=\"9.刷新容器onRefresh()\"></a>9.刷新容器onRefresh()</h3><p>onRefresh()默认为空，留给我们来实现</p>\n<h3 id=\"10-注册事件派发器\"><a href=\"#10-注册事件派发器\" class=\"headerlink\" title=\"10.注册事件派发器\"></a>10.注册事件派发器</h3><p>获取所有的事件监听器，去重后将所有的监听器注册进事件派发器</p>\n<p>派发之前步骤产生的事件earlyApplicationEvents</p>\n<h3 id=\"11-初始化所有所有单实例bean\"><a href=\"#11-初始化所有所有单实例bean\" class=\"headerlink\" title=\"11.初始化所有所有单实例bean\"></a>11.初始化所有所有单实例bean</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">finishBeanFactoryInitialization</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">finishBeanFactoryInitialization</span><span class=\"params\">(ConfigurableListableBeanFactory beanFactory)</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Initialize conversion service for this context.</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &amp;&amp;</span><br><span class=\"line\">\t\t\tbeanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) &#123;</span><br><span class=\"line\">\t\tbeanFactory.setConversionService(</span><br><span class=\"line\">\t\t\t\tbeanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Register a default embedded value resolver if no BeanFactoryPostProcessor</span></span><br><span class=\"line\">\t<span class=\"comment\">// (such as a PropertySourcesPlaceholderConfigurer bean) registered any before:</span></span><br><span class=\"line\">\t<span class=\"comment\">// at this point, primarily for resolution in annotation attribute values.</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!beanFactory.hasEmbeddedValueResolver()) &#123;</span><br><span class=\"line\">\t\tbeanFactory.addEmbeddedValueResolver(strVal -&gt; getEnvironment().resolvePlaceholders(strVal));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.</span></span><br><span class=\"line\">\tString[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (String weaverAwareName : weaverAwareNames) &#123;</span><br><span class=\"line\">\t\tgetBean(weaverAwareName);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Stop using the temporary ClassLoader for type matching.</span></span><br><span class=\"line\">\tbeanFactory.setTempClassLoader(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Allow for caching all bean definition metadata, not expecting further changes.</span></span><br><span class=\"line\">\tbeanFactory.freezeConfiguration();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class=\"line\">\tbeanFactory.preInstantiateSingletons();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法的核心语句是beanFactory.preInstantiateSingletons()，预加载单实例bean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">preInstantiateSingletons</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> BeansException &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\tlogger.trace(<span class=\"string\">&quot;Pre-instantiating singletons in &quot;</span> + <span class=\"built_in\">this</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//拿到所有bean的定义信息</span></span><br><span class=\"line\">\tList&lt;String&gt; beanNames = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(<span class=\"built_in\">this</span>.beanDefinitionNames);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Trigger initialization of all non-lazy singleton beans...</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (String beanName : beanNames) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">RootBeanDefinition</span> <span class=\"variable\">bd</span> <span class=\"operator\">=</span> getMergedLocalBeanDefinition(beanName);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!bd.isAbstract() &amp;&amp; bd.isSingleton() &amp;&amp; !bd.isLazyInit()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isFactoryBean(beanName)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">Object</span> <span class=\"variable\">bean</span> <span class=\"operator\">=</span> getBean(FACTORY_BEAN_PREFIX + beanName);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> FactoryBean) &#123;</span><br><span class=\"line\">\t\t\t\t\tFactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) bean;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"type\">boolean</span> isEagerInit;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (System.getSecurityManager() != <span class=\"literal\">null</span> &amp;&amp; factory <span class=\"keyword\">instanceof</span> SmartFactoryBean) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tisEagerInit = AccessController.doPrivileged(</span><br><span class=\"line\">\t\t\t\t\t\t\t\t(PrivilegedAction&lt;Boolean&gt;) ((SmartFactoryBean&lt;?&gt;) factory)::isEagerInit,</span><br><span class=\"line\">\t\t\t\t\t\t\t\tgetAccessControlContext());</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\tisEagerInit = (factory <span class=\"keyword\">instanceof</span> SmartFactoryBean &amp;&amp;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t((SmartFactoryBean&lt;?&gt;) factory).isEagerInit());</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (isEagerInit) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tgetBean(beanName);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tgetBean(beanName);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Trigger post-initialization callback for all applicable beans...</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (String beanName : beanNames) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">Object</span> <span class=\"variable\">singletonInstance</span> <span class=\"operator\">=</span> getSingleton(beanName);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (singletonInstance <span class=\"keyword\">instanceof</span> SmartInitializingSingleton) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">SmartInitializingSingleton</span> <span class=\"variable\">smartSingleton</span> <span class=\"operator\">=</span> (SmartInitializingSingleton) singletonInstance;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (System.getSecurityManager() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tAccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class=\"line\">\t\t\t\t\tsmartSingleton.afterSingletonsInstantiated();</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t\t\t&#125;, getAccessControlContext());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tsmartSingleton.afterSingletonsInstantiated();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-preInstantiateSingletons\"><a href=\"#1-preInstantiateSingletons\" class=\"headerlink\" title=\"1.preInstantiateSingletons\"></a>1.preInstantiateSingletons</h4><h5 id=\"1-拿到扫描路径下所有带有-Controller，-Service，-Repository，-Configuration，-Component等向Spring容器中注册组件的注解的类的信息\"><a href=\"#1-拿到扫描路径下所有带有-Controller，-Service，-Repository，-Configuration，-Component等向Spring容器中注册组件的注解的类的信息\" class=\"headerlink\" title=\"1.拿到扫描路径下所有带有@Controller，@Service，@Repository，@Configuration，@Component等向Spring容器中注册组件的注解的类的信息\"></a>1.拿到扫描路径下所有带有@Controller，@Service，@Repository，@Configuration，@Component等向Spring容器中注册组件的注解的类的信息</h5><p><img src=\"/pictures/189200b12b1d1c8ec72936c1539a4d80.png\" alt=\"image-20220512223534964\"></p>\n<p>如上图所示，包含Spring容器中默认加载的组件和我们自己编写的</p>\n<h5 id=\"2-遍历所有的bean的全限定名，创建和初始化对应的对象\"><a href=\"#2-遍历所有的bean的全限定名，创建和初始化对应的对象\" class=\"headerlink\" title=\"2.遍历所有的bean的全限定名，创建和初始化对应的对象\"></a>2.遍历所有的bean的全限定名，创建和初始化对应的对象</h5><ul>\n<li>拿到一个类的全限定名beanName</li>\n<li>获取这个类的定义信息RootBeanDefinition</li>\n</ul>\n<p>RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName)</p>\n<p><img src=\"/pictures/f0b2393a61b48e7f903b136fab5d1a19.png\" alt=\"image-20220512232616126\"></p>\n<ul>\n<li>如果这个bean不是抽象的，也不是单实例的，也不是懒加载的<ul>\n<li>然后判断是不是FactoryBean</li>\n<li>如果是FactoryBean，则使用FactoryBean的getObect方法创建bean</li>\n<li>如果不是FactoryBean，则使用getBean方法创建对象，getBean调用下面的doGetBean方法</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> &lt;T&gt; T <span class=\"title function_\">doGetBean</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">      String name, <span class=\"meta\">@Nullable</span> Class&lt;T&gt; requiredType, <span class=\"meta\">@Nullable</span> Object[] args, <span class=\"type\">boolean</span> typeCheckOnly)</span></span><br><span class=\"line\">      <span class=\"keyword\">throws</span> BeansException &#123;</span><br><span class=\"line\">   <span class=\"comment\">//拿到bean的名称</span></span><br><span class=\"line\">   <span class=\"type\">String</span> <span class=\"variable\">beanName</span> <span class=\"operator\">=</span> transformedBeanName(name);</span><br><span class=\"line\">   Object bean;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//从缓存中获取单实例bean，如果能获取到说明已经被创建过了</span></span><br><span class=\"line\">   <span class=\"type\">Object</span> <span class=\"variable\">sharedInstance</span> <span class=\"operator\">=</span> getSingleton(beanName);</span><br><span class=\"line\">    <span class=\"comment\">//如果缓存中拿不到(不是调用了beanFactory创建bean了吗为什么拿不到，这里先伏笔一下)</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (sharedInstance != <span class=\"literal\">null</span> &amp;&amp; args == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class=\"line\">            logger.trace(<span class=\"string\">&quot;Returning eagerly cached instance of singleton bean &#x27;&quot;</span> + beanName +</span><br><span class=\"line\">                  <span class=\"string\">&quot;&#x27; that is not fully initialized yet - a consequence of a circular reference&quot;</span>);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            logger.trace(<span class=\"string\">&quot;Returning cached instance of singleton bean &#x27;&quot;</span> + beanName + <span class=\"string\">&quot;&#x27;&quot;</span>);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      bean = getObjectForBeanInstance(sharedInstance, name, beanName, <span class=\"literal\">null</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Fail if we&#x27;re already creating this bean instance:</span></span><br><span class=\"line\">      <span class=\"comment\">// We&#x27;re assumably within a circular reference.</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isPrototypeCurrentlyInCreation(beanName)) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BeanCurrentlyInCreationException</span>(beanName);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Check if bean definition exists in this factory.</span></span><br><span class=\"line\">      <span class=\"comment\">//拿到父工厂(如果有的话)</span></span><br><span class=\"line\">      <span class=\"type\">BeanFactory</span> <span class=\"variable\">parentBeanFactory</span> <span class=\"operator\">=</span> getParentBeanFactory();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (parentBeanFactory != <span class=\"literal\">null</span> &amp;&amp; !containsBeanDefinition(beanName)) &#123;</span><br><span class=\"line\">         <span class=\"comment\">// Not found -&gt; check parent.</span></span><br><span class=\"line\">         <span class=\"type\">String</span> <span class=\"variable\">nameToLookup</span> <span class=\"operator\">=</span> originalBeanName(name);</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (parentBeanFactory <span class=\"keyword\">instanceof</span> AbstractBeanFactory) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ((AbstractBeanFactory) parentBeanFactory).doGetBean(</span><br><span class=\"line\">                  nameToLookup, requiredType, args, typeCheckOnly);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (args != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Delegation to parent with explicit args.</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> (T) parentBeanFactory.getBean(nameToLookup, args);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (requiredType != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// No args -&gt; delegate to standard getBean method.</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> parentBeanFactory.getBean(nameToLookup, requiredType);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (T) parentBeanFactory.getBean(nameToLookup);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!typeCheckOnly) &#123;</span><br><span class=\"line\">         <span class=\"comment\">//标记当前bean已经被创建了，防止多个线程创建bean</span></span><br><span class=\"line\">         markBeanAsCreated(beanName);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">         <span class=\"comment\">//获取bean的定义信息</span></span><br><span class=\"line\">         <span class=\"type\">RootBeanDefinition</span> <span class=\"variable\">mbd</span> <span class=\"operator\">=</span> getMergedLocalBeanDefinition(beanName);</span><br><span class=\"line\">         checkMergedBeanDefinition(mbd, beanName, args);</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Guarantee initialization of beans that the current bean depends on.</span></span><br><span class=\"line\">          <span class=\"comment\">//获取当前bean依赖的其他bean</span></span><br><span class=\"line\">         String[] dependsOn = mbd.getDependsOn();</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (dependsOn != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果当前有依赖的bean，则遍历所有依赖的bean,创建所有依赖的bean</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String dep : dependsOn) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (isDependent(beanName, dep)) &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BeanCreationException</span>(mbd.getResourceDescription(), beanName,</span><br><span class=\"line\">                        <span class=\"string\">&quot;Circular depends-on relationship between &#x27;&quot;</span> + beanName + <span class=\"string\">&quot;&#x27; and &#x27;&quot;</span> + dep + <span class=\"string\">&quot;&#x27;&quot;</span>);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               registerDependentBean(dep, beanName);</span><br><span class=\"line\">               <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                  <span class=\"comment\">//尝试获取或者创建所依赖的bean(这里发生了递归)</span></span><br><span class=\"line\">                  getBean(dep);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BeanCreationException</span>(mbd.getResourceDescription(), beanName,</span><br><span class=\"line\">                        <span class=\"string\">&quot;&#x27;&quot;</span> + beanName + <span class=\"string\">&quot;&#x27; depends on missing bean &#x27;&quot;</span> + dep + <span class=\"string\">&quot;&#x27;&quot;</span>, ex);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Create bean instance.</span></span><br><span class=\"line\">         <span class=\"comment\">//如果这是一个单实例bean，则采用单实例bean的创建方法</span></span><br><span class=\"line\">         <span class=\"keyword\">if</span> (mbd.isSingleton()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//调用getSingleton方法(上面也调用这个方法)创建或者从一二级缓存中获取bean，这里的lamda表达式省略的是beanFactory的getObject方法</span></span><br><span class=\"line\">            sharedInstance = getSingleton(beanName, () -&gt; &#123;</span><br><span class=\"line\">               <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                   <span class=\"comment\">//调用createBean方法创建bean</span></span><br><span class=\"line\">                  <span class=\"keyword\">return</span> createBean(beanName, mbd, args);</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">catch</span> (BeansException ex) &#123;</span><br><span class=\"line\">                  <span class=\"comment\">// Explicitly remove instance from singleton cache: It might have been put there</span></span><br><span class=\"line\">                  <span class=\"comment\">// eagerly by the creation process, to allow for circular reference resolution.</span></span><br><span class=\"line\">                  <span class=\"comment\">// Also remove any beans that received a temporary reference to the bean.</span></span><br><span class=\"line\">                  destroySingleton(beanName);</span><br><span class=\"line\">                  <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mbd.isPrototype()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// It&#x27;s a prototype -&gt; create a new instance.</span></span><br><span class=\"line\">            <span class=\"type\">Object</span> <span class=\"variable\">prototypeInstance</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">               beforePrototypeCreation(beanName);</span><br><span class=\"line\">               prototypeInstance = createBean(beanName, mbd, args);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">               afterPrototypeCreation(beanName);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">scopeName</span> <span class=\"operator\">=</span> mbd.getScope();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!StringUtils.hasLength(scopeName)) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalStateException</span>(<span class=\"string\">&quot;No scope name defined for bean ´&quot;</span> + beanName + <span class=\"string\">&quot;&#x27;&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"type\">Scope</span> <span class=\"variable\">scope</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.scopes.get(scopeName);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (scope == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalStateException</span>(<span class=\"string\">&quot;No Scope registered for scope name &#x27;&quot;</span> + scopeName + <span class=\"string\">&quot;&#x27;&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">               <span class=\"type\">Object</span> <span class=\"variable\">scopedInstance</span> <span class=\"operator\">=</span> scope.get(beanName, () -&gt; &#123;</span><br><span class=\"line\">                  beforePrototypeCreation(beanName);</span><br><span class=\"line\">                  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                     <span class=\"keyword\">return</span> createBean(beanName, mbd, args);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                  <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                     afterPrototypeCreation(beanName);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">               &#125;);</span><br><span class=\"line\">               bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> (IllegalStateException ex) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BeanCreationException</span>(beanName,</span><br><span class=\"line\">                     <span class=\"string\">&quot;Scope &#x27;&quot;</span> + scopeName + <span class=\"string\">&quot;&#x27; is not active for the current thread; consider &quot;</span> +</span><br><span class=\"line\">                     <span class=\"string\">&quot;defining a scoped proxy for this bean if you intend to refer to it from a singleton&quot;</span>,</span><br><span class=\"line\">                     ex);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">catch</span> (BeansException ex) &#123;</span><br><span class=\"line\">         cleanupAfterBeanCreationFailure(beanName);</span><br><span class=\"line\">         <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Check if required type matches the type of the actual bean instance.</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (requiredType != <span class=\"literal\">null</span> &amp;&amp; !requiredType.isInstance(bean)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">         <span class=\"type\">T</span> <span class=\"variable\">convertedBean</span> <span class=\"operator\">=</span> getTypeConverter().convertIfNecessary(bean, requiredType);</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (convertedBean == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BeanNotOfRequiredTypeException</span>(name, requiredType, bean.getClass());</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> convertedBean;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">catch</span> (TypeMismatchException ex) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">            logger.trace(<span class=\"string\">&quot;Failed to convert bean &#x27;&quot;</span> + name + <span class=\"string\">&quot;&#x27; to required type &#x27;&quot;</span> +</span><br><span class=\"line\">                  ClassUtils.getQualifiedName(requiredType) + <span class=\"string\">&quot;&#x27;&quot;</span>, ex);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BeanNotOfRequiredTypeException</span>(name, requiredType, bean.getClass());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> (T) bean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>核心方法doGetBean</strong></p>\n<p>1.从缓存中获取单实例bean，如果能获取到说明已经被创建过了</p>\n<p>Object sharedInstance = getSingleton(beanName)</p>\n<p>（单例设计模式）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> Object <span class=\"title function_\">getSingleton</span><span class=\"params\">(String beanName, <span class=\"type\">boolean</span> allowEarlyReference)</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//尝试从一级缓存中拿到bean</span></span><br><span class=\"line\">\t<span class=\"type\">Object</span> <span class=\"variable\">singletonObject</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.singletonObjects.get(beanName);</span><br><span class=\"line\">       <span class=\"comment\">//如果没有拿到</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (singletonObject == <span class=\"literal\">null</span> &amp;&amp; isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class=\"line\">           <span class=\"comment\">//再尝试从二级缓存中找</span></span><br><span class=\"line\">\t\tsingletonObject = <span class=\"built_in\">this</span>.earlySingletonObjects.get(beanName);</span><br><span class=\"line\">           <span class=\"comment\">//如果二级缓存中也没有找到，并且允许提前创建bean</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (singletonObject == <span class=\"literal\">null</span> &amp;&amp; allowEarlyReference) &#123;</span><br><span class=\"line\">               <span class=\"comment\">//锁住一级缓存(单例模式)</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>.singletonObjects) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//再尝试从一级缓存中找</span></span><br><span class=\"line\">\t\t\t\tsingletonObject = <span class=\"built_in\">this</span>.singletonObjects.get(beanName);</span><br><span class=\"line\">                   <span class=\"comment\">//如果一级缓存中没有找到</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (singletonObject == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                       <span class=\"comment\">//从二级缓存中找</span></span><br><span class=\"line\">\t\t\t\t\tsingletonObject = <span class=\"built_in\">this</span>.earlySingletonObjects.get(beanName);</span><br><span class=\"line\">                       <span class=\"comment\">//如果二级缓存中没有找到</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (singletonObject == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                           <span class=\"comment\">//从三级中找到对应的beanFactory，准备执行创建的bean的流程</span></span><br><span class=\"line\">\t\t\t\t\t\tObjectFactory&lt;?&gt; singletonFactory = <span class=\"built_in\">this</span>.singletonFactories.get(beanName);</span><br><span class=\"line\">                           <span class=\"comment\">//如果找到了beanFactory</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (singletonFactory != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                               <span class=\"comment\">//使用beanFactory创建bean</span></span><br><span class=\"line\">\t\t\t\t\t\t\tsingletonObject = singletonFactory.getObject();</span><br><span class=\"line\">                               <span class=\"comment\">//将这个bean放入二级缓存</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"built_in\">this</span>.earlySingletonObjects.put(beanName, singletonObject);</span><br><span class=\"line\">                               <span class=\"comment\">//从三级缓存中移除beanFactory</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"built_in\">this</span>.singletonFactories.remove(beanName);</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> singletonObject;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>singletonObjects：一级缓存：单例池</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final Map&lt;String, Object&gt; singletonObjects = new ConcurrentHashMap&lt;&gt;(256);</span><br></pre></td></tr></table></figure>\n\n<p>其实就是一个线程安全的map的</p>\n<p>earlySingletonObjects：二级缓存，用于保存半成品的bean</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final Map&lt;String, Object&gt; earlySingletonObjects = new ConcurrentHashMap&lt;&gt;(16);</span><br></pre></td></tr></table></figure>\n\n<p>同样是一个线程安全的map</p>\n<p>singletonFactories：三级缓存，用于保存bean工厂</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private final Map&lt;String, ObjectFactory&lt;?&gt;&gt; singletonFactories = new HashMap&lt;&gt;(16);</span><br></pre></td></tr></table></figure>\n\n<p>同样是一个线程安全的map，但是保存的是 ObjectFactory&lt;?&gt;</p>\n<p><strong>核心方法createBean</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> Object <span class=\"title function_\">createBean</span><span class=\"params\">(String beanName, RootBeanDefinition mbd, <span class=\"meta\">@Nullable</span> Object[] args)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throws</span> BeanCreationException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\tlogger.trace(<span class=\"string\">&quot;Creating instance of bean &#x27;&quot;</span> + beanName + <span class=\"string\">&quot;&#x27;&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">RootBeanDefinition</span> <span class=\"variable\">mbdToUse</span> <span class=\"operator\">=</span> mbd;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Make sure bean class is actually resolved at this point, and</span></span><br><span class=\"line\">\t<span class=\"comment\">// clone the bean definition in case of a dynamically resolved Class</span></span><br><span class=\"line\">\t<span class=\"comment\">// which cannot be stored in the shared merged bean definition.</span></span><br><span class=\"line\">\tClass&lt;?&gt; resolvedClass = resolveBeanClass(mbd, beanName);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (resolvedClass != <span class=\"literal\">null</span> &amp;&amp; !mbd.hasBeanClass() &amp;&amp; mbd.getBeanClassName() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\tmbdToUse = <span class=\"keyword\">new</span> <span class=\"title class_\">RootBeanDefinition</span>(mbd);</span><br><span class=\"line\">\t\tmbdToUse.setBeanClass(resolvedClass);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Prepare method overrides.</span></span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tmbdToUse.prepareMethodOverrides();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BeanDefinitionStoreException</span>(mbdToUse.getResourceDescription(),</span><br><span class=\"line\">\t\t\t\tbeanName, <span class=\"string\">&quot;Validation of method overrides failed&quot;</span>, ex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.</span></span><br><span class=\"line\">           <span class=\"comment\">//给这个bean一个返回代理对象的机会</span></span><br><span class=\"line\">\t\t<span class=\"type\">Object</span> <span class=\"variable\">bean</span> <span class=\"operator\">=</span> resolveBeforeInstantiation(beanName, mbdToUse);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (bean != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BeanCreationException</span>(mbdToUse.getResourceDescription(), beanName,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;BeanPostProcessor before instantiation of bean failed&quot;</span>, ex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           <span class=\"comment\">//如果没有返回代理对象，则创建bean</span></span><br><span class=\"line\">\t\t<span class=\"type\">Object</span> <span class=\"variable\">beanInstance</span> <span class=\"operator\">=</span> doCreateBean(beanName, mbdToUse, args);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.trace(<span class=\"string\">&quot;Finished creating instance of bean &#x27;&quot;</span> + beanName + <span class=\"string\">&quot;&#x27;&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> beanInstance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (BeanCreationException | ImplicitlyAppearedSingletonException ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// A previously detected exception with proper bean creation context already,</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// or illegal singleton state to be communicated up to DefaultSingletonBeanRegistry.</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BeanCreationException</span>(</span><br><span class=\"line\">\t\t\t\tmbdToUse.getResourceDescription(), beanName, <span class=\"string\">&quot;Unexpected exception during bean creation&quot;</span>, ex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>创建bean：doCreateBean</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> Object <span class=\"title function_\">doCreateBean</span><span class=\"params\">(String beanName, RootBeanDefinition mbd, <span class=\"meta\">@Nullable</span> Object[] args)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throws</span> BeanCreationException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Instantiate the bean.</span></span><br><span class=\"line\">\t<span class=\"type\">BeanWrapper</span> <span class=\"variable\">instanceWrapper</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (mbd.isSingleton()) &#123;</span><br><span class=\"line\">\t\tinstanceWrapper = <span class=\"built_in\">this</span>.factoryBeanInstanceCache.remove(beanName);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (instanceWrapper == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">           <span class=\"comment\">//创建bean实例</span></span><br><span class=\"line\">\t\tinstanceWrapper = createBeanInstance(beanName, mbd, args);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">Object</span> <span class=\"variable\">bean</span> <span class=\"operator\">=</span> instanceWrapper.getWrappedInstance();</span><br><span class=\"line\">\tClass&lt;?&gt; beanType = instanceWrapper.getWrappedClass();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (beanType != NullBean.class) &#123;</span><br><span class=\"line\">\t\tmbd.resolvedTargetType = beanType;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Allow post-processors to modify the merged bean definition.</span></span><br><span class=\"line\">       <span class=\"comment\">//加上锁，防止多次后置处理，确保只处理一次</span></span><br><span class=\"line\">\t<span class=\"keyword\">synchronized</span> (mbd.postProcessingLock) &#123;</span><br><span class=\"line\">           <span class=\"comment\">//如果没有被后置处理</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!mbd.postProcessed) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                   <span class=\"comment\">//执行一些后置处理器</span></span><br><span class=\"line\">\t\t\t\tapplyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BeanCreationException</span>(mbd.getResourceDescription(), beanName,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"string\">&quot;Post-processing of merged bean definition failed&quot;</span>, ex);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">               <span class=\"comment\">//标志位已经被后置处理</span></span><br><span class=\"line\">\t\t\tmbd.postProcessed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Eagerly cache singletons to be able to resolve circular references</span></span><br><span class=\"line\">\t<span class=\"comment\">// even when triggered by lifecycle interfaces like BeanFactoryAware.</span></span><br><span class=\"line\">       <span class=\"comment\">//第二级缓存能处理循环依赖，及时有了生命周期的处理方法</span></span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"variable\">earlySingletonExposure</span> <span class=\"operator\">=</span> (mbd.isSingleton() &amp;&amp; <span class=\"built_in\">this</span>.allowCircularReferences &amp;&amp;</span><br><span class=\"line\">\t\t\tisSingletonCurrentlyInCreation(beanName));</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (earlySingletonExposure) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.trace(<span class=\"string\">&quot;Eagerly caching bean &#x27;&quot;</span> + beanName +</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">&quot;&#x27; to allow for resolving potential circular references&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\taddSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, mbd, bean));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Initialize the bean instance.</span></span><br><span class=\"line\">\t<span class=\"type\">Object</span> <span class=\"variable\">exposedObject</span> <span class=\"operator\">=</span> bean;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           <span class=\"comment\">//为bean赋值</span></span><br><span class=\"line\">\t\tpopulateBean(beanName, mbd, instanceWrapper);</span><br><span class=\"line\">\t\texposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (ex <span class=\"keyword\">instanceof</span> BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException) ex).getBeanName())) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> (BeanCreationException) ex;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BeanCreationException</span>(</span><br><span class=\"line\">\t\t\t\t\tmbd.getResourceDescription(), beanName, <span class=\"string\">&quot;Initialization of bean failed&quot;</span>, ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (earlySingletonExposure) &#123;</span><br><span class=\"line\">           <span class=\"comment\">//获取早期保留的bean的引用</span></span><br><span class=\"line\">\t\t<span class=\"type\">Object</span> <span class=\"variable\">earlySingletonReference</span> <span class=\"operator\">=</span> getSingleton(beanName, <span class=\"literal\">false</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (earlySingletonReference != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (exposedObject == bean) &#123;</span><br><span class=\"line\">\t\t\t\texposedObject = earlySingletonReference;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!<span class=\"built_in\">this</span>.allowRawInjectionDespiteWrapping &amp;&amp; hasDependentBean(beanName)) &#123;</span><br><span class=\"line\">\t\t\t\tString[] dependentBeans = getDependentBeans(beanName);</span><br><span class=\"line\">\t\t\t\tSet&lt;String&gt; actualDependentBeans = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedHashSet</span>&lt;&gt;(dependentBeans.length);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (String dependentBean : dependentBeans) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tactualDependentBeans.add(dependentBean);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!actualDependentBeans.isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BeanCurrentlyInCreationException</span>(beanName,</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"string\">&quot;Bean with name &#x27;&quot;</span> + beanName + <span class=\"string\">&quot;&#x27; has been injected into other beans [&quot;</span> +</span><br><span class=\"line\">\t\t\t\t\t\t\tStringUtils.collectionToCommaDelimitedString(actualDependentBeans) +</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"string\">&quot;] in its raw version as part of a circular reference, but has eventually been &quot;</span> +</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"string\">&quot;wrapped. This means that said other beans do not use the final version of the &quot;</span> +</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"string\">&quot;bean. This is often the result of over-eager type matching - consider using &quot;</span> +</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"string\">&quot;&#x27;getBeanNamesForType&#x27; with the &#x27;allowEagerInit&#x27; flag turned off, for example.&quot;</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Register bean as disposable.</span></span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           <span class=\"comment\">//注册bean的销毁</span></span><br><span class=\"line\">\t\tregisterDisposableBeanIfNecessary(beanName, bean, mbd);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BeanCreationException</span>(</span><br><span class=\"line\">\t\t\t\tmbd.getResourceDescription(), beanName, <span class=\"string\">&quot;Invalid destruction signature&quot;</span>, ex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//返回创建好的bean</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> exposedObject;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建对象实例 createBeanInstance</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> BeanWrapper <span class=\"title function_\">createBeanInstance</span><span class=\"params\">(String beanName, RootBeanDefinition mbd, <span class=\"meta\">@Nullable</span> Object[] args)</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Make sure bean class is actually resolved at this point.</span></span><br><span class=\"line\">       <span class=\"comment\">//获取当前的bean是什么类型</span></span><br><span class=\"line\">\tClass&lt;?&gt; beanClass = resolveBeanClass(mbd, beanName);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (beanClass != <span class=\"literal\">null</span> &amp;&amp; !Modifier.isPublic(beanClass.getModifiers()) &amp;&amp; !mbd.isNonPublicAccessAllowed()) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BeanCreationException</span>(mbd.getResourceDescription(), beanName,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;Bean class isn&#x27;t public, and non-public access not allowed: &quot;</span> + beanClass.getName());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tSupplier&lt;?&gt; instanceSupplier = mbd.getInstanceSupplier();</span><br><span class=\"line\">       <span class=\"comment\">//如果是实例bean(@Component)</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (instanceSupplier != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> obtainFromSupplier(instanceSupplier, beanName);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//如果是用@bean注解创建</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (mbd.getFactoryMethodName() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">           <span class=\"comment\">//利用对象的构造器创建bean实例</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> instantiateUsingFactoryMethod(beanName, mbd, args);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Shortcut when re-creating the same bean...</span></span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"variable\">resolved</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"variable\">autowireNecessary</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (args == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (mbd.constructorArgumentLock) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (mbd.resolvedConstructorOrFactoryMethod != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tresolved = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\tautowireNecessary = mbd.constructorArgumentsResolved;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (resolved) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (autowireNecessary) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> autowireConstructor(beanName, mbd, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> instantiateBean(beanName, mbd);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Candidate constructors for autowiring?</span></span><br><span class=\"line\">\tConstructor&lt;?&gt;[] ctors = determineConstructorsFromBeanPostProcessors(beanClass, beanName);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ctors != <span class=\"literal\">null</span> || mbd.getResolvedAutowireMode() == AUTOWIRE_CONSTRUCTOR ||</span><br><span class=\"line\">\t\t\tmbd.hasConstructorArgumentValues() || !ObjectUtils.isEmpty(args)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> autowireConstructor(beanName, mbd, ctors, args);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Preferred constructors for default construction?</span></span><br><span class=\"line\">\tctors = mbd.getPreferredConstructors();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ctors != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> autowireConstructor(beanName, mbd, ctors, <span class=\"literal\">null</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// No special handling: simply use no-arg constructor.</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> instantiateBean(beanName, mbd);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>属性赋值populateBean</p>\n<p><img src=\"/pictures/059bb96aa2f5fd724bcaea38a591f7c6.png\" alt=\"image-20220513101910052\"></p>\n<h3 id=\"12-完成beanFactory的创建工作\"><a href=\"#12-完成beanFactory的创建工作\" class=\"headerlink\" title=\"12.完成beanFactory的创建工作\"></a>12.完成beanFactory的创建工作</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">finishRefresh</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Clear context-level resource caches (such as ASM metadata from scanning).</span></span><br><span class=\"line\">\tclearResourceCaches();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Initialize lifecycle processor for this context.</span></span><br><span class=\"line\">       <span class=\"comment\">//初始化</span></span><br><span class=\"line\">\tinitLifecycleProcessor();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Propagate refresh to lifecycle processor first.</span></span><br><span class=\"line\">\tgetLifecycleProcessor().onRefresh();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Publish the final event.</span></span><br><span class=\"line\">\tpublishEvent(<span class=\"keyword\">new</span> <span class=\"title class_\">ContextRefreshedEvent</span>(<span class=\"built_in\">this</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Participate in LiveBeansView MBean, if active.</span></span><br><span class=\"line\">\tLiveBeansView.registerApplicationContext(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-初始化LifecycleProcessor（需要我们来实现）\"><a href=\"#1-初始化LifecycleProcessor（需要我们来实现）\" class=\"headerlink\" title=\"1.初始化LifecycleProcessor（需要我们来实现）\"></a>1.初始化LifecycleProcessor（需要我们来实现）</h4><h4 id=\"2-执行getLifecycleProcessor-onRefresh\"><a href=\"#2-执行getLifecycleProcessor-onRefresh\" class=\"headerlink\" title=\"2.执行getLifecycleProcessor().onRefresh();\"></a>2.执行getLifecycleProcessor().onRefresh();</h4><h4 id=\"3-发布容器创建完成事件\"><a href=\"#3-发布容器创建完成事件\" class=\"headerlink\" title=\"3.发布容器创建完成事件\"></a>3.发布容器创建完成事件</h4><p>publishEvent(new ContextRefreshedEvent(this))</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}